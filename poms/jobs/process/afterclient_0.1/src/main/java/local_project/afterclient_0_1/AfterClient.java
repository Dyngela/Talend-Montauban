// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.afterclient_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: AfterClient Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class AfterClient implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "AfterClient";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AfterClient.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AfterClient.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "192.168.1.116" + ":" + "5432" + "/" + "syg";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:2rN0CQGlejvwEgff/Lhjrta21agARbzArt0FtC8EAYbz97K1Ug==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_1 begin ] start
				 */

				ok_Hash.put("tDBRollback_1", false);
				start_Hash.put("tDBRollback_1", System.currentTimeMillis());

				currentComponent = "tDBRollback_1";

				int tos_count_tDBRollback_1 = 0;

				/**
				 * [tDBRollback_1 begin ] stop
				 */

				/**
				 * [tDBRollback_1 main ] start
				 */

				currentComponent = "tDBRollback_1";

				java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {

					try {

						conn_tDBRollback_1.rollback();

					} finally {

						conn_tDBRollback_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBRollback_1++;

				/**
				 * [tDBRollback_1 main ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_end ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_1 end ] start
				 */

				currentComponent = "tDBRollback_1";

				ok_Hash.put("tDBRollback_1", true);
				end_Hash.put("tDBRollback_1", System.currentTimeMillis());

				/**
				 * [tDBRollback_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_1 finally ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idrib;

		public int getIdrib() {
			return this.idrib;
		}

		public String cle_rib;

		public String getCle_rib() {
			return this.cle_rib;
		}

		public String code_agence;

		public String getCode_agence() {
			return this.code_agence;
		}

		public String code_bic;

		public String getCode_bic() {
			return this.code_bic;
		}

		public String code_banque;

		public String getCode_banque() {
			return this.code_banque;
		}

		public String iban1;

		public String getIban1() {
			return this.iban1;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		public String iban8;

		public String getIban8() {
			return this.iban8;
		}

		public String iban9;

		public String getIban9() {
			return this.iban9;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String nom_banque;

		public String getNom_banque() {
			return this.nom_banque;
		}

		public String numero_compte;

		public String getNumero_compte() {
			return this.numero_compte;
		}

		public String ville_banque;

		public String getVille_banque() {
			return this.ville_banque;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idrib;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3Struct other = (copyOfcopyOfmain_3Struct) obj;

			if (this.idrib != other.idrib)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3Struct other) {

			other.idrib = this.idrib;
			other.cle_rib = this.cle_rib;
			other.code_agence = this.code_agence;
			other.code_bic = this.code_bic;
			other.code_banque = this.code_banque;
			other.iban1 = this.iban1;
			other.iban2 = this.iban2;
			other.iban3 = this.iban3;
			other.iban4 = this.iban4;
			other.iban5 = this.iban5;
			other.iban6 = this.iban6;
			other.iban7 = this.iban7;
			other.iban8 = this.iban8;
			other.iban9 = this.iban9;
			other.principal = this.principal;
			other.nom_banque = this.nom_banque;
			other.numero_compte = this.numero_compte;
			other.ville_banque = this.ville_banque;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3Struct other) {

			other.idrib = this.idrib;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idrib = dis.readInt();

					this.cle_rib = readString(dis);

					this.code_agence = readString(dis);

					this.code_bic = readString(dis);

					this.code_banque = readString(dis);

					this.iban1 = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

					this.iban8 = readString(dis);

					this.iban9 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.nom_banque = readString(dis);

					this.numero_compte = readString(dis);

					this.ville_banque = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idrib);

				// String

				writeString(this.cle_rib, dos);

				// String

				writeString(this.code_agence, dos);

				// String

				writeString(this.code_bic, dos);

				// String

				writeString(this.code_banque, dos);

				// String

				writeString(this.iban1, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

				// String

				writeString(this.iban8, dos);

				// String

				writeString(this.iban9, dos);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.nom_banque, dos);

				// String

				writeString(this.numero_compte, dos);

				// String

				writeString(this.ville_banque, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrib=" + String.valueOf(idrib));
			sb.append(",cle_rib=" + cle_rib);
			sb.append(",code_agence=" + code_agence);
			sb.append(",code_bic=" + code_bic);
			sb.append(",code_banque=" + code_banque);
			sb.append(",iban1=" + iban1);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append(",iban8=" + iban8);
			sb.append(",iban9=" + iban9);
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",nom_banque=" + nom_banque);
			sb.append(",numero_compte=" + numero_compte);
			sb.append(",ville_banque=" + ville_banque);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrib, other.idrib);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				copyOfcopyOfmain_3Struct copyOfcopyOfmain_3 = new copyOfcopyOfmain_3Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("rib");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("rib");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_1 + "\"");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"idrib\",\"cle_rib\",\"code_agence\",\"code_bic\",\"code_banque\",\"iban1\",\"iban2\",\"iban3\",\"iban4\",\"iban5\",\"iban6\",\"iban7\",\"iban8\",\"iban9\",\"principal\",\"nom_banque\",\"numero_compte\",\"ville_banque\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3Struct copyOfcopyOfmain_3_tmp = new copyOfcopyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_1 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 0;

						row1.CREF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 1;

						row1.CNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 2;

						row1.CRUE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 3;

						row1.CAUX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 4;

						row1.CCPTL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 5;

						row1.CVIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 6;

						row1.FILL01 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 7;

						row1.CQUAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 8;

						row1.CCOM1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 9;

						row1.CCREP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 10;

						row1.CREMFI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 11;

						row1.CECHE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 12;

						row1.CECHJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 13;

						row1.CPAI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 14;

						row1.CCHAN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 15;

						row1.CECHJ2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 16;

						row1.CMOD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 17;

						row1.CBQ1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 18;

						row1.CBQ2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 19;

						row1.CBQ3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 20;

						row1.CBQ4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 21;

						row1.CBQ5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 22;

						row1.CBQ6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 23;

						row1.CFACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 24;

						row1.CBL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 25;

						row1.CESC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 26;

						row1.VARAD1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 27;

						row1.VARAD2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 28;

						row1.VARAD3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 29;

						row1.VARAD4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 30;

						row1.VARAD5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 31;

						row1.VARAD6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 32;

						row1.VARA1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 33;

						row1.VARA2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 34;

						row1.VARA3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 35;

						row1.VARA4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 36;

						row1.VARA5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 37;

						row1.VARB1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 38;

						row1.VARB2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 39;

						row1.VARB3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 40;

						row1.VARB4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 41;

						row1.VARB5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 42;

						row1.VARN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 43;

						row1.VARN2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 44;

						row1.VARN3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 45;

						row1.VARN4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 46;

						row1.VARN5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 47;

						row1.CDATCRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 48;

						row1.CTEL1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 49;

						row1.CTEL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 50;

						row1.CTEX1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 51;

						row1.CTEX2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 52;

						row1.CDELMOY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 53;

						row1.CAFFAIRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 54;

						row1.CCPTFACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 55;

						row1.CINTERNET = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 56;

						row1.CIBAN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 57;

						row1.CBIC_old = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 58;

						row1.CFIDEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 59;

						row1.CRFA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 60;

						row1.CCOMREG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 61;

						row1.CAPE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 62;

						row1.CIBAN72 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 63;

						row1.CIBAN8 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 64;

						row1.CIBAN9 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 65;

						row1.CBIC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 66;

						row1.CTRANSP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 67;

						row1.CFACTMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 68;

						row1.CBLMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 69;

						row1.CFACTWEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 70;

						row1.CBLWEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 71;

						row1.CPUBLIPOSTAGE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 72;

						row1.CFACT_EDI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 73;

						row1.CFACT_CHORUS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 74;

						row1.CFACTORING = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 75;

						row1.CCHORUS_SERVICE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 76;

						row1.CFIL14 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 77;

						row1.CTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 78;

						row1.FIL02 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 79;

						row1.CREJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 80;

						row1.CSECT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 81;

						row1.CTOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 82;

						row1.CCAN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 83;

						row1.CCAN2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 84;

						row1.CCAN3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 85;

						row1.CDATF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 86;

						row1.CCAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 87;

						row1.CRESP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 88;

						row1.CAPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 89;

						row1.CPREMC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 90;

						row1.CDERNC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 91;

						row1.CPROCC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 92;

						row1.CTYPEC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 93;

						row1.CSIRET = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 94;

						row1.CORIGIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 95;

						row1.CMOTCOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 96;

						row1.CCOMPTA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 97;

						row1.CAFFMEMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 98;

						row1.CFIL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 99;

						row1.CPNAFF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 100;

						row1.CDEVTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 101;

						row1.CMINCOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 102;

						row1.CRELEVE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 103;

						row1.CRELIQ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 104;

						row1.CMAJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 105;

						row1.CECH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 106;

						row1.CETIQ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 107;

						row1.CCOEF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 108;

						row1.CARROND = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 109;

						row1.CENCOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 110;

						row1.CNIVREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 111;

						row1.CBLOCAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 112;

						row1.CDATREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 113;

						row1.CRESCO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 114;

						row1.CRESFI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 115;

						row1.CSFAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 116;

						row1.CDATENC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 117;

						row1.CDATSFA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 118;

						row1.CCONTR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 119;

						row1.CDEREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 120;

						row1.CPAYS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 121;

						row1.CBLTOT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 122;

						row1.CBLLIG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 123;

						row1.CENCDIS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 124;

						row1.CNCEE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 125;

						row1.CNSFAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 126;

						row1.CPSRDAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 127;

						row1.CEPNASR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 128;

						row1.CCODTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 129;

						row1.CDEVISE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 130;

						row1.iban2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 131;

						row1.iban3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 132;

						row1.iban4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 133;

						row1.iban5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 134;

						row1.iban6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 135;

						row1.iban7 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_1, row1);

						valueToConn_1(fid_tFileInputDelimited_1, row1);

					}

				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3 = null;

// # Output table : 'copyOfcopyOfmain_3'
								copyOfcopyOfmain_3_tmp.idrib = Numeric.sequence("rib1", 1, 1);
								copyOfcopyOfmain_3_tmp.cle_rib = row1.CBQ6;
								copyOfcopyOfmain_3_tmp.code_agence = row1.CBQ4;
								copyOfcopyOfmain_3_tmp.code_bic = row1.CBIC;
								copyOfcopyOfmain_3_tmp.code_banque = row1.CBQ3;
								copyOfcopyOfmain_3_tmp.iban1 = row1.CIBAN1;
								copyOfcopyOfmain_3_tmp.iban2 = row1.iban2;
								copyOfcopyOfmain_3_tmp.iban3 = row1.iban3;
								copyOfcopyOfmain_3_tmp.iban4 = row1.iban4;
								copyOfcopyOfmain_3_tmp.iban5 = row1.iban5;
								copyOfcopyOfmain_3_tmp.iban6 = row1.iban6;
								copyOfcopyOfmain_3_tmp.iban7 = row1.iban7;
								copyOfcopyOfmain_3_tmp.iban8 = row1.CIBAN8;
								copyOfcopyOfmain_3_tmp.iban9 = row1.CIBAN9;
								copyOfcopyOfmain_3_tmp.principal = true;
								copyOfcopyOfmain_3_tmp.nom_banque = row1.CBQ1;
								copyOfcopyOfmain_3_tmp.numero_compte = row1.CBQ5;
								copyOfcopyOfmain_3_tmp.ville_banque = row1.CBQ2;
								copyOfcopyOfmain_3_tmp.idcli = row1.CREF;
								copyOfcopyOfmain_3_tmp.idfournisseur = null;
								copyOfcopyOfmain_3 = copyOfcopyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3"
							if (copyOfcopyOfmain_3 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3");
								}

								whetherReject_tDBOutput_1 = false;
								pstmt_tDBOutput_1.setInt(1, copyOfcopyOfmain_3.idrib);

								if (copyOfcopyOfmain_3.cle_rib == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, copyOfcopyOfmain_3.cle_rib);
								}

								if (copyOfcopyOfmain_3.code_agence == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3, copyOfcopyOfmain_3.code_agence);
								}

								if (copyOfcopyOfmain_3.code_bic == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, copyOfcopyOfmain_3.code_bic);
								}

								if (copyOfcopyOfmain_3.code_banque == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5, copyOfcopyOfmain_3.code_banque);
								}

								if (copyOfcopyOfmain_3.iban1 == null) {
									pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(6, copyOfcopyOfmain_3.iban1);
								}

								if (copyOfcopyOfmain_3.iban2 == null) {
									pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7, copyOfcopyOfmain_3.iban2);
								}

								if (copyOfcopyOfmain_3.iban3 == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, copyOfcopyOfmain_3.iban3);
								}

								if (copyOfcopyOfmain_3.iban4 == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, copyOfcopyOfmain_3.iban4);
								}

								if (copyOfcopyOfmain_3.iban5 == null) {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(10, copyOfcopyOfmain_3.iban5);
								}

								if (copyOfcopyOfmain_3.iban6 == null) {
									pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(11, copyOfcopyOfmain_3.iban6);
								}

								if (copyOfcopyOfmain_3.iban7 == null) {
									pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(12, copyOfcopyOfmain_3.iban7);
								}

								if (copyOfcopyOfmain_3.iban8 == null) {
									pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(13, copyOfcopyOfmain_3.iban8);
								}

								if (copyOfcopyOfmain_3.iban9 == null) {
									pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(14, copyOfcopyOfmain_3.iban9);
								}

								if (copyOfcopyOfmain_3.principal == null) {
									pstmt_tDBOutput_1.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_1.setBoolean(15, copyOfcopyOfmain_3.principal);
								}

								if (copyOfcopyOfmain_3.nom_banque == null) {
									pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(16, copyOfcopyOfmain_3.nom_banque);
								}

								if (copyOfcopyOfmain_3.numero_compte == null) {
									pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(17, copyOfcopyOfmain_3.numero_compte);
								}

								if (copyOfcopyOfmain_3.ville_banque == null) {
									pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(18, copyOfcopyOfmain_3.ville_banque);
								}

								if (copyOfcopyOfmain_3.idcli == null) {
									pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(19, copyOfcopyOfmain_3.idcli);
								}

								if (copyOfcopyOfmain_3.idfournisseur == null) {
									pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(20, copyOfcopyOfmain_3.idfournisseur);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_3_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_3_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idrib;

		public int getIdrib() {
			return this.idrib;
		}

		public String cle_rib;

		public String getCle_rib() {
			return this.cle_rib;
		}

		public String code_agence;

		public String getCode_agence() {
			return this.code_agence;
		}

		public String code_bic;

		public String getCode_bic() {
			return this.code_bic;
		}

		public String code_banque;

		public String getCode_banque() {
			return this.code_banque;
		}

		public String iban1;

		public String getIban1() {
			return this.iban1;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		public String iban8;

		public String getIban8() {
			return this.iban8;
		}

		public String iban9;

		public String getIban9() {
			return this.iban9;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String nom_banque;

		public String getNom_banque() {
			return this.nom_banque;
		}

		public String numero_compte;

		public String getNumero_compte() {
			return this.numero_compte;
		}

		public String ville_banque;

		public String getVille_banque() {
			return this.ville_banque;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idrib;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_3_0Struct other = (copyOfcopyOfcopyOfmain_3_0Struct) obj;

			if (this.idrib != other.idrib)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;
			other.cle_rib = this.cle_rib;
			other.code_agence = this.code_agence;
			other.code_bic = this.code_bic;
			other.code_banque = this.code_banque;
			other.iban1 = this.iban1;
			other.iban2 = this.iban2;
			other.iban3 = this.iban3;
			other.iban4 = this.iban4;
			other.iban5 = this.iban5;
			other.iban6 = this.iban6;
			other.iban7 = this.iban7;
			other.iban8 = this.iban8;
			other.iban9 = this.iban9;
			other.principal = this.principal;
			other.nom_banque = this.nom_banque;
			other.numero_compte = this.numero_compte;
			other.ville_banque = this.ville_banque;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idrib = dis.readInt();

					this.cle_rib = readString(dis);

					this.code_agence = readString(dis);

					this.code_bic = readString(dis);

					this.code_banque = readString(dis);

					this.iban1 = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

					this.iban8 = readString(dis);

					this.iban9 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.nom_banque = readString(dis);

					this.numero_compte = readString(dis);

					this.ville_banque = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idrib);

				// String

				writeString(this.cle_rib, dos);

				// String

				writeString(this.code_agence, dos);

				// String

				writeString(this.code_bic, dos);

				// String

				writeString(this.code_banque, dos);

				// String

				writeString(this.iban1, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

				// String

				writeString(this.iban8, dos);

				// String

				writeString(this.iban9, dos);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.nom_banque, dos);

				// String

				writeString(this.numero_compte, dos);

				// String

				writeString(this.ville_banque, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrib=" + String.valueOf(idrib));
			sb.append(",cle_rib=" + cle_rib);
			sb.append(",code_agence=" + code_agence);
			sb.append(",code_bic=" + code_bic);
			sb.append(",code_banque=" + code_banque);
			sb.append(",iban1=" + iban1);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append(",iban8=" + iban8);
			sb.append(",iban9=" + iban9);
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",nom_banque=" + nom_banque);
			sb.append(",numero_compte=" + numero_compte);
			sb.append(",ville_banque=" + ville_banque);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrib, other.idrib);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String RIB_CLI;

		public String getRIB_CLI() {
			return this.RIB_CLI;
		}

		public String RIB_RANG;

		public String getRIB_RANG() {
			return this.RIB_RANG;
		}

		public String RIB_NOM_BANQUE;

		public String getRIB_NOM_BANQUE() {
			return this.RIB_NOM_BANQUE;
		}

		public String RIB_VILLE_BANQUE;

		public String getRIB_VILLE_BANQUE() {
			return this.RIB_VILLE_BANQUE;
		}

		public String RIB_IBAN2;

		public String getRIB_IBAN2() {
			return this.RIB_IBAN2;
		}

		public String RIB_IBAN3;

		public String getRIB_IBAN3() {
			return this.RIB_IBAN3;
		}

		public String RIB_IBAN4;

		public String getRIB_IBAN4() {
			return this.RIB_IBAN4;
		}

		public String RIB_IBAN5;

		public String getRIB_IBAN5() {
			return this.RIB_IBAN5;
		}

		public String RIB_IBAN6;

		public String getRIB_IBAN6() {
			return this.RIB_IBAN6;
		}

		public String RIB_IBAN71;

		public String getRIB_IBAN71() {
			return this.RIB_IBAN71;
		}

		public String RIN_IBAN1;

		public String getRIN_IBAN1() {
			return this.RIN_IBAN1;
		}

		public String RIN_IBANBIC;

		public String getRIN_IBANBIC() {
			return this.RIN_IBANBIC;
		}

		public String RIN_IBAN72;

		public String getRIN_IBAN72() {
			return this.RIN_IBAN72;
		}

		public String RIN_IBAN8;

		public String getRIN_IBAN8() {
			return this.RIN_IBAN8;
		}

		public String RIB_IBAN9;

		public String getRIB_IBAN9() {
			return this.RIB_IBAN9;
		}

		public String RIB_IBAN7;

		public String getRIB_IBAN7() {
			return this.RIB_IBAN7;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.RIB_CLI = readString(dis);

					this.RIB_RANG = readString(dis);

					this.RIB_NOM_BANQUE = readString(dis);

					this.RIB_VILLE_BANQUE = readString(dis);

					this.RIB_IBAN2 = readString(dis);

					this.RIB_IBAN3 = readString(dis);

					this.RIB_IBAN4 = readString(dis);

					this.RIB_IBAN5 = readString(dis);

					this.RIB_IBAN6 = readString(dis);

					this.RIB_IBAN71 = readString(dis);

					this.RIN_IBAN1 = readString(dis);

					this.RIN_IBANBIC = readString(dis);

					this.RIN_IBAN72 = readString(dis);

					this.RIN_IBAN8 = readString(dis);

					this.RIB_IBAN9 = readString(dis);

					this.RIB_IBAN7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RIB_CLI, dos);

				// String

				writeString(this.RIB_RANG, dos);

				// String

				writeString(this.RIB_NOM_BANQUE, dos);

				// String

				writeString(this.RIB_VILLE_BANQUE, dos);

				// String

				writeString(this.RIB_IBAN2, dos);

				// String

				writeString(this.RIB_IBAN3, dos);

				// String

				writeString(this.RIB_IBAN4, dos);

				// String

				writeString(this.RIB_IBAN5, dos);

				// String

				writeString(this.RIB_IBAN6, dos);

				// String

				writeString(this.RIB_IBAN71, dos);

				// String

				writeString(this.RIN_IBAN1, dos);

				// String

				writeString(this.RIN_IBANBIC, dos);

				// String

				writeString(this.RIN_IBAN72, dos);

				// String

				writeString(this.RIN_IBAN8, dos);

				// String

				writeString(this.RIB_IBAN9, dos);

				// String

				writeString(this.RIB_IBAN7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RIB_CLI=" + RIB_CLI);
			sb.append(",RIB_RANG=" + RIB_RANG);
			sb.append(",RIB_NOM_BANQUE=" + RIB_NOM_BANQUE);
			sb.append(",RIB_VILLE_BANQUE=" + RIB_VILLE_BANQUE);
			sb.append(",RIB_IBAN2=" + RIB_IBAN2);
			sb.append(",RIB_IBAN3=" + RIB_IBAN3);
			sb.append(",RIB_IBAN4=" + RIB_IBAN4);
			sb.append(",RIB_IBAN5=" + RIB_IBAN5);
			sb.append(",RIB_IBAN6=" + RIB_IBAN6);
			sb.append(",RIB_IBAN71=" + RIB_IBAN71);
			sb.append(",RIN_IBAN1=" + RIN_IBAN1);
			sb.append(",RIN_IBANBIC=" + RIN_IBANBIC);
			sb.append(",RIN_IBAN72=" + RIN_IBAN72);
			sb.append(",RIN_IBAN8=" + RIN_IBAN8);
			sb.append(",RIB_IBAN9=" + RIB_IBAN9);
			sb.append(",RIB_IBAN7=" + RIB_IBAN7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				copyOfcopyOfcopyOfmain_3_0Struct copyOfcopyOfcopyOfmain_3_0 = new copyOfcopyOfcopyOfmain_3_0Struct();

				/**
				 * [tDBOutput_14 begin ] start
				 */

				ok_Hash.put("tDBOutput_14", false);
				start_Hash.put("tDBOutput_14", System.currentTimeMillis());

				currentComponent = "tDBOutput_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_3_0");
				}

				int tos_count_tDBOutput_14 = 0;

				String dbschema_tDBOutput_14 = null;
				dbschema_tDBOutput_14 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_14 = null;
				if (dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
					tableName_tDBOutput_14 = ("rib");
				} else {
					tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\"" + ("rib");
				}

				int nb_line_tDBOutput_14 = 0;
				int nb_line_update_tDBOutput_14 = 0;
				int nb_line_inserted_tDBOutput_14 = 0;
				int nb_line_deleted_tDBOutput_14 = 0;
				int nb_line_rejected_tDBOutput_14 = 0;

				int deletedCount_tDBOutput_14 = 0;
				int updatedCount_tDBOutput_14 = 0;
				int insertedCount_tDBOutput_14 = 0;
				int rejectedCount_tDBOutput_14 = 0;

				boolean whetherReject_tDBOutput_14 = false;

				java.sql.Connection conn_tDBOutput_14 = null;
				String dbUser_tDBOutput_14 = null;

				conn_tDBOutput_14 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_14 = 10000;
				int batchSizeCounter_tDBOutput_14 = 0;

				int count_tDBOutput_14 = 0;
				String insert_tDBOutput_14 = "INSERT INTO \"" + tableName_tDBOutput_14
						+ "\" (\"idrib\",\"cle_rib\",\"code_agence\",\"code_bic\",\"code_banque\",\"iban1\",\"iban2\",\"iban3\",\"iban4\",\"iban5\",\"iban6\",\"iban7\",\"iban8\",\"iban9\",\"principal\",\"nom_banque\",\"numero_compte\",\"ville_banque\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
				resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);

				/**
				 * [tDBOutput_14 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_14 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_3_0Struct copyOfcopyOfcopyOfmain_3_0_tmp = new copyOfcopyOfcopyOfmain_3_0Struct();
// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_16 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_16 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16 = null;
				int limit_tFileInputDelimited_16 = -1;
				try {

					Object filename_tFileInputDelimited_16 = "C:/DEV/Data/Base Montauban/fichier_rib.csv";
					if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_16 = 0, random_value_tFileInputDelimited_16 = -1;
						if (footer_value_tFileInputDelimited_16 > 0 || random_value_tFileInputDelimited_16 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_16 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/fichier_rib.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_16, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_16 != null && fid_tFileInputDelimited_16.nextRecord()) {
						rowstate_tFileInputDelimited_16.reset();

						row16 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row16 = new row16Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_16 = 0;

							columnIndexWithD_tFileInputDelimited_16 = 0;

							row16.RIB_CLI = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 1;

							row16.RIB_RANG = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 2;

							row16.RIB_NOM_BANQUE = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 3;

							row16.RIB_VILLE_BANQUE = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 4;

							row16.RIB_IBAN2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 5;

							row16.RIB_IBAN3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 6;

							row16.RIB_IBAN4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 7;

							row16.RIB_IBAN5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 8;

							row16.RIB_IBAN6 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 9;

							row16.RIB_IBAN71 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 10;

							row16.RIN_IBAN1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 11;

							row16.RIN_IBANBIC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 12;

							row16.RIN_IBAN72 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 13;

							row16.RIN_IBAN8 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 14;

							row16.RIB_IBAN9 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 15;

							row16.RIB_IBAN7 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

							if (rowstate_tFileInputDelimited_16.getException() != null) {
								throw rowstate_tFileInputDelimited_16.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */

						/**
						 * [tFileInputDelimited_16 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_begin ] stop
						 */
// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tMap_14 main ] start
							 */

							currentComponent = "tMap_14";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_14 = false;
							boolean mainRowRejected_tMap_14 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_3_0 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_3_0'
								copyOfcopyOfcopyOfmain_3_0_tmp.idrib = Numeric.sequence("rib1", 1, 1);
								copyOfcopyOfcopyOfmain_3_0_tmp.cle_rib = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_agence = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_bic = row16.RIN_IBANBIC;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_banque = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban1 = row16.RIN_IBAN1;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban2 = row16.RIB_IBAN2;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban3 = row16.RIB_IBAN3;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban4 = row16.RIB_IBAN4;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban5 = row16.RIB_IBAN5;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban6 = row16.RIB_IBAN6;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban7 = row16.RIB_IBAN7;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban8 = row16.RIN_IBAN8;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban9 = row16.RIB_IBAN9;
								copyOfcopyOfcopyOfmain_3_0_tmp.principal = false;
								copyOfcopyOfcopyOfmain_3_0_tmp.nom_banque = row16.RIB_NOM_BANQUE;
								copyOfcopyOfcopyOfmain_3_0_tmp.numero_compte = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.ville_banque = row16.RIB_VILLE_BANQUE;
								copyOfcopyOfcopyOfmain_3_0_tmp.idcli = row16.RIB_CLI;
								copyOfcopyOfcopyOfmain_3_0_tmp.idfournisseur = null;
								copyOfcopyOfcopyOfmain_3_0 = copyOfcopyOfcopyOfmain_3_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_14 = false;

							tos_count_tMap_14++;

							/**
							 * [tMap_14 main ] stop
							 */

							/**
							 * [tMap_14 process_data_begin ] start
							 */

							currentComponent = "tMap_14";

							/**
							 * [tMap_14 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_3_0"
							if (copyOfcopyOfcopyOfmain_3_0 != null) {

								/**
								 * [tDBOutput_14 main ] start
								 */

								currentComponent = "tDBOutput_14";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_3_0");
								}

								whetherReject_tDBOutput_14 = false;
								pstmt_tDBOutput_14.setInt(1, copyOfcopyOfcopyOfmain_3_0.idrib);

								if (copyOfcopyOfcopyOfmain_3_0.cle_rib == null) {
									pstmt_tDBOutput_14.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(2, copyOfcopyOfcopyOfmain_3_0.cle_rib);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_agence == null) {
									pstmt_tDBOutput_14.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(3, copyOfcopyOfcopyOfmain_3_0.code_agence);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_bic == null) {
									pstmt_tDBOutput_14.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(4, copyOfcopyOfcopyOfmain_3_0.code_bic);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_banque == null) {
									pstmt_tDBOutput_14.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(5, copyOfcopyOfcopyOfmain_3_0.code_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban1 == null) {
									pstmt_tDBOutput_14.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(6, copyOfcopyOfcopyOfmain_3_0.iban1);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban2 == null) {
									pstmt_tDBOutput_14.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(7, copyOfcopyOfcopyOfmain_3_0.iban2);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban3 == null) {
									pstmt_tDBOutput_14.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(8, copyOfcopyOfcopyOfmain_3_0.iban3);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban4 == null) {
									pstmt_tDBOutput_14.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(9, copyOfcopyOfcopyOfmain_3_0.iban4);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban5 == null) {
									pstmt_tDBOutput_14.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(10, copyOfcopyOfcopyOfmain_3_0.iban5);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban6 == null) {
									pstmt_tDBOutput_14.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(11, copyOfcopyOfcopyOfmain_3_0.iban6);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban7 == null) {
									pstmt_tDBOutput_14.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(12, copyOfcopyOfcopyOfmain_3_0.iban7);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban8 == null) {
									pstmt_tDBOutput_14.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(13, copyOfcopyOfcopyOfmain_3_0.iban8);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban9 == null) {
									pstmt_tDBOutput_14.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(14, copyOfcopyOfcopyOfmain_3_0.iban9);
								}

								if (copyOfcopyOfcopyOfmain_3_0.principal == null) {
									pstmt_tDBOutput_14.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_14.setBoolean(15, copyOfcopyOfcopyOfmain_3_0.principal);
								}

								if (copyOfcopyOfcopyOfmain_3_0.nom_banque == null) {
									pstmt_tDBOutput_14.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(16, copyOfcopyOfcopyOfmain_3_0.nom_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.numero_compte == null) {
									pstmt_tDBOutput_14.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(17, copyOfcopyOfcopyOfmain_3_0.numero_compte);
								}

								if (copyOfcopyOfcopyOfmain_3_0.ville_banque == null) {
									pstmt_tDBOutput_14.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(18, copyOfcopyOfcopyOfmain_3_0.ville_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.idcli == null) {
									pstmt_tDBOutput_14.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(19, copyOfcopyOfcopyOfmain_3_0.idcli);
								}

								if (copyOfcopyOfcopyOfmain_3_0.idfournisseur == null) {
									pstmt_tDBOutput_14.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(20, copyOfcopyOfcopyOfmain_3_0.idfournisseur);
								}

								pstmt_tDBOutput_14.addBatch();
								nb_line_tDBOutput_14++;

								batchSizeCounter_tDBOutput_14++;

								if (!whetherReject_tDBOutput_14) {
								}
								if ((batchSize_tDBOutput_14 > 0)
										&& (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
									try {
										int countSum_tDBOutput_14 = 0;

										for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14.executeBatch()) {
											countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

										batchSizeCounter_tDBOutput_14 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
										java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),
												sqle_tDBOutput_14 = null;
										String errormessage_tDBOutput_14;
										if (ne_tDBOutput_14 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_14 = new java.sql.SQLException(
													e_tDBOutput_14.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_14.getMessage(),
													ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(),
													ne_tDBOutput_14);
											errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
										} else {
											errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
										}

										int countSum_tDBOutput_14 = 0;
										for (int countEach_tDBOutput_14 : e_tDBOutput_14.getUpdateCounts()) {
											countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

										System.err.println(errormessage_tDBOutput_14);

									}
								}

								tos_count_tDBOutput_14++;

								/**
								 * [tDBOutput_14 main ] stop
								 */

								/**
								 * [tDBOutput_14 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_14";

								/**
								 * [tDBOutput_14 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_14 process_data_end ] start
								 */

								currentComponent = "tDBOutput_14";

								/**
								 * [tDBOutput_14 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_3_0"

							/**
							 * [tMap_14 process_data_end ] start
							 */

							currentComponent = "tMap_14";

							/**
							 * [tMap_14 process_data_end ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_16 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/fichier_rib.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_16 != null) {
							fid_tFileInputDelimited_16.close();
						}
					}
					if (fid_tFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE", fid_tFileInputDelimited_16.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tDBOutput_14 end ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					int countSum_tDBOutput_14 = 0;
					if (pstmt_tDBOutput_14 != null && batchSizeCounter_tDBOutput_14 > 0) {

						for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}

					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

				} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
					java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(), sqle_tDBOutput_14 = null;
					String errormessage_tDBOutput_14;
					if (ne_tDBOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_14 = new java.sql.SQLException(
								e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(),
								ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
						errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
					} else {
						errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
					}

					int countSum_tDBOutput_14 = 0;
					for (int countEach_tDBOutput_14 : e_tDBOutput_14.getUpdateCounts()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

					System.err.println(errormessage_tDBOutput_14);

				}

				if (pstmt_tDBOutput_14 != null) {

					pstmt_tDBOutput_14.close();
					resourceMap.remove("pstmt_tDBOutput_14");
				}
				resourceMap.put("statementClosed_tDBOutput_14", true);

				nb_line_deleted_tDBOutput_14 = nb_line_deleted_tDBOutput_14 + deletedCount_tDBOutput_14;
				nb_line_update_tDBOutput_14 = nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
				nb_line_inserted_tDBOutput_14 = nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
				nb_line_rejected_tDBOutput_14 = nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;

				globalMap.put("tDBOutput_14_NB_LINE", nb_line_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_UPDATED", nb_line_update_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_DELETED", nb_line_deleted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_3_0");
				}

				ok_Hash.put("tDBOutput_14", true);
				end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tDBOutput_14 finally ] start
				 */

				currentComponent = "tDBOutput_14";

				if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
					if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_14")) != null) {
						pstmtToClose_tDBOutput_14.close();
					}
				}

				/**
				 * [tDBOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmainStruct implements routines.system.IPersistableRow<copyOfmainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddocument;

		public int getIddocument() {
			return this.iddocument;
		}

		public String emplacement_disque;

		public String getEmplacement_disque() {
			return this.emplacement_disque;
		}

		public String nom_fichier;

		public String getNom_fichier() {
			return this.nom_fichier;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String type_origine;

		public String getType_origine() {
			return this.type_origine;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddocument;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmainStruct other = (copyOfmainStruct) obj;

			if (this.iddocument != other.iddocument)
				return false;

			return true;
		}

		public void copyDataTo(copyOfmainStruct other) {

			other.iddocument = this.iddocument;
			other.emplacement_disque = this.emplacement_disque;
			other.nom_fichier = this.nom_fichier;
			other.titre = this.titre;
			other.type_origine = this.type_origine;
			other.idarticle = this.idarticle;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfmainStruct other) {

			other.iddocument = this.iddocument;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.iddocument = dis.readInt();

					this.emplacement_disque = readString(dis);

					this.nom_fichier = readString(dis);

					this.titre = readString(dis);

					this.type_origine = readString(dis);

					this.idarticle = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddocument);

				// String

				writeString(this.emplacement_disque, dos);

				// String

				writeString(this.nom_fichier, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.type_origine, dos);

				// String

				writeString(this.idarticle, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddocument=" + String.valueOf(iddocument));
			sb.append(",emplacement_disque=" + emplacement_disque);
			sb.append(",nom_fichier=" + nom_fichier);
			sb.append(",titre=" + titre);
			sb.append(",type_origine=" + type_origine);
			sb.append(",idarticle=" + idarticle);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddocument, other.iddocument);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String DOCCAT;

		public String getDOCCAT() {
			return this.DOCCAT;
		}

		public String DOCLIEN;

		public String getDOCLIEN() {
			return this.DOCLIEN;
		}

		public String DOCCOMPT;

		public String getDOCCOMPT() {
			return this.DOCCOMPT;
		}

		public String DOCLIB;

		public String getDOCLIB() {
			return this.DOCLIB;
		}

		public String DOCEMPL;

		public String getDOCEMPL() {
			return this.DOCEMPL;
		}

		public String DOCNOM;

		public String getDOCNOM() {
			return this.DOCNOM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.DOCCAT = readString(dis);

					this.DOCLIEN = readString(dis);

					this.DOCCOMPT = readString(dis);

					this.DOCLIB = readString(dis);

					this.DOCEMPL = readString(dis);

					this.DOCNOM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DOCCAT, dos);

				// String

				writeString(this.DOCLIEN, dos);

				// String

				writeString(this.DOCCOMPT, dos);

				// String

				writeString(this.DOCLIB, dos);

				// String

				writeString(this.DOCEMPL, dos);

				// String

				writeString(this.DOCNOM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DOCCAT=" + DOCCAT);
			sb.append(",DOCLIEN=" + DOCLIEN);
			sb.append(",DOCCOMPT=" + DOCCOMPT);
			sb.append(",DOCLIB=" + DOCLIB);
			sb.append(",DOCEMPL=" + DOCEMPL);
			sb.append(",DOCNOM=" + DOCNOM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfmainStruct copyOfmain = new copyOfmainStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("document");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("document");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtClear_tDBOutput_2.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_2 + "\"");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"iddocument\",\"emplacement_disque\",\"nom_fichier\",\"titre\",\"type_origine\",\"idarticle\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmainStruct copyOfmain_tmp = new copyOfmainStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/DEV/Data/Base Montauban/docs.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/docs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row4.DOCCAT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row4.DOCLIEN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row4.DOCCOMPT = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row4.DOCLIB = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row4.DOCEMPL = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row4.DOCNOM = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfmain = null;

// # Output table : 'copyOfmain'
								copyOfmain_tmp.iddocument = Numeric.sequence("s1", 1, 1);
								copyOfmain_tmp.emplacement_disque = row4.DOCEMPL;
								copyOfmain_tmp.nom_fichier = row4.DOCNOM;
								copyOfmain_tmp.titre = row4.DOCLIB;
								copyOfmain_tmp.type_origine = row4.DOCCAT.equals("1") ? new String("Client")
										: row4.DOCCAT.equals("3") ? new String("Fourni")
												: row4.DOCCAT.equals("2") ? new String("Article") : null;
								copyOfmain_tmp.idarticle = null;
								copyOfmain_tmp.idcli = row4.DOCLIEN;
								copyOfmain_tmp.idfournisseur = null;
								copyOfmain = copyOfmain_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "copyOfmain"
							if (copyOfmain != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain");
								}

								whetherReject_tDBOutput_2 = false;
								pstmt_tDBOutput_2.setInt(1, copyOfmain.iddocument);

								if (copyOfmain.emplacement_disque == null) {
									pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(2, copyOfmain.emplacement_disque);
								}

								if (copyOfmain.nom_fichier == null) {
									pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(3, copyOfmain.nom_fichier);
								}

								if (copyOfmain.titre == null) {
									pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(4, copyOfmain.titre);
								}

								if (copyOfmain.type_origine == null) {
									pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(5, copyOfmain.type_origine);
								}

								if (copyOfmain.idarticle == null) {
									pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(6, copyOfmain.idarticle);
								}

								if (copyOfmain.idcli == null) {
									pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(7, copyOfmain.idcli);
								}

								if (copyOfmain.idfournisseur == null) {
									pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(8, copyOfmain.idfournisseur);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;

								if ((batchSize_tDBOutput_2 > 0)
										&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
									try {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										batchSizeCounter_tDBOutput_2 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										System.err.println(errormessage_tDBOutput_2);

									}
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "copyOfmain"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/docs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tFileInputDelimited_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhisto;

		public int getIdhisto() {
			return this.idhisto;
		}

		public Double chiffre_affaire_annee;

		public Double getChiffre_affaire_annee() {
			return this.chiffre_affaire_annee;
		}

		public Double chiffre_affaire_august;

		public Double getChiffre_affaire_august() {
			return this.chiffre_affaire_august;
		}

		public Double chiffre_affaire_april;

		public Double getChiffre_affaire_april() {
			return this.chiffre_affaire_april;
		}

		public Double chiffre_affaire_december;

		public Double getChiffre_affaire_december() {
			return this.chiffre_affaire_december;
		}

		public Double chiffre_affaire_february;

		public Double getChiffre_affaire_february() {
			return this.chiffre_affaire_february;
		}

		public Double chiffre_affaire_january;

		public Double getChiffre_affaire_january() {
			return this.chiffre_affaire_january;
		}

		public Double chiffre_affaire_july;

		public Double getChiffre_affaire_july() {
			return this.chiffre_affaire_july;
		}

		public Double chiffre_affaire_june;

		public Double getChiffre_affaire_june() {
			return this.chiffre_affaire_june;
		}

		public Double chiffre_affaire_may;

		public Double getChiffre_affaire_may() {
			return this.chiffre_affaire_may;
		}

		public Double chiffre_affaire_march;

		public Double getChiffre_affaire_march() {
			return this.chiffre_affaire_march;
		}

		public Double chiffre_affaire_november;

		public Double getChiffre_affaire_november() {
			return this.chiffre_affaire_november;
		}

		public Double chiffre_affaire_october;

		public Double getChiffre_affaire_october() {
			return this.chiffre_affaire_october;
		}

		public Double chiffre_affaire_september;

		public Double getChiffre_affaire_september() {
			return this.chiffre_affaire_september;
		}

		public Double prix_achat_annee;

		public Double getPrix_achat_annee() {
			return this.prix_achat_annee;
		}

		public Double prix_achat_august;

		public Double getPrix_achat_august() {
			return this.prix_achat_august;
		}

		public Double prix_achat_april;

		public Double getPrix_achat_april() {
			return this.prix_achat_april;
		}

		public Double prix_achat_december;

		public Double getPrix_achat_december() {
			return this.prix_achat_december;
		}

		public Double prix_achat_february;

		public Double getPrix_achat_february() {
			return this.prix_achat_february;
		}

		public Double prix_achat_january;

		public Double getPrix_achat_january() {
			return this.prix_achat_january;
		}

		public Double prix_achat_july;

		public Double getPrix_achat_july() {
			return this.prix_achat_july;
		}

		public Double prix_achat_june;

		public Double getPrix_achat_june() {
			return this.prix_achat_june;
		}

		public Double prix_achat_may;

		public Double getPrix_achat_may() {
			return this.prix_achat_may;
		}

		public Double prix_achat_march;

		public Double getPrix_achat_march() {
			return this.prix_achat_march;
		}

		public Double prix_achat_november;

		public Double getPrix_achat_november() {
			return this.prix_achat_november;
		}

		public Double prix_achat_october;

		public Double getPrix_achat_october() {
			return this.prix_achat_october;
		}

		public Double prix_achat_september;

		public Double getPrix_achat_september() {
			return this.prix_achat_september;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idhisto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_0_0Struct other = (copyOfcopyOfmain_0_0Struct) obj;

			if (this.idhisto != other.idhisto)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;
			other.chiffre_affaire_annee = this.chiffre_affaire_annee;
			other.chiffre_affaire_august = this.chiffre_affaire_august;
			other.chiffre_affaire_april = this.chiffre_affaire_april;
			other.chiffre_affaire_december = this.chiffre_affaire_december;
			other.chiffre_affaire_february = this.chiffre_affaire_february;
			other.chiffre_affaire_january = this.chiffre_affaire_january;
			other.chiffre_affaire_july = this.chiffre_affaire_july;
			other.chiffre_affaire_june = this.chiffre_affaire_june;
			other.chiffre_affaire_may = this.chiffre_affaire_may;
			other.chiffre_affaire_march = this.chiffre_affaire_march;
			other.chiffre_affaire_november = this.chiffre_affaire_november;
			other.chiffre_affaire_october = this.chiffre_affaire_october;
			other.chiffre_affaire_september = this.chiffre_affaire_september;
			other.prix_achat_annee = this.prix_achat_annee;
			other.prix_achat_august = this.prix_achat_august;
			other.prix_achat_april = this.prix_achat_april;
			other.prix_achat_december = this.prix_achat_december;
			other.prix_achat_february = this.prix_achat_february;
			other.prix_achat_january = this.prix_achat_january;
			other.prix_achat_july = this.prix_achat_july;
			other.prix_achat_june = this.prix_achat_june;
			other.prix_achat_may = this.prix_achat_may;
			other.prix_achat_march = this.prix_achat_march;
			other.prix_achat_november = this.prix_achat_november;
			other.prix_achat_october = this.prix_achat_october;
			other.prix_achat_september = this.prix_achat_september;
			other.annee = this.annee;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idhisto = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_annee = null;
					} else {
						this.chiffre_affaire_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_august = null;
					} else {
						this.chiffre_affaire_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_april = null;
					} else {
						this.chiffre_affaire_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_december = null;
					} else {
						this.chiffre_affaire_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_february = null;
					} else {
						this.chiffre_affaire_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_january = null;
					} else {
						this.chiffre_affaire_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_july = null;
					} else {
						this.chiffre_affaire_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_june = null;
					} else {
						this.chiffre_affaire_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_may = null;
					} else {
						this.chiffre_affaire_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_march = null;
					} else {
						this.chiffre_affaire_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_november = null;
					} else {
						this.chiffre_affaire_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_october = null;
					} else {
						this.chiffre_affaire_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_september = null;
					} else {
						this.chiffre_affaire_september = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_annee = null;
					} else {
						this.prix_achat_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_august = null;
					} else {
						this.prix_achat_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_april = null;
					} else {
						this.prix_achat_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_december = null;
					} else {
						this.prix_achat_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_february = null;
					} else {
						this.prix_achat_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_january = null;
					} else {
						this.prix_achat_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_july = null;
					} else {
						this.prix_achat_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_june = null;
					} else {
						this.prix_achat_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_may = null;
					} else {
						this.prix_achat_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_march = null;
					} else {
						this.prix_achat_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_november = null;
					} else {
						this.prix_achat_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_october = null;
					} else {
						this.prix_achat_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_september = null;
					} else {
						this.prix_achat_september = dis.readDouble();
					}

					this.annee = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhisto);

				// Double

				if (this.chiffre_affaire_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_annee);
				}

				// Double

				if (this.chiffre_affaire_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_august);
				}

				// Double

				if (this.chiffre_affaire_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_april);
				}

				// Double

				if (this.chiffre_affaire_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_december);
				}

				// Double

				if (this.chiffre_affaire_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_february);
				}

				// Double

				if (this.chiffre_affaire_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_january);
				}

				// Double

				if (this.chiffre_affaire_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_july);
				}

				// Double

				if (this.chiffre_affaire_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_june);
				}

				// Double

				if (this.chiffre_affaire_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_may);
				}

				// Double

				if (this.chiffre_affaire_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_march);
				}

				// Double

				if (this.chiffre_affaire_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_november);
				}

				// Double

				if (this.chiffre_affaire_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_october);
				}

				// Double

				if (this.chiffre_affaire_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_september);
				}

				// Double

				if (this.prix_achat_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_annee);
				}

				// Double

				if (this.prix_achat_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_august);
				}

				// Double

				if (this.prix_achat_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_april);
				}

				// Double

				if (this.prix_achat_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_december);
				}

				// Double

				if (this.prix_achat_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_february);
				}

				// Double

				if (this.prix_achat_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_january);
				}

				// Double

				if (this.prix_achat_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_july);
				}

				// Double

				if (this.prix_achat_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_june);
				}

				// Double

				if (this.prix_achat_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_may);
				}

				// Double

				if (this.prix_achat_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_march);
				}

				// Double

				if (this.prix_achat_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_november);
				}

				// Double

				if (this.prix_achat_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_october);
				}

				// Double

				if (this.prix_achat_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_september);
				}

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhisto=" + String.valueOf(idhisto));
			sb.append(",chiffre_affaire_annee=" + String.valueOf(chiffre_affaire_annee));
			sb.append(",chiffre_affaire_august=" + String.valueOf(chiffre_affaire_august));
			sb.append(",chiffre_affaire_april=" + String.valueOf(chiffre_affaire_april));
			sb.append(",chiffre_affaire_december=" + String.valueOf(chiffre_affaire_december));
			sb.append(",chiffre_affaire_february=" + String.valueOf(chiffre_affaire_february));
			sb.append(",chiffre_affaire_january=" + String.valueOf(chiffre_affaire_january));
			sb.append(",chiffre_affaire_july=" + String.valueOf(chiffre_affaire_july));
			sb.append(",chiffre_affaire_june=" + String.valueOf(chiffre_affaire_june));
			sb.append(",chiffre_affaire_may=" + String.valueOf(chiffre_affaire_may));
			sb.append(",chiffre_affaire_march=" + String.valueOf(chiffre_affaire_march));
			sb.append(",chiffre_affaire_november=" + String.valueOf(chiffre_affaire_november));
			sb.append(",chiffre_affaire_october=" + String.valueOf(chiffre_affaire_october));
			sb.append(",chiffre_affaire_september=" + String.valueOf(chiffre_affaire_september));
			sb.append(",prix_achat_annee=" + String.valueOf(prix_achat_annee));
			sb.append(",prix_achat_august=" + String.valueOf(prix_achat_august));
			sb.append(",prix_achat_april=" + String.valueOf(prix_achat_april));
			sb.append(",prix_achat_december=" + String.valueOf(prix_achat_december));
			sb.append(",prix_achat_february=" + String.valueOf(prix_achat_february));
			sb.append(",prix_achat_january=" + String.valueOf(prix_achat_january));
			sb.append(",prix_achat_july=" + String.valueOf(prix_achat_july));
			sb.append(",prix_achat_june=" + String.valueOf(prix_achat_june));
			sb.append(",prix_achat_may=" + String.valueOf(prix_achat_may));
			sb.append(",prix_achat_march=" + String.valueOf(prix_achat_march));
			sb.append(",prix_achat_november=" + String.valueOf(prix_achat_november));
			sb.append(",prix_achat_october=" + String.valueOf(prix_achat_october));
			sb.append(",prix_achat_september=" + String.valueOf(prix_achat_september));
			sb.append(",annee=" + annee);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idhisto, other.idhisto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_12Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_12Struct other = (after_tFileInputDelimited_12Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_12Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_12Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);

				row12Struct row12 = new row12Struct();
				copyOfcopyOfmain_0_0Struct copyOfcopyOfmain_0_0 = new copyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_12 begin ] start
				 */

				ok_Hash.put("tDBOutput_12", false);
				start_Hash.put("tDBOutput_12", System.currentTimeMillis());

				currentComponent = "tDBOutput_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_12 = 0;

				String dbschema_tDBOutput_12 = null;
				dbschema_tDBOutput_12 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_12 = null;
				if (dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
					tableName_tDBOutput_12 = ("historiqueca");
				} else {
					tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\"" + ("historiqueca");
				}

				int nb_line_tDBOutput_12 = 0;
				int nb_line_update_tDBOutput_12 = 0;
				int nb_line_inserted_tDBOutput_12 = 0;
				int nb_line_deleted_tDBOutput_12 = 0;
				int nb_line_rejected_tDBOutput_12 = 0;

				int deletedCount_tDBOutput_12 = 0;
				int updatedCount_tDBOutput_12 = 0;
				int insertedCount_tDBOutput_12 = 0;
				int rejectedCount_tDBOutput_12 = 0;

				boolean whetherReject_tDBOutput_12 = false;

				java.sql.Connection conn_tDBOutput_12 = null;
				String dbUser_tDBOutput_12 = null;

				conn_tDBOutput_12 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_12 = 10000;
				int batchSizeCounter_tDBOutput_12 = 0;

				int count_tDBOutput_12 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
					stmtClear_tDBOutput_12.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_12 + "\"");
				}
				String insert_tDBOutput_12 = "INSERT INTO \"" + tableName_tDBOutput_12
						+ "\" (\"idhisto\",\"chiffre_affaire_annee\",\"chiffre_affaire_august\",\"chiffre_affaire_april\",\"chiffre_affaire_december\",\"chiffre_affaire_february\",\"chiffre_affaire_january\",\"chiffre_affaire_july\",\"chiffre_affaire_june\",\"chiffre_affaire_may\",\"chiffre_affaire_march\",\"chiffre_affaire_november\",\"chiffre_affaire_october\",\"chiffre_affaire_september\",\"prix_achat_annee\",\"prix_achat_august\",\"prix_achat_april\",\"prix_achat_december\",\"prix_achat_february\",\"prix_achat_january\",\"prix_achat_july\",\"prix_achat_june\",\"prix_achat_may\",\"prix_achat_march\",\"prix_achat_november\",\"prix_achat_october\",\"prix_achat_september\",\"annee\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
				resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);

				/**
				 * [tDBOutput_12 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_0_0Struct copyOfcopyOfmain_0_0_tmp = new copyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_12 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12,
							row12Struct row12) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_12 = 0;

						columnIndexWithD_tFileInputDelimited_12 = 0;

						row12.CREF = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 1;

						row12.CNOM = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 2;

						row12.CRUE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 3;

						row12.CAUX = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 4;

						row12.CCPTL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 5;

						row12.CVIL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 6;

						row12.FILL01 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 7;

						row12.CQUAL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 8;

						row12.CCOM1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 9;

						row12.CCREP = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 10;

						row12.CREMFI = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 11;

						row12.CECHE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 12;

						row12.CECHJ = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 13;

						row12.CPAI = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 14;

						row12.CCHAN = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 15;

						row12.CECHJ2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 16;

						row12.CMOD = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 17;

						row12.CBQ1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 18;

						row12.CBQ2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 19;

						row12.CBQ3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 20;

						row12.CBQ4 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 21;

						row12.CBQ5 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 22;

						row12.CBQ6 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 23;

						row12.CFACT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 24;

						row12.CBL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 25;

						row12.CESC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 26;

						row12.VARAD1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 27;

						row12.VARAD2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 28;

						row12.VARAD3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 29;

						row12.VARAD4 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 30;

						row12.VARAD5 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 31;

						row12.VARAD6 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 32;

						row12.VARA1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 33;

						row12.VARA2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 34;

						row12.VARA3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 35;

						row12.VARA4 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 36;

						row12.VARA5 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 37;

						row12.VARB1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 38;

						row12.VARB2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 39;

						row12.VARB3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 40;

						row12.VARB4 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 41;

						row12.VARB5 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 42;

						row12.VARN1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 43;

						row12.VARN2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 44;

						row12.VARN3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 45;

						row12.VARN4 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 46;

						row12.VARN5 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 47;

						row12.CDATCRE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 48;

						row12.CTEL1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 49;

						row12.CTEL2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 50;

						row12.CTEX1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 51;

						row12.CTEX2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 52;

						row12.CDELMOY = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 53;

						row12.CAFFAIRE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 54;

						row12.CCPTFACT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 55;

						row12.CINTERNET = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 56;

						row12.CIBAN1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 57;

						row12.CBIC_old = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 58;

						row12.CFIDEL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 59;

						row12.CRFA = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 60;

						row12.CCOMREG = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 61;

						row12.CAPE2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 62;

						row12.CIBAN72 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 63;

						row12.CIBAN8 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 64;

						row12.CIBAN9 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 65;

						row12.CBIC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 66;

						row12.CTRANSP = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 67;

						row12.CFACTMAIL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 68;

						row12.CBLMAIL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 69;

						row12.CFACTWEB = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 70;

						row12.CBLWEB = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 71;

						row12.CPUBLIPOSTAGE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 72;

						row12.CFACT_EDI = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 73;

						row12.CFACT_CHORUS = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 74;

						row12.CFACTORING = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 75;

						row12.CCHORUS_SERVICE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 76;

						row12.CFIL14 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 77;

						row12.CTAR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 78;

						row12.FIL02 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 79;

						row12.CREJ = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 80;

						row12.CSECT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 81;

						row12.CTOUR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 82;

						row12.CCAN1 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 83;

						row12.CCAN2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 84;

						row12.CCAN3 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 85;

						row12.CDATF = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 86;

						row12.CCAT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 87;

						row12.CRESP = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 88;

						row12.CAPE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 89;

						row12.CPREMC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 90;

						row12.CDERNC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 91;

						row12.CPROCC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 92;

						row12.CTYPEC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 93;

						row12.CSIRET = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 94;

						row12.CORIGIN = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 95;

						row12.CMOTCOUR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 96;

						row12.CCOMPTA = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 97;

						row12.CAFFMEMO = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 98;

						row12.CFIL2 = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 99;

						row12.CPNAFF = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12,
							row12Struct row12) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_12 = 0;

						columnIndexWithD_tFileInputDelimited_12 = 100;

						row12.CDEVTAR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 101;

						row12.CMINCOM = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 102;

						row12.CRELEVE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 103;

						row12.CRELIQ = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 104;

						row12.CMAJ = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 105;

						row12.CECH = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 106;

						row12.CETIQ = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 107;

						row12.CCOEF = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 108;

						row12.CARROND = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 109;

						row12.CENCOUR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 110;

						row12.CNIVREL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 111;

						row12.CBLOCAG = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 112;

						row12.CDATREL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 113;

						row12.CRESCO = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 114;

						row12.CRESFI = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 115;

						row12.CSFAC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 116;

						row12.CDATENC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 117;

						row12.CDATSFA = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 118;

						row12.CCONTR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 119;

						row12.CDEREL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 120;

						row12.CPAYS = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 121;

						row12.CBLTOT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 122;

						row12.CBLLIG = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 123;

						row12.CENCDIS = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 124;

						row12.CNCEE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 125;

						row12.CNSFAC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 126;

						row12.CPSRDAT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 127;

						row12.CEPNASR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 128;

						row12.CCODTAR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

						columnIndexWithD_tFileInputDelimited_12 = 129;

						row12.CDEVISE = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12,
							row12Struct row12) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_12, row12);

						valueToConn_1(fid_tFileInputDelimited_12, row12);

					}

				}
				RowHelper_tFileInputDelimited_12 rowHelper_tFileInputDelimited_12 = new RowHelper_tFileInputDelimited_12();

				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				int limit_tFileInputDelimited_12 = -1;
				try {

					Object filename_tFileInputDelimited_12 = "C:/DEV/Data/Base Montauban/clients.csv";
					if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
						if (footer_value_tFileInputDelimited_12 > 0 || random_value_tFileInputDelimited_12 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_12, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_12 != null && fid_tFileInputDelimited_12.nextRecord()) {
						rowstate_tFileInputDelimited_12.reset();

						row12 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row12 = new row12Struct();
						try {

							rowHelper_tFileInputDelimited_12.valueToConn(fid_tFileInputDelimited_12, row12);

							if (rowstate_tFileInputDelimited_12.getException() != null) {
								throw rowstate_tFileInputDelimited_12.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */

						/**
						 * [tFileInputDelimited_12 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_begin ] stop
						 */
// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tMap_12 main ] start
							 */

							currentComponent = "tMap_12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_12 = false;
							boolean mainRowRejected_tMap_12 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_12 = false;

								row2HashKey.HISKLE = row12.CREF;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.HISKLE = '" +
								// row2HashKey.HISKLE + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfmain_0_0'
								copyOfcopyOfmain_0_0_tmp.idhisto = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_annee = row12.CCAN1 == null ? new Double(0)
										: row12.CCAN1.isBlank() ? new Double(0) : Double.parseDouble(row12.CCAN1);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_august = row2.HISCAN08 == null ? new Double(0)
										: row2.HISCAN08.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN08);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_april = row2.HISCAN04 == null ? new Double(0)
										: row2.HISCAN04.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN04);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_december = row2.HISCAN12 == null
										? new Double(0)
										: row2.HISCAN12.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN12);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_february = row2.HISCAN02 == null
										? new Double(0)
										: row2.HISCAN02.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN02);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_january = row2.HISCAN01 == null ? new Double(0)
										: row2.HISCAN01.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN01);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_july = row2.HISCAN07 == null ? new Double(0)
										: row2.HISCAN07.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN07);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_june = row2.HISCAN06 == null ? new Double(0)
										: row2.HISCAN06.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN06);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_may = row2.HISCAN05 == null ? new Double(0)
										: row2.HISCAN05.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN05);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_march = row2.HISCAN03 == null ? new Double(0)
										: row2.HISCAN03.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN03);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_november = row2.HISCAN11 == null
										? new Double(0)
										: row2.HISCAN11.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN11);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_october = row2.HISCAN10 == null ? new Double(0)
										: row2.HISCAN10.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN10);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_september = row2.HISCAN09 == null
										? new Double(0)
										: row2.HISCAN09.isBlank() ? new Double(0) : Double.parseDouble(row2.HISCAN09);
								copyOfcopyOfmain_0_0_tmp.prix_achat_annee = row2.HISPAN01 == null
										|| row2.HISPAN02 == null || row2.HISPAN03 == null || row2.HISPAN04 == null
										|| row2.HISPAN05 == null || row2.HISPAN06 == null || row2.HISPAN07 == null
										|| row2.HISPAN08 == null || row2.HISPAN09 == null || row2.HISPAN10 == null
										|| row2.HISPAN11 == null || row2.HISPAN12 == null ? null
												: Double.parseDouble(row2.HISPAN01) +

														Double.parseDouble(row2.HISPAN02) +

														Double.parseDouble(row2.HISPAN03) +

														Double.parseDouble(row2.HISPAN04) +

														Double.parseDouble(row2.HISPAN05) +

														Double.parseDouble(row2.HISPAN06) +

														Double.parseDouble(row2.HISPAN07) +

														Double.parseDouble(row2.HISPAN08) +

														Double.parseDouble(row2.HISPAN09) +

														Double.parseDouble(row2.HISPAN10) +

														Double.parseDouble(row2.HISPAN11) +

														Double.parseDouble(row2.HISPAN12);
								copyOfcopyOfmain_0_0_tmp.prix_achat_august = row2.HISPAN08 == null ? new Double(0)
										: row2.HISPAN08.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN08);
								copyOfcopyOfmain_0_0_tmp.prix_achat_april = row2.HISPAN04 == null ? new Double(0)
										: row2.HISPAN04.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN04);
								copyOfcopyOfmain_0_0_tmp.prix_achat_december = row2.HISPAN12 == null ? new Double(0)
										: row2.HISPAN12.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN12);
								copyOfcopyOfmain_0_0_tmp.prix_achat_february = row2.HISPAN02 == null ? new Double(0)
										: row2.HISPAN02.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN02);
								copyOfcopyOfmain_0_0_tmp.prix_achat_january = row2.HISPAN01 == null ? new Double(0)
										: row2.HISPAN01.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN01);
								copyOfcopyOfmain_0_0_tmp.prix_achat_july = row2.HISPAN07 == null ? new Double(0)
										: row2.HISPAN07.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN07);
								copyOfcopyOfmain_0_0_tmp.prix_achat_june = row2.HISPAN06 == null ? new Double(0)
										: row2.HISPAN06.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN06);
								copyOfcopyOfmain_0_0_tmp.prix_achat_may = row2.HISPAN05 == null ? new Double(0)
										: row2.HISPAN05.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN05);
								copyOfcopyOfmain_0_0_tmp.prix_achat_march = row2.HISPAN03 == null ? new Double(0)
										: row2.HISPAN03.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN03);
								copyOfcopyOfmain_0_0_tmp.prix_achat_november = row2.HISPAN11 == null ? new Double(0)
										: row2.HISPAN11.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN11);
								copyOfcopyOfmain_0_0_tmp.prix_achat_october = row2.HISPAN10 == null ? new Double(0)
										: row2.HISPAN10.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN10);
								copyOfcopyOfmain_0_0_tmp.prix_achat_september = row2.HISPAN09 == null ? new Double(0)
										: row2.HISPAN09.isBlank() ? new Double(0) : Double.parseDouble(row2.HISPAN09);
								copyOfcopyOfmain_0_0_tmp.annee = new String("2021");
								copyOfcopyOfmain_0_0_tmp.idcli = row12.CREF;
								copyOfcopyOfmain_0_0 = copyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_12 = false;

							tos_count_tMap_12++;

							/**
							 * [tMap_12 main ] stop
							 */

							/**
							 * [tMap_12 process_data_begin ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_0_0"
							if (copyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_12 main ] start
								 */

								currentComponent = "tDBOutput_12";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_12 = false;
								pstmt_tDBOutput_12.setInt(1, copyOfcopyOfmain_0_0.idhisto);

								if (copyOfcopyOfmain_0_0.chiffre_affaire_annee == null) {
									pstmt_tDBOutput_12.setNull(2, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(2, copyOfcopyOfmain_0_0.chiffre_affaire_annee);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_august == null) {
									pstmt_tDBOutput_12.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(3, copyOfcopyOfmain_0_0.chiffre_affaire_august);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_april == null) {
									pstmt_tDBOutput_12.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(4, copyOfcopyOfmain_0_0.chiffre_affaire_april);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_december == null) {
									pstmt_tDBOutput_12.setNull(5, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(5, copyOfcopyOfmain_0_0.chiffre_affaire_december);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_february == null) {
									pstmt_tDBOutput_12.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(6, copyOfcopyOfmain_0_0.chiffre_affaire_february);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_january == null) {
									pstmt_tDBOutput_12.setNull(7, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(7, copyOfcopyOfmain_0_0.chiffre_affaire_january);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_july == null) {
									pstmt_tDBOutput_12.setNull(8, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(8, copyOfcopyOfmain_0_0.chiffre_affaire_july);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_june == null) {
									pstmt_tDBOutput_12.setNull(9, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(9, copyOfcopyOfmain_0_0.chiffre_affaire_june);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_may == null) {
									pstmt_tDBOutput_12.setNull(10, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(10, copyOfcopyOfmain_0_0.chiffre_affaire_may);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_march == null) {
									pstmt_tDBOutput_12.setNull(11, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(11, copyOfcopyOfmain_0_0.chiffre_affaire_march);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_november == null) {
									pstmt_tDBOutput_12.setNull(12, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(12, copyOfcopyOfmain_0_0.chiffre_affaire_november);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_october == null) {
									pstmt_tDBOutput_12.setNull(13, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(13, copyOfcopyOfmain_0_0.chiffre_affaire_october);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_september == null) {
									pstmt_tDBOutput_12.setNull(14, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(14, copyOfcopyOfmain_0_0.chiffre_affaire_september);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_annee == null) {
									pstmt_tDBOutput_12.setNull(15, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(15, copyOfcopyOfmain_0_0.prix_achat_annee);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_august == null) {
									pstmt_tDBOutput_12.setNull(16, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(16, copyOfcopyOfmain_0_0.prix_achat_august);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_april == null) {
									pstmt_tDBOutput_12.setNull(17, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(17, copyOfcopyOfmain_0_0.prix_achat_april);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_december == null) {
									pstmt_tDBOutput_12.setNull(18, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(18, copyOfcopyOfmain_0_0.prix_achat_december);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_february == null) {
									pstmt_tDBOutput_12.setNull(19, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(19, copyOfcopyOfmain_0_0.prix_achat_february);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_january == null) {
									pstmt_tDBOutput_12.setNull(20, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(20, copyOfcopyOfmain_0_0.prix_achat_january);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_july == null) {
									pstmt_tDBOutput_12.setNull(21, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(21, copyOfcopyOfmain_0_0.prix_achat_july);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_june == null) {
									pstmt_tDBOutput_12.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(22, copyOfcopyOfmain_0_0.prix_achat_june);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_may == null) {
									pstmt_tDBOutput_12.setNull(23, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(23, copyOfcopyOfmain_0_0.prix_achat_may);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_march == null) {
									pstmt_tDBOutput_12.setNull(24, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(24, copyOfcopyOfmain_0_0.prix_achat_march);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_november == null) {
									pstmt_tDBOutput_12.setNull(25, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(25, copyOfcopyOfmain_0_0.prix_achat_november);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_october == null) {
									pstmt_tDBOutput_12.setNull(26, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(26, copyOfcopyOfmain_0_0.prix_achat_october);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_september == null) {
									pstmt_tDBOutput_12.setNull(27, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_12.setDouble(27, copyOfcopyOfmain_0_0.prix_achat_september);
								}

								if (copyOfcopyOfmain_0_0.annee == null) {
									pstmt_tDBOutput_12.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(28, copyOfcopyOfmain_0_0.annee);
								}

								if (copyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_12.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(29, copyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_12.addBatch();
								nb_line_tDBOutput_12++;

								batchSizeCounter_tDBOutput_12++;

								if ((batchSize_tDBOutput_12 > 0)
										&& (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
									try {
										int countSum_tDBOutput_12 = 0;

										for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
											countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

										batchSizeCounter_tDBOutput_12 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
										java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),
												sqle_tDBOutput_12 = null;
										String errormessage_tDBOutput_12;
										if (ne_tDBOutput_12 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_12 = new java.sql.SQLException(
													e_tDBOutput_12.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_12.getMessage(),
													ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(),
													ne_tDBOutput_12);
											errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
										} else {
											errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
										}

										int countSum_tDBOutput_12 = 0;
										for (int countEach_tDBOutput_12 : e_tDBOutput_12.getUpdateCounts()) {
											countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

										System.err.println(errormessage_tDBOutput_12);

									}
								}

								tos_count_tDBOutput_12++;

								/**
								 * [tDBOutput_12 main ] stop
								 */

								/**
								 * [tDBOutput_12 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_12";

								/**
								 * [tDBOutput_12 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_12 process_data_end ] start
								 */

								currentComponent = "tDBOutput_12";

								/**
								 * [tDBOutput_12 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_0_0"

							/**
							 * [tMap_12 process_data_end ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_end ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_12 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_12 != null) {
							fid_tFileInputDelimited_12.close();
						}
					}
					if (fid_tFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE", fid_tFileInputDelimited_12.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_12 end ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					int countSum_tDBOutput_12 = 0;
					if (pstmt_tDBOutput_12 != null && batchSizeCounter_tDBOutput_12 > 0) {

						for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}

					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

				} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
					java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(), sqle_tDBOutput_12 = null;
					String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(
								e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(),
								ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
					} else {
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}

					int countSum_tDBOutput_12 = 0;
					for (int countEach_tDBOutput_12 : e_tDBOutput_12.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

					System.err.println(errormessage_tDBOutput_12);

				}

				if (pstmt_tDBOutput_12 != null) {

					pstmt_tDBOutput_12.close();
					resourceMap.remove("pstmt_tDBOutput_12");
				}
				resourceMap.put("statementClosed_tDBOutput_12", true);

				nb_line_deleted_tDBOutput_12 = nb_line_deleted_tDBOutput_12 + deletedCount_tDBOutput_12;
				nb_line_update_tDBOutput_12 = nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
				nb_line_inserted_tDBOutput_12 = nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
				nb_line_rejected_tDBOutput_12 = nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;

				globalMap.put("tDBOutput_12_NB_LINE", nb_line_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_UPDATED", nb_line_update_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_DELETED", nb_line_deleted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_12", true);
				end_Hash.put("tDBOutput_12", System.currentTimeMillis());

				/**
				 * [tDBOutput_12 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
			}

			tFileInputDelimited_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_12 finally ] start
				 */

				currentComponent = "tDBOutput_12";

				if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
					if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_12")) != null) {
						pstmtToClose_tDBOutput_12.close();
					}
				}

				/**
				 * [tDBOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhisto;

		public int getIdhisto() {
			return this.idhisto;
		}

		public Double chiffre_affaire_annee;

		public Double getChiffre_affaire_annee() {
			return this.chiffre_affaire_annee;
		}

		public Double chiffre_affaire_august;

		public Double getChiffre_affaire_august() {
			return this.chiffre_affaire_august;
		}

		public Double chiffre_affaire_april;

		public Double getChiffre_affaire_april() {
			return this.chiffre_affaire_april;
		}

		public Double chiffre_affaire_december;

		public Double getChiffre_affaire_december() {
			return this.chiffre_affaire_december;
		}

		public Double chiffre_affaire_february;

		public Double getChiffre_affaire_february() {
			return this.chiffre_affaire_february;
		}

		public Double chiffre_affaire_january;

		public Double getChiffre_affaire_january() {
			return this.chiffre_affaire_january;
		}

		public Double chiffre_affaire_july;

		public Double getChiffre_affaire_july() {
			return this.chiffre_affaire_july;
		}

		public Double chiffre_affaire_june;

		public Double getChiffre_affaire_june() {
			return this.chiffre_affaire_june;
		}

		public Double chiffre_affaire_may;

		public Double getChiffre_affaire_may() {
			return this.chiffre_affaire_may;
		}

		public Double chiffre_affaire_march;

		public Double getChiffre_affaire_march() {
			return this.chiffre_affaire_march;
		}

		public Double chiffre_affaire_november;

		public Double getChiffre_affaire_november() {
			return this.chiffre_affaire_november;
		}

		public Double chiffre_affaire_october;

		public Double getChiffre_affaire_october() {
			return this.chiffre_affaire_october;
		}

		public Double chiffre_affaire_september;

		public Double getChiffre_affaire_september() {
			return this.chiffre_affaire_september;
		}

		public Double prix_achat_annee;

		public Double getPrix_achat_annee() {
			return this.prix_achat_annee;
		}

		public Double prix_achat_august;

		public Double getPrix_achat_august() {
			return this.prix_achat_august;
		}

		public Double prix_achat_april;

		public Double getPrix_achat_april() {
			return this.prix_achat_april;
		}

		public Double prix_achat_december;

		public Double getPrix_achat_december() {
			return this.prix_achat_december;
		}

		public Double prix_achat_february;

		public Double getPrix_achat_february() {
			return this.prix_achat_february;
		}

		public Double prix_achat_january;

		public Double getPrix_achat_january() {
			return this.prix_achat_january;
		}

		public Double prix_achat_july;

		public Double getPrix_achat_july() {
			return this.prix_achat_july;
		}

		public Double prix_achat_june;

		public Double getPrix_achat_june() {
			return this.prix_achat_june;
		}

		public Double prix_achat_may;

		public Double getPrix_achat_may() {
			return this.prix_achat_may;
		}

		public Double prix_achat_march;

		public Double getPrix_achat_march() {
			return this.prix_achat_march;
		}

		public Double prix_achat_november;

		public Double getPrix_achat_november() {
			return this.prix_achat_november;
		}

		public Double prix_achat_october;

		public Double getPrix_achat_october() {
			return this.prix_achat_october;
		}

		public Double prix_achat_september;

		public Double getPrix_achat_september() {
			return this.prix_achat_september;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idhisto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_0_0Struct other = (copyOfcopyOfcopyOfmain_0_0Struct) obj;

			if (this.idhisto != other.idhisto)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;
			other.chiffre_affaire_annee = this.chiffre_affaire_annee;
			other.chiffre_affaire_august = this.chiffre_affaire_august;
			other.chiffre_affaire_april = this.chiffre_affaire_april;
			other.chiffre_affaire_december = this.chiffre_affaire_december;
			other.chiffre_affaire_february = this.chiffre_affaire_february;
			other.chiffre_affaire_january = this.chiffre_affaire_january;
			other.chiffre_affaire_july = this.chiffre_affaire_july;
			other.chiffre_affaire_june = this.chiffre_affaire_june;
			other.chiffre_affaire_may = this.chiffre_affaire_may;
			other.chiffre_affaire_march = this.chiffre_affaire_march;
			other.chiffre_affaire_november = this.chiffre_affaire_november;
			other.chiffre_affaire_october = this.chiffre_affaire_october;
			other.chiffre_affaire_september = this.chiffre_affaire_september;
			other.prix_achat_annee = this.prix_achat_annee;
			other.prix_achat_august = this.prix_achat_august;
			other.prix_achat_april = this.prix_achat_april;
			other.prix_achat_december = this.prix_achat_december;
			other.prix_achat_february = this.prix_achat_february;
			other.prix_achat_january = this.prix_achat_january;
			other.prix_achat_july = this.prix_achat_july;
			other.prix_achat_june = this.prix_achat_june;
			other.prix_achat_may = this.prix_achat_may;
			other.prix_achat_march = this.prix_achat_march;
			other.prix_achat_november = this.prix_achat_november;
			other.prix_achat_october = this.prix_achat_october;
			other.prix_achat_september = this.prix_achat_september;
			other.annee = this.annee;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idhisto = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_annee = null;
					} else {
						this.chiffre_affaire_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_august = null;
					} else {
						this.chiffre_affaire_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_april = null;
					} else {
						this.chiffre_affaire_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_december = null;
					} else {
						this.chiffre_affaire_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_february = null;
					} else {
						this.chiffre_affaire_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_january = null;
					} else {
						this.chiffre_affaire_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_july = null;
					} else {
						this.chiffre_affaire_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_june = null;
					} else {
						this.chiffre_affaire_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_may = null;
					} else {
						this.chiffre_affaire_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_march = null;
					} else {
						this.chiffre_affaire_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_november = null;
					} else {
						this.chiffre_affaire_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_october = null;
					} else {
						this.chiffre_affaire_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_september = null;
					} else {
						this.chiffre_affaire_september = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_annee = null;
					} else {
						this.prix_achat_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_august = null;
					} else {
						this.prix_achat_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_april = null;
					} else {
						this.prix_achat_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_december = null;
					} else {
						this.prix_achat_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_february = null;
					} else {
						this.prix_achat_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_january = null;
					} else {
						this.prix_achat_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_july = null;
					} else {
						this.prix_achat_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_june = null;
					} else {
						this.prix_achat_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_may = null;
					} else {
						this.prix_achat_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_march = null;
					} else {
						this.prix_achat_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_november = null;
					} else {
						this.prix_achat_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_october = null;
					} else {
						this.prix_achat_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_september = null;
					} else {
						this.prix_achat_september = dis.readDouble();
					}

					this.annee = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhisto);

				// Double

				if (this.chiffre_affaire_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_annee);
				}

				// Double

				if (this.chiffre_affaire_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_august);
				}

				// Double

				if (this.chiffre_affaire_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_april);
				}

				// Double

				if (this.chiffre_affaire_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_december);
				}

				// Double

				if (this.chiffre_affaire_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_february);
				}

				// Double

				if (this.chiffre_affaire_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_january);
				}

				// Double

				if (this.chiffre_affaire_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_july);
				}

				// Double

				if (this.chiffre_affaire_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_june);
				}

				// Double

				if (this.chiffre_affaire_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_may);
				}

				// Double

				if (this.chiffre_affaire_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_march);
				}

				// Double

				if (this.chiffre_affaire_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_november);
				}

				// Double

				if (this.chiffre_affaire_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_october);
				}

				// Double

				if (this.chiffre_affaire_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_september);
				}

				// Double

				if (this.prix_achat_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_annee);
				}

				// Double

				if (this.prix_achat_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_august);
				}

				// Double

				if (this.prix_achat_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_april);
				}

				// Double

				if (this.prix_achat_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_december);
				}

				// Double

				if (this.prix_achat_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_february);
				}

				// Double

				if (this.prix_achat_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_january);
				}

				// Double

				if (this.prix_achat_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_july);
				}

				// Double

				if (this.prix_achat_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_june);
				}

				// Double

				if (this.prix_achat_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_may);
				}

				// Double

				if (this.prix_achat_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_march);
				}

				// Double

				if (this.prix_achat_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_november);
				}

				// Double

				if (this.prix_achat_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_october);
				}

				// Double

				if (this.prix_achat_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_september);
				}

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhisto=" + String.valueOf(idhisto));
			sb.append(",chiffre_affaire_annee=" + String.valueOf(chiffre_affaire_annee));
			sb.append(",chiffre_affaire_august=" + String.valueOf(chiffre_affaire_august));
			sb.append(",chiffre_affaire_april=" + String.valueOf(chiffre_affaire_april));
			sb.append(",chiffre_affaire_december=" + String.valueOf(chiffre_affaire_december));
			sb.append(",chiffre_affaire_february=" + String.valueOf(chiffre_affaire_february));
			sb.append(",chiffre_affaire_january=" + String.valueOf(chiffre_affaire_january));
			sb.append(",chiffre_affaire_july=" + String.valueOf(chiffre_affaire_july));
			sb.append(",chiffre_affaire_june=" + String.valueOf(chiffre_affaire_june));
			sb.append(",chiffre_affaire_may=" + String.valueOf(chiffre_affaire_may));
			sb.append(",chiffre_affaire_march=" + String.valueOf(chiffre_affaire_march));
			sb.append(",chiffre_affaire_november=" + String.valueOf(chiffre_affaire_november));
			sb.append(",chiffre_affaire_october=" + String.valueOf(chiffre_affaire_october));
			sb.append(",chiffre_affaire_september=" + String.valueOf(chiffre_affaire_september));
			sb.append(",prix_achat_annee=" + String.valueOf(prix_achat_annee));
			sb.append(",prix_achat_august=" + String.valueOf(prix_achat_august));
			sb.append(",prix_achat_april=" + String.valueOf(prix_achat_april));
			sb.append(",prix_achat_december=" + String.valueOf(prix_achat_december));
			sb.append(",prix_achat_february=" + String.valueOf(prix_achat_february));
			sb.append(",prix_achat_january=" + String.valueOf(prix_achat_january));
			sb.append(",prix_achat_july=" + String.valueOf(prix_achat_july));
			sb.append(",prix_achat_june=" + String.valueOf(prix_achat_june));
			sb.append(",prix_achat_may=" + String.valueOf(prix_achat_may));
			sb.append(",prix_achat_march=" + String.valueOf(prix_achat_march));
			sb.append(",prix_achat_november=" + String.valueOf(prix_achat_november));
			sb.append(",prix_achat_october=" + String.valueOf(prix_achat_october));
			sb.append(",prix_achat_september=" + String.valueOf(prix_achat_september));
			sb.append(",annee=" + annee);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idhisto, other.idhisto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_13Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_13Struct other = (after_tFileInputDelimited_13Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_13Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_13Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_14Process(globalMap);

				row13Struct row13 = new row13Struct();
				copyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfmain_0_0 = new copyOfcopyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_8 = 0;

				String dbschema_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_8 = null;
				if (dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = ("historiqueca");
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("historiqueca");
				}

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;

				boolean whetherReject_tDBOutput_8 = false;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;

				conn_tDBOutput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;
				String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8
						+ "\" (\"idhisto\",\"chiffre_affaire_annee\",\"chiffre_affaire_august\",\"chiffre_affaire_april\",\"chiffre_affaire_december\",\"chiffre_affaire_february\",\"chiffre_affaire_january\",\"chiffre_affaire_july\",\"chiffre_affaire_june\",\"chiffre_affaire_may\",\"chiffre_affaire_march\",\"chiffre_affaire_november\",\"chiffre_affaire_october\",\"chiffre_affaire_september\",\"prix_achat_annee\",\"prix_achat_august\",\"prix_achat_april\",\"prix_achat_december\",\"prix_achat_february\",\"prix_achat_january\",\"prix_achat_july\",\"prix_achat_june\",\"prix_achat_may\",\"prix_achat_march\",\"prix_achat_november\",\"prix_achat_october\",\"prix_achat_september\",\"annee\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfmain_0_0_tmp = new copyOfcopyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_13 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_13 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13,
							row13Struct row13) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_13 = 0;

						columnIndexWithD_tFileInputDelimited_13 = 0;

						row13.CREF = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 1;

						row13.CNOM = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 2;

						row13.CRUE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 3;

						row13.CAUX = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 4;

						row13.CCPTL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 5;

						row13.CVIL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 6;

						row13.FILL01 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 7;

						row13.CQUAL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 8;

						row13.CCOM1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 9;

						row13.CCREP = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 10;

						row13.CREMFI = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 11;

						row13.CECHE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 12;

						row13.CECHJ = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 13;

						row13.CPAI = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 14;

						row13.CCHAN = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 15;

						row13.CECHJ2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 16;

						row13.CMOD = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 17;

						row13.CBQ1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 18;

						row13.CBQ2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 19;

						row13.CBQ3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 20;

						row13.CBQ4 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 21;

						row13.CBQ5 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 22;

						row13.CBQ6 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 23;

						row13.CFACT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 24;

						row13.CBL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 25;

						row13.CESC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 26;

						row13.VARAD1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 27;

						row13.VARAD2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 28;

						row13.VARAD3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 29;

						row13.VARAD4 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 30;

						row13.VARAD5 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 31;

						row13.VARAD6 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 32;

						row13.VARA1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 33;

						row13.VARA2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 34;

						row13.VARA3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 35;

						row13.VARA4 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 36;

						row13.VARA5 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 37;

						row13.VARB1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 38;

						row13.VARB2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 39;

						row13.VARB3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 40;

						row13.VARB4 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 41;

						row13.VARB5 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 42;

						row13.VARN1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 43;

						row13.VARN2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 44;

						row13.VARN3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 45;

						row13.VARN4 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 46;

						row13.VARN5 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 47;

						row13.CDATCRE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 48;

						row13.CTEL1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 49;

						row13.CTEL2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 50;

						row13.CTEX1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 51;

						row13.CTEX2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 52;

						row13.CDELMOY = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 53;

						row13.CAFFAIRE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 54;

						row13.CCPTFACT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 55;

						row13.CINTERNET = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 56;

						row13.CIBAN1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 57;

						row13.CBIC_old = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 58;

						row13.CFIDEL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 59;

						row13.CRFA = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 60;

						row13.CCOMREG = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 61;

						row13.CAPE2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 62;

						row13.CIBAN72 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 63;

						row13.CIBAN8 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 64;

						row13.CIBAN9 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 65;

						row13.CBIC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 66;

						row13.CTRANSP = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 67;

						row13.CFACTMAIL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 68;

						row13.CBLMAIL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 69;

						row13.CFACTWEB = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 70;

						row13.CBLWEB = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 71;

						row13.CPUBLIPOSTAGE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 72;

						row13.CFACT_EDI = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 73;

						row13.CFACT_CHORUS = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 74;

						row13.CFACTORING = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 75;

						row13.CCHORUS_SERVICE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 76;

						row13.CFIL14 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 77;

						row13.CTAR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 78;

						row13.FIL02 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 79;

						row13.CREJ = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 80;

						row13.CSECT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 81;

						row13.CTOUR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 82;

						row13.CCAN1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 83;

						row13.CCAN2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 84;

						row13.CCAN3 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 85;

						row13.CDATF = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 86;

						row13.CCAT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 87;

						row13.CRESP = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 88;

						row13.CAPE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 89;

						row13.CPREMC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 90;

						row13.CDERNC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 91;

						row13.CPROCC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 92;

						row13.CTYPEC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 93;

						row13.CSIRET = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 94;

						row13.CORIGIN = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 95;

						row13.CMOTCOUR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 96;

						row13.CCOMPTA = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 97;

						row13.CAFFMEMO = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 98;

						row13.CFIL2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 99;

						row13.CPNAFF = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13,
							row13Struct row13) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_13 = 0;

						columnIndexWithD_tFileInputDelimited_13 = 100;

						row13.CDEVTAR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 101;

						row13.CMINCOM = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 102;

						row13.CRELEVE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 103;

						row13.CRELIQ = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 104;

						row13.CMAJ = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 105;

						row13.CECH = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 106;

						row13.CETIQ = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 107;

						row13.CCOEF = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 108;

						row13.CARROND = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 109;

						row13.CENCOUR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 110;

						row13.CNIVREL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 111;

						row13.CBLOCAG = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 112;

						row13.CDATREL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 113;

						row13.CRESCO = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 114;

						row13.CRESFI = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 115;

						row13.CSFAC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 116;

						row13.CDATENC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 117;

						row13.CDATSFA = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 118;

						row13.CCONTR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 119;

						row13.CDEREL = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 120;

						row13.CPAYS = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 121;

						row13.CBLTOT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 122;

						row13.CBLLIG = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 123;

						row13.CENCDIS = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 124;

						row13.CNCEE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 125;

						row13.CNSFAC = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 126;

						row13.CPSRDAT = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 127;

						row13.CEPNASR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 128;

						row13.CCODTAR = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

						columnIndexWithD_tFileInputDelimited_13 = 129;

						row13.CDEVISE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13,
							row13Struct row13) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_13, row13);

						valueToConn_1(fid_tFileInputDelimited_13, row13);

					}

				}
				RowHelper_tFileInputDelimited_13 rowHelper_tFileInputDelimited_13 = new RowHelper_tFileInputDelimited_13();

				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				int limit_tFileInputDelimited_13 = -1;
				try {

					Object filename_tFileInputDelimited_13 = "C:/DEV/Data/Base Montauban/clients.csv";
					if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
						if (footer_value_tFileInputDelimited_13 > 0 || random_value_tFileInputDelimited_13 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_13, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_13 != null && fid_tFileInputDelimited_13.nextRecord()) {
						rowstate_tFileInputDelimited_13.reset();

						row13 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row13 = new row13Struct();
						try {

							rowHelper_tFileInputDelimited_13.valueToConn(fid_tFileInputDelimited_13, row13);

							if (rowstate_tFileInputDelimited_13.getException() != null) {
								throw rowstate_tFileInputDelimited_13.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */

						/**
						 * [tFileInputDelimited_13 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						/**
						 * [tFileInputDelimited_13 process_data_begin ] stop
						 */
// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tMap_8 main ] start
							 */

							currentComponent = "tMap_8";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8 = false;
							boolean mainRowRejected_tMap_8 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row14"
							///////////////////////////////////////////////

							boolean forceLooprow14 = false;

							row14Struct row14ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row14HashKey.HISKLE = row13.CREF;

								row14HashKey.hashCodeDirty = true;

								tHash_Lookup_row14.lookup(row14HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row14' and it contains more one result from keys : row14.HISKLE = '" +
								// row14HashKey.HISKLE + "'");
							} // G 071

							row14Struct row14 = null;

							row14Struct fromLookup_row14 = null;
							row14 = row14Default;

							if (tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) { // G 099

								fromLookup_row14 = tHash_Lookup_row14.next();

							} // G 099

							if (fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_0_0'
								copyOfcopyOfcopyOfmain_0_0_tmp.idhisto = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_annee = row13.CCAN2 == null
										? new Double(0)
										: row13.CCAN2.isBlank() ? new Double(0) : Double.parseDouble(row13.CCAN2);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_august = row14.HISCAN108 == null
										? new Double(0)
										: row14.HISCAN108.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN108);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_april = row14.HISCAN104 == null
										? new Double(0)
										: row14.HISCAN104.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN104);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_december = row14.HISCAN112 == null
										? new Double(0)
										: row14.HISCAN112.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_february = row14.HISCAN102 == null
										? new Double(0)
										: row14.HISCAN102.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN102);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_january = row14.HISCAN101 == null
										? new Double(0)
										: row14.HISCAN101.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN101);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_july = row14.HISCAN107 == null
										? new Double(0)
										: row14.HISCAN107.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN107);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_june = row14.HISCAN106 == null
										? new Double(0)
										: row14.HISCAN106.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN106);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_may = row14.HISCAN105 == null
										? new Double(0)
										: row14.HISCAN105.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN105);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_march = row14.HISCAN103 == null
										? new Double(0)
										: row14.HISCAN103.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN103);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_november = row14.HISCAN111 == null
										? new Double(0)
										: row14.HISCAN111.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN111);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_october = row14.HISCAN110 == null
										? new Double(0)
										: row14.HISCAN110.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN110);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_september = row14.HISCAN109 == null
										? new Double(0)
										: row14.HISCAN109.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISCAN109);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_annee = row14.HISPAN101 == null
										|| row14.HISPAN102 == null || row14.HISPAN103 == null || row14.HISPAN104 == null
										|| row14.HISPAN105 == null || row14.HISPAN106 == null || row14.HISPAN107 == null
										|| row14.HISPAN108 == null || row14.HISPAN109 == null || row14.HISPAN110 == null
										|| row14.HISPAN111 == null || row14.HISPAN112 == null ? null
												: Double.parseDouble(row14.HISPAN101) +

														Double.parseDouble(row14.HISPAN102) +

														Double.parseDouble(row14.HISPAN103) +

														Double.parseDouble(row14.HISPAN104) +

														Double.parseDouble(row14.HISPAN105) +

														Double.parseDouble(row14.HISPAN106) +

														Double.parseDouble(row14.HISPAN107) +

														Double.parseDouble(row14.HISPAN108) +

														Double.parseDouble(row14.HISPAN109) +

														Double.parseDouble(row14.HISPAN110) +

														Double.parseDouble(row14.HISPAN111) +

														Double.parseDouble(row14.HISPAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_august = row14.HISPAN108 == null
										? new Double(0)
										: row14.HISPAN108.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN108);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_april = row14.HISPAN104 == null
										? new Double(0)
										: row14.HISPAN104.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN104);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_december = row14.HISPAN112 == null
										? new Double(0)
										: row14.HISPAN112.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_february = row14.HISPAN102 == null
										? new Double(0)
										: row14.HISPAN102.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN102);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_january = row14.HISPAN101 == null
										? new Double(0)
										: row14.HISPAN101.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN101);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_july = row14.HISPAN107 == null ? new Double(0)
										: row14.HISPAN107.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN107);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_june = row14.HISPAN106 == null ? new Double(0)
										: row14.HISPAN106.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN106);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_may = row14.HISPAN105 == null ? new Double(0)
										: row14.HISPAN105.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN105);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_march = row14.HISPAN103 == null
										? new Double(0)
										: row14.HISPAN103.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN103);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_november = row14.HISPAN111 == null
										? new Double(0)
										: row14.HISPAN111.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN111);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_october = row14.HISPAN110 == null
										? new Double(0)
										: row14.HISPAN110.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN110);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_september = row14.HISPAN109 == null
										? new Double(0)
										: row14.HISPAN109.isBlank() ? new Double(0)
												: Double.parseDouble(row14.HISPAN109);
								copyOfcopyOfcopyOfmain_0_0_tmp.annee = new String("2020");
								copyOfcopyOfcopyOfmain_0_0_tmp.idcli = row13.CREF;
								copyOfcopyOfcopyOfmain_0_0 = copyOfcopyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_8 = false;

							tos_count_tMap_8++;

							/**
							 * [tMap_8 main ] stop
							 */

							/**
							 * [tMap_8 process_data_begin ] start
							 */

							currentComponent = "tMap_8";

							/**
							 * [tMap_8 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_0_0"
							if (copyOfcopyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_8 main ] start
								 */

								currentComponent = "tDBOutput_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_8 = false;
								pstmt_tDBOutput_8.setInt(1, copyOfcopyOfcopyOfmain_0_0.idhisto);

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_annee == null) {
									pstmt_tDBOutput_8.setNull(2, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(2, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_august == null) {
									pstmt_tDBOutput_8.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(3, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_august);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_april == null) {
									pstmt_tDBOutput_8.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(4, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_april);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_december == null) {
									pstmt_tDBOutput_8.setNull(5, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(5, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_december);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_february == null) {
									pstmt_tDBOutput_8.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(6, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_february);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_january == null) {
									pstmt_tDBOutput_8.setNull(7, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(7, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_january);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_july == null) {
									pstmt_tDBOutput_8.setNull(8, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(8, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_july);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_june == null) {
									pstmt_tDBOutput_8.setNull(9, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(9, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_june);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_may == null) {
									pstmt_tDBOutput_8.setNull(10, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(10, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_may);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_march == null) {
									pstmt_tDBOutput_8.setNull(11, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(11, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_march);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_november == null) {
									pstmt_tDBOutput_8.setNull(12, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(12,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_november);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_october == null) {
									pstmt_tDBOutput_8.setNull(13, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(13, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_october);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_september == null) {
									pstmt_tDBOutput_8.setNull(14, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(14,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_september);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_annee == null) {
									pstmt_tDBOutput_8.setNull(15, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(15, copyOfcopyOfcopyOfmain_0_0.prix_achat_annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_august == null) {
									pstmt_tDBOutput_8.setNull(16, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(16, copyOfcopyOfcopyOfmain_0_0.prix_achat_august);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_april == null) {
									pstmt_tDBOutput_8.setNull(17, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(17, copyOfcopyOfcopyOfmain_0_0.prix_achat_april);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_december == null) {
									pstmt_tDBOutput_8.setNull(18, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(18, copyOfcopyOfcopyOfmain_0_0.prix_achat_december);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_february == null) {
									pstmt_tDBOutput_8.setNull(19, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(19, copyOfcopyOfcopyOfmain_0_0.prix_achat_february);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_january == null) {
									pstmt_tDBOutput_8.setNull(20, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(20, copyOfcopyOfcopyOfmain_0_0.prix_achat_january);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_july == null) {
									pstmt_tDBOutput_8.setNull(21, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(21, copyOfcopyOfcopyOfmain_0_0.prix_achat_july);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_june == null) {
									pstmt_tDBOutput_8.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(22, copyOfcopyOfcopyOfmain_0_0.prix_achat_june);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_may == null) {
									pstmt_tDBOutput_8.setNull(23, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(23, copyOfcopyOfcopyOfmain_0_0.prix_achat_may);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_march == null) {
									pstmt_tDBOutput_8.setNull(24, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(24, copyOfcopyOfcopyOfmain_0_0.prix_achat_march);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_november == null) {
									pstmt_tDBOutput_8.setNull(25, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(25, copyOfcopyOfcopyOfmain_0_0.prix_achat_november);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_october == null) {
									pstmt_tDBOutput_8.setNull(26, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(26, copyOfcopyOfcopyOfmain_0_0.prix_achat_october);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_september == null) {
									pstmt_tDBOutput_8.setNull(27, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_8.setDouble(27, copyOfcopyOfcopyOfmain_0_0.prix_achat_september);
								}

								if (copyOfcopyOfcopyOfmain_0_0.annee == null) {
									pstmt_tDBOutput_8.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_8.setString(28, copyOfcopyOfcopyOfmain_0_0.annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_8.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_8.setString(29, copyOfcopyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_8.addBatch();
								nb_line_tDBOutput_8++;

								batchSizeCounter_tDBOutput_8++;

								if ((batchSize_tDBOutput_8 > 0)
										&& (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
									try {
										int countSum_tDBOutput_8 = 0;

										for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
											countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

										batchSizeCounter_tDBOutput_8 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
										java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),
												sqle_tDBOutput_8 = null;
										String errormessage_tDBOutput_8;
										if (ne_tDBOutput_8 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_8 = new java.sql.SQLException(
													e_tDBOutput_8.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_8.getMessage(),
													ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(),
													ne_tDBOutput_8);
											errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
										} else {
											errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
										}

										int countSum_tDBOutput_8 = 0;
										for (int countEach_tDBOutput_8 : e_tDBOutput_8.getUpdateCounts()) {
											countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

										System.err.println(errormessage_tDBOutput_8);

									}
								}

								tos_count_tDBOutput_8++;

								/**
								 * [tDBOutput_8 main ] stop
								 */

								/**
								 * [tDBOutput_8 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_8 process_data_end ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_0_0"

							/**
							 * [tMap_8 process_data_end ] start
							 */

							currentComponent = "tMap_8";

							/**
							 * [tMap_8 process_data_end ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_13 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						/**
						 * [tFileInputDelimited_13 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_13 != null) {
							fid_tFileInputDelimited_13.close();
						}
					}
					if (fid_tFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE", fid_tFileInputDelimited_13.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					int countSum_tDBOutput_8 = 0;
					if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}

					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

				} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
					java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(), sqle_tDBOutput_8 = null;
					String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(
								e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(),
								ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
					} else {
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e_tDBOutput_8.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					System.err.println(errormessage_tDBOutput_8);

				}

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_13:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tFileInputDelimited_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row14");

			try {

				/**
				 * [tFileInputDelimited_13 finally ] start
				 */

				currentComponent = "tFileInputDelimited_13";

				/**
				 * [tFileInputDelimited_13 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
					if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_8")) != null) {
						pstmtToClose_tDBOutput_8.close();
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfacture;

		public int getIdfacture() {
			return this.idfacture;
		}

		public String alias_nom;

		public String getAlias_nom() {
			return this.alias_nom;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String numero_saisie;

		public String getNumero_saisie() {
			return this.numero_saisie;
		}

		public Float total_ht;

		public Float getTotal_ht() {
			return this.total_ht;
		}

		public Float total_ttc;

		public Float getTotal_ttc() {
			return this.total_ttc;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfacture;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_0_0Struct other = (copyOfcopyOfcopyOfcopyOfmain_0_0Struct) obj;

			if (this.idfacture != other.idfacture)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idfacture = this.idfacture;
			other.alias_nom = this.alias_nom;
			other.date = this.date;
			other.numero_saisie = this.numero_saisie;
			other.total_ht = this.total_ht;
			other.total_ttc = this.total_ttc;
			other.type = this.type;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idfacture = this.idfacture;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idfacture = dis.readInt();

					this.alias_nom = readString(dis);

					this.date = readString(dis);

					this.numero_saisie = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.total_ht = null;
					} else {
						this.total_ht = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_ttc = null;
					} else {
						this.total_ttc = dis.readFloat();
					}

					this.type = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfacture);

				// String

				writeString(this.alias_nom, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.numero_saisie, dos);

				// Float

				if (this.total_ht == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_ht);
				}

				// Float

				if (this.total_ttc == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_ttc);
				}

				// String

				writeString(this.type, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfacture=" + String.valueOf(idfacture));
			sb.append(",alias_nom=" + alias_nom);
			sb.append(",date=" + date);
			sb.append(",numero_saisie=" + numero_saisie);
			sb.append(",total_ht=" + String.valueOf(total_ht));
			sb.append(",total_ttc=" + String.valueOf(total_ttc));
			sb.append(",type=" + type);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfacture, other.idfacture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String Facture;

		public String getFacture() {
			return this.Facture;
		}

		public String totalHT;

		public String getTotalHT() {
			return this.totalHT;
		}

		public String totalTTC;

		public String getTotalTTC() {
			return this.totalTTC;
		}

		public String Client;

		public String getClient() {
			return this.Client;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String saisie;

		public String getSaisie() {
			return this.saisie;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.Facture = readString(dis);

					this.totalHT = readString(dis);

					this.totalTTC = readString(dis);

					this.Client = readString(dis);

					this.nom = readString(dis);

					this.date = readString(dis);

					this.type = readString(dis);

					this.saisie = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Facture, dos);

				// String

				writeString(this.totalHT, dos);

				// String

				writeString(this.totalTTC, dos);

				// String

				writeString(this.Client, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.saisie, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Facture=" + Facture);
			sb.append(",totalHT=" + totalHT);
			sb.append(",totalTTC=" + totalTTC);
			sb.append(",Client=" + Client);
			sb.append(",nom=" + nom);
			sb.append(",date=" + date);
			sb.append(",type=" + type);
			sb.append(",saisie=" + saisie);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				copyOfcopyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfcopyOfmain_0_0 = new copyOfcopyOfcopyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_13 = 0;

				String dbschema_tDBOutput_13 = null;
				dbschema_tDBOutput_13 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_13 = null;
				if (dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = ("facture");
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("facture");
				}

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;

				boolean whetherReject_tDBOutput_13 = false;

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbUser_tDBOutput_13 = null;

				conn_tDBOutput_13 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_13 = 10000;
				int batchSizeCounter_tDBOutput_13 = 0;

				int count_tDBOutput_13 = 0;
				String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13
						+ "\" (\"idfacture\",\"alias_nom\",\"date\",\"numero_saisie\",\"total_ht\",\"total_ttc\",\"type\",\"idcli\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tMap_13 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfcopyOfmain_0_0_tmp = new copyOfcopyOfcopyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_17 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_17 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_17 = null;
				int limit_tFileInputDelimited_17 = -1;
				try {

					Object filename_tFileInputDelimited_17 = "C:/DEV/Data/Base Montauban/Facture.csv";
					if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_17 = 0, random_value_tFileInputDelimited_17 = -1;
						if (footer_value_tFileInputDelimited_17 > 0 || random_value_tFileInputDelimited_17 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_17 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Facture.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_17, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_17 != null && fid_tFileInputDelimited_17.nextRecord()) {
						rowstate_tFileInputDelimited_17.reset();

						row17 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row17 = new row17Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_17 = 0;

							columnIndexWithD_tFileInputDelimited_17 = 0;

							row17.Facture = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 1;

							row17.totalHT = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 2;

							row17.totalTTC = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 3;

							row17.Client = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 4;

							row17.nom = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 5;

							row17.date = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 6;

							row17.type = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 7;

							row17.saisie = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							if (rowstate_tFileInputDelimited_17.getException() != null) {
								throw rowstate_tFileInputDelimited_17.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */

						/**
						 * [tFileInputDelimited_17 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						/**
						 * [tFileInputDelimited_17 process_data_begin ] stop
						 */
// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_0_0'
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.idfacture = Integer.parseInt(row17.Facture);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.alias_nom = row17.nom;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.date = row17.date;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.numero_saisie = row17.saisie;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.total_ht = Float.parseFloat(row17.totalHT);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.total_ttc = Float.parseFloat(row17.totalTTC);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.type = row17.type;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.idcli = row17.Client;
								copyOfcopyOfcopyOfcopyOfmain_0_0 = copyOfcopyOfcopyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */

							/**
							 * [tMap_13 process_data_begin ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_0_0"
							if (copyOfcopyOfcopyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_13 main ] start
								 */

								currentComponent = "tDBOutput_13";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_13 = false;
								pstmt_tDBOutput_13.setInt(1, copyOfcopyOfcopyOfcopyOfmain_0_0.idfacture);

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.alias_nom == null) {
									pstmt_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(2, copyOfcopyOfcopyOfcopyOfmain_0_0.alias_nom);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.date == null) {
									pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(3, copyOfcopyOfcopyOfcopyOfmain_0_0.date);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.numero_saisie == null) {
									pstmt_tDBOutput_13.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(4, copyOfcopyOfcopyOfcopyOfmain_0_0.numero_saisie);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.total_ht == null) {
									pstmt_tDBOutput_13.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_13.setFloat(5, copyOfcopyOfcopyOfcopyOfmain_0_0.total_ht);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.total_ttc == null) {
									pstmt_tDBOutput_13.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_13.setFloat(6, copyOfcopyOfcopyOfcopyOfmain_0_0.total_ttc);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.type == null) {
									pstmt_tDBOutput_13.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(7, copyOfcopyOfcopyOfcopyOfmain_0_0.type);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_13.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(8, copyOfcopyOfcopyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_13.addBatch();
								nb_line_tDBOutput_13++;

								batchSizeCounter_tDBOutput_13++;

								if ((batchSize_tDBOutput_13 > 0)
										&& (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
									try {
										int countSum_tDBOutput_13 = 0;

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
											countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

										batchSizeCounter_tDBOutput_13 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
										java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),
												sqle_tDBOutput_13 = null;
										String errormessage_tDBOutput_13;
										if (ne_tDBOutput_13 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_13 = new java.sql.SQLException(
													e_tDBOutput_13.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_13.getMessage(),
													ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(),
													ne_tDBOutput_13);
											errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
										} else {
											errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
										}

										int countSum_tDBOutput_13 = 0;
										for (int countEach_tDBOutput_13 : e_tDBOutput_13.getUpdateCounts()) {
											countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

										System.err.println(errormessage_tDBOutput_13);

									}
								}

								tos_count_tDBOutput_13++;

								/**
								 * [tDBOutput_13 main ] stop
								 */

								/**
								 * [tDBOutput_13 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_13";

								/**
								 * [tDBOutput_13 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_13 process_data_end ] start
								 */

								currentComponent = "tDBOutput_13";

								/**
								 * [tDBOutput_13 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_0_0"

							/**
							 * [tMap_13 process_data_end ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_end ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_17 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						/**
						 * [tFileInputDelimited_17 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Facture.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_17 != null) {
							fid_tFileInputDelimited_17.close();
						}
					}
					if (fid_tFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE", fid_tFileInputDelimited_17.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					int countSum_tDBOutput_13 = 0;
					if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {

						for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}

					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

				} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
					java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(), sqle_tDBOutput_13 = null;
					String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(
								e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(),
								ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
					} else {
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}

					int countSum_tDBOutput_13 = 0;
					for (int countEach_tDBOutput_13 : e_tDBOutput_13.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

					System.err.println(errormessage_tDBOutput_13);

				}

				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");
				}
				resourceMap.put("statementClosed_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13 + deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED", nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED", nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_17:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_17 finally ] start
				 */

				currentComponent = "tFileInputDelimited_17";

				/**
				 * [tFileInputDelimited_17 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
					if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_13")) != null) {
						pstmtToClose_tDBOutput_13.close();
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_1Struct implements routines.system.IPersistableRow<copyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idaffaire;

		public String getIdaffaire() {
			return this.idaffaire;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idaffaire == null) ? 0 : this.idaffaire.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_1Struct other = (copyOfmain_1Struct) obj;

			if (this.idaffaire == null) {
				if (other.idaffaire != null)
					return false;

			} else if (!this.idaffaire.equals(other.idaffaire))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_1Struct other) {

			other.idaffaire = this.idaffaire;
			other.libelle = this.libelle;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfmain_1Struct other) {

			other.idaffaire = this.idaffaire;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idaffaire = readString(dis);

					this.libelle = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idaffaire, dos);

				// String

				writeString(this.libelle, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idaffaire=" + idaffaire);
			sb.append(",libelle=" + libelle);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idaffaire, other.idaffaire);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String PNCLIE;

		public String getPNCLIE() {
			return this.PNCLIE;
		}

		public String PNPIECE;

		public String getPNPIECE() {
			return this.PNPIECE;
		}

		public String PNREF;

		public String getPNREF() {
			return this.PNREF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.PNCLIE = readString(dis);

					this.PNPIECE = readString(dis);

					this.PNREF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PNCLIE, dos);

				// String

				writeString(this.PNPIECE, dos);

				// String

				writeString(this.PNREF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PNCLIE=" + PNCLIE);
			sb.append(",PNPIECE=" + PNPIECE);
			sb.append(",PNREF=" + PNREF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfmain_1Struct copyOfmain_1 = new copyOfmain_1Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_1");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("code_affaire");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("code_affaire");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"idaffaire\",\"libelle\",\"idcli\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_1Struct copyOfmain_1_tmp = new copyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "C:/DEV/Data/Base Montauban/affaires.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/affaires.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row3.PNCLIE = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row3.PNPIECE = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row3.PNREF = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_1 = null;

// # Output table : 'copyOfmain_1'
								copyOfmain_1_tmp.idaffaire = row3.PNCLIE + row3.PNPIECE;
								copyOfmain_1_tmp.libelle = row3.PNREF;
								copyOfmain_1_tmp.idcli = row3.PNCLIE.equals("AFFAIR") ? null
										: row3.PNCLIE.equals("FINANC") ? null : row3.PNCLIE;
								copyOfmain_1 = copyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_1"
							if (copyOfmain_1 != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_1");
								}

								whetherReject_tDBOutput_4 = false;
								if (copyOfmain_1.idaffaire == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(1, copyOfmain_1.idaffaire);
								}

								if (copyOfmain_1.libelle == null) {
									pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(2, copyOfmain_1.libelle);
								}

								if (copyOfmain_1.idcli == null) {
									pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(3, copyOfmain_1.idcli);
								}

								pstmt_tDBOutput_4.addBatch();
								nb_line_tDBOutput_4++;

								batchSizeCounter_tDBOutput_4++;

								if ((batchSize_tDBOutput_4 > 0)
										&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
									try {
										int countSum_tDBOutput_4 = 0;

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										batchSizeCounter_tDBOutput_4 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
										java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
												sqle_tDBOutput_4 = null;
										String errormessage_tDBOutput_4;
										if (ne_tDBOutput_4 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_4 = new java.sql.SQLException(
													e_tDBOutput_4.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_4.getMessage(),
													ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
													ne_tDBOutput_4);
											errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
										} else {
											errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
										}

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										System.err.println(errormessage_tDBOutput_4);

									}
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_1"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/affaires.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_1");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddetail_cli;

		public int getIddetail_cli() {
			return this.iddetail_cli;
		}

		public Long autorie_sfac;

		public Long getAutorie_sfac() {
			return this.autorie_sfac;
		}

		public Boolean blocage_client;

		public Boolean getBlocage_client() {
			return this.blocage_client;
		}

		public Boolean blocage_facturation;

		public Boolean getBlocage_facturation() {
			return this.blocage_facturation;
		}

		public String code_chantier;

		public String getCode_chantier() {
			return this.code_chantier;
		}

		public String code_tarif_idem_code_client;

		public String getCode_tarif_idem_code_client() {
			return this.code_tarif_idem_code_client;
		}

		public String coef_multiplicateur_pub;

		public String getCoef_multiplicateur_pub() {
			return this.coef_multiplicateur_pub;
		}

		public String commentaire;

		public String getCommentaire() {
			return this.commentaire;
		}

		public String compte_facture;

		public String getCompte_facture() {
			return this.compte_facture;
		}

		public String cout_etiquette;

		public String getCout_etiquette() {
			return this.cout_etiquette;
		}

		public String date_creation;

		public String getDate_creation() {
			return this.date_creation;
		}

		public String date_dernier_encours;

		public String getDate_dernier_encours() {
			return this.date_dernier_encours;
		}

		public String date_dernier_sfac;

		public String getDate_dernier_sfac() {
			return this.date_dernier_sfac;
		}

		public String date_derniere_facture;

		public String getDate_derniere_facture() {
			return this.date_derniere_facture;
		}

		public String date_echeance;

		public String getDate_echeance() {
			return this.date_echeance;
		}

		public String date_psr;

		public String getDate_psr() {
			return this.date_psr;
		}

		public String date_relance;

		public String getDate_relance() {
			return this.date_relance;
		}

		public String echeance_report_au;

		public String getEcheance_report_au() {
			return this.echeance_report_au;
		}

		public Boolean flag_modif;

		public Boolean getFlag_modif() {
			return this.flag_modif;
		}

		public Integer jour_echeance_fin_de_mois;

		public Integer getJour_echeance_fin_de_mois() {
			return this.jour_echeance_fin_de_mois;
		}

		public Double montant_encours;

		public Double getMontant_encours() {
			return this.montant_encours;
		}

		public Double montant_encours_disponible;

		public Double getMontant_encours_disponible() {
			return this.montant_encours_disponible;
		}

		public Integer montant_minimum_commande;

		public Integer getMontant_minimum_commande() {
			return this.montant_minimum_commande;
		}

		public String niveau_relance;

		public String getNiveau_relance() {
			return this.niveau_relance;
		}

		public String reference_affaire_exigee;

		public String getReference_affaire_exigee() {
			return this.reference_affaire_exigee;
		}

		public String regroupement_cmd_cli;

		public String getRegroupement_cmd_cli() {
			return this.regroupement_cmd_cli;
		}

		public Float taux_descompte;

		public Float getTaux_descompte() {
			return this.taux_descompte;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddetail_cli;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.iddetail_cli != other.iddetail_cli)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.iddetail_cli = this.iddetail_cli;
			other.autorie_sfac = this.autorie_sfac;
			other.blocage_client = this.blocage_client;
			other.blocage_facturation = this.blocage_facturation;
			other.code_chantier = this.code_chantier;
			other.code_tarif_idem_code_client = this.code_tarif_idem_code_client;
			other.coef_multiplicateur_pub = this.coef_multiplicateur_pub;
			other.commentaire = this.commentaire;
			other.compte_facture = this.compte_facture;
			other.cout_etiquette = this.cout_etiquette;
			other.date_creation = this.date_creation;
			other.date_dernier_encours = this.date_dernier_encours;
			other.date_dernier_sfac = this.date_dernier_sfac;
			other.date_derniere_facture = this.date_derniere_facture;
			other.date_echeance = this.date_echeance;
			other.date_psr = this.date_psr;
			other.date_relance = this.date_relance;
			other.echeance_report_au = this.echeance_report_au;
			other.flag_modif = this.flag_modif;
			other.jour_echeance_fin_de_mois = this.jour_echeance_fin_de_mois;
			other.montant_encours = this.montant_encours;
			other.montant_encours_disponible = this.montant_encours_disponible;
			other.montant_minimum_commande = this.montant_minimum_commande;
			other.niveau_relance = this.niveau_relance;
			other.reference_affaire_exigee = this.reference_affaire_exigee;
			other.regroupement_cmd_cli = this.regroupement_cmd_cli;
			other.taux_descompte = this.taux_descompte;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.iddetail_cli = this.iddetail_cli;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.iddetail_cli = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.autorie_sfac = null;
					} else {
						this.autorie_sfac = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.blocage_client = null;
					} else {
						this.blocage_client = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.blocage_facturation = null;
					} else {
						this.blocage_facturation = dis.readBoolean();
					}

					this.code_chantier = readString(dis);

					this.code_tarif_idem_code_client = readString(dis);

					this.coef_multiplicateur_pub = readString(dis);

					this.commentaire = readString(dis);

					this.compte_facture = readString(dis);

					this.cout_etiquette = readString(dis);

					this.date_creation = readString(dis);

					this.date_dernier_encours = readString(dis);

					this.date_dernier_sfac = readString(dis);

					this.date_derniere_facture = readString(dis);

					this.date_echeance = readString(dis);

					this.date_psr = readString(dis);

					this.date_relance = readString(dis);

					this.echeance_report_au = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.flag_modif = null;
					} else {
						this.flag_modif = dis.readBoolean();
					}

					this.jour_echeance_fin_de_mois = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_encours = null;
					} else {
						this.montant_encours = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_encours_disponible = null;
					} else {
						this.montant_encours_disponible = dis.readDouble();
					}

					this.montant_minimum_commande = readInteger(dis);

					this.niveau_relance = readString(dis);

					this.reference_affaire_exigee = readString(dis);

					this.regroupement_cmd_cli = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.taux_descompte = null;
					} else {
						this.taux_descompte = dis.readFloat();
					}

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddetail_cli);

				// Long

				if (this.autorie_sfac == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.autorie_sfac);
				}

				// Boolean

				if (this.blocage_client == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.blocage_client);
				}

				// Boolean

				if (this.blocage_facturation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.blocage_facturation);
				}

				// String

				writeString(this.code_chantier, dos);

				// String

				writeString(this.code_tarif_idem_code_client, dos);

				// String

				writeString(this.coef_multiplicateur_pub, dos);

				// String

				writeString(this.commentaire, dos);

				// String

				writeString(this.compte_facture, dos);

				// String

				writeString(this.cout_etiquette, dos);

				// String

				writeString(this.date_creation, dos);

				// String

				writeString(this.date_dernier_encours, dos);

				// String

				writeString(this.date_dernier_sfac, dos);

				// String

				writeString(this.date_derniere_facture, dos);

				// String

				writeString(this.date_echeance, dos);

				// String

				writeString(this.date_psr, dos);

				// String

				writeString(this.date_relance, dos);

				// String

				writeString(this.echeance_report_au, dos);

				// Boolean

				if (this.flag_modif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.flag_modif);
				}

				// Integer

				writeInteger(this.jour_echeance_fin_de_mois, dos);

				// Double

				if (this.montant_encours == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_encours);
				}

				// Double

				if (this.montant_encours_disponible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_encours_disponible);
				}

				// Integer

				writeInteger(this.montant_minimum_commande, dos);

				// String

				writeString(this.niveau_relance, dos);

				// String

				writeString(this.reference_affaire_exigee, dos);

				// String

				writeString(this.regroupement_cmd_cli, dos);

				// Float

				if (this.taux_descompte == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taux_descompte);
				}

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddetail_cli=" + String.valueOf(iddetail_cli));
			sb.append(",autorie_sfac=" + String.valueOf(autorie_sfac));
			sb.append(",blocage_client=" + String.valueOf(blocage_client));
			sb.append(",blocage_facturation=" + String.valueOf(blocage_facturation));
			sb.append(",code_chantier=" + code_chantier);
			sb.append(",code_tarif_idem_code_client=" + code_tarif_idem_code_client);
			sb.append(",coef_multiplicateur_pub=" + coef_multiplicateur_pub);
			sb.append(",commentaire=" + commentaire);
			sb.append(",compte_facture=" + compte_facture);
			sb.append(",cout_etiquette=" + cout_etiquette);
			sb.append(",date_creation=" + date_creation);
			sb.append(",date_dernier_encours=" + date_dernier_encours);
			sb.append(",date_dernier_sfac=" + date_dernier_sfac);
			sb.append(",date_derniere_facture=" + date_derniere_facture);
			sb.append(",date_echeance=" + date_echeance);
			sb.append(",date_psr=" + date_psr);
			sb.append(",date_relance=" + date_relance);
			sb.append(",echeance_report_au=" + echeance_report_au);
			sb.append(",flag_modif=" + String.valueOf(flag_modif));
			sb.append(",jour_echeance_fin_de_mois=" + String.valueOf(jour_echeance_fin_de_mois));
			sb.append(",montant_encours=" + String.valueOf(montant_encours));
			sb.append(",montant_encours_disponible=" + String.valueOf(montant_encours_disponible));
			sb.append(",montant_minimum_commande=" + String.valueOf(montant_minimum_commande));
			sb.append(",niveau_relance=" + niveau_relance);
			sb.append(",reference_affaire_exigee=" + reference_affaire_exigee);
			sb.append(",regroupement_cmd_cli=" + regroupement_cmd_cli);
			sb.append(",taux_descompte=" + String.valueOf(taux_descompte));
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddetail_cli, other.iddetail_cli);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("client_detail");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("client_detail");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					stmtClear_tDBOutput_5.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_5 + "\"");
				}
				String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5
						+ "\" (\"iddetail_cli\",\"autorie_sfac\",\"blocage_client\",\"blocage_facturation\",\"code_chantier\",\"code_tarif_idem_code_client\",\"coef_multiplicateur_pub\",\"commentaire\",\"compte_facture\",\"cout_etiquette\",\"date_creation\",\"date_dernier_encours\",\"date_dernier_sfac\",\"date_derniere_facture\",\"date_echeance\",\"date_psr\",\"date_relance\",\"echeance_report_au\",\"flag_modif\",\"jour_echeance_fin_de_mois\",\"montant_encours\",\"montant_encours_disponible\",\"montant_minimum_commande\",\"niveau_relance\",\"reference_affaire_exigee\",\"regroupement_cmd_cli\",\"taux_descompte\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_3 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row5Struct row5) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						columnIndexWithD_tFileInputDelimited_3 = 0;

						row5.CREF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 1;

						row5.CNOM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 2;

						row5.CRUE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 3;

						row5.CAUX = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 4;

						row5.CCPTL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 5;

						row5.CVIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 6;

						row5.FILL01 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 7;

						row5.CQUAL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 8;

						row5.CCOM1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 9;

						row5.CCREP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 10;

						row5.CREMFI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 11;

						row5.CECHE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 12;

						row5.CECHJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 13;

						row5.CPAI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 14;

						row5.CCHAN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 15;

						row5.CECHJ2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 16;

						row5.CMOD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 17;

						row5.CBQ1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 18;

						row5.CBQ2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 19;

						row5.CBQ3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 20;

						row5.CBQ4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 21;

						row5.CBQ5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 22;

						row5.CBQ6 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 23;

						row5.CFACT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 24;

						row5.CBL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 25;

						row5.CESC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 26;

						row5.VARAD1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 27;

						row5.VARAD2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 28;

						row5.VARAD3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 29;

						row5.VARAD4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 30;

						row5.VARAD5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 31;

						row5.VARAD6 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 32;

						row5.VARA1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 33;

						row5.VARA2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 34;

						row5.VARA3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 35;

						row5.VARA4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 36;

						row5.VARA5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 37;

						row5.VARB1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 38;

						row5.VARB2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 39;

						row5.VARB3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 40;

						row5.VARB4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 41;

						row5.VARB5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 42;

						row5.VARN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 43;

						row5.VARN2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 44;

						row5.VARN3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 45;

						row5.VARN4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 46;

						row5.VARN5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 47;

						row5.CDATCRE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 48;

						row5.CTEL1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 49;

						row5.CTEL2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 50;

						row5.CTEX1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 51;

						row5.CTEX2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 52;

						row5.CDELMOY = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 53;

						row5.CAFFAIRE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 54;

						row5.CCPTFACT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 55;

						row5.CINTERNET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 56;

						row5.CIBAN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 57;

						row5.CBIC_old = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 58;

						row5.CFIDEL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 59;

						row5.CRFA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 60;

						row5.CCOMREG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 61;

						row5.CAPE2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 62;

						row5.CIBAN72 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 63;

						row5.CIBAN8 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 64;

						row5.CIBAN9 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 65;

						row5.CBIC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 66;

						row5.CTRANSP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 67;

						row5.CFACTMAIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 68;

						row5.CBLMAIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 69;

						row5.CFACTWEB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 70;

						row5.CBLWEB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 71;

						row5.CPUBLIPOSTAGE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 72;

						row5.CFACT_EDI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 73;

						row5.CFACT_CHORUS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 74;

						row5.CFACTORING = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 75;

						row5.CCHORUS_SERVICE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 76;

						row5.CFIL14 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 77;

						row5.CTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 78;

						row5.FIL02 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 79;

						row5.CREJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 80;

						row5.CSECT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 81;

						row5.CTOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 82;

						row5.CCAN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 83;

						row5.CCAN2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 84;

						row5.CCAN3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 85;

						row5.CDATF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 86;

						row5.CCAT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 87;

						row5.CRESP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 88;

						row5.CAPE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 89;

						row5.CPREMC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 90;

						row5.CDERNC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 91;

						row5.CPROCC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 92;

						row5.CTYPEC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 93;

						row5.CSIRET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 94;

						row5.CORIGIN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 95;

						row5.CMOTCOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 96;

						row5.CCOMPTA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 97;

						row5.CAFFMEMO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 98;

						row5.CFIL2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 99;

						row5.CPNAFF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row5Struct row5) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						columnIndexWithD_tFileInputDelimited_3 = 100;

						row5.CDEVTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 101;

						row5.CMINCOM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 102;

						row5.CRELEVE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 103;

						row5.CRELIQ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 104;

						row5.CMAJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 105;

						row5.CECH = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 106;

						row5.CETIQ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 107;

						row5.CCOEF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 108;

						row5.CARROND = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 109;

						row5.CENCOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 110;

						row5.CNIVREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 111;

						row5.CBLOCAG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 112;

						row5.CDATREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 113;

						row5.CRESCO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 114;

						row5.CRESFI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 115;

						row5.CSFAC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 116;

						row5.CDATENC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 117;

						row5.CDATSFA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 118;

						row5.CCONTR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 119;

						row5.CDEREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 120;

						row5.CPAYS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 121;

						row5.CBLTOT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 122;

						row5.CBLLIG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 123;

						row5.CENCDIS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 124;

						row5.CNCEE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 125;

						row5.CNSFAC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 126;

						row5.CPSRDAT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 127;

						row5.CEPNASR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 128;

						row5.CCODTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 129;

						row5.CDEVISE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row5Struct row5) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_3, row5);

						valueToConn_1(fid_tFileInputDelimited_3, row5);

					}

				}
				RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3 = new RowHelper_tFileInputDelimited_3();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row5 = new row5Struct();
						try {

							rowHelper_tFileInputDelimited_3.valueToConn(fid_tFileInputDelimited_3, row5);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.iddetail_cli = Numeric.sequence("cli", 1, 1);
								out1_tmp.autorie_sfac = null;
								out1_tmp.blocage_client = row5.CNIVREL.contains("B") ? true : false;
								out1_tmp.blocage_facturation = row5.CBLOCAG.isBlank() ? false : true;
								out1_tmp.code_chantier = row5.CCHAN;
								out1_tmp.code_tarif_idem_code_client = row5.CCODTAR;
								out1_tmp.coef_multiplicateur_pub = null;
								out1_tmp.commentaire = row5.CCOM1;
								out1_tmp.compte_facture = row5.CCPTFACT;
								out1_tmp.cout_etiquette = row5.CETIQ;
								out1_tmp.date_creation = row5.CDATCRE;
								out1_tmp.date_dernier_encours = row5.CDATENC;
								out1_tmp.date_dernier_sfac = row5.CDATSFA;
								out1_tmp.date_derniere_facture = row5.CDATF;
								out1_tmp.date_echeance = row5.CECH;
								out1_tmp.date_psr = row5.CPSRDAT;
								out1_tmp.date_relance = row5.CDATREL;
								out1_tmp.echeance_report_au = row5.CECHJ2;
								out1_tmp.flag_modif = row5.CMOD.isBlank() ? false : true;
								out1_tmp.jour_echeance_fin_de_mois = Integer.parseInt(row5.CECHJ);
								out1_tmp.montant_encours = Double.parseDouble(row5.CENCOUR);
								out1_tmp.montant_encours_disponible = Double.parseDouble(row5.CENCDIS);
								out1_tmp.montant_minimum_commande = Integer.parseInt(row5.CMINCOM);
								out1_tmp.niveau_relance = row5.CDEREL;
								out1_tmp.reference_affaire_exigee = row5.CAFFAIRE;
								out1_tmp.regroupement_cmd_cli = row5.CCOMREG;
								out1_tmp.taux_descompte = Float.parseFloat(row5.CESC);
								out1_tmp.idcli = row5.CREF;
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								whetherReject_tDBOutput_5 = false;
								pstmt_tDBOutput_5.setInt(1, out1.iddetail_cli);

								if (out1.autorie_sfac == null) {
									pstmt_tDBOutput_5.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setLong(2, out1.autorie_sfac);
								}

								if (out1.blocage_client == null) {
									pstmt_tDBOutput_5.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_5.setBoolean(3, out1.blocage_client);
								}

								if (out1.blocage_facturation == null) {
									pstmt_tDBOutput_5.setNull(4, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_5.setBoolean(4, out1.blocage_facturation);
								}

								if (out1.code_chantier == null) {
									pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(5, out1.code_chantier);
								}

								if (out1.code_tarif_idem_code_client == null) {
									pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(6, out1.code_tarif_idem_code_client);
								}

								if (out1.coef_multiplicateur_pub == null) {
									pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(7, out1.coef_multiplicateur_pub);
								}

								if (out1.commentaire == null) {
									pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(8, out1.commentaire);
								}

								if (out1.compte_facture == null) {
									pstmt_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(9, out1.compte_facture);
								}

								if (out1.cout_etiquette == null) {
									pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(10, out1.cout_etiquette);
								}

								if (out1.date_creation == null) {
									pstmt_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(11, out1.date_creation);
								}

								if (out1.date_dernier_encours == null) {
									pstmt_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(12, out1.date_dernier_encours);
								}

								if (out1.date_dernier_sfac == null) {
									pstmt_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(13, out1.date_dernier_sfac);
								}

								if (out1.date_derniere_facture == null) {
									pstmt_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(14, out1.date_derniere_facture);
								}

								if (out1.date_echeance == null) {
									pstmt_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(15, out1.date_echeance);
								}

								if (out1.date_psr == null) {
									pstmt_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(16, out1.date_psr);
								}

								if (out1.date_relance == null) {
									pstmt_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(17, out1.date_relance);
								}

								if (out1.echeance_report_au == null) {
									pstmt_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(18, out1.echeance_report_au);
								}

								if (out1.flag_modif == null) {
									pstmt_tDBOutput_5.setNull(19, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_5.setBoolean(19, out1.flag_modif);
								}

								if (out1.jour_echeance_fin_de_mois == null) {
									pstmt_tDBOutput_5.setNull(20, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setInt(20, out1.jour_echeance_fin_de_mois);
								}

								if (out1.montant_encours == null) {
									pstmt_tDBOutput_5.setNull(21, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_5.setDouble(21, out1.montant_encours);
								}

								if (out1.montant_encours_disponible == null) {
									pstmt_tDBOutput_5.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_5.setDouble(22, out1.montant_encours_disponible);
								}

								if (out1.montant_minimum_commande == null) {
									pstmt_tDBOutput_5.setNull(23, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setInt(23, out1.montant_minimum_commande);
								}

								if (out1.niveau_relance == null) {
									pstmt_tDBOutput_5.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(24, out1.niveau_relance);
								}

								if (out1.reference_affaire_exigee == null) {
									pstmt_tDBOutput_5.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(25, out1.reference_affaire_exigee);
								}

								if (out1.regroupement_cmd_cli == null) {
									pstmt_tDBOutput_5.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(26, out1.regroupement_cmd_cli);
								}

								if (out1.taux_descompte == null) {
									pstmt_tDBOutput_5.setNull(27, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_5.setFloat(27, out1.taux_descompte);
								}

								if (out1.idcli == null) {
									pstmt_tDBOutput_5.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(28, out1.idcli);
								}

								pstmt_tDBOutput_5.addBatch();
								nb_line_tDBOutput_5++;

								batchSizeCounter_tDBOutput_5++;

								if ((batchSize_tDBOutput_5 > 0)
										&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
									try {
										int countSum_tDBOutput_5 = 0;

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										batchSizeCounter_tDBOutput_5 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
										java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
												sqle_tDBOutput_5 = null;
										String errormessage_tDBOutput_5;
										if (ne_tDBOutput_5 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_5 = new java.sql.SQLException(
													e_tDBOutput_5.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_5.getMessage(),
													ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
													ne_tDBOutput_5);
											errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
										} else {
											errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
										}

										int countSum_tDBOutput_5 = 0;
										for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										System.err.println(errormessage_tDBOutput_5);

									}
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortie_1Struct implements routines.system.IPersistableRow<copyOfsortie_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idparamclient;

		public int getIdparamclient() {
			return this.idparamclient;
		}

		public Boolean affacturage;

		public Boolean getAffacturage() {
			return this.affacturage;
		}

		public Boolean affichage;

		public Boolean getAffichage() {
			return this.affichage;
		}

		public Boolean bl_chiffre_en_ligne;

		public Boolean getBl_chiffre_en_ligne() {
			return this.bl_chiffre_en_ligne;
		}

		public Boolean bl_chiffre_en_total;

		public Boolean getBl_chiffre_en_total() {
			return this.bl_chiffre_en_total;
		}

		public Boolean chorus_service;

		public Boolean getChorus_service() {
			return this.chorus_service;
		}

		public Float coef_majo_factu;

		public Float getCoef_majo_factu() {
			return this.coef_majo_factu;
		}

		public Boolean controle_cde;

		public Boolean getControle_cde() {
			return this.controle_cde;
		}

		public Boolean edition_pn_remise;

		public Boolean getEdition_pn_remise() {
			return this.edition_pn_remise;
		}

		public Boolean envoie_bl_mail;

		public Boolean getEnvoie_bl_mail() {
			return this.envoie_bl_mail;
		}

		public Boolean envoie_bl_web;

		public Boolean getEnvoie_bl_web() {
			return this.envoie_bl_web;
		}

		public Boolean envoie_facture_mail;

		public Boolean getEnvoie_facture_mail() {
			return this.envoie_facture_mail;
		}

		public Boolean envoie_facture_web;

		public Boolean getEnvoie_facture_web() {
			return this.envoie_facture_web;
		}

		public String facturation_releve;

		public String getFacturation_releve() {
			return this.facturation_releve;
		}

		public Boolean facture_chorus;

		public Boolean getFacture_chorus() {
			return this.facture_chorus;
		}

		public Boolean facture_edi;

		public Boolean getFacture_edi() {
			return this.facture_edi;
		}

		public Boolean gestion_fidelite;

		public Boolean getGestion_fidelite() {
			return this.gestion_fidelite;
		}

		public Boolean gestion_reliquat;

		public Boolean getGestion_reliquat() {
			return this.gestion_reliquat;
		}

		public Boolean internet;

		public Boolean getInternet() {
			return this.internet;
		}

		public Integer nb_bon_liv;

		public Integer getNb_bon_liv() {
			return this.nb_bon_liv;
		}

		public Integer nombre_facture;

		public Integer getNombre_facture() {
			return this.nombre_facture;
		}

		public Boolean prix_net;

		public Boolean getPrix_net() {
			return this.prix_net;
		}

		public Boolean publipostage;

		public Boolean getPublipostage() {
			return this.publipostage;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idparamclient;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortie_1Struct other = (copyOfsortie_1Struct) obj;

			if (this.idparamclient != other.idparamclient)
				return false;

			return true;
		}

		public void copyDataTo(copyOfsortie_1Struct other) {

			other.idparamclient = this.idparamclient;
			other.affacturage = this.affacturage;
			other.affichage = this.affichage;
			other.bl_chiffre_en_ligne = this.bl_chiffre_en_ligne;
			other.bl_chiffre_en_total = this.bl_chiffre_en_total;
			other.chorus_service = this.chorus_service;
			other.coef_majo_factu = this.coef_majo_factu;
			other.controle_cde = this.controle_cde;
			other.edition_pn_remise = this.edition_pn_remise;
			other.envoie_bl_mail = this.envoie_bl_mail;
			other.envoie_bl_web = this.envoie_bl_web;
			other.envoie_facture_mail = this.envoie_facture_mail;
			other.envoie_facture_web = this.envoie_facture_web;
			other.facturation_releve = this.facturation_releve;
			other.facture_chorus = this.facture_chorus;
			other.facture_edi = this.facture_edi;
			other.gestion_fidelite = this.gestion_fidelite;
			other.gestion_reliquat = this.gestion_reliquat;
			other.internet = this.internet;
			other.nb_bon_liv = this.nb_bon_liv;
			other.nombre_facture = this.nombre_facture;
			other.prix_net = this.prix_net;
			other.publipostage = this.publipostage;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfsortie_1Struct other) {

			other.idparamclient = this.idparamclient;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idparamclient = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.affacturage = null;
					} else {
						this.affacturage = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.affichage = null;
					} else {
						this.affichage = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bl_chiffre_en_ligne = null;
					} else {
						this.bl_chiffre_en_ligne = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bl_chiffre_en_total = null;
					} else {
						this.bl_chiffre_en_total = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chorus_service = null;
					} else {
						this.chorus_service = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_majo_factu = null;
					} else {
						this.coef_majo_factu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.controle_cde = null;
					} else {
						this.controle_cde = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.edition_pn_remise = null;
					} else {
						this.edition_pn_remise = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_bl_mail = null;
					} else {
						this.envoie_bl_mail = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_bl_web = null;
					} else {
						this.envoie_bl_web = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_facture_mail = null;
					} else {
						this.envoie_facture_mail = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_facture_web = null;
					} else {
						this.envoie_facture_web = dis.readBoolean();
					}

					this.facturation_releve = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.facture_chorus = null;
					} else {
						this.facture_chorus = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.facture_edi = null;
					} else {
						this.facture_edi = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.gestion_fidelite = null;
					} else {
						this.gestion_fidelite = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.gestion_reliquat = null;
					} else {
						this.gestion_reliquat = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.internet = null;
					} else {
						this.internet = dis.readBoolean();
					}

					this.nb_bon_liv = readInteger(dis);

					this.nombre_facture = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_net = null;
					} else {
						this.prix_net = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.publipostage = null;
					} else {
						this.publipostage = dis.readBoolean();
					}

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idparamclient);

				// Boolean

				if (this.affacturage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.affacturage);
				}

				// Boolean

				if (this.affichage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.affichage);
				}

				// Boolean

				if (this.bl_chiffre_en_ligne == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bl_chiffre_en_ligne);
				}

				// Boolean

				if (this.bl_chiffre_en_total == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bl_chiffre_en_total);
				}

				// Boolean

				if (this.chorus_service == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.chorus_service);
				}

				// Float

				if (this.coef_majo_factu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_majo_factu);
				}

				// Boolean

				if (this.controle_cde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.controle_cde);
				}

				// Boolean

				if (this.edition_pn_remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.edition_pn_remise);
				}

				// Boolean

				if (this.envoie_bl_mail == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_bl_mail);
				}

				// Boolean

				if (this.envoie_bl_web == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_bl_web);
				}

				// Boolean

				if (this.envoie_facture_mail == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_facture_mail);
				}

				// Boolean

				if (this.envoie_facture_web == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_facture_web);
				}

				// String

				writeString(this.facturation_releve, dos);

				// Boolean

				if (this.facture_chorus == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.facture_chorus);
				}

				// Boolean

				if (this.facture_edi == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.facture_edi);
				}

				// Boolean

				if (this.gestion_fidelite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.gestion_fidelite);
				}

				// Boolean

				if (this.gestion_reliquat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.gestion_reliquat);
				}

				// Boolean

				if (this.internet == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.internet);
				}

				// Integer

				writeInteger(this.nb_bon_liv, dos);

				// Integer

				writeInteger(this.nombre_facture, dos);

				// Boolean

				if (this.prix_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.prix_net);
				}

				// Boolean

				if (this.publipostage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.publipostage);
				}

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idparamclient=" + String.valueOf(idparamclient));
			sb.append(",affacturage=" + String.valueOf(affacturage));
			sb.append(",affichage=" + String.valueOf(affichage));
			sb.append(",bl_chiffre_en_ligne=" + String.valueOf(bl_chiffre_en_ligne));
			sb.append(",bl_chiffre_en_total=" + String.valueOf(bl_chiffre_en_total));
			sb.append(",chorus_service=" + String.valueOf(chorus_service));
			sb.append(",coef_majo_factu=" + String.valueOf(coef_majo_factu));
			sb.append(",controle_cde=" + String.valueOf(controle_cde));
			sb.append(",edition_pn_remise=" + String.valueOf(edition_pn_remise));
			sb.append(",envoie_bl_mail=" + String.valueOf(envoie_bl_mail));
			sb.append(",envoie_bl_web=" + String.valueOf(envoie_bl_web));
			sb.append(",envoie_facture_mail=" + String.valueOf(envoie_facture_mail));
			sb.append(",envoie_facture_web=" + String.valueOf(envoie_facture_web));
			sb.append(",facturation_releve=" + facturation_releve);
			sb.append(",facture_chorus=" + String.valueOf(facture_chorus));
			sb.append(",facture_edi=" + String.valueOf(facture_edi));
			sb.append(",gestion_fidelite=" + String.valueOf(gestion_fidelite));
			sb.append(",gestion_reliquat=" + String.valueOf(gestion_reliquat));
			sb.append(",internet=" + String.valueOf(internet));
			sb.append(",nb_bon_liv=" + String.valueOf(nb_bon_liv));
			sb.append(",nombre_facture=" + String.valueOf(nombre_facture));
			sb.append(",prix_net=" + String.valueOf(prix_net));
			sb.append(",publipostage=" + String.valueOf(publipostage));
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idparamclient, other.idparamclient);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				copyOfsortie_1Struct copyOfsortie_1 = new copyOfsortie_1Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie_1");
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = ("param_client");
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("param_client");
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				conn_tDBOutput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
					stmtClear_tDBOutput_9.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_9 + "\"");
				}
				String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9
						+ "\" (\"idparamclient\",\"affacturage\",\"affichage\",\"bl_chiffre_en_ligne\",\"bl_chiffre_en_total\",\"chorus_service\",\"coef_majo_factu\",\"controle_cde\",\"edition_pn_remise\",\"envoie_bl_mail\",\"envoie_bl_web\",\"envoie_facture_mail\",\"envoie_facture_web\",\"facturation_releve\",\"facture_chorus\",\"facture_edi\",\"gestion_fidelite\",\"gestion_reliquat\",\"internet\",\"nb_bon_liv\",\"nombre_facture\",\"prix_net\",\"publipostage\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_1Struct copyOfsortie_1_tmp = new copyOfsortie_1Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_9 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row9Struct row9) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 0;

						row9.CREF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 1;

						row9.CNOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 2;

						row9.CRUE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 3;

						row9.CAUX = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 4;

						row9.CCPTL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 5;

						row9.CVIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 6;

						row9.FILL01 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 7;

						row9.CQUAL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 8;

						row9.CCOM1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 9;

						row9.CCREP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 10;

						row9.CREMFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 11;

						row9.CECHE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 12;

						row9.CECHJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 13;

						row9.CPAI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 14;

						row9.CCHAN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 15;

						row9.CECHJ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 16;

						row9.CMOD = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 17;

						row9.CBQ1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 18;

						row9.CBQ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 19;

						row9.CBQ3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 20;

						row9.CBQ4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 21;

						row9.CBQ5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 22;

						row9.CBQ6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 23;

						row9.CFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 24;

						row9.CBL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 25;

						row9.CESC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 26;

						row9.VARAD1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 27;

						row9.VARAD2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 28;

						row9.VARAD3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 29;

						row9.VARAD4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 30;

						row9.VARAD5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 31;

						row9.VARAD6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 32;

						row9.VARA1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 33;

						row9.VARA2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 34;

						row9.VARA3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 35;

						row9.VARA4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 36;

						row9.VARA5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 37;

						row9.VARB1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 38;

						row9.VARB2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 39;

						row9.VARB3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 40;

						row9.VARB4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 41;

						row9.VARB5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 42;

						row9.VARN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 43;

						row9.VARN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 44;

						row9.VARN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 45;

						row9.VARN4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 46;

						row9.VARN5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 47;

						row9.CDATCRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 48;

						row9.CTEL1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 49;

						row9.CTEL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 50;

						row9.CTEX1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 51;

						row9.CTEX2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 52;

						row9.CDELMOY = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 53;

						row9.CAFFAIRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 54;

						row9.CCPTFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 55;

						row9.CINTERNET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 56;

						row9.CIBAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 57;

						row9.CBIC_old = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 58;

						row9.CFIDEL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 59;

						row9.CRFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 60;

						row9.CCOMREG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 61;

						row9.CAPE2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 62;

						row9.CIBAN72 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 63;

						row9.CIBAN8 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 64;

						row9.CIBAN9 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 65;

						row9.CBIC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 66;

						row9.CTRANSP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 67;

						row9.CFACTMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 68;

						row9.CBLMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 69;

						row9.CFACTWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 70;

						row9.CBLWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 71;

						row9.CPUBLIPOSTAGE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 72;

						row9.CFACT_EDI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 73;

						row9.CFACT_CHORUS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 74;

						row9.CFACTORING = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 75;

						row9.CCHORUS_SERVICE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 76;

						row9.CFIL14 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 77;

						row9.CTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 78;

						row9.FIL02 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 79;

						row9.CREJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 80;

						row9.CSECT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 81;

						row9.CTOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 82;

						row9.CCAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 83;

						row9.CCAN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 84;

						row9.CCAN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 85;

						row9.CDATF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 86;

						row9.CCAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 87;

						row9.CRESP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 88;

						row9.CAPE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 89;

						row9.CPREMC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 90;

						row9.CDERNC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 91;

						row9.CPROCC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 92;

						row9.CTYPEC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 93;

						row9.CSIRET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 94;

						row9.CORIGIN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 95;

						row9.CMOTCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 96;

						row9.CCOMPTA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 97;

						row9.CAFFMEMO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 98;

						row9.CFIL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 99;

						row9.CPNAFF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row9Struct row9) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 100;

						row9.CDEVTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 101;

						row9.CMINCOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 102;

						row9.CRELEVE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 103;

						row9.CRELIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 104;

						row9.CMAJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 105;

						row9.CECH = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 106;

						row9.CETIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 107;

						row9.CCOEF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 108;

						row9.CARROND = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 109;

						row9.CENCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 110;

						row9.CNIVREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 111;

						row9.CBLOCAG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 112;

						row9.CDATREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 113;

						row9.CRESCO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 114;

						row9.CRESFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 115;

						row9.CSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 116;

						row9.CDATENC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 117;

						row9.CDATSFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 118;

						row9.CCONTR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 119;

						row9.CDEREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 120;

						row9.CPAYS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 121;

						row9.CBLTOT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 122;

						row9.CBLLIG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 123;

						row9.CENCDIS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 124;

						row9.CNCEE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 125;

						row9.CNSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 126;

						row9.CPSRDAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 127;

						row9.CEPNASR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 128;

						row9.CCODTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 129;

						row9.CDEVISE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row9Struct row9) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_9, row9);

						valueToConn_1(fid_tFileInputDelimited_9, row9);

					}

				}
				RowHelper_tFileInputDelimited_9 rowHelper_tFileInputDelimited_9 = new RowHelper_tFileInputDelimited_9();

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try {

					Object filename_tFileInputDelimited_9 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0 || random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_9, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();

						row9 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row9 = new row9Struct();
						try {

							rowHelper_tFileInputDelimited_9.valueToConn(fid_tFileInputDelimited_9, row9);

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie_1 = null;

// # Output table : 'copyOfsortie_1'
								copyOfsortie_1_tmp.idparamclient = Numeric.sequence("s4", 1, 1);
								copyOfsortie_1_tmp.affacturage = row9.CFACTORING.equals("N") ? false : true;
								copyOfsortie_1_tmp.affichage = row9.CAFFMEMO.equals("O") ? true : false;
								copyOfsortie_1_tmp.bl_chiffre_en_ligne = row9.CBLLIG.equals("N") ? false : true;
								copyOfsortie_1_tmp.bl_chiffre_en_total = row9.CBLTOT.equals("N") ? false : true;
								copyOfsortie_1_tmp.chorus_service = row9.CCHORUS_SERVICE.equals("N") ? false : true;
								copyOfsortie_1_tmp.coef_majo_factu = new Float(row9.CMAJ);
								copyOfsortie_1_tmp.controle_cde = row9.CCONTR.equals("N") ? false : true;
								copyOfsortie_1_tmp.edition_pn_remise = row9.CEPNASR.equals("N") ? false : true;
								copyOfsortie_1_tmp.envoie_bl_mail = row9.CBLMAIL.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_bl_web = row9.CBLWEB.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_facture_mail = row9.CFACTMAIL.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_facture_web = row9.CFACTWEB.equals("O") ? true : false;
								copyOfsortie_1_tmp.facturation_releve = row9.CRELEVE;
								copyOfsortie_1_tmp.facture_chorus = row9.CFACT_CHORUS.equals("O") ? true : false;
								copyOfsortie_1_tmp.facture_edi = row9.CFACT_EDI.equals("N") ? false : true;
								copyOfsortie_1_tmp.gestion_fidelite = row9.CFIDEL.equals("O") ? true : false;
								copyOfsortie_1_tmp.gestion_reliquat = row9.CRELIQ.equals("O") ? true : false;
								copyOfsortie_1_tmp.internet = row9.CINTERNET.equals("O") ? true : false;
								copyOfsortie_1_tmp.nb_bon_liv = new Integer(row9.CBL);
								copyOfsortie_1_tmp.nombre_facture = Integer.parseInt(row9.CFACT);
								copyOfsortie_1_tmp.prix_net = row9.CPNAFF.equals("N") ? false : true;
								copyOfsortie_1_tmp.publipostage = row9.CPUBLIPOSTAGE.isBlank() ? false : true;
								copyOfsortie_1_tmp.idcli = row9.CREF;
								copyOfsortie_1 = copyOfsortie_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */

							/**
							 * [tMap_9 process_data_begin ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie_1"
							if (copyOfsortie_1 != null) {

								/**
								 * [tDBOutput_9 main ] start
								 */

								currentComponent = "tDBOutput_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie_1");
								}

								whetherReject_tDBOutput_9 = false;
								pstmt_tDBOutput_9.setInt(1, copyOfsortie_1.idparamclient);

								if (copyOfsortie_1.affacturage == null) {
									pstmt_tDBOutput_9.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(2, copyOfsortie_1.affacturage);
								}

								if (copyOfsortie_1.affichage == null) {
									pstmt_tDBOutput_9.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(3, copyOfsortie_1.affichage);
								}

								if (copyOfsortie_1.bl_chiffre_en_ligne == null) {
									pstmt_tDBOutput_9.setNull(4, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(4, copyOfsortie_1.bl_chiffre_en_ligne);
								}

								if (copyOfsortie_1.bl_chiffre_en_total == null) {
									pstmt_tDBOutput_9.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(5, copyOfsortie_1.bl_chiffre_en_total);
								}

								if (copyOfsortie_1.chorus_service == null) {
									pstmt_tDBOutput_9.setNull(6, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(6, copyOfsortie_1.chorus_service);
								}

								if (copyOfsortie_1.coef_majo_factu == null) {
									pstmt_tDBOutput_9.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_9.setFloat(7, copyOfsortie_1.coef_majo_factu);
								}

								if (copyOfsortie_1.controle_cde == null) {
									pstmt_tDBOutput_9.setNull(8, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(8, copyOfsortie_1.controle_cde);
								}

								if (copyOfsortie_1.edition_pn_remise == null) {
									pstmt_tDBOutput_9.setNull(9, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(9, copyOfsortie_1.edition_pn_remise);
								}

								if (copyOfsortie_1.envoie_bl_mail == null) {
									pstmt_tDBOutput_9.setNull(10, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(10, copyOfsortie_1.envoie_bl_mail);
								}

								if (copyOfsortie_1.envoie_bl_web == null) {
									pstmt_tDBOutput_9.setNull(11, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(11, copyOfsortie_1.envoie_bl_web);
								}

								if (copyOfsortie_1.envoie_facture_mail == null) {
									pstmt_tDBOutput_9.setNull(12, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(12, copyOfsortie_1.envoie_facture_mail);
								}

								if (copyOfsortie_1.envoie_facture_web == null) {
									pstmt_tDBOutput_9.setNull(13, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(13, copyOfsortie_1.envoie_facture_web);
								}

								if (copyOfsortie_1.facturation_releve == null) {
									pstmt_tDBOutput_9.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(14, copyOfsortie_1.facturation_releve);
								}

								if (copyOfsortie_1.facture_chorus == null) {
									pstmt_tDBOutput_9.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(15, copyOfsortie_1.facture_chorus);
								}

								if (copyOfsortie_1.facture_edi == null) {
									pstmt_tDBOutput_9.setNull(16, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(16, copyOfsortie_1.facture_edi);
								}

								if (copyOfsortie_1.gestion_fidelite == null) {
									pstmt_tDBOutput_9.setNull(17, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(17, copyOfsortie_1.gestion_fidelite);
								}

								if (copyOfsortie_1.gestion_reliquat == null) {
									pstmt_tDBOutput_9.setNull(18, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(18, copyOfsortie_1.gestion_reliquat);
								}

								if (copyOfsortie_1.internet == null) {
									pstmt_tDBOutput_9.setNull(19, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(19, copyOfsortie_1.internet);
								}

								if (copyOfsortie_1.nb_bon_liv == null) {
									pstmt_tDBOutput_9.setNull(20, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_9.setInt(20, copyOfsortie_1.nb_bon_liv);
								}

								if (copyOfsortie_1.nombre_facture == null) {
									pstmt_tDBOutput_9.setNull(21, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_9.setInt(21, copyOfsortie_1.nombre_facture);
								}

								if (copyOfsortie_1.prix_net == null) {
									pstmt_tDBOutput_9.setNull(22, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(22, copyOfsortie_1.prix_net);
								}

								if (copyOfsortie_1.publipostage == null) {
									pstmt_tDBOutput_9.setNull(23, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_9.setBoolean(23, copyOfsortie_1.publipostage);
								}

								if (copyOfsortie_1.idcli == null) {
									pstmt_tDBOutput_9.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(24, copyOfsortie_1.idcli);
								}

								pstmt_tDBOutput_9.addBatch();
								nb_line_tDBOutput_9++;

								batchSizeCounter_tDBOutput_9++;

								if ((batchSize_tDBOutput_9 > 0)
										&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
									try {
										int countSum_tDBOutput_9 = 0;

										for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										batchSizeCounter_tDBOutput_9 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
										java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
												sqle_tDBOutput_9 = null;
										String errormessage_tDBOutput_9;
										if (ne_tDBOutput_9 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_9 = new java.sql.SQLException(
													e_tDBOutput_9.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_9.getMessage(),
													ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(),
													ne_tDBOutput_9);
											errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
										} else {
											errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
										}

										int countSum_tDBOutput_9 = 0;
										for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										System.err.println(errormessage_tDBOutput_9);

									}
								}

								tos_count_tDBOutput_9++;

								/**
								 * [tDBOutput_9 main ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_end ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie_1"

							/**
							 * [tMap_9 process_data_end ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9 + deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED", nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED", nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie_1");
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
					if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_9")) != null) {
						pstmtToClose_tDBOutput_9.close();
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfsortieStruct implements routines.system.IPersistableRow<copyOfcopyOfsortieStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idvariable;

		public int getIdvariable() {
			return this.idvariable;
		}

		public String champ_libre_10char_1;

		public String getChamp_libre_10char_1() {
			return this.champ_libre_10char_1;
		}

		public String champ_libre_10char_2;

		public String getChamp_libre_10char_2() {
			return this.champ_libre_10char_2;
		}

		public String champ_libre_10char_3;

		public String getChamp_libre_10char_3() {
			return this.champ_libre_10char_3;
		}

		public String champ_libre_10char_4;

		public String getChamp_libre_10char_4() {
			return this.champ_libre_10char_4;
		}

		public String champ_libre_10char_5;

		public String getChamp_libre_10char_5() {
			return this.champ_libre_10char_5;
		}

		public String champ_libre_20char_1;

		public String getChamp_libre_20char_1() {
			return this.champ_libre_20char_1;
		}

		public String champ_libre_20char_2;

		public String getChamp_libre_20char_2() {
			return this.champ_libre_20char_2;
		}

		public String champ_libre_20char_3;

		public String getChamp_libre_20char_3() {
			return this.champ_libre_20char_3;
		}

		public String champ_libre_20char_4;

		public String getChamp_libre_20char_4() {
			return this.champ_libre_20char_4;
		}

		public String champ_libre_20char_5;

		public String getChamp_libre_20char_5() {
			return this.champ_libre_20char_5;
		}

		public Float champ_libre_6digits_1;

		public Float getChamp_libre_6digits_1() {
			return this.champ_libre_6digits_1;
		}

		public Float champ_libre_6digits_2;

		public Float getChamp_libre_6digits_2() {
			return this.champ_libre_6digits_2;
		}

		public Float champ_libre_6digits_3;

		public Float getChamp_libre_6digits_3() {
			return this.champ_libre_6digits_3;
		}

		public Float champ_libre_6digits_4;

		public Float getChamp_libre_6digits_4() {
			return this.champ_libre_6digits_4;
		}

		public Float champ_libre_6digits_5;

		public Float getChamp_libre_6digits_5() {
			return this.champ_libre_6digits_5;
		}

		public String date_1;

		public String getDate_1() {
			return this.date_1;
		}

		public String date_2;

		public String getDate_2() {
			return this.date_2;
		}

		public String date_3;

		public String getDate_3() {
			return this.date_3;
		}

		public String date_4;

		public String getDate_4() {
			return this.date_4;
		}

		public String date_5;

		public String getDate_5() {
			return this.date_5;
		}

		public String date_6;

		public String getDate_6() {
			return this.date_6;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idvariable;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfsortieStruct other = (copyOfcopyOfsortieStruct) obj;

			if (this.idvariable != other.idvariable)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfsortieStruct other) {

			other.idvariable = this.idvariable;
			other.champ_libre_10char_1 = this.champ_libre_10char_1;
			other.champ_libre_10char_2 = this.champ_libre_10char_2;
			other.champ_libre_10char_3 = this.champ_libre_10char_3;
			other.champ_libre_10char_4 = this.champ_libre_10char_4;
			other.champ_libre_10char_5 = this.champ_libre_10char_5;
			other.champ_libre_20char_1 = this.champ_libre_20char_1;
			other.champ_libre_20char_2 = this.champ_libre_20char_2;
			other.champ_libre_20char_3 = this.champ_libre_20char_3;
			other.champ_libre_20char_4 = this.champ_libre_20char_4;
			other.champ_libre_20char_5 = this.champ_libre_20char_5;
			other.champ_libre_6digits_1 = this.champ_libre_6digits_1;
			other.champ_libre_6digits_2 = this.champ_libre_6digits_2;
			other.champ_libre_6digits_3 = this.champ_libre_6digits_3;
			other.champ_libre_6digits_4 = this.champ_libre_6digits_4;
			other.champ_libre_6digits_5 = this.champ_libre_6digits_5;
			other.date_1 = this.date_1;
			other.date_2 = this.date_2;
			other.date_3 = this.date_3;
			other.date_4 = this.date_4;
			other.date_5 = this.date_5;
			other.date_6 = this.date_6;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfsortieStruct other) {

			other.idvariable = this.idvariable;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idvariable = dis.readInt();

					this.champ_libre_10char_1 = readString(dis);

					this.champ_libre_10char_2 = readString(dis);

					this.champ_libre_10char_3 = readString(dis);

					this.champ_libre_10char_4 = readString(dis);

					this.champ_libre_10char_5 = readString(dis);

					this.champ_libre_20char_1 = readString(dis);

					this.champ_libre_20char_2 = readString(dis);

					this.champ_libre_20char_3 = readString(dis);

					this.champ_libre_20char_4 = readString(dis);

					this.champ_libre_20char_5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_1 = null;
					} else {
						this.champ_libre_6digits_1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_2 = null;
					} else {
						this.champ_libre_6digits_2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_3 = null;
					} else {
						this.champ_libre_6digits_3 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_4 = null;
					} else {
						this.champ_libre_6digits_4 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_5 = null;
					} else {
						this.champ_libre_6digits_5 = dis.readFloat();
					}

					this.date_1 = readString(dis);

					this.date_2 = readString(dis);

					this.date_3 = readString(dis);

					this.date_4 = readString(dis);

					this.date_5 = readString(dis);

					this.date_6 = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idvariable);

				// String

				writeString(this.champ_libre_10char_1, dos);

				// String

				writeString(this.champ_libre_10char_2, dos);

				// String

				writeString(this.champ_libre_10char_3, dos);

				// String

				writeString(this.champ_libre_10char_4, dos);

				// String

				writeString(this.champ_libre_10char_5, dos);

				// String

				writeString(this.champ_libre_20char_1, dos);

				// String

				writeString(this.champ_libre_20char_2, dos);

				// String

				writeString(this.champ_libre_20char_3, dos);

				// String

				writeString(this.champ_libre_20char_4, dos);

				// String

				writeString(this.champ_libre_20char_5, dos);

				// Float

				if (this.champ_libre_6digits_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_1);
				}

				// Float

				if (this.champ_libre_6digits_2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_2);
				}

				// Float

				if (this.champ_libre_6digits_3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_3);
				}

				// Float

				if (this.champ_libre_6digits_4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_4);
				}

				// Float

				if (this.champ_libre_6digits_5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_5);
				}

				// String

				writeString(this.date_1, dos);

				// String

				writeString(this.date_2, dos);

				// String

				writeString(this.date_3, dos);

				// String

				writeString(this.date_4, dos);

				// String

				writeString(this.date_5, dos);

				// String

				writeString(this.date_6, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idvariable=" + String.valueOf(idvariable));
			sb.append(",champ_libre_10char_1=" + champ_libre_10char_1);
			sb.append(",champ_libre_10char_2=" + champ_libre_10char_2);
			sb.append(",champ_libre_10char_3=" + champ_libre_10char_3);
			sb.append(",champ_libre_10char_4=" + champ_libre_10char_4);
			sb.append(",champ_libre_10char_5=" + champ_libre_10char_5);
			sb.append(",champ_libre_20char_1=" + champ_libre_20char_1);
			sb.append(",champ_libre_20char_2=" + champ_libre_20char_2);
			sb.append(",champ_libre_20char_3=" + champ_libre_20char_3);
			sb.append(",champ_libre_20char_4=" + champ_libre_20char_4);
			sb.append(",champ_libre_20char_5=" + champ_libre_20char_5);
			sb.append(",champ_libre_6digits_1=" + String.valueOf(champ_libre_6digits_1));
			sb.append(",champ_libre_6digits_2=" + String.valueOf(champ_libre_6digits_2));
			sb.append(",champ_libre_6digits_3=" + String.valueOf(champ_libre_6digits_3));
			sb.append(",champ_libre_6digits_4=" + String.valueOf(champ_libre_6digits_4));
			sb.append(",champ_libre_6digits_5=" + String.valueOf(champ_libre_6digits_5));
			sb.append(",date_1=" + date_1);
			sb.append(",date_2=" + date_2);
			sb.append(",date_3=" + date_3);
			sb.append(",date_4=" + date_4);
			sb.append(",date_5=" + date_5);
			sb.append(",date_6=" + date_6);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortieStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idvariable, other.idvariable);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				copyOfcopyOfsortieStruct copyOfcopyOfsortie = new copyOfcopyOfsortieStruct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfsortie");
				}

				int tos_count_tDBOutput_10 = 0;

				String dbschema_tDBOutput_10 = null;
				dbschema_tDBOutput_10 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_10 = null;
				if (dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
					tableName_tDBOutput_10 = ("variable_temporaire");
				} else {
					tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("variable_temporaire");
				}

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;
				int rejectedCount_tDBOutput_10 = 0;

				boolean whetherReject_tDBOutput_10 = false;

				java.sql.Connection conn_tDBOutput_10 = null;
				String dbUser_tDBOutput_10 = null;

				conn_tDBOutput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_10 = 10000;
				int batchSizeCounter_tDBOutput_10 = 0;

				int count_tDBOutput_10 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
					stmtClear_tDBOutput_10.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_10 + "\"");
				}
				String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10
						+ "\" (\"idvariable\",\"champ_libre_10char_1\",\"champ_libre_10char_2\",\"champ_libre_10char_3\",\"champ_libre_10char_4\",\"champ_libre_10char_5\",\"champ_libre_20char_1\",\"champ_libre_20char_2\",\"champ_libre_20char_3\",\"champ_libre_20char_4\",\"champ_libre_20char_5\",\"champ_libre_6digits_1\",\"champ_libre_6digits_2\",\"champ_libre_6digits_3\",\"champ_libre_6digits_4\",\"champ_libre_6digits_5\",\"date_1\",\"date_2\",\"date_3\",\"date_4\",\"date_5\",\"date_6\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
				resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortieStruct copyOfcopyOfsortie_tmp = new copyOfcopyOfsortieStruct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_10 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row10Struct row10) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_10 = 0;

						columnIndexWithD_tFileInputDelimited_10 = 0;

						row10.CREF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 1;

						row10.CNOM = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 2;

						row10.CRUE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 3;

						row10.CAUX = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 4;

						row10.CCPTL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 5;

						row10.CVIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 6;

						row10.FILL01 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 7;

						row10.CQUAL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 8;

						row10.CCOM1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 9;

						row10.CCREP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 10;

						row10.CREMFI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 11;

						row10.CECHE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 12;

						row10.CECHJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 13;

						row10.CPAI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 14;

						row10.CCHAN = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 15;

						row10.CECHJ2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 16;

						row10.CMOD = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 17;

						row10.CBQ1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 18;

						row10.CBQ2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 19;

						row10.CBQ3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 20;

						row10.CBQ4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 21;

						row10.CBQ5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 22;

						row10.CBQ6 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 23;

						row10.CFACT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 24;

						row10.CBL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 25;

						row10.CESC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 26;

						row10.VARAD1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 27;

						row10.VARAD2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 28;

						row10.VARAD3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 29;

						row10.VARAD4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 30;

						row10.VARAD5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 31;

						row10.VARAD6 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 32;

						row10.VARA1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 33;

						row10.VARA2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 34;

						row10.VARA3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 35;

						row10.VARA4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 36;

						row10.VARA5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 37;

						row10.VARB1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 38;

						row10.VARB2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 39;

						row10.VARB3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 40;

						row10.VARB4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 41;

						row10.VARB5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 42;

						row10.VARN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 43;

						row10.VARN2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 44;

						row10.VARN3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 45;

						row10.VARN4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 46;

						row10.VARN5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 47;

						row10.CDATCRE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 48;

						row10.CTEL1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 49;

						row10.CTEL2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 50;

						row10.CTEX1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 51;

						row10.CTEX2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 52;

						row10.CDELMOY = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 53;

						row10.CAFFAIRE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 54;

						row10.CCPTFACT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 55;

						row10.CINTERNET = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 56;

						row10.CIBAN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 57;

						row10.CBIC_old = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 58;

						row10.CFIDEL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 59;

						row10.CRFA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 60;

						row10.CCOMREG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 61;

						row10.CAPE2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 62;

						row10.CIBAN72 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 63;

						row10.CIBAN8 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 64;

						row10.CIBAN9 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 65;

						row10.CBIC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 66;

						row10.CTRANSP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 67;

						row10.CFACTMAIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 68;

						row10.CBLMAIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 69;

						row10.CFACTWEB = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 70;

						row10.CBLWEB = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 71;

						row10.CPUBLIPOSTAGE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 72;

						row10.CFACT_EDI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 73;

						row10.CFACT_CHORUS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 74;

						row10.CFACTORING = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 75;

						row10.CCHORUS_SERVICE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 76;

						row10.CFIL14 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 77;

						row10.CTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 78;

						row10.FIL02 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 79;

						row10.CREJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 80;

						row10.CSECT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 81;

						row10.CTOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 82;

						row10.CCAN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 83;

						row10.CCAN2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 84;

						row10.CCAN3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 85;

						row10.CDATF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 86;

						row10.CCAT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 87;

						row10.CRESP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 88;

						row10.CAPE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 89;

						row10.CPREMC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 90;

						row10.CDERNC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 91;

						row10.CPROCC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 92;

						row10.CTYPEC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 93;

						row10.CSIRET = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 94;

						row10.CORIGIN = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 95;

						row10.CMOTCOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 96;

						row10.CCOMPTA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 97;

						row10.CAFFMEMO = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 98;

						row10.CFIL2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 99;

						row10.CPNAFF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row10Struct row10) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_10 = 0;

						columnIndexWithD_tFileInputDelimited_10 = 100;

						row10.CDEVTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 101;

						row10.CMINCOM = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 102;

						row10.CRELEVE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 103;

						row10.CRELIQ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 104;

						row10.CMAJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 105;

						row10.CECH = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 106;

						row10.CETIQ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 107;

						row10.CCOEF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 108;

						row10.CARROND = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 109;

						row10.CENCOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 110;

						row10.CNIVREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 111;

						row10.CBLOCAG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 112;

						row10.CDATREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 113;

						row10.CRESCO = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 114;

						row10.CRESFI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 115;

						row10.CSFAC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 116;

						row10.CDATENC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 117;

						row10.CDATSFA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 118;

						row10.CCONTR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 119;

						row10.CDEREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 120;

						row10.CPAYS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 121;

						row10.CBLTOT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 122;

						row10.CBLLIG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 123;

						row10.CENCDIS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 124;

						row10.CNCEE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 125;

						row10.CNSFAC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 126;

						row10.CPSRDAT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 127;

						row10.CEPNASR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 128;

						row10.CCODTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 129;

						row10.CDEVISE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row10Struct row10) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_10, row10);

						valueToConn_1(fid_tFileInputDelimited_10, row10);

					}

				}
				RowHelper_tFileInputDelimited_10 rowHelper_tFileInputDelimited_10 = new RowHelper_tFileInputDelimited_10();

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try {

					Object filename_tFileInputDelimited_10 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0 || random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_10, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row10 = new row10Struct();
						try {

							rowHelper_tFileInputDelimited_10.valueToConn(fid_tFileInputDelimited_10, row10);

							if (rowstate_tFileInputDelimited_10.getException() != null) {
								throw rowstate_tFileInputDelimited_10.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */

						/**
						 * [tFileInputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfsortie = null;

// # Output table : 'copyOfcopyOfsortie'
								copyOfcopyOfsortie_tmp.idvariable = Numeric.sequence("s5", 1, 1);
								copyOfcopyOfsortie_tmp.champ_libre_10char_1 = row10.VARB1;
								copyOfcopyOfsortie_tmp.champ_libre_10char_2 = row10.VARB2;
								copyOfcopyOfsortie_tmp.champ_libre_10char_3 = row10.VARB3;
								copyOfcopyOfsortie_tmp.champ_libre_10char_4 = row10.VARB4;
								copyOfcopyOfsortie_tmp.champ_libre_10char_5 = row10.VARB5;
								copyOfcopyOfsortie_tmp.champ_libre_20char_1 = row10.VARA1;
								copyOfcopyOfsortie_tmp.champ_libre_20char_2 = row10.VARA2;
								copyOfcopyOfsortie_tmp.champ_libre_20char_3 = row10.VARA3;
								copyOfcopyOfsortie_tmp.champ_libre_20char_4 = row10.VARA4;
								copyOfcopyOfsortie_tmp.champ_libre_20char_5 = row10.VARA5;
								copyOfcopyOfsortie_tmp.champ_libre_6digits_1 = new Float(row10.VARN1);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_2 = new Float(row10.VARN2);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_3 = new Float(row10.VARN3);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_4 = new Float(row10.VARN4);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_5 = new Float(row10.VARN5);
								copyOfcopyOfsortie_tmp.date_1 = row10.VARAD1;
								copyOfcopyOfsortie_tmp.date_2 = row10.VARAD2;
								copyOfcopyOfsortie_tmp.date_3 = row10.VARAD3;
								copyOfcopyOfsortie_tmp.date_4 = row10.VARAD4;
								copyOfcopyOfsortie_tmp.date_5 = row10.VARAD5;
								copyOfcopyOfsortie_tmp.date_6 = row10.VARAD6;
								copyOfcopyOfsortie_tmp.idcli = row10.CREF;
								copyOfcopyOfsortie = copyOfcopyOfsortie_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */

							/**
							 * [tMap_10 process_data_begin ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfsortie"
							if (copyOfcopyOfsortie != null) {

								/**
								 * [tDBOutput_10 main ] start
								 */

								currentComponent = "tDBOutput_10";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfsortie");
								}

								whetherReject_tDBOutput_10 = false;
								pstmt_tDBOutput_10.setInt(1, copyOfcopyOfsortie.idvariable);

								if (copyOfcopyOfsortie.champ_libre_10char_1 == null) {
									pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(2, copyOfcopyOfsortie.champ_libre_10char_1);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_2 == null) {
									pstmt_tDBOutput_10.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(3, copyOfcopyOfsortie.champ_libre_10char_2);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_3 == null) {
									pstmt_tDBOutput_10.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(4, copyOfcopyOfsortie.champ_libre_10char_3);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_4 == null) {
									pstmt_tDBOutput_10.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(5, copyOfcopyOfsortie.champ_libre_10char_4);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_5 == null) {
									pstmt_tDBOutput_10.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(6, copyOfcopyOfsortie.champ_libre_10char_5);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_1 == null) {
									pstmt_tDBOutput_10.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(7, copyOfcopyOfsortie.champ_libre_20char_1);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_2 == null) {
									pstmt_tDBOutput_10.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(8, copyOfcopyOfsortie.champ_libre_20char_2);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_3 == null) {
									pstmt_tDBOutput_10.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(9, copyOfcopyOfsortie.champ_libre_20char_3);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_4 == null) {
									pstmt_tDBOutput_10.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(10, copyOfcopyOfsortie.champ_libre_20char_4);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_5 == null) {
									pstmt_tDBOutput_10.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(11, copyOfcopyOfsortie.champ_libre_20char_5);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_1 == null) {
									pstmt_tDBOutput_10.setNull(12, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_10.setFloat(12, copyOfcopyOfsortie.champ_libre_6digits_1);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_2 == null) {
									pstmt_tDBOutput_10.setNull(13, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_10.setFloat(13, copyOfcopyOfsortie.champ_libre_6digits_2);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_3 == null) {
									pstmt_tDBOutput_10.setNull(14, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_10.setFloat(14, copyOfcopyOfsortie.champ_libre_6digits_3);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_4 == null) {
									pstmt_tDBOutput_10.setNull(15, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_10.setFloat(15, copyOfcopyOfsortie.champ_libre_6digits_4);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_5 == null) {
									pstmt_tDBOutput_10.setNull(16, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_10.setFloat(16, copyOfcopyOfsortie.champ_libre_6digits_5);
								}

								if (copyOfcopyOfsortie.date_1 == null) {
									pstmt_tDBOutput_10.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(17, copyOfcopyOfsortie.date_1);
								}

								if (copyOfcopyOfsortie.date_2 == null) {
									pstmt_tDBOutput_10.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(18, copyOfcopyOfsortie.date_2);
								}

								if (copyOfcopyOfsortie.date_3 == null) {
									pstmt_tDBOutput_10.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(19, copyOfcopyOfsortie.date_3);
								}

								if (copyOfcopyOfsortie.date_4 == null) {
									pstmt_tDBOutput_10.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(20, copyOfcopyOfsortie.date_4);
								}

								if (copyOfcopyOfsortie.date_5 == null) {
									pstmt_tDBOutput_10.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(21, copyOfcopyOfsortie.date_5);
								}

								if (copyOfcopyOfsortie.date_6 == null) {
									pstmt_tDBOutput_10.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(22, copyOfcopyOfsortie.date_6);
								}

								if (copyOfcopyOfsortie.idcli == null) {
									pstmt_tDBOutput_10.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(23, copyOfcopyOfsortie.idcli);
								}

								pstmt_tDBOutput_10.addBatch();
								nb_line_tDBOutput_10++;

								batchSizeCounter_tDBOutput_10++;

								if ((batchSize_tDBOutput_10 > 0)
										&& (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
									try {
										int countSum_tDBOutput_10 = 0;

										for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										batchSizeCounter_tDBOutput_10 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
										java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),
												sqle_tDBOutput_10 = null;
										String errormessage_tDBOutput_10;
										if (ne_tDBOutput_10 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_10 = new java.sql.SQLException(
													e_tDBOutput_10.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_10.getMessage(),
													ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(),
													ne_tDBOutput_10);
											errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
										} else {
											errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
										}

										int countSum_tDBOutput_10 = 0;
										for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										System.err.println(errormessage_tDBOutput_10);

									}
								}

								tos_count_tDBOutput_10++;

								/**
								 * [tDBOutput_10 main ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_end ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfsortie"

							/**
							 * [tMap_10 process_data_end ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					int countSum_tDBOutput_10 = 0;
					if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {

						for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}

					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

				} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
					java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(), sqle_tDBOutput_10 = null;
					String errormessage_tDBOutput_10;
					if (ne_tDBOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_10 = new java.sql.SQLException(
								e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(),
								ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
						errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
					} else {
						errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
					}

					int countSum_tDBOutput_10 = 0;
					for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					System.err.println(errormessage_tDBOutput_10);

				}

				if (pstmt_tDBOutput_10 != null) {

					pstmt_tDBOutput_10.close();
					resourceMap.remove("pstmt_tDBOutput_10");
				}
				resourceMap.put("statementClosed_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10 + deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED", nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED", nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfsortie");
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tFileInputDelimited_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
					if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_10")) != null) {
						pstmtToClose_tDBOutput_10.close();
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfsortie_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfsortie_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idtypcon;

		public int getIdtypcon() {
			return this.idtypcon;
		}

		public String date_dernier_contact;

		public String getDate_dernier_contact() {
			return this.date_dernier_contact;
		}

		public String date_premier_contact;

		public String getDate_premier_contact() {
			return this.date_premier_contact;
		}

		public String date_prochain_contact;

		public String getDate_prochain_contact() {
			return this.date_prochain_contact;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idtypcon;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfsortie_0Struct other = (copyOfcopyOfsortie_0Struct) obj;

			if (this.idtypcon != other.idtypcon)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfsortie_0Struct other) {

			other.idtypcon = this.idtypcon;
			other.date_dernier_contact = this.date_dernier_contact;
			other.date_premier_contact = this.date_premier_contact;
			other.date_prochain_contact = this.date_prochain_contact;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfsortie_0Struct other) {

			other.idtypcon = this.idtypcon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idtypcon = dis.readInt();

					this.date_dernier_contact = readString(dis);

					this.date_premier_contact = readString(dis);

					this.date_prochain_contact = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtypcon);

				// String

				writeString(this.date_dernier_contact, dos);

				// String

				writeString(this.date_premier_contact, dos);

				// String

				writeString(this.date_prochain_contact, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtypcon=" + String.valueOf(idtypcon));
			sb.append(",date_dernier_contact=" + date_dernier_contact);
			sb.append(",date_premier_contact=" + date_premier_contact);
			sb.append(",date_prochain_contact=" + date_prochain_contact);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtypcon, other.idtypcon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				copyOfcopyOfsortie_0Struct copyOfcopyOfsortie_0 = new copyOfcopyOfsortie_0Struct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfsortie_0");
				}

				int tos_count_tDBOutput_11 = 0;

				String dbschema_tDBOutput_11 = null;
				dbschema_tDBOutput_11 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_11 = null;
				if (dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
					tableName_tDBOutput_11 = ("type_contact");
				} else {
					tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("type_contact");
				}

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;
				int rejectedCount_tDBOutput_11 = 0;

				boolean whetherReject_tDBOutput_11 = false;

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbUser_tDBOutput_11 = null;

				conn_tDBOutput_11 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_11 = 10000;
				int batchSizeCounter_tDBOutput_11 = 0;

				int count_tDBOutput_11 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
					stmtClear_tDBOutput_11.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_11 + "\"");
				}
				String insert_tDBOutput_11 = "INSERT INTO \"" + tableName_tDBOutput_11
						+ "\" (\"idtypcon\",\"date_dernier_contact\",\"date_premier_contact\",\"date_prochain_contact\",\"idcli\") VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
				resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_11 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortie_0Struct copyOfcopyOfsortie_0_tmp = new copyOfcopyOfsortie_0Struct();
// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_11 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row11Struct row11) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 0;

						row11.CREF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 1;

						row11.CNOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 2;

						row11.CRUE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 3;

						row11.CAUX = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 4;

						row11.CCPTL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 5;

						row11.CVIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 6;

						row11.FILL01 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 7;

						row11.CQUAL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 8;

						row11.CCOM1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 9;

						row11.CCREP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 10;

						row11.CREMFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 11;

						row11.CECHE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 12;

						row11.CECHJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 13;

						row11.CPAI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 14;

						row11.CCHAN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 15;

						row11.CECHJ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 16;

						row11.CMOD = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 17;

						row11.CBQ1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 18;

						row11.CBQ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 19;

						row11.CBQ3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 20;

						row11.CBQ4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 21;

						row11.CBQ5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 22;

						row11.CBQ6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 23;

						row11.CFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 24;

						row11.CBL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 25;

						row11.CESC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 26;

						row11.VARAD1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 27;

						row11.VARAD2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 28;

						row11.VARAD3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 29;

						row11.VARAD4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 30;

						row11.VARAD5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 31;

						row11.VARAD6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 32;

						row11.VARA1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 33;

						row11.VARA2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 34;

						row11.VARA3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 35;

						row11.VARA4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 36;

						row11.VARA5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 37;

						row11.VARB1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 38;

						row11.VARB2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 39;

						row11.VARB3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 40;

						row11.VARB4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 41;

						row11.VARB5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 42;

						row11.VARN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 43;

						row11.VARN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 44;

						row11.VARN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 45;

						row11.VARN4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 46;

						row11.VARN5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 47;

						row11.CDATCRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 48;

						row11.CTEL1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 49;

						row11.CTEL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 50;

						row11.CTEX1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 51;

						row11.CTEX2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 52;

						row11.CDELMOY = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 53;

						row11.CAFFAIRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 54;

						row11.CCPTFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 55;

						row11.CINTERNET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 56;

						row11.CIBAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 57;

						row11.CBIC_old = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 58;

						row11.CFIDEL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 59;

						row11.CRFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 60;

						row11.CCOMREG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 61;

						row11.CAPE2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 62;

						row11.CIBAN72 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 63;

						row11.CIBAN8 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 64;

						row11.CIBAN9 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 65;

						row11.CBIC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 66;

						row11.CTRANSP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 67;

						row11.CFACTMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 68;

						row11.CBLMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 69;

						row11.CFACTWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 70;

						row11.CBLWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 71;

						row11.CPUBLIPOSTAGE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 72;

						row11.CFACT_EDI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 73;

						row11.CFACT_CHORUS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 74;

						row11.CFACTORING = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 75;

						row11.CCHORUS_SERVICE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 76;

						row11.CFIL14 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 77;

						row11.CTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 78;

						row11.FIL02 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 79;

						row11.CREJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 80;

						row11.CSECT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 81;

						row11.CTOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 82;

						row11.CCAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 83;

						row11.CCAN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 84;

						row11.CCAN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 85;

						row11.CDATF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 86;

						row11.CCAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 87;

						row11.CRESP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 88;

						row11.CAPE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 89;

						row11.CPREMC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 90;

						row11.CDERNC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 91;

						row11.CPROCC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 92;

						row11.CTYPEC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 93;

						row11.CSIRET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 94;

						row11.CORIGIN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 95;

						row11.CMOTCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 96;

						row11.CCOMPTA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 97;

						row11.CAFFMEMO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 98;

						row11.CFIL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 99;

						row11.CPNAFF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row11Struct row11) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 100;

						row11.CDEVTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 101;

						row11.CMINCOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 102;

						row11.CRELEVE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 103;

						row11.CRELIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 104;

						row11.CMAJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 105;

						row11.CECH = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 106;

						row11.CETIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 107;

						row11.CCOEF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 108;

						row11.CARROND = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 109;

						row11.CENCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 110;

						row11.CNIVREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 111;

						row11.CBLOCAG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 112;

						row11.CDATREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 113;

						row11.CRESCO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 114;

						row11.CRESFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 115;

						row11.CSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 116;

						row11.CDATENC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 117;

						row11.CDATSFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 118;

						row11.CCONTR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 119;

						row11.CDEREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 120;

						row11.CPAYS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 121;

						row11.CBLTOT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 122;

						row11.CBLLIG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 123;

						row11.CENCDIS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 124;

						row11.CNCEE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 125;

						row11.CNSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 126;

						row11.CPSRDAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 127;

						row11.CEPNASR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 128;

						row11.CCODTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 129;

						row11.CDEVISE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row11Struct row11) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_11, row11);

						valueToConn_1(fid_tFileInputDelimited_11, row11);

					}

				}
				RowHelper_tFileInputDelimited_11 rowHelper_tFileInputDelimited_11 = new RowHelper_tFileInputDelimited_11();

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try {

					Object filename_tFileInputDelimited_11 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0 || random_value_tFileInputDelimited_11 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_11, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();

						row11 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row11 = new row11Struct();
						try {

							rowHelper_tFileInputDelimited_11.valueToConn(fid_tFileInputDelimited_11, row11);

							if (rowstate_tFileInputDelimited_11.getException() != null) {
								throw rowstate_tFileInputDelimited_11.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */

						/**
						 * [tFileInputDelimited_11 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_begin ] stop
						 */
// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMap_11 main ] start
							 */

							currentComponent = "tMap_11";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_11 = false;
							boolean mainRowRejected_tMap_11 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfsortie_0 = null;

// # Output table : 'copyOfcopyOfsortie_0'
								copyOfcopyOfsortie_0_tmp.idtypcon = Numeric.sequence("s6", 1, 1);
								copyOfcopyOfsortie_0_tmp.date_dernier_contact = row11.CDERNC;
								copyOfcopyOfsortie_0_tmp.date_premier_contact = row11.CPREMC;
								copyOfcopyOfsortie_0_tmp.date_prochain_contact = row11.CPROCC;
								copyOfcopyOfsortie_0_tmp.idcli = row11.CREF;
								copyOfcopyOfsortie_0 = copyOfcopyOfsortie_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_11 = false;

							tos_count_tMap_11++;

							/**
							 * [tMap_11 main ] stop
							 */

							/**
							 * [tMap_11 process_data_begin ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfsortie_0"
							if (copyOfcopyOfsortie_0 != null) {

								/**
								 * [tDBOutput_11 main ] start
								 */

								currentComponent = "tDBOutput_11";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfsortie_0");
								}

								whetherReject_tDBOutput_11 = false;
								pstmt_tDBOutput_11.setInt(1, copyOfcopyOfsortie_0.idtypcon);

								if (copyOfcopyOfsortie_0.date_dernier_contact == null) {
									pstmt_tDBOutput_11.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(2, copyOfcopyOfsortie_0.date_dernier_contact);
								}

								if (copyOfcopyOfsortie_0.date_premier_contact == null) {
									pstmt_tDBOutput_11.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(3, copyOfcopyOfsortie_0.date_premier_contact);
								}

								if (copyOfcopyOfsortie_0.date_prochain_contact == null) {
									pstmt_tDBOutput_11.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(4, copyOfcopyOfsortie_0.date_prochain_contact);
								}

								if (copyOfcopyOfsortie_0.idcli == null) {
									pstmt_tDBOutput_11.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(5, copyOfcopyOfsortie_0.idcli);
								}

								pstmt_tDBOutput_11.addBatch();
								nb_line_tDBOutput_11++;

								batchSizeCounter_tDBOutput_11++;

								if ((batchSize_tDBOutput_11 > 0)
										&& (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
									try {
										int countSum_tDBOutput_11 = 0;

										for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
											countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
													: countEach_tDBOutput_11);
										}

										insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

										batchSizeCounter_tDBOutput_11 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_11) {
										java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),
												sqle_tDBOutput_11 = null;
										String errormessage_tDBOutput_11;
										if (ne_tDBOutput_11 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_11 = new java.sql.SQLException(
													e_tDBOutput_11.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_11.getMessage(),
													ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(),
													ne_tDBOutput_11);
											errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
										} else {
											errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
										}

										int countSum_tDBOutput_11 = 0;
										for (int countEach_tDBOutput_11 : e_tDBOutput_11.getUpdateCounts()) {
											countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
													: countEach_tDBOutput_11);
										}

										insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

										System.err.println(errormessage_tDBOutput_11);

									}
								}

								tos_count_tDBOutput_11++;

								/**
								 * [tDBOutput_11 main ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_end ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfsortie_0"

							/**
							 * [tMap_11 process_data_end ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_11 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					int countSum_tDBOutput_11 = 0;
					if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}

					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

				} catch (java.sql.BatchUpdateException e_tDBOutput_11) {
					java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(), sqle_tDBOutput_11 = null;
					String errormessage_tDBOutput_11;
					if (ne_tDBOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_11 = new java.sql.SQLException(
								e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(),
								ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
						errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
					} else {
						errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
					}

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e_tDBOutput_11.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					System.err.println(errormessage_tDBOutput_11);

				}

				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();
					resourceMap.remove("pstmt_tDBOutput_11");
				}
				resourceMap.put("statementClosed_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11 + deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED", nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED", nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfsortie_0");
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_11 finally ] start
				 */

				currentComponent = "tFileInputDelimited_11";

				/**
				 * [tFileInputDelimited_11 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
					if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_11")) != null) {
						pstmtToClose_tDBOutput_11.close();
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_3Struct implements routines.system.IPersistableRow<copyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddossier;

		public String getIddossier() {
			return this.iddossier;
		}

		public String contenu;

		public String getContenu() {
			return this.contenu;
		}

		public String date_creation;

		public String getDate_creation() {
			return this.date_creation;
		}

		public Long numero_ligne;

		public Long getNumero_ligne() {
			return this.numero_ligne;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iddossier == null) ? 0 : this.iddossier.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_3Struct other = (copyOfmain_3Struct) obj;

			if (this.iddossier == null) {
				if (other.iddossier != null)
					return false;

			} else if (!this.iddossier.equals(other.iddossier))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_3Struct other) {

			other.iddossier = this.iddossier;
			other.contenu = this.contenu;
			other.date_creation = this.date_creation;
			other.numero_ligne = this.numero_ligne;
			other.titre = this.titre;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfmain_3Struct other) {

			other.iddossier = this.iddossier;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.iddossier = readString(dis);

					this.contenu = readString(dis);

					this.date_creation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numero_ligne = null;
					} else {
						this.numero_ligne = dis.readLong();
					}

					this.titre = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddossier, dos);

				// String

				writeString(this.contenu, dos);

				// String

				writeString(this.date_creation, dos);

				// Long

				if (this.numero_ligne == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.numero_ligne);
				}

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddossier=" + iddossier);
			sb.append(",contenu=" + contenu);
			sb.append(",date_creation=" + date_creation);
			sb.append(",numero_ligne=" + String.valueOf(numero_ligne));
			sb.append(",titre=" + titre);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddossier, other.iddossier);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CARCLI;

		public String getCARCLI() {
			return this.CARCLI;
		}

		public String CARNUM;

		public String getCARNUM() {
			return this.CARNUM;
		}

		public String CARLIG;

		public String getCARLIG() {
			return this.CARLIG;
		}

		public String CARJJ;

		public String getCARJJ() {
			return this.CARJJ;
		}

		public String CARMM;

		public String getCARMM() {
			return this.CARMM;
		}

		public String CARAA;

		public String getCARAA() {
			return this.CARAA;
		}

		public String CARLIB;

		public String getCARLIB() {
			return this.CARLIB;
		}

		public String CARRCLI;

		public String getCARRCLI() {
			return this.CARRCLI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CARCLI = readString(dis);

					this.CARNUM = readString(dis);

					this.CARLIG = readString(dis);

					this.CARJJ = readString(dis);

					this.CARMM = readString(dis);

					this.CARAA = readString(dis);

					this.CARLIB = readString(dis);

					this.CARRCLI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CARCLI, dos);

				// String

				writeString(this.CARNUM, dos);

				// String

				writeString(this.CARLIG, dos);

				// String

				writeString(this.CARJJ, dos);

				// String

				writeString(this.CARMM, dos);

				// String

				writeString(this.CARAA, dos);

				// String

				writeString(this.CARLIB, dos);

				// String

				writeString(this.CARRCLI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CARCLI=" + CARCLI);
			sb.append(",CARNUM=" + CARNUM);
			sb.append(",CARLIG=" + CARLIG);
			sb.append(",CARJJ=" + CARJJ);
			sb.append(",CARMM=" + CARMM);
			sb.append(",CARAA=" + CARAA);
			sb.append(",CARLIB=" + CARLIB);
			sb.append(",CARRCLI=" + CARRCLI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				copyOfmain_3Struct copyOfmain_3 = new copyOfmain_3Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_3");
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = ("dossier");
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dossier");
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtClear_tDBOutput_6.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_6 + "\"");
				}
				String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6
						+ "\" (\"iddossier\",\"contenu\",\"date_creation\",\"numero_ligne\",\"titre\",\"idcli\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_3Struct copyOfmain_3_tmp = new copyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "C:/DEV/Data/Base Montauban/dossisers_clients.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/dossisers_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row6.CARCLI = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row6.CARNUM = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row6.CARLIG = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							row6.CARJJ = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							row6.CARMM = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 5;

							row6.CARAA = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 6;

							row6.CARLIB = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 7;

							row6.CARRCLI = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_3 = null;

// # Output table : 'copyOfmain_3'
								copyOfmain_3_tmp.iddossier = row6.CARCLI + row6.CARNUM + row6.CARLIG;
								copyOfmain_3_tmp.contenu = row6.CARLIB;
								copyOfmain_3_tmp.date_creation = row6.CARJJ + new String("/") + row6.CARMM
										+ new String("/") + row6.CARAA;
								copyOfmain_3_tmp.numero_ligne = row6.CARLIG.isBlank() ? null : new Long(row6.CARLIG);
								copyOfmain_3_tmp.titre = row6.CARLIG.isEmpty() ? row6.CARLIB : null;
								copyOfmain_3_tmp.idcli = row6.CARCLI;
								copyOfmain_3 = copyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */

							/**
							 * [tMap_7 process_data_begin ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_3"
							if (copyOfmain_3 != null) {

								/**
								 * [tDBOutput_6 main ] start
								 */

								currentComponent = "tDBOutput_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_3");
								}

								whetherReject_tDBOutput_6 = false;
								if (copyOfmain_3.iddossier == null) {
									pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(1, copyOfmain_3.iddossier);
								}

								if (copyOfmain_3.contenu == null) {
									pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(2, copyOfmain_3.contenu);
								}

								if (copyOfmain_3.date_creation == null) {
									pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(3, copyOfmain_3.date_creation);
								}

								if (copyOfmain_3.numero_ligne == null) {
									pstmt_tDBOutput_6.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_6.setLong(4, copyOfmain_3.numero_ligne);
								}

								if (copyOfmain_3.titre == null) {
									pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(5, copyOfmain_3.titre);
								}

								if (copyOfmain_3.idcli == null) {
									pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(6, copyOfmain_3.idcli);
								}

								pstmt_tDBOutput_6.addBatch();
								nb_line_tDBOutput_6++;

								batchSizeCounter_tDBOutput_6++;

								if ((batchSize_tDBOutput_6 > 0)
										&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
									try {
										int countSum_tDBOutput_6 = 0;

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										batchSizeCounter_tDBOutput_6 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
										java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),
												sqle_tDBOutput_6 = null;
										String errormessage_tDBOutput_6;
										if (ne_tDBOutput_6 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_6 = new java.sql.SQLException(
													e_tDBOutput_6.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_6.getMessage(),
													ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(),
													ne_tDBOutput_6);
											errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
										} else {
											errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
										}

										int countSum_tDBOutput_6 = 0;
										for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										System.err.println(errormessage_tDBOutput_6);

									}
								}

								tos_count_tDBOutput_6++;

								/**
								 * [tDBOutput_6 main ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_end ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_3"

							/**
							 * [tMap_7 process_data_end ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/dossisers_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_3");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_3_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_3_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_3_1Struct other = (copyOfcopyOfcopyOfmain_3_1Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom = this.nom;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom=" + nom);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfmain_3_1 = new copyOfcopyOfcopyOfmain_3_1Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_3_1");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("contact");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
				}
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfmain_3_1_tmp = new copyOfcopyOfcopyOfmain_3_1Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_6 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6,
							row7Struct row7) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_6 = 0;

						columnIndexWithD_tFileInputDelimited_6 = 0;

						row7.CREF = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 1;

						row7.CNOM = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 2;

						row7.CRUE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 3;

						row7.CAUX = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 4;

						row7.CCPTL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 5;

						row7.CVIL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 6;

						row7.FILL01 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 7;

						row7.CQUAL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 8;

						row7.CCOM1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 9;

						row7.CCREP = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 10;

						row7.CREMFI = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 11;

						row7.CECHE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 12;

						row7.CECHJ = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 13;

						row7.CPAI = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 14;

						row7.CCHAN = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 15;

						row7.CECHJ2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 16;

						row7.CMOD = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 17;

						row7.CBQ1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 18;

						row7.CBQ2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 19;

						row7.CBQ3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 20;

						row7.CBQ4 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 21;

						row7.CBQ5 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 22;

						row7.CBQ6 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 23;

						row7.CFACT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 24;

						row7.CBL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 25;

						row7.CESC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 26;

						row7.VARAD1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 27;

						row7.VARAD2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 28;

						row7.VARAD3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 29;

						row7.VARAD4 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 30;

						row7.VARAD5 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 31;

						row7.VARAD6 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 32;

						row7.VARA1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 33;

						row7.VARA2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 34;

						row7.VARA3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 35;

						row7.VARA4 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 36;

						row7.VARA5 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 37;

						row7.VARB1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 38;

						row7.VARB2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 39;

						row7.VARB3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 40;

						row7.VARB4 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 41;

						row7.VARB5 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 42;

						row7.VARN1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 43;

						row7.VARN2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 44;

						row7.VARN3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 45;

						row7.VARN4 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 46;

						row7.VARN5 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 47;

						row7.CDATCRE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 48;

						row7.CTEL1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 49;

						row7.CTEL2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 50;

						row7.CTEX1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 51;

						row7.CTEX2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 52;

						row7.CDELMOY = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 53;

						row7.CAFFAIRE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 54;

						row7.CCPTFACT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 55;

						row7.CINTERNET = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 56;

						row7.CIBAN1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 57;

						row7.CBIC_old = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 58;

						row7.CFIDEL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 59;

						row7.CRFA = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 60;

						row7.CCOMREG = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 61;

						row7.CAPE2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 62;

						row7.CIBAN72 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 63;

						row7.CIBAN8 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 64;

						row7.CIBAN9 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 65;

						row7.CBIC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 66;

						row7.CTRANSP = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 67;

						row7.CFACTMAIL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 68;

						row7.CBLMAIL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 69;

						row7.CFACTWEB = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 70;

						row7.CBLWEB = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 71;

						row7.CPUBLIPOSTAGE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 72;

						row7.CFACT_EDI = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 73;

						row7.CFACT_CHORUS = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 74;

						row7.CFACTORING = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 75;

						row7.CCHORUS_SERVICE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 76;

						row7.CFIL14 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 77;

						row7.CTAR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 78;

						row7.FIL02 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 79;

						row7.CREJ = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 80;

						row7.CSECT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 81;

						row7.CTOUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 82;

						row7.CCAN1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 83;

						row7.CCAN2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 84;

						row7.CCAN3 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 85;

						row7.CDATF = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 86;

						row7.CCAT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 87;

						row7.CRESP = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 88;

						row7.CAPE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 89;

						row7.CPREMC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 90;

						row7.CDERNC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 91;

						row7.CPROCC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 92;

						row7.CTYPEC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 93;

						row7.CSIRET = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 94;

						row7.CORIGIN = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 95;

						row7.CMOTCOUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 96;

						row7.CCOMPTA = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 97;

						row7.CAFFMEMO = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 98;

						row7.CFIL2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 99;

						row7.CPNAFF = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6,
							row7Struct row7) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_6 = 0;

						columnIndexWithD_tFileInputDelimited_6 = 100;

						row7.CDEVTAR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 101;

						row7.CMINCOM = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 102;

						row7.CRELEVE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 103;

						row7.CRELIQ = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 104;

						row7.CMAJ = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 105;

						row7.CECH = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 106;

						row7.CETIQ = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 107;

						row7.CCOEF = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 108;

						row7.CARROND = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 109;

						row7.CENCOUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 110;

						row7.CNIVREL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 111;

						row7.CBLOCAG = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 112;

						row7.CDATREL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 113;

						row7.CRESCO = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 114;

						row7.CRESFI = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 115;

						row7.CSFAC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 116;

						row7.CDATENC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 117;

						row7.CDATSFA = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 118;

						row7.CCONTR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 119;

						row7.CDEREL = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 120;

						row7.CPAYS = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 121;

						row7.CBLTOT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 122;

						row7.CBLLIG = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 123;

						row7.CENCDIS = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 124;

						row7.CNCEE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 125;

						row7.CNSFAC = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 126;

						row7.CPSRDAT = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 127;

						row7.CEPNASR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 128;

						row7.CCODTAR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

						columnIndexWithD_tFileInputDelimited_6 = 129;

						row7.CDEVISE = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6,
							row7Struct row7) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_6, row7);

						valueToConn_1(fid_tFileInputDelimited_6, row7);

					}

				}
				RowHelper_tFileInputDelimited_6 rowHelper_tFileInputDelimited_6 = new RowHelper_tFileInputDelimited_6();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try {

					Object filename_tFileInputDelimited_6 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0 || random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_6, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						row7 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row7 = new row7Struct();
						try {

							rowHelper_tFileInputDelimited_6.valueToConn(fid_tFileInputDelimited_6, row7);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_3_1 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_3_1'
								copyOfcopyOfcopyOfmain_3_1_tmp.idcontact = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfcopyOfmain_3_1_tmp.principal = true;
								copyOfcopyOfcopyOfmain_3_1_tmp.fax = row7.CTEX2;
								copyOfcopyOfcopyOfmain_3_1_tmp.fonction = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.internet = row7.CINTERNET;
								copyOfcopyOfcopyOfmain_3_1_tmp.login = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.mail = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.mail_validateur = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.niveau_validateur = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom = row7.CNOM;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_responsable = row7.CRESP;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_commerc = row7.CRESCO;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_financier = row7.CRESFI;
								copyOfcopyOfcopyOfmain_3_1_tmp.password = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.portable = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.rang = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.service = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.telephone = row7.CTEL1;
								copyOfcopyOfcopyOfmain_3_1_tmp.telephonebis = row7.CTEL2;
								copyOfcopyOfcopyOfmain_3_1_tmp.idadresse_livraison = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.idcli = row7.CREF;
								copyOfcopyOfcopyOfmain_3_1_tmp.idfournisseur = null;
								copyOfcopyOfcopyOfmain_3_1 = copyOfcopyOfcopyOfmain_3_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_3_1"
							if (copyOfcopyOfcopyOfmain_3_1 != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_3_1");
								}

								whetherReject_tDBOutput_3 = false;
								pstmt_tDBOutput_3.setInt(1, copyOfcopyOfcopyOfmain_3_1.idcontact);

								if (copyOfcopyOfcopyOfmain_3_1.principal == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_3.setBoolean(2, copyOfcopyOfcopyOfmain_3_1.principal);
								}

								if (copyOfcopyOfcopyOfmain_3_1.fax == null) {
									pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(3, copyOfcopyOfcopyOfmain_3_1.fax);
								}

								if (copyOfcopyOfcopyOfmain_3_1.fonction == null) {
									pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(4, copyOfcopyOfcopyOfmain_3_1.fonction);
								}

								if (copyOfcopyOfcopyOfmain_3_1.internet == null) {
									pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(5, copyOfcopyOfcopyOfmain_3_1.internet);
								}

								if (copyOfcopyOfcopyOfmain_3_1.login == null) {
									pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(6, copyOfcopyOfcopyOfmain_3_1.login);
								}

								if (copyOfcopyOfcopyOfmain_3_1.mail == null) {
									pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(7, copyOfcopyOfcopyOfmain_3_1.mail);
								}

								if (copyOfcopyOfcopyOfmain_3_1.mail_validateur == null) {
									pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(8, copyOfcopyOfcopyOfmain_3_1.mail_validateur);
								}

								if (copyOfcopyOfcopyOfmain_3_1.niveau_validateur == null) {
									pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(9, copyOfcopyOfcopyOfmain_3_1.niveau_validateur);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom == null) {
									pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(10, copyOfcopyOfcopyOfmain_3_1.nom);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_responsable == null) {
									pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(11, copyOfcopyOfcopyOfmain_3_1.nom_responsable);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_respon_commerc == null) {
									pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(12, copyOfcopyOfcopyOfmain_3_1.nom_respon_commerc);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_respon_financier == null) {
									pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(13, copyOfcopyOfcopyOfmain_3_1.nom_respon_financier);
								}

								if (copyOfcopyOfcopyOfmain_3_1.password == null) {
									pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(14, copyOfcopyOfcopyOfmain_3_1.password);
								}

								if (copyOfcopyOfcopyOfmain_3_1.portable == null) {
									pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(15, copyOfcopyOfcopyOfmain_3_1.portable);
								}

								if (copyOfcopyOfcopyOfmain_3_1.rang == null) {
									pstmt_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(16, copyOfcopyOfcopyOfmain_3_1.rang);
								}

								if (copyOfcopyOfcopyOfmain_3_1.service == null) {
									pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(17, copyOfcopyOfcopyOfmain_3_1.service);
								}

								if (copyOfcopyOfcopyOfmain_3_1.telephone == null) {
									pstmt_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(18, copyOfcopyOfcopyOfmain_3_1.telephone);
								}

								if (copyOfcopyOfcopyOfmain_3_1.telephonebis == null) {
									pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(19, copyOfcopyOfcopyOfmain_3_1.telephonebis);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idadresse_livraison == null) {
									pstmt_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(20, copyOfcopyOfcopyOfmain_3_1.idadresse_livraison);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idcli == null) {
									pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(21, copyOfcopyOfcopyOfmain_3_1.idcli);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idfournisseur == null) {
									pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(22, copyOfcopyOfcopyOfmain_3_1.idfournisseur);
								}

								pstmt_tDBOutput_3.addBatch();
								nb_line_tDBOutput_3++;

								batchSizeCounter_tDBOutput_3++;

								if ((batchSize_tDBOutput_3 > 0)
										&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
									try {
										int countSum_tDBOutput_3 = 0;

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										batchSizeCounter_tDBOutput_3 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
										java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
												sqle_tDBOutput_3 = null;
										String errormessage_tDBOutput_3;
										if (ne_tDBOutput_3 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_3 = new java.sql.SQLException(
													e_tDBOutput_3.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_3.getMessage(),
													ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
													ne_tDBOutput_3);
											errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
										} else {
											errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
										}

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										System.err.println(errormessage_tDBOutput_3);

									}
								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_3_1"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_3_1");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
			}

			tFileInputDelimited_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_3_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3_1Struct other = (copyOfcopyOfmain_3_1Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom = this.nom;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom=" + nom);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_15Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_15Struct other = (after_tFileInputDelimited_15Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_15Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_15Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_8Process(globalMap);

				row8Struct row8 = new row8Struct();
				copyOfcopyOfmain_3_1Struct copyOfcopyOfmain_3_1 = new copyOfcopyOfmain_3_1Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3_1");
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = ("contact");
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3_1Struct copyOfcopyOfmain_3_1_tmp = new copyOfcopyOfmain_3_1Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_15 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_15 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row8Struct row8) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_15 = 0;

						columnIndexWithD_tFileInputDelimited_15 = 0;

						row8.CREF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 1;

						row8.CNOM = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 2;

						row8.CRUE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 3;

						row8.CAUX = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 4;

						row8.CCPTL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 5;

						row8.CVIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 6;

						row8.FILL01 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 7;

						row8.CQUAL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 8;

						row8.CCOM1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 9;

						row8.CCREP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 10;

						row8.CREMFI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 11;

						row8.CECHE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 12;

						row8.CECHJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 13;

						row8.CPAI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 14;

						row8.CCHAN = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 15;

						row8.CECHJ2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 16;

						row8.CMOD = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 17;

						row8.CBQ1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 18;

						row8.CBQ2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 19;

						row8.CBQ3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 20;

						row8.CBQ4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 21;

						row8.CBQ5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 22;

						row8.CBQ6 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 23;

						row8.CFACT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 24;

						row8.CBL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 25;

						row8.CESC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 26;

						row8.VARAD1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 27;

						row8.VARAD2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 28;

						row8.VARAD3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 29;

						row8.VARAD4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 30;

						row8.VARAD5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 31;

						row8.VARAD6 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 32;

						row8.VARA1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 33;

						row8.VARA2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 34;

						row8.VARA3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 35;

						row8.VARA4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 36;

						row8.VARA5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 37;

						row8.VARB1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 38;

						row8.VARB2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 39;

						row8.VARB3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 40;

						row8.VARB4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 41;

						row8.VARB5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 42;

						row8.VARN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 43;

						row8.VARN2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 44;

						row8.VARN3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 45;

						row8.VARN4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 46;

						row8.VARN5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 47;

						row8.CDATCRE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 48;

						row8.CTEL1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 49;

						row8.CTEL2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 50;

						row8.CTEX1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 51;

						row8.CTEX2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 52;

						row8.CDELMOY = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 53;

						row8.CAFFAIRE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 54;

						row8.CCPTFACT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 55;

						row8.CINTERNET = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 56;

						row8.CIBAN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 57;

						row8.CBIC_old = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 58;

						row8.CFIDEL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 59;

						row8.CRFA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 60;

						row8.CCOMREG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 61;

						row8.CAPE2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 62;

						row8.CIBAN72 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 63;

						row8.CIBAN8 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 64;

						row8.CIBAN9 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 65;

						row8.CBIC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 66;

						row8.CTRANSP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 67;

						row8.CFACTMAIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 68;

						row8.CBLMAIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 69;

						row8.CFACTWEB = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 70;

						row8.CBLWEB = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 71;

						row8.CPUBLIPOSTAGE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 72;

						row8.CFACT_EDI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 73;

						row8.CFACT_CHORUS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 74;

						row8.CFACTORING = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 75;

						row8.CCHORUS_SERVICE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 76;

						row8.CFIL14 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 77;

						row8.CTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 78;

						row8.FIL02 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 79;

						row8.CREJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 80;

						row8.CSECT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 81;

						row8.CTOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 82;

						row8.CCAN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 83;

						row8.CCAN2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 84;

						row8.CCAN3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 85;

						row8.CDATF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 86;

						row8.CCAT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 87;

						row8.CRESP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 88;

						row8.CAPE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 89;

						row8.CPREMC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 90;

						row8.CDERNC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 91;

						row8.CPROCC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 92;

						row8.CTYPEC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 93;

						row8.CSIRET = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 94;

						row8.CORIGIN = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 95;

						row8.CMOTCOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 96;

						row8.CCOMPTA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 97;

						row8.CAFFMEMO = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 98;

						row8.CFIL2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 99;

						row8.CPNAFF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row8Struct row8) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_15 = 0;

						columnIndexWithD_tFileInputDelimited_15 = 100;

						row8.CDEVTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 101;

						row8.CMINCOM = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 102;

						row8.CRELEVE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 103;

						row8.CRELIQ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 104;

						row8.CMAJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 105;

						row8.CECH = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 106;

						row8.CETIQ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 107;

						row8.CCOEF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 108;

						row8.CARROND = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 109;

						row8.CENCOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 110;

						row8.CNIVREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 111;

						row8.CBLOCAG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 112;

						row8.CDATREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 113;

						row8.CRESCO = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 114;

						row8.CRESFI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 115;

						row8.CSFAC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 116;

						row8.CDATENC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 117;

						row8.CDATSFA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 118;

						row8.CCONTR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 119;

						row8.CDEREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 120;

						row8.CPAYS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 121;

						row8.CBLTOT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 122;

						row8.CBLLIG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 123;

						row8.CENCDIS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 124;

						row8.CNCEE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 125;

						row8.CNSFAC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 126;

						row8.CPSRDAT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 127;

						row8.CEPNASR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 128;

						row8.CCODTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 129;

						row8.CDEVISE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row8Struct row8) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_15, row8);

						valueToConn_1(fid_tFileInputDelimited_15, row8);

					}

				}
				RowHelper_tFileInputDelimited_15 rowHelper_tFileInputDelimited_15 = new RowHelper_tFileInputDelimited_15();

				int nb_line_tFileInputDelimited_15 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15 = null;
				int limit_tFileInputDelimited_15 = -1;
				try {

					Object filename_tFileInputDelimited_15 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_15 = 0, random_value_tFileInputDelimited_15 = -1;
						if (footer_value_tFileInputDelimited_15 > 0 || random_value_tFileInputDelimited_15 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_15 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_15, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_15 != null && fid_tFileInputDelimited_15.nextRecord()) {
						rowstate_tFileInputDelimited_15.reset();

						row8 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row8 = new row8Struct();
						try {

							rowHelper_tFileInputDelimited_15.valueToConn(fid_tFileInputDelimited_15, row8);

							if (rowstate_tFileInputDelimited_15.getException() != null) {
								throw rowstate_tFileInputDelimited_15.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */

						/**
						 * [tFileInputDelimited_15 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						/**
						 * [tFileInputDelimited_15 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row15"
							///////////////////////////////////////////////

							boolean forceLooprow15 = false;

							row15Struct row15ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row15HashKey.CLIENT_KEY = row8.CREF;

								row15HashKey.hashCodeDirty = true;

								tHash_Lookup_row15.lookup(row15HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row15' and it contains more one result from keys : row15.CLIENT_KEY = '" +
								// row15HashKey.CLIENT_KEY + "'");
							} // G 071

							row15Struct row15 = null;

							row15Struct fromLookup_row15 = null;
							row15 = row15Default;

							if (tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) { // G 099

								fromLookup_row15 = tHash_Lookup_row15.next();

							} // G 099

							if (fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3_1 = null;

// # Output table : 'copyOfcopyOfmain_3_1'
								copyOfcopyOfmain_3_1_tmp.idcontact = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfmain_3_1_tmp.principal = false;
								copyOfcopyOfmain_3_1_tmp.fax = row15.FAX;
								copyOfcopyOfmain_3_1_tmp.fonction = row15.FONCTION;
								copyOfcopyOfmain_3_1_tmp.internet = row15.CONT_INTERNET == null ? null
										: row15.CONT_INTERNET.isBlank() ? null : row15.CONT_INTERNET;
								copyOfcopyOfmain_3_1_tmp.login = row15.LOGIN;
								copyOfcopyOfmain_3_1_tmp.mail = row15.EMAIL;
								copyOfcopyOfmain_3_1_tmp.mail_validateur = row15.CONT_VALIDATEUR;
								copyOfcopyOfmain_3_1_tmp.niveau_validateur = row15.CONT_NIVEAU;
								copyOfcopyOfmain_3_1_tmp.nom = row15.NOM;
								copyOfcopyOfmain_3_1_tmp.nom_responsable = null;
								copyOfcopyOfmain_3_1_tmp.nom_respon_commerc = null;
								copyOfcopyOfmain_3_1_tmp.nom_respon_financier = null;
								copyOfcopyOfmain_3_1_tmp.password = row15.PASSWORD;
								copyOfcopyOfmain_3_1_tmp.portable = row15.PORTABLE;
								copyOfcopyOfmain_3_1_tmp.rang = row15.RANG_KEY;
								copyOfcopyOfmain_3_1_tmp.service = row15.SERVICE;
								copyOfcopyOfmain_3_1_tmp.telephone = row15.TELEPHONE;
								copyOfcopyOfmain_3_1_tmp.telephonebis = null;
								copyOfcopyOfmain_3_1_tmp.idadresse_livraison = null;
								copyOfcopyOfmain_3_1_tmp.idcli = row15.CLIENT_KEY;
								copyOfcopyOfmain_3_1_tmp.idfournisseur = null;
								copyOfcopyOfmain_3_1 = copyOfcopyOfmain_3_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3_1"
							if (copyOfcopyOfmain_3_1 != null) {

								/**
								 * [tDBOutput_7 main ] start
								 */

								currentComponent = "tDBOutput_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3_1");
								}

								whetherReject_tDBOutput_7 = false;
								pstmt_tDBOutput_7.setInt(1, copyOfcopyOfmain_3_1.idcontact);

								if (copyOfcopyOfmain_3_1.principal == null) {
									pstmt_tDBOutput_7.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_7.setBoolean(2, copyOfcopyOfmain_3_1.principal);
								}

								if (copyOfcopyOfmain_3_1.fax == null) {
									pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(3, copyOfcopyOfmain_3_1.fax);
								}

								if (copyOfcopyOfmain_3_1.fonction == null) {
									pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(4, copyOfcopyOfmain_3_1.fonction);
								}

								if (copyOfcopyOfmain_3_1.internet == null) {
									pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(5, copyOfcopyOfmain_3_1.internet);
								}

								if (copyOfcopyOfmain_3_1.login == null) {
									pstmt_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(6, copyOfcopyOfmain_3_1.login);
								}

								if (copyOfcopyOfmain_3_1.mail == null) {
									pstmt_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(7, copyOfcopyOfmain_3_1.mail);
								}

								if (copyOfcopyOfmain_3_1.mail_validateur == null) {
									pstmt_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(8, copyOfcopyOfmain_3_1.mail_validateur);
								}

								if (copyOfcopyOfmain_3_1.niveau_validateur == null) {
									pstmt_tDBOutput_7.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(9, copyOfcopyOfmain_3_1.niveau_validateur);
								}

								if (copyOfcopyOfmain_3_1.nom == null) {
									pstmt_tDBOutput_7.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(10, copyOfcopyOfmain_3_1.nom);
								}

								if (copyOfcopyOfmain_3_1.nom_responsable == null) {
									pstmt_tDBOutput_7.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(11, copyOfcopyOfmain_3_1.nom_responsable);
								}

								if (copyOfcopyOfmain_3_1.nom_respon_commerc == null) {
									pstmt_tDBOutput_7.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(12, copyOfcopyOfmain_3_1.nom_respon_commerc);
								}

								if (copyOfcopyOfmain_3_1.nom_respon_financier == null) {
									pstmt_tDBOutput_7.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(13, copyOfcopyOfmain_3_1.nom_respon_financier);
								}

								if (copyOfcopyOfmain_3_1.password == null) {
									pstmt_tDBOutput_7.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(14, copyOfcopyOfmain_3_1.password);
								}

								if (copyOfcopyOfmain_3_1.portable == null) {
									pstmt_tDBOutput_7.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(15, copyOfcopyOfmain_3_1.portable);
								}

								if (copyOfcopyOfmain_3_1.rang == null) {
									pstmt_tDBOutput_7.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(16, copyOfcopyOfmain_3_1.rang);
								}

								if (copyOfcopyOfmain_3_1.service == null) {
									pstmt_tDBOutput_7.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(17, copyOfcopyOfmain_3_1.service);
								}

								if (copyOfcopyOfmain_3_1.telephone == null) {
									pstmt_tDBOutput_7.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(18, copyOfcopyOfmain_3_1.telephone);
								}

								if (copyOfcopyOfmain_3_1.telephonebis == null) {
									pstmt_tDBOutput_7.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(19, copyOfcopyOfmain_3_1.telephonebis);
								}

								if (copyOfcopyOfmain_3_1.idadresse_livraison == null) {
									pstmt_tDBOutput_7.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(20, copyOfcopyOfmain_3_1.idadresse_livraison);
								}

								if (copyOfcopyOfmain_3_1.idcli == null) {
									pstmt_tDBOutput_7.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(21, copyOfcopyOfmain_3_1.idcli);
								}

								if (copyOfcopyOfmain_3_1.idfournisseur == null) {
									pstmt_tDBOutput_7.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(22, copyOfcopyOfmain_3_1.idfournisseur);
								}

								pstmt_tDBOutput_7.addBatch();
								nb_line_tDBOutput_7++;

								batchSizeCounter_tDBOutput_7++;

								if ((batchSize_tDBOutput_7 > 0)
										&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
									try {
										int countSum_tDBOutput_7 = 0;

										for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										batchSizeCounter_tDBOutput_7 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
										java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
												sqle_tDBOutput_7 = null;
										String errormessage_tDBOutput_7;
										if (ne_tDBOutput_7 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_7 = new java.sql.SQLException(
													e_tDBOutput_7.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_7.getMessage(),
													ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(),
													ne_tDBOutput_7);
											errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
										} else {
											errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
										}

										int countSum_tDBOutput_7 = 0;
										for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										System.err.println(errormessage_tDBOutput_7);

									}
								}

								tos_count_tDBOutput_7++;

								/**
								 * [tDBOutput_7 main ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_end ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3_1"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_15 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						/**
						 * [tFileInputDelimited_15 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_15 != null) {
							fid_tFileInputDelimited_15.close();
						}
					}
					if (fid_tFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE", fid_tFileInputDelimited_15.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3_1");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row15");

			try {

				/**
				 * [tFileInputDelimited_15 finally ] start
				 */

				currentComponent = "tFileInputDelimited_15";

				/**
				 * [tFileInputDelimited_15 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
					if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_7")) != null) {
						pstmtToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HISKLE;

		public String getHISKLE() {
			return this.HISKLE;
		}

		public String HISCAN01;

		public String getHISCAN01() {
			return this.HISCAN01;
		}

		public String HISCAN02;

		public String getHISCAN02() {
			return this.HISCAN02;
		}

		public String HISCAN03;

		public String getHISCAN03() {
			return this.HISCAN03;
		}

		public String HISCAN04;

		public String getHISCAN04() {
			return this.HISCAN04;
		}

		public String HISCAN05;

		public String getHISCAN05() {
			return this.HISCAN05;
		}

		public String HISCAN06;

		public String getHISCAN06() {
			return this.HISCAN06;
		}

		public String HISCAN07;

		public String getHISCAN07() {
			return this.HISCAN07;
		}

		public String HISCAN08;

		public String getHISCAN08() {
			return this.HISCAN08;
		}

		public String HISCAN09;

		public String getHISCAN09() {
			return this.HISCAN09;
		}

		public String HISCAN10;

		public String getHISCAN10() {
			return this.HISCAN10;
		}

		public String HISCAN11;

		public String getHISCAN11() {
			return this.HISCAN11;
		}

		public String HISCAN12;

		public String getHISCAN12() {
			return this.HISCAN12;
		}

		public String HISPAN01;

		public String getHISPAN01() {
			return this.HISPAN01;
		}

		public String HISPAN02;

		public String getHISPAN02() {
			return this.HISPAN02;
		}

		public String HISPAN03;

		public String getHISPAN03() {
			return this.HISPAN03;
		}

		public String HISPAN04;

		public String getHISPAN04() {
			return this.HISPAN04;
		}

		public String HISPAN05;

		public String getHISPAN05() {
			return this.HISPAN05;
		}

		public String HISPAN06;

		public String getHISPAN06() {
			return this.HISPAN06;
		}

		public String HISPAN07;

		public String getHISPAN07() {
			return this.HISPAN07;
		}

		public String HISPAN08;

		public String getHISPAN08() {
			return this.HISPAN08;
		}

		public String HISPAN09;

		public String getHISPAN09() {
			return this.HISPAN09;
		}

		public String HISPAN10;

		public String getHISPAN10() {
			return this.HISPAN10;
		}

		public String HISPAN11;

		public String getHISPAN11() {
			return this.HISPAN11;
		}

		public String HISPAN12;

		public String getHISPAN12() {
			return this.HISPAN12;
		}

		public String HISCAN101;

		public String getHISCAN101() {
			return this.HISCAN101;
		}

		public String HISCAN102;

		public String getHISCAN102() {
			return this.HISCAN102;
		}

		public String HISCAN103;

		public String getHISCAN103() {
			return this.HISCAN103;
		}

		public String HISCAN104;

		public String getHISCAN104() {
			return this.HISCAN104;
		}

		public String HISCAN105;

		public String getHISCAN105() {
			return this.HISCAN105;
		}

		public String HISCAN106;

		public String getHISCAN106() {
			return this.HISCAN106;
		}

		public String HISCAN107;

		public String getHISCAN107() {
			return this.HISCAN107;
		}

		public String HISCAN108;

		public String getHISCAN108() {
			return this.HISCAN108;
		}

		public String HISCAN109;

		public String getHISCAN109() {
			return this.HISCAN109;
		}

		public String HISCAN110;

		public String getHISCAN110() {
			return this.HISCAN110;
		}

		public String HISCAN111;

		public String getHISCAN111() {
			return this.HISCAN111;
		}

		public String HISCAN112;

		public String getHISCAN112() {
			return this.HISCAN112;
		}

		public String HISPAN101;

		public String getHISPAN101() {
			return this.HISPAN101;
		}

		public String HISPAN102;

		public String getHISPAN102() {
			return this.HISPAN102;
		}

		public String HISPAN103;

		public String getHISPAN103() {
			return this.HISPAN103;
		}

		public String HISPAN104;

		public String getHISPAN104() {
			return this.HISPAN104;
		}

		public String HISPAN105;

		public String getHISPAN105() {
			return this.HISPAN105;
		}

		public String HISPAN106;

		public String getHISPAN106() {
			return this.HISPAN106;
		}

		public String HISPAN107;

		public String getHISPAN107() {
			return this.HISPAN107;
		}

		public String HISPAN108;

		public String getHISPAN108() {
			return this.HISPAN108;
		}

		public String HISPAN109;

		public String getHISPAN109() {
			return this.HISPAN109;
		}

		public String HISPAN110;

		public String getHISPAN110() {
			return this.HISPAN110;
		}

		public String HISPAN111;

		public String getHISPAN111() {
			return this.HISPAN111;
		}

		public String HISPAN112;

		public String getHISPAN112() {
			return this.HISPAN112;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.HISKLE == null) ? 0 : this.HISKLE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.HISKLE == null) {
				if (other.HISKLE != null)
					return false;

			} else if (!this.HISKLE.equals(other.HISKLE))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.HISKLE = this.HISKLE;
			other.HISCAN01 = this.HISCAN01;
			other.HISCAN02 = this.HISCAN02;
			other.HISCAN03 = this.HISCAN03;
			other.HISCAN04 = this.HISCAN04;
			other.HISCAN05 = this.HISCAN05;
			other.HISCAN06 = this.HISCAN06;
			other.HISCAN07 = this.HISCAN07;
			other.HISCAN08 = this.HISCAN08;
			other.HISCAN09 = this.HISCAN09;
			other.HISCAN10 = this.HISCAN10;
			other.HISCAN11 = this.HISCAN11;
			other.HISCAN12 = this.HISCAN12;
			other.HISPAN01 = this.HISPAN01;
			other.HISPAN02 = this.HISPAN02;
			other.HISPAN03 = this.HISPAN03;
			other.HISPAN04 = this.HISPAN04;
			other.HISPAN05 = this.HISPAN05;
			other.HISPAN06 = this.HISPAN06;
			other.HISPAN07 = this.HISPAN07;
			other.HISPAN08 = this.HISPAN08;
			other.HISPAN09 = this.HISPAN09;
			other.HISPAN10 = this.HISPAN10;
			other.HISPAN11 = this.HISPAN11;
			other.HISPAN12 = this.HISPAN12;
			other.HISCAN101 = this.HISCAN101;
			other.HISCAN102 = this.HISCAN102;
			other.HISCAN103 = this.HISCAN103;
			other.HISCAN104 = this.HISCAN104;
			other.HISCAN105 = this.HISCAN105;
			other.HISCAN106 = this.HISCAN106;
			other.HISCAN107 = this.HISCAN107;
			other.HISCAN108 = this.HISCAN108;
			other.HISCAN109 = this.HISCAN109;
			other.HISCAN110 = this.HISCAN110;
			other.HISCAN111 = this.HISCAN111;
			other.HISCAN112 = this.HISCAN112;
			other.HISPAN101 = this.HISPAN101;
			other.HISPAN102 = this.HISPAN102;
			other.HISPAN103 = this.HISPAN103;
			other.HISPAN104 = this.HISPAN104;
			other.HISPAN105 = this.HISPAN105;
			other.HISPAN106 = this.HISPAN106;
			other.HISPAN107 = this.HISPAN107;
			other.HISPAN108 = this.HISPAN108;
			other.HISPAN109 = this.HISPAN109;
			other.HISPAN110 = this.HISPAN110;
			other.HISPAN111 = this.HISPAN111;
			other.HISPAN112 = this.HISPAN112;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.HISKLE = this.HISKLE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.HISKLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HISKLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HISCAN01 = readString(dis, ois);

				this.HISCAN02 = readString(dis, ois);

				this.HISCAN03 = readString(dis, ois);

				this.HISCAN04 = readString(dis, ois);

				this.HISCAN05 = readString(dis, ois);

				this.HISCAN06 = readString(dis, ois);

				this.HISCAN07 = readString(dis, ois);

				this.HISCAN08 = readString(dis, ois);

				this.HISCAN09 = readString(dis, ois);

				this.HISCAN10 = readString(dis, ois);

				this.HISCAN11 = readString(dis, ois);

				this.HISCAN12 = readString(dis, ois);

				this.HISPAN01 = readString(dis, ois);

				this.HISPAN02 = readString(dis, ois);

				this.HISPAN03 = readString(dis, ois);

				this.HISPAN04 = readString(dis, ois);

				this.HISPAN05 = readString(dis, ois);

				this.HISPAN06 = readString(dis, ois);

				this.HISPAN07 = readString(dis, ois);

				this.HISPAN08 = readString(dis, ois);

				this.HISPAN09 = readString(dis, ois);

				this.HISPAN10 = readString(dis, ois);

				this.HISPAN11 = readString(dis, ois);

				this.HISPAN12 = readString(dis, ois);

				this.HISCAN101 = readString(dis, ois);

				this.HISCAN102 = readString(dis, ois);

				this.HISCAN103 = readString(dis, ois);

				this.HISCAN104 = readString(dis, ois);

				this.HISCAN105 = readString(dis, ois);

				this.HISCAN106 = readString(dis, ois);

				this.HISCAN107 = readString(dis, ois);

				this.HISCAN108 = readString(dis, ois);

				this.HISCAN109 = readString(dis, ois);

				this.HISCAN110 = readString(dis, ois);

				this.HISCAN111 = readString(dis, ois);

				this.HISCAN112 = readString(dis, ois);

				this.HISPAN101 = readString(dis, ois);

				this.HISPAN102 = readString(dis, ois);

				this.HISPAN103 = readString(dis, ois);

				this.HISPAN104 = readString(dis, ois);

				this.HISPAN105 = readString(dis, ois);

				this.HISPAN106 = readString(dis, ois);

				this.HISPAN107 = readString(dis, ois);

				this.HISPAN108 = readString(dis, ois);

				this.HISPAN109 = readString(dis, ois);

				this.HISPAN110 = readString(dis, ois);

				this.HISPAN111 = readString(dis, ois);

				this.HISPAN112 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.HISCAN01, dos, oos);

				writeString(this.HISCAN02, dos, oos);

				writeString(this.HISCAN03, dos, oos);

				writeString(this.HISCAN04, dos, oos);

				writeString(this.HISCAN05, dos, oos);

				writeString(this.HISCAN06, dos, oos);

				writeString(this.HISCAN07, dos, oos);

				writeString(this.HISCAN08, dos, oos);

				writeString(this.HISCAN09, dos, oos);

				writeString(this.HISCAN10, dos, oos);

				writeString(this.HISCAN11, dos, oos);

				writeString(this.HISCAN12, dos, oos);

				writeString(this.HISPAN01, dos, oos);

				writeString(this.HISPAN02, dos, oos);

				writeString(this.HISPAN03, dos, oos);

				writeString(this.HISPAN04, dos, oos);

				writeString(this.HISPAN05, dos, oos);

				writeString(this.HISPAN06, dos, oos);

				writeString(this.HISPAN07, dos, oos);

				writeString(this.HISPAN08, dos, oos);

				writeString(this.HISPAN09, dos, oos);

				writeString(this.HISPAN10, dos, oos);

				writeString(this.HISPAN11, dos, oos);

				writeString(this.HISPAN12, dos, oos);

				writeString(this.HISCAN101, dos, oos);

				writeString(this.HISCAN102, dos, oos);

				writeString(this.HISCAN103, dos, oos);

				writeString(this.HISCAN104, dos, oos);

				writeString(this.HISCAN105, dos, oos);

				writeString(this.HISCAN106, dos, oos);

				writeString(this.HISCAN107, dos, oos);

				writeString(this.HISCAN108, dos, oos);

				writeString(this.HISCAN109, dos, oos);

				writeString(this.HISCAN110, dos, oos);

				writeString(this.HISCAN111, dos, oos);

				writeString(this.HISCAN112, dos, oos);

				writeString(this.HISPAN101, dos, oos);

				writeString(this.HISPAN102, dos, oos);

				writeString(this.HISPAN103, dos, oos);

				writeString(this.HISPAN104, dos, oos);

				writeString(this.HISPAN105, dos, oos);

				writeString(this.HISPAN106, dos, oos);

				writeString(this.HISPAN107, dos, oos);

				writeString(this.HISPAN108, dos, oos);

				writeString(this.HISPAN109, dos, oos);

				writeString(this.HISPAN110, dos, oos);

				writeString(this.HISPAN111, dos, oos);

				writeString(this.HISPAN112, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HISKLE=" + HISKLE);
			sb.append(",HISCAN01=" + HISCAN01);
			sb.append(",HISCAN02=" + HISCAN02);
			sb.append(",HISCAN03=" + HISCAN03);
			sb.append(",HISCAN04=" + HISCAN04);
			sb.append(",HISCAN05=" + HISCAN05);
			sb.append(",HISCAN06=" + HISCAN06);
			sb.append(",HISCAN07=" + HISCAN07);
			sb.append(",HISCAN08=" + HISCAN08);
			sb.append(",HISCAN09=" + HISCAN09);
			sb.append(",HISCAN10=" + HISCAN10);
			sb.append(",HISCAN11=" + HISCAN11);
			sb.append(",HISCAN12=" + HISCAN12);
			sb.append(",HISPAN01=" + HISPAN01);
			sb.append(",HISPAN02=" + HISPAN02);
			sb.append(",HISPAN03=" + HISPAN03);
			sb.append(",HISPAN04=" + HISPAN04);
			sb.append(",HISPAN05=" + HISPAN05);
			sb.append(",HISPAN06=" + HISPAN06);
			sb.append(",HISPAN07=" + HISPAN07);
			sb.append(",HISPAN08=" + HISPAN08);
			sb.append(",HISPAN09=" + HISPAN09);
			sb.append(",HISPAN10=" + HISPAN10);
			sb.append(",HISPAN11=" + HISPAN11);
			sb.append(",HISPAN12=" + HISPAN12);
			sb.append(",HISCAN101=" + HISCAN101);
			sb.append(",HISCAN102=" + HISCAN102);
			sb.append(",HISCAN103=" + HISCAN103);
			sb.append(",HISCAN104=" + HISCAN104);
			sb.append(",HISCAN105=" + HISCAN105);
			sb.append(",HISCAN106=" + HISCAN106);
			sb.append(",HISCAN107=" + HISCAN107);
			sb.append(",HISCAN108=" + HISCAN108);
			sb.append(",HISCAN109=" + HISCAN109);
			sb.append(",HISCAN110=" + HISCAN110);
			sb.append(",HISCAN111=" + HISCAN111);
			sb.append(",HISCAN112=" + HISCAN112);
			sb.append(",HISPAN101=" + HISPAN101);
			sb.append(",HISPAN102=" + HISPAN102);
			sb.append(",HISPAN103=" + HISPAN103);
			sb.append(",HISPAN104=" + HISPAN104);
			sb.append(",HISPAN105=" + HISPAN105);
			sb.append(",HISPAN106=" + HISPAN106);
			sb.append(",HISPAN107=" + HISPAN107);
			sb.append(",HISPAN108=" + HISPAN108);
			sb.append(",HISPAN109=" + HISPAN109);
			sb.append(",HISPAN110=" + HISPAN110);
			sb.append(",HISPAN111=" + HISPAN111);
			sb.append(",HISPAN112=" + HISPAN112);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HISKLE, other.HISKLE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_12)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tMap_12 - inputs:(row12,row2) outputs:(copyOfcopyOfmain_0_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/DEV/Data/Base Montauban/historique_clients.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/historique_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row2.HISKLE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row2.HISCAN01 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row2.HISCAN02 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row2.HISCAN03 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row2.HISCAN04 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							row2.HISCAN05 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row2.HISCAN06 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row2.HISCAN07 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							row2.HISCAN08 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 9;

							row2.HISCAN09 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 10;

							row2.HISCAN10 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 11;

							row2.HISCAN11 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 12;

							row2.HISCAN12 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 13;

							row2.HISPAN01 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 14;

							row2.HISPAN02 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 15;

							row2.HISPAN03 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 16;

							row2.HISPAN04 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 17;

							row2.HISPAN05 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 18;

							row2.HISPAN06 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 19;

							row2.HISPAN07 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 20;

							row2.HISPAN08 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 21;

							row2.HISPAN09 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 22;

							row2.HISPAN10 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 23;

							row2.HISPAN11 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 24;

							row2.HISPAN12 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 25;

							row2.HISCAN101 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 26;

							row2.HISCAN102 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 27;

							row2.HISCAN103 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 28;

							row2.HISCAN104 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 29;

							row2.HISCAN105 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 30;

							row2.HISCAN106 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 31;

							row2.HISCAN107 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 32;

							row2.HISCAN108 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 33;

							row2.HISCAN109 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 34;

							row2.HISCAN110 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 35;

							row2.HISCAN111 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 36;

							row2.HISCAN112 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 37;

							row2.HISPAN101 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 38;

							row2.HISPAN102 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 39;

							row2.HISPAN103 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 40;

							row2.HISPAN104 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 41;

							row2.HISPAN105 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 42;

							row2.HISPAN106 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 43;

							row2.HISPAN107 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 44;

							row2.HISPAN108 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 45;

							row2.HISPAN109 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 46;

							row2.HISPAN110 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 47;

							row2.HISPAN111 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 48;

							row2.HISPAN112 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.HISKLE = row2.HISKLE;

							row2_HashRow.HISCAN01 = row2.HISCAN01;

							row2_HashRow.HISCAN02 = row2.HISCAN02;

							row2_HashRow.HISCAN03 = row2.HISCAN03;

							row2_HashRow.HISCAN04 = row2.HISCAN04;

							row2_HashRow.HISCAN05 = row2.HISCAN05;

							row2_HashRow.HISCAN06 = row2.HISCAN06;

							row2_HashRow.HISCAN07 = row2.HISCAN07;

							row2_HashRow.HISCAN08 = row2.HISCAN08;

							row2_HashRow.HISCAN09 = row2.HISCAN09;

							row2_HashRow.HISCAN10 = row2.HISCAN10;

							row2_HashRow.HISCAN11 = row2.HISCAN11;

							row2_HashRow.HISCAN12 = row2.HISCAN12;

							row2_HashRow.HISPAN01 = row2.HISPAN01;

							row2_HashRow.HISPAN02 = row2.HISPAN02;

							row2_HashRow.HISPAN03 = row2.HISPAN03;

							row2_HashRow.HISPAN04 = row2.HISPAN04;

							row2_HashRow.HISPAN05 = row2.HISPAN05;

							row2_HashRow.HISPAN06 = row2.HISPAN06;

							row2_HashRow.HISPAN07 = row2.HISPAN07;

							row2_HashRow.HISPAN08 = row2.HISPAN08;

							row2_HashRow.HISPAN09 = row2.HISPAN09;

							row2_HashRow.HISPAN10 = row2.HISPAN10;

							row2_HashRow.HISPAN11 = row2.HISPAN11;

							row2_HashRow.HISPAN12 = row2.HISPAN12;

							row2_HashRow.HISCAN101 = row2.HISCAN101;

							row2_HashRow.HISCAN102 = row2.HISCAN102;

							row2_HashRow.HISCAN103 = row2.HISCAN103;

							row2_HashRow.HISCAN104 = row2.HISCAN104;

							row2_HashRow.HISCAN105 = row2.HISCAN105;

							row2_HashRow.HISCAN106 = row2.HISCAN106;

							row2_HashRow.HISCAN107 = row2.HISCAN107;

							row2_HashRow.HISCAN108 = row2.HISCAN108;

							row2_HashRow.HISCAN109 = row2.HISCAN109;

							row2_HashRow.HISCAN110 = row2.HISCAN110;

							row2_HashRow.HISCAN111 = row2.HISCAN111;

							row2_HashRow.HISCAN112 = row2.HISCAN112;

							row2_HashRow.HISPAN101 = row2.HISPAN101;

							row2_HashRow.HISPAN102 = row2.HISPAN102;

							row2_HashRow.HISPAN103 = row2.HISPAN103;

							row2_HashRow.HISPAN104 = row2.HISPAN104;

							row2_HashRow.HISPAN105 = row2.HISPAN105;

							row2_HashRow.HISPAN106 = row2.HISPAN106;

							row2_HashRow.HISPAN107 = row2.HISPAN107;

							row2_HashRow.HISPAN108 = row2.HISPAN108;

							row2_HashRow.HISPAN109 = row2.HISPAN109;

							row2_HashRow.HISPAN110 = row2.HISPAN110;

							row2_HashRow.HISPAN111 = row2.HISPAN111;

							row2_HashRow.HISPAN112 = row2.HISPAN112;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/historique_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CLIENT_KEY;

		public String getCLIENT_KEY() {
			return this.CLIENT_KEY;
		}

		public String RANG_KEY;

		public String getRANG_KEY() {
			return this.RANG_KEY;
		}

		public String CLIENT;

		public String getCLIENT() {
			return this.CLIENT;
		}

		public String RANG;

		public String getRANG() {
			return this.RANG;
		}

		public String NOM;

		public String getNOM() {
			return this.NOM;
		}

		public String FONCTION;

		public String getFONCTION() {
			return this.FONCTION;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String SERVICE;

		public String getSERVICE() {
			return this.SERVICE;
		}

		public String VIDE;

		public String getVIDE() {
			return this.VIDE;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String CONT_INTERNET;

		public String getCONT_INTERNET() {
			return this.CONT_INTERNET;
		}

		public String CONT_VALIDATEUR;

		public String getCONT_VALIDATEUR() {
			return this.CONT_VALIDATEUR;
		}

		public String CONT_NIVEAU;

		public String getCONT_NIVEAU() {
			return this.CONT_NIVEAU;
		}

		public String PORTABLE;

		public String getPORTABLE() {
			return this.PORTABLE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CLIENT_KEY == null) ? 0 : this.CLIENT_KEY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CLIENT_KEY == null) {
				if (other.CLIENT_KEY != null)
					return false;

			} else if (!this.CLIENT_KEY.equals(other.CLIENT_KEY))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;
			other.RANG_KEY = this.RANG_KEY;
			other.CLIENT = this.CLIENT;
			other.RANG = this.RANG;
			other.NOM = this.NOM;
			other.FONCTION = this.FONCTION;
			other.TELEPHONE = this.TELEPHONE;
			other.FAX = this.FAX;
			other.EMAIL = this.EMAIL;
			other.SERVICE = this.SERVICE;
			other.VIDE = this.VIDE;
			other.PASSWORD = this.PASSWORD;
			other.LOGIN = this.LOGIN;
			other.CONT_INTERNET = this.CONT_INTERNET;
			other.CONT_VALIDATEUR = this.CONT_VALIDATEUR;
			other.CONT_NIVEAU = this.CONT_NIVEAU;
			other.PORTABLE = this.PORTABLE;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.CLIENT_KEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CLIENT_KEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RANG_KEY = readString(dis, ois);

				this.CLIENT = readString(dis, ois);

				this.RANG = readString(dis, ois);

				this.NOM = readString(dis, ois);

				this.FONCTION = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.FAX = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.SERVICE = readString(dis, ois);

				this.VIDE = readString(dis, ois);

				this.PASSWORD = readString(dis, ois);

				this.LOGIN = readString(dis, ois);

				this.CONT_INTERNET = readString(dis, ois);

				this.CONT_VALIDATEUR = readString(dis, ois);

				this.CONT_NIVEAU = readString(dis, ois);

				this.PORTABLE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.RANG_KEY, dos, oos);

				writeString(this.CLIENT, dos, oos);

				writeString(this.RANG, dos, oos);

				writeString(this.NOM, dos, oos);

				writeString(this.FONCTION, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.FAX, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.SERVICE, dos, oos);

				writeString(this.VIDE, dos, oos);

				writeString(this.PASSWORD, dos, oos);

				writeString(this.LOGIN, dos, oos);

				writeString(this.CONT_INTERNET, dos, oos);

				writeString(this.CONT_VALIDATEUR, dos, oos);

				writeString(this.CONT_NIVEAU, dos, oos);

				writeString(this.PORTABLE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CLIENT_KEY=" + CLIENT_KEY);
			sb.append(",RANG_KEY=" + RANG_KEY);
			sb.append(",CLIENT=" + CLIENT);
			sb.append(",RANG=" + RANG);
			sb.append(",NOM=" + NOM);
			sb.append(",FONCTION=" + FONCTION);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FAX=" + FAX);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",SERVICE=" + SERVICE);
			sb.append(",VIDE=" + VIDE);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",CONT_INTERNET=" + CONT_INTERNET);
			sb.append(",CONT_VALIDATEUR=" + CONT_VALIDATEUR);
			sb.append(",CONT_NIVEAU=" + CONT_NIVEAU);
			sb.append(",PORTABLE=" + PORTABLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CLIENT_KEY, other.CLIENT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputDelimited_8 - inputs:(after_tFileInputDelimited_15)
				// outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15)
				// outputs:()
				// linked node: tMap_6 - inputs:(row8,row15) outputs:(copyOfcopyOfmain_3_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct>getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try {

					Object filename_tFileInputDelimited_8 = "C:/DEV/Data/Base Montauban/Contact.csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0 || random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Contact.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_8, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();

						row15 = null;

						row15 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row15 = new row15Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row15.CLIENT_KEY = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row15.RANG_KEY = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row15.CLIENT = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							row15.RANG = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 4;

							row15.NOM = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 5;

							row15.FONCTION = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 6;

							row15.TELEPHONE = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 7;

							row15.FAX = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 8;

							row15.EMAIL = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 9;

							row15.SERVICE = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 10;

							row15.VIDE = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 11;

							row15.PASSWORD = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 12;

							row15.LOGIN = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 13;

							row15.CONT_INTERNET = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 14;

							row15.CONT_VALIDATEUR = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 15;

							row15.CONT_NIVEAU = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 16;

							row15.PORTABLE = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							if (rowstate_tFileInputDelimited_8.getException() != null) {
								throw rowstate_tFileInputDelimited_8.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */

						/**
						 * [tFileInputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_begin ] stop
						 */
// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
							}

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.CLIENT_KEY = row15.CLIENT_KEY;

							row15_HashRow.RANG_KEY = row15.RANG_KEY;

							row15_HashRow.CLIENT = row15.CLIENT;

							row15_HashRow.RANG = row15.RANG;

							row15_HashRow.NOM = row15.NOM;

							row15_HashRow.FONCTION = row15.FONCTION;

							row15_HashRow.TELEPHONE = row15.TELEPHONE;

							row15_HashRow.FAX = row15.FAX;

							row15_HashRow.EMAIL = row15.EMAIL;

							row15_HashRow.SERVICE = row15.SERVICE;

							row15_HashRow.VIDE = row15.VIDE;

							row15_HashRow.PASSWORD = row15.PASSWORD;

							row15_HashRow.LOGIN = row15.LOGIN;

							row15_HashRow.CONT_INTERNET = row15.CONT_INTERNET;

							row15_HashRow.CONT_VALIDATEUR = row15.CONT_VALIDATEUR;

							row15_HashRow.CONT_NIVEAU = row15.CONT_NIVEAU;

							row15_HashRow.PORTABLE = row15.PORTABLE;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

							/**
							 * [tAdvancedHash_row15 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							/**
							 * [tAdvancedHash_row15 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row15 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							/**
							 * [tAdvancedHash_row15 process_data_end ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Contact.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AfterClient = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AfterClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HISKLE;

		public String getHISKLE() {
			return this.HISKLE;
		}

		public String HISCAN01;

		public String getHISCAN01() {
			return this.HISCAN01;
		}

		public String HISCAN02;

		public String getHISCAN02() {
			return this.HISCAN02;
		}

		public String HISCAN03;

		public String getHISCAN03() {
			return this.HISCAN03;
		}

		public String HISCAN04;

		public String getHISCAN04() {
			return this.HISCAN04;
		}

		public String HISCAN05;

		public String getHISCAN05() {
			return this.HISCAN05;
		}

		public String HISCAN06;

		public String getHISCAN06() {
			return this.HISCAN06;
		}

		public String HISCAN07;

		public String getHISCAN07() {
			return this.HISCAN07;
		}

		public String HISCAN08;

		public String getHISCAN08() {
			return this.HISCAN08;
		}

		public String HISCAN09;

		public String getHISCAN09() {
			return this.HISCAN09;
		}

		public String HISCAN10;

		public String getHISCAN10() {
			return this.HISCAN10;
		}

		public String HISCAN11;

		public String getHISCAN11() {
			return this.HISCAN11;
		}

		public String HISCAN12;

		public String getHISCAN12() {
			return this.HISCAN12;
		}

		public String HISPAN01;

		public String getHISPAN01() {
			return this.HISPAN01;
		}

		public String HISPAN02;

		public String getHISPAN02() {
			return this.HISPAN02;
		}

		public String HISPAN03;

		public String getHISPAN03() {
			return this.HISPAN03;
		}

		public String HISPAN04;

		public String getHISPAN04() {
			return this.HISPAN04;
		}

		public String HISPAN05;

		public String getHISPAN05() {
			return this.HISPAN05;
		}

		public String HISPAN06;

		public String getHISPAN06() {
			return this.HISPAN06;
		}

		public String HISPAN07;

		public String getHISPAN07() {
			return this.HISPAN07;
		}

		public String HISPAN08;

		public String getHISPAN08() {
			return this.HISPAN08;
		}

		public String HISPAN09;

		public String getHISPAN09() {
			return this.HISPAN09;
		}

		public String HISPAN10;

		public String getHISPAN10() {
			return this.HISPAN10;
		}

		public String HISPAN11;

		public String getHISPAN11() {
			return this.HISPAN11;
		}

		public String HISPAN12;

		public String getHISPAN12() {
			return this.HISPAN12;
		}

		public String HISCAN101;

		public String getHISCAN101() {
			return this.HISCAN101;
		}

		public String HISCAN102;

		public String getHISCAN102() {
			return this.HISCAN102;
		}

		public String HISCAN103;

		public String getHISCAN103() {
			return this.HISCAN103;
		}

		public String HISCAN104;

		public String getHISCAN104() {
			return this.HISCAN104;
		}

		public String HISCAN105;

		public String getHISCAN105() {
			return this.HISCAN105;
		}

		public String HISCAN106;

		public String getHISCAN106() {
			return this.HISCAN106;
		}

		public String HISCAN107;

		public String getHISCAN107() {
			return this.HISCAN107;
		}

		public String HISCAN108;

		public String getHISCAN108() {
			return this.HISCAN108;
		}

		public String HISCAN109;

		public String getHISCAN109() {
			return this.HISCAN109;
		}

		public String HISCAN110;

		public String getHISCAN110() {
			return this.HISCAN110;
		}

		public String HISCAN111;

		public String getHISCAN111() {
			return this.HISCAN111;
		}

		public String HISCAN112;

		public String getHISCAN112() {
			return this.HISCAN112;
		}

		public String HISPAN101;

		public String getHISPAN101() {
			return this.HISPAN101;
		}

		public String HISPAN102;

		public String getHISPAN102() {
			return this.HISPAN102;
		}

		public String HISPAN103;

		public String getHISPAN103() {
			return this.HISPAN103;
		}

		public String HISPAN104;

		public String getHISPAN104() {
			return this.HISPAN104;
		}

		public String HISPAN105;

		public String getHISPAN105() {
			return this.HISPAN105;
		}

		public String HISPAN106;

		public String getHISPAN106() {
			return this.HISPAN106;
		}

		public String HISPAN107;

		public String getHISPAN107() {
			return this.HISPAN107;
		}

		public String HISPAN108;

		public String getHISPAN108() {
			return this.HISPAN108;
		}

		public String HISPAN109;

		public String getHISPAN109() {
			return this.HISPAN109;
		}

		public String HISPAN110;

		public String getHISPAN110() {
			return this.HISPAN110;
		}

		public String HISPAN111;

		public String getHISPAN111() {
			return this.HISPAN111;
		}

		public String HISPAN112;

		public String getHISPAN112() {
			return this.HISPAN112;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.HISKLE == null) ? 0 : this.HISKLE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.HISKLE == null) {
				if (other.HISKLE != null)
					return false;

			} else if (!this.HISKLE.equals(other.HISKLE))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.HISKLE = this.HISKLE;
			other.HISCAN01 = this.HISCAN01;
			other.HISCAN02 = this.HISCAN02;
			other.HISCAN03 = this.HISCAN03;
			other.HISCAN04 = this.HISCAN04;
			other.HISCAN05 = this.HISCAN05;
			other.HISCAN06 = this.HISCAN06;
			other.HISCAN07 = this.HISCAN07;
			other.HISCAN08 = this.HISCAN08;
			other.HISCAN09 = this.HISCAN09;
			other.HISCAN10 = this.HISCAN10;
			other.HISCAN11 = this.HISCAN11;
			other.HISCAN12 = this.HISCAN12;
			other.HISPAN01 = this.HISPAN01;
			other.HISPAN02 = this.HISPAN02;
			other.HISPAN03 = this.HISPAN03;
			other.HISPAN04 = this.HISPAN04;
			other.HISPAN05 = this.HISPAN05;
			other.HISPAN06 = this.HISPAN06;
			other.HISPAN07 = this.HISPAN07;
			other.HISPAN08 = this.HISPAN08;
			other.HISPAN09 = this.HISPAN09;
			other.HISPAN10 = this.HISPAN10;
			other.HISPAN11 = this.HISPAN11;
			other.HISPAN12 = this.HISPAN12;
			other.HISCAN101 = this.HISCAN101;
			other.HISCAN102 = this.HISCAN102;
			other.HISCAN103 = this.HISCAN103;
			other.HISCAN104 = this.HISCAN104;
			other.HISCAN105 = this.HISCAN105;
			other.HISCAN106 = this.HISCAN106;
			other.HISCAN107 = this.HISCAN107;
			other.HISCAN108 = this.HISCAN108;
			other.HISCAN109 = this.HISCAN109;
			other.HISCAN110 = this.HISCAN110;
			other.HISCAN111 = this.HISCAN111;
			other.HISCAN112 = this.HISCAN112;
			other.HISPAN101 = this.HISPAN101;
			other.HISPAN102 = this.HISPAN102;
			other.HISPAN103 = this.HISPAN103;
			other.HISPAN104 = this.HISPAN104;
			other.HISPAN105 = this.HISPAN105;
			other.HISPAN106 = this.HISPAN106;
			other.HISPAN107 = this.HISPAN107;
			other.HISPAN108 = this.HISPAN108;
			other.HISPAN109 = this.HISPAN109;
			other.HISPAN110 = this.HISPAN110;
			other.HISPAN111 = this.HISPAN111;
			other.HISPAN112 = this.HISPAN112;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.HISKLE = this.HISKLE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AfterClient.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AfterClient.length == 0) {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AfterClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AfterClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AfterClient) {

				try {

					int length = 0;

					this.HISKLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HISKLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HISCAN01 = readString(dis, ois);

				this.HISCAN02 = readString(dis, ois);

				this.HISCAN03 = readString(dis, ois);

				this.HISCAN04 = readString(dis, ois);

				this.HISCAN05 = readString(dis, ois);

				this.HISCAN06 = readString(dis, ois);

				this.HISCAN07 = readString(dis, ois);

				this.HISCAN08 = readString(dis, ois);

				this.HISCAN09 = readString(dis, ois);

				this.HISCAN10 = readString(dis, ois);

				this.HISCAN11 = readString(dis, ois);

				this.HISCAN12 = readString(dis, ois);

				this.HISPAN01 = readString(dis, ois);

				this.HISPAN02 = readString(dis, ois);

				this.HISPAN03 = readString(dis, ois);

				this.HISPAN04 = readString(dis, ois);

				this.HISPAN05 = readString(dis, ois);

				this.HISPAN06 = readString(dis, ois);

				this.HISPAN07 = readString(dis, ois);

				this.HISPAN08 = readString(dis, ois);

				this.HISPAN09 = readString(dis, ois);

				this.HISPAN10 = readString(dis, ois);

				this.HISPAN11 = readString(dis, ois);

				this.HISPAN12 = readString(dis, ois);

				this.HISCAN101 = readString(dis, ois);

				this.HISCAN102 = readString(dis, ois);

				this.HISCAN103 = readString(dis, ois);

				this.HISCAN104 = readString(dis, ois);

				this.HISCAN105 = readString(dis, ois);

				this.HISCAN106 = readString(dis, ois);

				this.HISCAN107 = readString(dis, ois);

				this.HISCAN108 = readString(dis, ois);

				this.HISCAN109 = readString(dis, ois);

				this.HISCAN110 = readString(dis, ois);

				this.HISCAN111 = readString(dis, ois);

				this.HISCAN112 = readString(dis, ois);

				this.HISPAN101 = readString(dis, ois);

				this.HISPAN102 = readString(dis, ois);

				this.HISPAN103 = readString(dis, ois);

				this.HISPAN104 = readString(dis, ois);

				this.HISPAN105 = readString(dis, ois);

				this.HISPAN106 = readString(dis, ois);

				this.HISPAN107 = readString(dis, ois);

				this.HISPAN108 = readString(dis, ois);

				this.HISPAN109 = readString(dis, ois);

				this.HISPAN110 = readString(dis, ois);

				this.HISPAN111 = readString(dis, ois);

				this.HISPAN112 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.HISCAN01, dos, oos);

				writeString(this.HISCAN02, dos, oos);

				writeString(this.HISCAN03, dos, oos);

				writeString(this.HISCAN04, dos, oos);

				writeString(this.HISCAN05, dos, oos);

				writeString(this.HISCAN06, dos, oos);

				writeString(this.HISCAN07, dos, oos);

				writeString(this.HISCAN08, dos, oos);

				writeString(this.HISCAN09, dos, oos);

				writeString(this.HISCAN10, dos, oos);

				writeString(this.HISCAN11, dos, oos);

				writeString(this.HISCAN12, dos, oos);

				writeString(this.HISPAN01, dos, oos);

				writeString(this.HISPAN02, dos, oos);

				writeString(this.HISPAN03, dos, oos);

				writeString(this.HISPAN04, dos, oos);

				writeString(this.HISPAN05, dos, oos);

				writeString(this.HISPAN06, dos, oos);

				writeString(this.HISPAN07, dos, oos);

				writeString(this.HISPAN08, dos, oos);

				writeString(this.HISPAN09, dos, oos);

				writeString(this.HISPAN10, dos, oos);

				writeString(this.HISPAN11, dos, oos);

				writeString(this.HISPAN12, dos, oos);

				writeString(this.HISCAN101, dos, oos);

				writeString(this.HISCAN102, dos, oos);

				writeString(this.HISCAN103, dos, oos);

				writeString(this.HISCAN104, dos, oos);

				writeString(this.HISCAN105, dos, oos);

				writeString(this.HISCAN106, dos, oos);

				writeString(this.HISCAN107, dos, oos);

				writeString(this.HISCAN108, dos, oos);

				writeString(this.HISCAN109, dos, oos);

				writeString(this.HISCAN110, dos, oos);

				writeString(this.HISCAN111, dos, oos);

				writeString(this.HISCAN112, dos, oos);

				writeString(this.HISPAN101, dos, oos);

				writeString(this.HISPAN102, dos, oos);

				writeString(this.HISPAN103, dos, oos);

				writeString(this.HISPAN104, dos, oos);

				writeString(this.HISPAN105, dos, oos);

				writeString(this.HISPAN106, dos, oos);

				writeString(this.HISPAN107, dos, oos);

				writeString(this.HISPAN108, dos, oos);

				writeString(this.HISPAN109, dos, oos);

				writeString(this.HISPAN110, dos, oos);

				writeString(this.HISPAN111, dos, oos);

				writeString(this.HISPAN112, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HISKLE=" + HISKLE);
			sb.append(",HISCAN01=" + HISCAN01);
			sb.append(",HISCAN02=" + HISCAN02);
			sb.append(",HISCAN03=" + HISCAN03);
			sb.append(",HISCAN04=" + HISCAN04);
			sb.append(",HISCAN05=" + HISCAN05);
			sb.append(",HISCAN06=" + HISCAN06);
			sb.append(",HISCAN07=" + HISCAN07);
			sb.append(",HISCAN08=" + HISCAN08);
			sb.append(",HISCAN09=" + HISCAN09);
			sb.append(",HISCAN10=" + HISCAN10);
			sb.append(",HISCAN11=" + HISCAN11);
			sb.append(",HISCAN12=" + HISCAN12);
			sb.append(",HISPAN01=" + HISPAN01);
			sb.append(",HISPAN02=" + HISPAN02);
			sb.append(",HISPAN03=" + HISPAN03);
			sb.append(",HISPAN04=" + HISPAN04);
			sb.append(",HISPAN05=" + HISPAN05);
			sb.append(",HISPAN06=" + HISPAN06);
			sb.append(",HISPAN07=" + HISPAN07);
			sb.append(",HISPAN08=" + HISPAN08);
			sb.append(",HISPAN09=" + HISPAN09);
			sb.append(",HISPAN10=" + HISPAN10);
			sb.append(",HISPAN11=" + HISPAN11);
			sb.append(",HISPAN12=" + HISPAN12);
			sb.append(",HISCAN101=" + HISCAN101);
			sb.append(",HISCAN102=" + HISCAN102);
			sb.append(",HISCAN103=" + HISCAN103);
			sb.append(",HISCAN104=" + HISCAN104);
			sb.append(",HISCAN105=" + HISCAN105);
			sb.append(",HISCAN106=" + HISCAN106);
			sb.append(",HISCAN107=" + HISCAN107);
			sb.append(",HISCAN108=" + HISCAN108);
			sb.append(",HISCAN109=" + HISCAN109);
			sb.append(",HISCAN110=" + HISCAN110);
			sb.append(",HISCAN111=" + HISCAN111);
			sb.append(",HISCAN112=" + HISCAN112);
			sb.append(",HISPAN101=" + HISPAN101);
			sb.append(",HISPAN102=" + HISPAN102);
			sb.append(",HISPAN103=" + HISPAN103);
			sb.append(",HISPAN104=" + HISPAN104);
			sb.append(",HISPAN105=" + HISPAN105);
			sb.append(",HISPAN106=" + HISPAN106);
			sb.append(",HISPAN107=" + HISPAN107);
			sb.append(",HISPAN108=" + HISPAN108);
			sb.append(",HISPAN109=" + HISPAN109);
			sb.append(",HISPAN110=" + HISPAN110);
			sb.append(",HISPAN111=" + HISPAN111);
			sb.append(",HISPAN112=" + HISPAN112);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HISKLE, other.HISKLE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileInputDelimited_14 - inputs:(after_tFileInputDelimited_13)
				// outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14)
				// outputs:()
				// linked node: tMap_8 - inputs:(row13,row14)
				// outputs:(copyOfcopyOfcopyOfmain_0_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct>getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_14 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_14 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_14 = null;
				int limit_tFileInputDelimited_14 = -1;
				try {

					Object filename_tFileInputDelimited_14 = "C:/DEV/Data/Base Montauban/historique_clients.csv";
					if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_14 = 0, random_value_tFileInputDelimited_14 = -1;
						if (footer_value_tFileInputDelimited_14 > 0 || random_value_tFileInputDelimited_14 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_14 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/historique_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_14, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_14 != null && fid_tFileInputDelimited_14.nextRecord()) {
						rowstate_tFileInputDelimited_14.reset();

						row14 = null;

						row14 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row14 = new row14Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_14 = 0;

							columnIndexWithD_tFileInputDelimited_14 = 0;

							row14.HISKLE = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 1;

							row14.HISCAN01 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 2;

							row14.HISCAN02 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 3;

							row14.HISCAN03 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 4;

							row14.HISCAN04 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 5;

							row14.HISCAN05 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 6;

							row14.HISCAN06 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 7;

							row14.HISCAN07 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 8;

							row14.HISCAN08 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 9;

							row14.HISCAN09 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 10;

							row14.HISCAN10 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 11;

							row14.HISCAN11 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 12;

							row14.HISCAN12 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 13;

							row14.HISPAN01 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 14;

							row14.HISPAN02 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 15;

							row14.HISPAN03 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 16;

							row14.HISPAN04 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 17;

							row14.HISPAN05 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 18;

							row14.HISPAN06 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 19;

							row14.HISPAN07 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 20;

							row14.HISPAN08 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 21;

							row14.HISPAN09 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 22;

							row14.HISPAN10 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 23;

							row14.HISPAN11 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 24;

							row14.HISPAN12 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 25;

							row14.HISCAN101 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 26;

							row14.HISCAN102 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 27;

							row14.HISCAN103 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 28;

							row14.HISCAN104 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 29;

							row14.HISCAN105 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 30;

							row14.HISCAN106 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 31;

							row14.HISCAN107 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 32;

							row14.HISCAN108 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 33;

							row14.HISCAN109 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 34;

							row14.HISCAN110 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 35;

							row14.HISCAN111 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 36;

							row14.HISCAN112 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 37;

							row14.HISPAN101 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 38;

							row14.HISPAN102 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 39;

							row14.HISPAN103 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 40;

							row14.HISPAN104 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 41;

							row14.HISPAN105 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 42;

							row14.HISPAN106 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 43;

							row14.HISPAN107 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 44;

							row14.HISPAN108 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 45;

							row14.HISPAN109 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 46;

							row14.HISPAN110 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 47;

							row14.HISPAN111 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 48;

							row14.HISPAN112 = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							if (rowstate_tFileInputDelimited_14.getException() != null) {
								throw rowstate_tFileInputDelimited_14.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */

						/**
						 * [tFileInputDelimited_14 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						/**
						 * [tFileInputDelimited_14 process_data_begin ] stop
						 */
// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
							}

							row14Struct row14_HashRow = new row14Struct();

							row14_HashRow.HISKLE = row14.HISKLE;

							row14_HashRow.HISCAN01 = row14.HISCAN01;

							row14_HashRow.HISCAN02 = row14.HISCAN02;

							row14_HashRow.HISCAN03 = row14.HISCAN03;

							row14_HashRow.HISCAN04 = row14.HISCAN04;

							row14_HashRow.HISCAN05 = row14.HISCAN05;

							row14_HashRow.HISCAN06 = row14.HISCAN06;

							row14_HashRow.HISCAN07 = row14.HISCAN07;

							row14_HashRow.HISCAN08 = row14.HISCAN08;

							row14_HashRow.HISCAN09 = row14.HISCAN09;

							row14_HashRow.HISCAN10 = row14.HISCAN10;

							row14_HashRow.HISCAN11 = row14.HISCAN11;

							row14_HashRow.HISCAN12 = row14.HISCAN12;

							row14_HashRow.HISPAN01 = row14.HISPAN01;

							row14_HashRow.HISPAN02 = row14.HISPAN02;

							row14_HashRow.HISPAN03 = row14.HISPAN03;

							row14_HashRow.HISPAN04 = row14.HISPAN04;

							row14_HashRow.HISPAN05 = row14.HISPAN05;

							row14_HashRow.HISPAN06 = row14.HISPAN06;

							row14_HashRow.HISPAN07 = row14.HISPAN07;

							row14_HashRow.HISPAN08 = row14.HISPAN08;

							row14_HashRow.HISPAN09 = row14.HISPAN09;

							row14_HashRow.HISPAN10 = row14.HISPAN10;

							row14_HashRow.HISPAN11 = row14.HISPAN11;

							row14_HashRow.HISPAN12 = row14.HISPAN12;

							row14_HashRow.HISCAN101 = row14.HISCAN101;

							row14_HashRow.HISCAN102 = row14.HISCAN102;

							row14_HashRow.HISCAN103 = row14.HISCAN103;

							row14_HashRow.HISCAN104 = row14.HISCAN104;

							row14_HashRow.HISCAN105 = row14.HISCAN105;

							row14_HashRow.HISCAN106 = row14.HISCAN106;

							row14_HashRow.HISCAN107 = row14.HISCAN107;

							row14_HashRow.HISCAN108 = row14.HISCAN108;

							row14_HashRow.HISCAN109 = row14.HISCAN109;

							row14_HashRow.HISCAN110 = row14.HISCAN110;

							row14_HashRow.HISCAN111 = row14.HISCAN111;

							row14_HashRow.HISCAN112 = row14.HISCAN112;

							row14_HashRow.HISPAN101 = row14.HISPAN101;

							row14_HashRow.HISPAN102 = row14.HISPAN102;

							row14_HashRow.HISPAN103 = row14.HISPAN103;

							row14_HashRow.HISPAN104 = row14.HISPAN104;

							row14_HashRow.HISPAN105 = row14.HISPAN105;

							row14_HashRow.HISPAN106 = row14.HISPAN106;

							row14_HashRow.HISPAN107 = row14.HISPAN107;

							row14_HashRow.HISPAN108 = row14.HISPAN108;

							row14_HashRow.HISPAN109 = row14.HISPAN109;

							row14_HashRow.HISPAN110 = row14.HISPAN110;

							row14_HashRow.HISPAN111 = row14.HISPAN111;

							row14_HashRow.HISPAN112 = row14.HISPAN112;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

							/**
							 * [tAdvancedHash_row14 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							/**
							 * [tAdvancedHash_row14 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row14 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							/**
							 * [tAdvancedHash_row14 process_data_end ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_14 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						/**
						 * [tFileInputDelimited_14 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/historique_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_14 != null) {
							fid_tFileInputDelimited_14.close();
						}
					}
					if (fid_tFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE", fid_tFileInputDelimited_14.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_14 finally ] start
				 */

				currentComponent = "tFileInputDelimited_14";

				/**
				 * [tFileInputDelimited_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public void tLogRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tLogRow_1 process_data_begin ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 process_data_end ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogRow_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AfterClient AfterClientClass = new AfterClient();

		int exitCode = AfterClientClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = AfterClient.class.getClassLoader()
					.getResourceAsStream("local_project/afterclient_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = AfterClient.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : AfterClient");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1349899 characters generated by Talend Open Studio for Data Integration on
 * the 17 février 2022 à 15:17:46 CET
 ************************************************************************************************/