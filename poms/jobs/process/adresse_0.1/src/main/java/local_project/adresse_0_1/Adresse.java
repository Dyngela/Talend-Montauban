// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.adresse_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Adresse Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Adresse implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Adresse";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Adresse.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Adresse.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDBRollback_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Adresse = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Adresse = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idadresse;

		public int getIdadresse() {
			return this.idadresse;
		}

		public String codepostal;

		public String getCodepostal() {
			return this.codepostal;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String rue;

		public String getRue() {
			return this.rue;
		}

		public String ruebis;

		public String getRuebis() {
			return this.ruebis;
		}

		public String ruetier;

		public String getRuetier() {
			return this.ruetier;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idadresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mainStruct other = (mainStruct) obj;

			if (this.idadresse != other.idadresse)
				return false;

			return true;
		}

		public void copyDataTo(mainStruct other) {

			other.idadresse = this.idadresse;
			other.codepostal = this.codepostal;
			other.pays = this.pays;
			other.rue = this.rue;
			other.ruebis = this.ruebis;
			other.ruetier = this.ruetier;
			other.ville = this.ville;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(mainStruct other) {

			other.idadresse = this.idadresse;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Adresse.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Adresse.length == 0) {
						commonByteArray_LOCAL_PROJECT_Adresse = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Adresse = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Adresse, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Adresse, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Adresse) {

				try {

					int length = 0;

					this.idadresse = dis.readInt();

					this.codepostal = readString(dis);

					this.pays = readString(dis);

					this.rue = readString(dis);

					this.ruebis = readString(dis);

					this.ruetier = readString(dis);

					this.ville = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idadresse);

				// String

				writeString(this.codepostal, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.rue, dos);

				// String

				writeString(this.ruebis, dos);

				// String

				writeString(this.ruetier, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idadresse=" + String.valueOf(idadresse));
			sb.append(",codepostal=" + codepostal);
			sb.append(",pays=" + pays);
			sb.append(",rue=" + rue);
			sb.append(",ruebis=" + ruebis);
			sb.append(",ruetier=" + ruetier);
			sb.append(",ville=" + ville);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idadresse, other.idadresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Adresse = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Adresse = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Adresse.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Adresse.length == 0) {
						commonByteArray_LOCAL_PROJECT_Adresse = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Adresse = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Adresse, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Adresse, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Adresse) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				mainStruct main = new mainStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "main");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("adresse");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("adresse");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_1 + "\"");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"idadresse\",\"codepostal\",\"pays\",\"rue\",\"ruebis\",\"ruetier\",\"ville\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				mainStruct main_tmp = new mainStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_1 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 0;

						row1.CREF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 1;

						row1.CNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 2;

						row1.CRUE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 3;

						row1.CAUX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 4;

						row1.CCPTL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 5;

						row1.CVIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 6;

						row1.FILL01 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 7;

						row1.CQUAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 8;

						row1.CCOM1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 9;

						row1.CCREP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 10;

						row1.CREMFI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 11;

						row1.CECHE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 12;

						row1.CECHJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 13;

						row1.CPAI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 14;

						row1.CCHAN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 15;

						row1.CECHJ2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 16;

						row1.CMOD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 17;

						row1.CBQ1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 18;

						row1.CBQ2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 19;

						row1.CBQ3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 20;

						row1.CBQ4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 21;

						row1.CBQ5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 22;

						row1.CBQ6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 23;

						row1.CFACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 24;

						row1.CBL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 25;

						row1.CESC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 26;

						row1.VARAD1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 27;

						row1.VARAD2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 28;

						row1.VARAD3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 29;

						row1.VARAD4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 30;

						row1.VARAD5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 31;

						row1.VARAD6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 32;

						row1.VARA1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 33;

						row1.VARA2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 34;

						row1.VARA3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 35;

						row1.VARA4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 36;

						row1.VARA5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 37;

						row1.VARB1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 38;

						row1.VARB2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 39;

						row1.VARB3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 40;

						row1.VARB4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 41;

						row1.VARB5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 42;

						row1.VARN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 43;

						row1.VARN2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 44;

						row1.VARN3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 45;

						row1.VARN4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 46;

						row1.VARN5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 47;

						row1.CDATCRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 48;

						row1.CTEL1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 49;

						row1.CTEL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 50;

						row1.CTEX1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 51;

						row1.CTEX2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 52;

						row1.CDELMOY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 53;

						row1.CAFFAIRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 54;

						row1.CCPTFACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 55;

						row1.CINTERNET = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 56;

						row1.CIBAN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 57;

						row1.CBIC_old = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 58;

						row1.CFIDEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 59;

						row1.CRFA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 60;

						row1.CCOMREG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 61;

						row1.CAPE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 62;

						row1.CIBAN72 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 63;

						row1.CIBAN8 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 64;

						row1.CIBAN9 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 65;

						row1.CBIC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 66;

						row1.CTRANSP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 67;

						row1.CFACTMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 68;

						row1.CBLMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 69;

						row1.CFACTWEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 70;

						row1.CBLWEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 71;

						row1.CPUBLIPOSTAGE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 72;

						row1.CFACT_EDI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 73;

						row1.CFACT_CHORUS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 74;

						row1.CFACTORING = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 75;

						row1.CCHORUS_SERVICE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 76;

						row1.CFIL14 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 77;

						row1.CTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 78;

						row1.FIL02 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 79;

						row1.CREJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 80;

						row1.CSECT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 81;

						row1.CTOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 82;

						row1.CCAN1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 83;

						row1.CCAN2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 84;

						row1.CCAN3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 85;

						row1.CDATF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 86;

						row1.CCAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 87;

						row1.CRESP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 88;

						row1.CAPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 89;

						row1.CPREMC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 90;

						row1.CDERNC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 91;

						row1.CPROCC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 92;

						row1.CTYPEC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 93;

						row1.CSIRET = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 94;

						row1.CORIGIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 95;

						row1.CMOTCOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 96;

						row1.CCOMPTA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 97;

						row1.CAFFMEMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 98;

						row1.CFIL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 99;

						row1.CPNAFF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 100;

						row1.CDEVTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 101;

						row1.CMINCOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 102;

						row1.CRELEVE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 103;

						row1.CRELIQ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 104;

						row1.CMAJ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 105;

						row1.CECH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 106;

						row1.CETIQ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 107;

						row1.CCOEF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 108;

						row1.CARROND = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 109;

						row1.CENCOUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 110;

						row1.CNIVREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 111;

						row1.CBLOCAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 112;

						row1.CDATREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 113;

						row1.CRESCO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 114;

						row1.CRESFI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 115;

						row1.CSFAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 116;

						row1.CDATENC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 117;

						row1.CDATSFA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 118;

						row1.CCONTR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 119;

						row1.CDEREL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 120;

						row1.CPAYS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 121;

						row1.CBLTOT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 122;

						row1.CBLLIG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 123;

						row1.CENCDIS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 124;

						row1.CNCEE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 125;

						row1.CNSFAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 126;

						row1.CPSRDAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 127;

						row1.CEPNASR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 128;

						row1.CCODTAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 129;

						row1.CDEVISE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_1, row1);

						valueToConn_1(fid_tFileInputDelimited_1, row1);

					}

				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								main = null;

// # Output table : 'main'
								main_tmp.idadresse = Numeric.sequence("s1", 1, 1);
								main_tmp.codepostal = row1.CCPTL;
								main_tmp.pays = row1.CPAYS;
								main_tmp.rue = row1.CRUE;
								main_tmp.ruebis = row1.CAUX;
								main_tmp.ruetier = null;
								main_tmp.ville = row1.CVIL;
								main_tmp.idadresse_livraison = null;
								main_tmp.idcli = row1.CREF;
								main_tmp.idfournisseur = null;
								main = main_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "main"
							if (main != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "main");
								}

								whetherReject_tDBOutput_1 = false;
								pstmt_tDBOutput_1.setInt(1, main.idadresse);

								if (main.codepostal == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, main.codepostal);
								}

								if (main.pays == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3, main.pays);
								}

								if (main.rue == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, main.rue);
								}

								if (main.ruebis == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5, main.ruebis);
								}

								if (main.ruetier == null) {
									pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(6, main.ruetier);
								}

								if (main.ville == null) {
									pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7, main.ville);
								}

								if (main.idadresse_livraison == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, main.idadresse_livraison);
								}

								if (main.idcli == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, main.idcli);
								}

								if (main.idfournisseur == null) {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(10, main.idfournisseur);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if (!whetherReject_tDBOutput_1) {
								}
								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "main"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "main");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_3Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_3 begin ] start
				 */

				ok_Hash.put("tDBCommit_3", false);
				start_Hash.put("tDBCommit_3", System.currentTimeMillis());

				currentComponent = "tDBCommit_3";

				int tos_count_tDBCommit_3 = 0;

				/**
				 * [tDBCommit_3 begin ] stop
				 */

				/**
				 * [tDBCommit_3 main ] start
				 */

				currentComponent = "tDBCommit_3";

				java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed()) {

					conn_tDBCommit_3.commit();

				}

				tos_count_tDBCommit_3++;

				/**
				 * [tDBCommit_3 main ] stop
				 */

				/**
				 * [tDBCommit_3 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_3 process_data_end ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_3 end ] start
				 */

				currentComponent = "tDBCommit_3";

				ok_Hash.put("tDBCommit_3", true);
				end_Hash.put("tDBCommit_3", System.currentTimeMillis());

				/**
				 * [tDBCommit_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_3 finally ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_3 begin ] start
				 */

				ok_Hash.put("tDBRollback_3", false);
				start_Hash.put("tDBRollback_3", System.currentTimeMillis());

				currentComponent = "tDBRollback_3";

				int tos_count_tDBRollback_3 = 0;

				/**
				 * [tDBRollback_3 begin ] stop
				 */

				/**
				 * [tDBRollback_3 main ] start
				 */

				currentComponent = "tDBRollback_3";

				java.sql.Connection conn_tDBRollback_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_3 != null && !conn_tDBRollback_3.isClosed()) {

					conn_tDBRollback_3.rollback();

				}

				tos_count_tDBRollback_3++;

				/**
				 * [tDBRollback_3 main ] stop
				 */

				/**
				 * [tDBRollback_3 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_3 process_data_end ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_3 end ] start
				 */

				currentComponent = "tDBRollback_3";

				ok_Hash.put("tDBRollback_3", true);
				end_Hash.put("tDBRollback_3", System.currentTimeMillis());

				/**
				 * [tDBRollback_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_3 finally ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "192.168.1.110" + ":" + "5432" + "/" + "syg";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:jRvodAspZHyxBmB5E+S5JxxqHXAMvAGkotA+QhvYnw5BmSTrEA==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Adresse AdresseClass = new Adresse();

		int exitCode = AdresseClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Adresse.class.getClassLoader()
					.getResourceAsStream("local_project/adresse_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Adresse.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Adresse");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 129351 characters generated by Talend Open Studio for Data Integration on the
 * 3 janvier 2022 à 12:50:34 CET
 ************************************************************************************************/