// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.article_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Article Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Article implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Article";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Article.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Article.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "192.168.1.116" + ":" + "5432" + "/" + "syg";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Wt661RLbvugOLkmREJG3KD9c85VYWK3C44IhMSOBgL5javW2Fw==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmainStruct implements routines.system.IPersistableRow<copyOfmainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		public Float coef_achat;

		public Float getCoef_achat() {
			return this.coef_achat;
		}

		public Float coef_marge;

		public Float getCoef_marge() {
			return this.coef_marge;
		}

		public Float coef_vente;

		public Float getCoef_vente() {
			return this.coef_vente;
		}

		public String imput_01;

		public String getImput_01() {
			return this.imput_01;
		}

		public String imput_02;

		public String getImput_02() {
			return this.imput_02;
		}

		public String imput_03;

		public String getImput_03() {
			return this.imput_03;
		}

		public String imput_04;

		public String getImput_04() {
			return this.imput_04;
		}

		public String imput_05;

		public String getImput_05() {
			return this.imput_05;
		}

		public String imput_06;

		public String getImput_06() {
			return this.imput_06;
		}

		public String controle_marge;

		public String getControle_marge() {
			return this.controle_marge;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idfamille == null) ? 0 : this.idfamille.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmainStruct other = (copyOfmainStruct) obj;

			if (this.idfamille == null) {
				if (other.idfamille != null)
					return false;

			} else if (!this.idfamille.equals(other.idfamille))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmainStruct other) {

			other.idfamille = this.idfamille;
			other.coef_achat = this.coef_achat;
			other.coef_marge = this.coef_marge;
			other.coef_vente = this.coef_vente;
			other.imput_01 = this.imput_01;
			other.imput_02 = this.imput_02;
			other.imput_03 = this.imput_03;
			other.imput_04 = this.imput_04;
			other.imput_05 = this.imput_05;
			other.imput_06 = this.imput_06;
			other.controle_marge = this.controle_marge;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfmainStruct other) {

			other.idfamille = this.idfamille;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.idfamille = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coef_achat = null;
					} else {
						this.coef_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_marge = null;
					} else {
						this.coef_marge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_vente = null;
					} else {
						this.coef_vente = dis.readFloat();
					}

					this.imput_01 = readString(dis);

					this.imput_02 = readString(dis);

					this.imput_03 = readString(dis);

					this.imput_04 = readString(dis);

					this.imput_05 = readString(dis);

					this.imput_06 = readString(dis);

					this.controle_marge = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idfamille, dos);

				// Float

				if (this.coef_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_achat);
				}

				// Float

				if (this.coef_marge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_marge);
				}

				// Float

				if (this.coef_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_vente);
				}

				// String

				writeString(this.imput_01, dos);

				// String

				writeString(this.imput_02, dos);

				// String

				writeString(this.imput_03, dos);

				// String

				writeString(this.imput_04, dos);

				// String

				writeString(this.imput_05, dos);

				// String

				writeString(this.imput_06, dos);

				// String

				writeString(this.controle_marge, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfamille=" + idfamille);
			sb.append(",coef_achat=" + String.valueOf(coef_achat));
			sb.append(",coef_marge=" + String.valueOf(coef_marge));
			sb.append(",coef_vente=" + String.valueOf(coef_vente));
			sb.append(",imput_01=" + imput_01);
			sb.append(",imput_02=" + imput_02);
			sb.append(",imput_03=" + imput_03);
			sb.append(",imput_04=" + imput_04);
			sb.append(",imput_05=" + imput_05);
			sb.append(",imput_06=" + imput_06);
			sb.append(",controle_marge=" + controle_marge);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfamille, other.idfamille);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfmainStruct copyOfmain = new copyOfmainStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("famille");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("famille");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtClear_tDBOutput_2.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_2 + "\"");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"idfamille\",\"coef_achat\",\"coef_marge\",\"coef_vente\",\"imput_01\",\"imput_02\",\"imput_03\",\"imput_04\",\"imput_05\",\"imput_06\",\"controle_marge\",\"libelle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmainStruct copyOfmain_tmp = new copyOfmainStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/DEV/Data/Base Montauban/familles.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/familles.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.PA3PAR0 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.PA3PAR1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.PA3PAR2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row2.PA3PAR3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row2.PA3PAR4 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row2.PA3PAR5 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row2.PA3LIBEL = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row2.PA3COEF1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row2.PA3COEFA = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row2.PA3COEFM = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row2.PA3MARGR = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row2.PA3IMPUT1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row2.PA3IMPUT2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row2.PA3IMPUT3 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row2.PA3IMPUT4 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							row2.PA3IMPUT5 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							row2.PA3IMPUT6 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row2.PA3DIFF = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row2.PA3PAR0W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							row2.PA3PAR1W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							row2.PA3PAR2W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							row2.PA3PAR3W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							row2.PA3PAR4W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							row2.PA3PAR5W = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							row2.PA3COEFB = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							row2.PA3COEFC = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							row2.PA3RAYON = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							row2.PA3ARROND = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							row2.PA3EDNET = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							row2.PA3PROMDEB = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							row2.PA3PROMFIN = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								copyOfmain = null;

// # Output table : 'copyOfmain'
								copyOfmain_tmp.idfamille = row2.PA3PAR1;
								copyOfmain_tmp.coef_achat = row2.PA3COEFA.isBlank() ? new Float(0)
										: Float.parseFloat(row2.PA3COEFA);
								copyOfmain_tmp.coef_marge = row2.PA3COEFM.isBlank() ? new Float(0)
										: Float.parseFloat(row2.PA3COEFM);
								copyOfmain_tmp.coef_vente = row2.PA3COEF1.isBlank() ? new Float(0)
										: Float.parseFloat(row2.PA3COEF1);
								copyOfmain_tmp.imput_01 = row2.PA3IMPUT1;
								copyOfmain_tmp.imput_02 = row2.PA3IMPUT2;
								copyOfmain_tmp.imput_03 = row2.PA3IMPUT3;
								copyOfmain_tmp.imput_04 = row2.PA3IMPUT4;
								copyOfmain_tmp.imput_05 = row2.PA3IMPUT5;
								copyOfmain_tmp.imput_06 = row2.PA3IMPUT6;
								copyOfmain_tmp.controle_marge = row2.PA3MARGR;
								copyOfmain_tmp.libelle = row2.PA3LIBEL;
								copyOfmain = copyOfmain_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "copyOfmain"
							if (copyOfmain != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain");
								}

								whetherReject_tDBOutput_2 = false;
								if (copyOfmain.idfamille == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(1, copyOfmain.idfamille);
								}

								if (copyOfmain.coef_achat == null) {
									pstmt_tDBOutput_2.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_2.setFloat(2, copyOfmain.coef_achat);
								}

								if (copyOfmain.coef_marge == null) {
									pstmt_tDBOutput_2.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_2.setFloat(3, copyOfmain.coef_marge);
								}

								if (copyOfmain.coef_vente == null) {
									pstmt_tDBOutput_2.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_2.setFloat(4, copyOfmain.coef_vente);
								}

								if (copyOfmain.imput_01 == null) {
									pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(5, copyOfmain.imput_01);
								}

								if (copyOfmain.imput_02 == null) {
									pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(6, copyOfmain.imput_02);
								}

								if (copyOfmain.imput_03 == null) {
									pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(7, copyOfmain.imput_03);
								}

								if (copyOfmain.imput_04 == null) {
									pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(8, copyOfmain.imput_04);
								}

								if (copyOfmain.imput_05 == null) {
									pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(9, copyOfmain.imput_05);
								}

								if (copyOfmain.imput_06 == null) {
									pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(10, copyOfmain.imput_06);
								}

								if (copyOfmain.controle_marge == null) {
									pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(11, copyOfmain.controle_marge);
								}

								if (copyOfmain.libelle == null) {
									pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(12, copyOfmain.libelle);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;

								if ((batchSize_tDBOutput_2 > 0)
										&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
									try {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										batchSizeCounter_tDBOutput_2 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										System.err.println(errormessage_tDBOutput_2);

									}
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "copyOfmain"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/familles.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_0Struct implements routines.system.IPersistableRow<copyOfmain_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idsous_fam;

		public String getIdsous_fam() {
			return this.idsous_fam;
		}

		public String arrondi;

		public String getArrondi() {
			return this.arrondi;
		}

		public Float coef_achat;

		public Float getCoef_achat() {
			return this.coef_achat;
		}

		public Float coef_marge;

		public Float getCoef_marge() {
			return this.coef_marge;
		}

		public Float coef_vente;

		public Float getCoef_vente() {
			return this.coef_vente;
		}

		public String contr_marge;

		public String getContr_marge() {
			return this.contr_marge;
		}

		public String degressif;

		public String getDegressif() {
			return this.degressif;
		}

		public String imput_01;

		public String getImput_01() {
			return this.imput_01;
		}

		public String imput_02;

		public String getImput_02() {
			return this.imput_02;
		}

		public String imput_03;

		public String getImput_03() {
			return this.imput_03;
		}

		public String imput_04;

		public String getImput_04() {
			return this.imput_04;
		}

		public String imput_05;

		public String getImput_05() {
			return this.imput_05;
		}

		public String imput_06;

		public String getImput_06() {
			return this.imput_06;
		}

		public String lib;

		public String getLib() {
			return this.lib;
		}

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idsous_fam == null) ? 0 : this.idsous_fam.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_0Struct other = (copyOfmain_0Struct) obj;

			if (this.idsous_fam == null) {
				if (other.idsous_fam != null)
					return false;

			} else if (!this.idsous_fam.equals(other.idsous_fam))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_0Struct other) {

			other.idsous_fam = this.idsous_fam;
			other.arrondi = this.arrondi;
			other.coef_achat = this.coef_achat;
			other.coef_marge = this.coef_marge;
			other.coef_vente = this.coef_vente;
			other.contr_marge = this.contr_marge;
			other.degressif = this.degressif;
			other.imput_01 = this.imput_01;
			other.imput_02 = this.imput_02;
			other.imput_03 = this.imput_03;
			other.imput_04 = this.imput_04;
			other.imput_05 = this.imput_05;
			other.imput_06 = this.imput_06;
			other.lib = this.lib;
			other.idfamille = this.idfamille;

		}

		public void copyKeysDataTo(copyOfmain_0Struct other) {

			other.idsous_fam = this.idsous_fam;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.idsous_fam = readString(dis);

					this.arrondi = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coef_achat = null;
					} else {
						this.coef_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_marge = null;
					} else {
						this.coef_marge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_vente = null;
					} else {
						this.coef_vente = dis.readFloat();
					}

					this.contr_marge = readString(dis);

					this.degressif = readString(dis);

					this.imput_01 = readString(dis);

					this.imput_02 = readString(dis);

					this.imput_03 = readString(dis);

					this.imput_04 = readString(dis);

					this.imput_05 = readString(dis);

					this.imput_06 = readString(dis);

					this.lib = readString(dis);

					this.idfamille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idsous_fam, dos);

				// String

				writeString(this.arrondi, dos);

				// Float

				if (this.coef_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_achat);
				}

				// Float

				if (this.coef_marge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_marge);
				}

				// Float

				if (this.coef_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_vente);
				}

				// String

				writeString(this.contr_marge, dos);

				// String

				writeString(this.degressif, dos);

				// String

				writeString(this.imput_01, dos);

				// String

				writeString(this.imput_02, dos);

				// String

				writeString(this.imput_03, dos);

				// String

				writeString(this.imput_04, dos);

				// String

				writeString(this.imput_05, dos);

				// String

				writeString(this.imput_06, dos);

				// String

				writeString(this.lib, dos);

				// String

				writeString(this.idfamille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idsous_fam=" + idsous_fam);
			sb.append(",arrondi=" + arrondi);
			sb.append(",coef_achat=" + String.valueOf(coef_achat));
			sb.append(",coef_marge=" + String.valueOf(coef_marge));
			sb.append(",coef_vente=" + String.valueOf(coef_vente));
			sb.append(",contr_marge=" + contr_marge);
			sb.append(",degressif=" + degressif);
			sb.append(",imput_01=" + imput_01);
			sb.append(",imput_02=" + imput_02);
			sb.append(",imput_03=" + imput_03);
			sb.append(",imput_04=" + imput_04);
			sb.append(",imput_05=" + imput_05);
			sb.append(",imput_06=" + imput_06);
			sb.append(",lib=" + lib);
			sb.append(",idfamille=" + idfamille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idsous_fam, other.idsous_fam);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfmain_0Struct copyOfmain_0 = new copyOfmain_0Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_0");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("sous_famille");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("sous_famille");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
				}
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"idsous_fam\",\"arrondi\",\"coef_achat\",\"coef_marge\",\"coef_vente\",\"contr_marge\",\"degressif\",\"imput_01\",\"imput_02\",\"imput_03\",\"imput_04\",\"imput_05\",\"imput_06\",\"lib\",\"idfamille\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_0Struct copyOfmain_0_tmp = new copyOfmain_0Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/DEV/Data/Base Montauban/sous_familles.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/sous_familles.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row3.PA3PAR0 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row3.PA3PAR1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row3.PA3PAR2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row3.PA3PAR3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row3.PA3PAR4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row3.PA3PAR5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row3.PA3LIBEL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row3.PA3COEF1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row3.PA3COEFA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							row3.PA3COEFM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 10;

							row3.PA3MARGR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 11;

							row3.PA3IMPUT1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							row3.PA3IMPUT2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							row3.PA3IMPUT3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							row3.PA3IMPUT4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							row3.PA3IMPUT5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							row3.PA3IMPUT6 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 17;

							row3.PA3DIFF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 18;

							row3.PA3PAR0W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 19;

							row3.PA3PAR1W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 20;

							row3.PA3PAR2W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 21;

							row3.PA3PAR3W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 22;

							row3.PA3PAR4W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 23;

							row3.PA3PAR5W = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 24;

							row3.PA3COEFB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 25;

							row3.PA3COEFC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 26;

							row3.PA3RAYON = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 27;

							row3.PA3ARROND = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 28;

							row3.PA3EDNET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 29;

							row3.PA3PROMDEB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 30;

							row3.PA3PROMFIN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_0 = null;

// # Output table : 'copyOfmain_0'
								copyOfmain_0_tmp.idsous_fam = row3.PA3PAR1 + row3.PA3PAR2;
								copyOfmain_0_tmp.arrondi = row3.PA3ARROND;
								copyOfmain_0_tmp.coef_achat = Float.parseFloat(row3.PA3COEFA);
								copyOfmain_0_tmp.coef_marge = Float.parseFloat(row3.PA3COEFM);
								copyOfmain_0_tmp.coef_vente = Float.parseFloat(row3.PA3COEF1);
								copyOfmain_0_tmp.contr_marge = row3.PA3MARGR;
								copyOfmain_0_tmp.degressif = row3.PA3EDNET;
								copyOfmain_0_tmp.imput_01 = row3.PA3IMPUT1;
								copyOfmain_0_tmp.imput_02 = row3.PA3IMPUT2;
								copyOfmain_0_tmp.imput_03 = row3.PA3IMPUT3;
								copyOfmain_0_tmp.imput_04 = row3.PA3IMPUT4;
								copyOfmain_0_tmp.imput_05 = row3.PA3IMPUT5;
								copyOfmain_0_tmp.imput_06 = row3.PA3IMPUT6;
								copyOfmain_0_tmp.lib = row3.PA3LIBEL;
								copyOfmain_0_tmp.idfamille = row3.PA3PAR1;
								copyOfmain_0 = copyOfmain_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_0"
							if (copyOfmain_0 != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_0");
								}

								whetherReject_tDBOutput_3 = false;
								if (copyOfmain_0.idsous_fam == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(1, copyOfmain_0.idsous_fam);
								}

								if (copyOfmain_0.arrondi == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(2, copyOfmain_0.arrondi);
								}

								if (copyOfmain_0.coef_achat == null) {
									pstmt_tDBOutput_3.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_3.setFloat(3, copyOfmain_0.coef_achat);
								}

								if (copyOfmain_0.coef_marge == null) {
									pstmt_tDBOutput_3.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_3.setFloat(4, copyOfmain_0.coef_marge);
								}

								if (copyOfmain_0.coef_vente == null) {
									pstmt_tDBOutput_3.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_3.setFloat(5, copyOfmain_0.coef_vente);
								}

								if (copyOfmain_0.contr_marge == null) {
									pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(6, copyOfmain_0.contr_marge);
								}

								if (copyOfmain_0.degressif == null) {
									pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(7, copyOfmain_0.degressif);
								}

								if (copyOfmain_0.imput_01 == null) {
									pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(8, copyOfmain_0.imput_01);
								}

								if (copyOfmain_0.imput_02 == null) {
									pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(9, copyOfmain_0.imput_02);
								}

								if (copyOfmain_0.imput_03 == null) {
									pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(10, copyOfmain_0.imput_03);
								}

								if (copyOfmain_0.imput_04 == null) {
									pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(11, copyOfmain_0.imput_04);
								}

								if (copyOfmain_0.imput_05 == null) {
									pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(12, copyOfmain_0.imput_05);
								}

								if (copyOfmain_0.imput_06 == null) {
									pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(13, copyOfmain_0.imput_06);
								}

								if (copyOfmain_0.lib == null) {
									pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(14, copyOfmain_0.lib);
								}

								if (copyOfmain_0.idfamille == null) {
									pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(15, copyOfmain_0.idfamille);
								}

								pstmt_tDBOutput_3.addBatch();
								nb_line_tDBOutput_3++;

								batchSizeCounter_tDBOutput_3++;

								if ((batchSize_tDBOutput_3 > 0)
										&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
									try {
										int countSum_tDBOutput_3 = 0;

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										batchSizeCounter_tDBOutput_3 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
										java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
												sqle_tDBOutput_3 = null;
										String errormessage_tDBOutput_3;
										if (ne_tDBOutput_3 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_3 = new java.sql.SQLException(
													e_tDBOutput_3.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_3.getMessage(),
													ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
													ne_tDBOutput_3);
											errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
										} else {
											errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
										}

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										System.err.println(errormessage_tDBOutput_3);

									}
								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_0"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/sous_familles.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_0");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_6Struct implements routines.system.IPersistableRow<copyOfmain_6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idremise;

		public String getIdremise() {
			return this.idremise;
		}

		public Integer numero_colonne_tarifaire;

		public Integer getNumero_colonne_tarifaire() {
			return this.numero_colonne_tarifaire;
		}

		public Float pourcentage_remise;

		public Float getPourcentage_remise() {
			return this.pourcentage_remise;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		public String idsous_famille;

		public String getIdsous_famille() {
			return this.idsous_famille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idremise == null) ? 0 : this.idremise.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_6Struct other = (copyOfmain_6Struct) obj;

			if (this.idremise == null) {
				if (other.idremise != null)
					return false;

			} else if (!this.idremise.equals(other.idremise))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_6Struct other) {

			other.idremise = this.idremise;
			other.numero_colonne_tarifaire = this.numero_colonne_tarifaire;
			other.pourcentage_remise = this.pourcentage_remise;
			other.idcli = this.idcli;
			other.idfamille = this.idfamille;
			other.idsous_famille = this.idsous_famille;

		}

		public void copyKeysDataTo(copyOfmain_6Struct other) {

			other.idremise = this.idremise;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.idremise = readString(dis);

					this.numero_colonne_tarifaire = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.pourcentage_remise = null;
					} else {
						this.pourcentage_remise = dis.readFloat();
					}

					this.idcli = readString(dis);

					this.idfamille = readString(dis);

					this.idsous_famille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idremise, dos);

				// Integer

				writeInteger(this.numero_colonne_tarifaire, dos);

				// Float

				if (this.pourcentage_remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pourcentage_remise);
				}

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfamille, dos);

				// String

				writeString(this.idsous_famille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idremise=" + idremise);
			sb.append(",numero_colonne_tarifaire=" + String.valueOf(numero_colonne_tarifaire));
			sb.append(",pourcentage_remise=" + String.valueOf(pourcentage_remise));
			sb.append(",idcli=" + idcli);
			sb.append(",idfamille=" + idfamille);
			sb.append(",idsous_famille=" + idsous_famille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idremise, other.idremise);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];

		public String RCREF;

		public String getRCREF() {
			return this.RCREF;
		}

		public String RCTYP;

		public String getRCTYP() {
			return this.RCTYP;
		}

		public String RCFAM;

		public String getRCFAM() {
			return this.RCFAM;
		}

		public String RCSFAM;

		public String getRCSFAM() {
			return this.RCSFAM;
		}

		public String RCFIL;

		public String getRCFIL() {
			return this.RCFIL;
		}

		public String RCTAR;

		public String getRCTAR() {
			return this.RCTAR;
		}

		public String RCREM;

		public String getRCREM() {
			return this.RCREM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.RCREF = readString(dis);

					this.RCTYP = readString(dis);

					this.RCFAM = readString(dis);

					this.RCSFAM = readString(dis);

					this.RCFIL = readString(dis);

					this.RCTAR = readString(dis);

					this.RCREM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RCREF, dos);

				// String

				writeString(this.RCTYP, dos);

				// String

				writeString(this.RCFAM, dos);

				// String

				writeString(this.RCSFAM, dos);

				// String

				writeString(this.RCFIL, dos);

				// String

				writeString(this.RCTAR, dos);

				// String

				writeString(this.RCREM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCREF=" + RCREF);
			sb.append(",RCTYP=" + RCTYP);
			sb.append(",RCFAM=" + RCFAM);
			sb.append(",RCSFAM=" + RCSFAM);
			sb.append(",RCFIL=" + RCFIL);
			sb.append(",RCTAR=" + RCTAR);
			sb.append(",RCREM=" + RCREM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_11Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_11Struct other = (after_tFileInputDelimited_11Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_11Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;
			other.iban2 = this.iban2;
			other.iban3 = this.iban3;
			other.iban4 = this.iban4;
			other.iban5 = this.iban5;
			other.iban6 = this.iban6;
			other.iban7 = this.iban7;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_11Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_12Process(globalMap);

				row10Struct row10 = new row10Struct();
				out2Struct out2 = new out2Struct();
				copyOfmain_6Struct copyOfmain_6 = new copyOfmain_6Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_6");
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = ("remise");
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("remise");
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				conn_tDBOutput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9
						+ "\" (\"idremise\",\"numero_colonne_tarifaire\",\"pourcentage_remise\",\"idcli\",\"idfamille\",\"idsous_famille\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_6Struct copyOfmain_6_tmp = new copyOfmain_6Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_11 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row10Struct row10) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 0;

						row10.CREF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 1;

						row10.CNOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 2;

						row10.CRUE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 3;

						row10.CAUX = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 4;

						row10.CCPTL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 5;

						row10.CVIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 6;

						row10.FILL01 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 7;

						row10.CQUAL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 8;

						row10.CCOM1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 9;

						row10.CCREP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 10;

						row10.CREMFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 11;

						row10.CECHE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 12;

						row10.CECHJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 13;

						row10.CPAI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 14;

						row10.CCHAN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 15;

						row10.CECHJ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 16;

						row10.CMOD = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 17;

						row10.CBQ1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 18;

						row10.CBQ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 19;

						row10.CBQ3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 20;

						row10.CBQ4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 21;

						row10.CBQ5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 22;

						row10.CBQ6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 23;

						row10.CFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 24;

						row10.CBL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 25;

						row10.CESC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 26;

						row10.VARAD1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 27;

						row10.VARAD2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 28;

						row10.VARAD3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 29;

						row10.VARAD4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 30;

						row10.VARAD5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 31;

						row10.VARAD6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 32;

						row10.VARA1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 33;

						row10.VARA2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 34;

						row10.VARA3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 35;

						row10.VARA4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 36;

						row10.VARA5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 37;

						row10.VARB1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 38;

						row10.VARB2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 39;

						row10.VARB3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 40;

						row10.VARB4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 41;

						row10.VARB5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 42;

						row10.VARN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 43;

						row10.VARN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 44;

						row10.VARN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 45;

						row10.VARN4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 46;

						row10.VARN5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 47;

						row10.CDATCRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 48;

						row10.CTEL1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 49;

						row10.CTEL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 50;

						row10.CTEX1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 51;

						row10.CTEX2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 52;

						row10.CDELMOY = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 53;

						row10.CAFFAIRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 54;

						row10.CCPTFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 55;

						row10.CINTERNET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 56;

						row10.CIBAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 57;

						row10.CBIC_old = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 58;

						row10.CFIDEL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 59;

						row10.CRFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 60;

						row10.CCOMREG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 61;

						row10.CAPE2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 62;

						row10.CIBAN72 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 63;

						row10.CIBAN8 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 64;

						row10.CIBAN9 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 65;

						row10.CBIC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 66;

						row10.CTRANSP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 67;

						row10.CFACTMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 68;

						row10.CBLMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 69;

						row10.CFACTWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 70;

						row10.CBLWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 71;

						row10.CPUBLIPOSTAGE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 72;

						row10.CFACT_EDI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 73;

						row10.CFACT_CHORUS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 74;

						row10.CFACTORING = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 75;

						row10.CCHORUS_SERVICE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 76;

						row10.CFIL14 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 77;

						row10.CTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 78;

						row10.FIL02 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 79;

						row10.CREJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 80;

						row10.CSECT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 81;

						row10.CTOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 82;

						row10.CCAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 83;

						row10.CCAN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 84;

						row10.CCAN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 85;

						row10.CDATF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 86;

						row10.CCAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 87;

						row10.CRESP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 88;

						row10.CAPE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 89;

						row10.CPREMC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 90;

						row10.CDERNC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 91;

						row10.CPROCC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 92;

						row10.CTYPEC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 93;

						row10.CSIRET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 94;

						row10.CORIGIN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 95;

						row10.CMOTCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 96;

						row10.CCOMPTA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 97;

						row10.CAFFMEMO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 98;

						row10.CFIL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 99;

						row10.CPNAFF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row10Struct row10) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 100;

						row10.CDEVTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 101;

						row10.CMINCOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 102;

						row10.CRELEVE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 103;

						row10.CRELIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 104;

						row10.CMAJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 105;

						row10.CECH = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 106;

						row10.CETIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 107;

						row10.CCOEF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 108;

						row10.CARROND = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 109;

						row10.CENCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 110;

						row10.CNIVREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 111;

						row10.CBLOCAG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 112;

						row10.CDATREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 113;

						row10.CRESCO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 114;

						row10.CRESFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 115;

						row10.CSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 116;

						row10.CDATENC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 117;

						row10.CDATSFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 118;

						row10.CCONTR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 119;

						row10.CDEREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 120;

						row10.CPAYS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 121;

						row10.CBLTOT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 122;

						row10.CBLLIG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 123;

						row10.CENCDIS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 124;

						row10.CNCEE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 125;

						row10.CNSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 126;

						row10.CPSRDAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 127;

						row10.CEPNASR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 128;

						row10.CCODTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 129;

						row10.CDEVISE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 130;

						row10.iban2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 131;

						row10.iban3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 132;

						row10.iban4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 133;

						row10.iban5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 134;

						row10.iban6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 135;

						row10.iban7 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row10Struct row10) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_11, row10);

						valueToConn_1(fid_tFileInputDelimited_11, row10);

					}

				}
				RowHelper_tFileInputDelimited_11 rowHelper_tFileInputDelimited_11 = new RowHelper_tFileInputDelimited_11();

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try {

					Object filename_tFileInputDelimited_11 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0 || random_value_tFileInputDelimited_11 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_11, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row10 = new row10Struct();
						try {

							rowHelper_tFileInputDelimited_11.valueToConn(fid_tFileInputDelimited_11, row10);

							if (rowstate_tFileInputDelimited_11.getException() != null) {
								throw rowstate_tFileInputDelimited_11.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */

						/**
						 * [tFileInputDelimited_11 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row12"
							///////////////////////////////////////////////

							boolean forceLooprow12 = false;

							row12Struct row12ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_10 = false;

								row12HashKey.RCREF = row10.CREF;

								row12HashKey.hashCodeDirty = true;

								tHash_Lookup_row12.lookup(row12HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row12' and it contains more one result from keys : row12.RCREF = '" +
								// row12HashKey.RCREF + "'");
							} // G 071

							row12Struct row12 = null;

							row12Struct fromLookup_row12 = null;
							row12 = row12Default;

							if (tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) { // G 099

								fromLookup_row12 = tHash_Lookup_row12.next();

							} // G 099

							if (fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								out2 = null;

// # Output table : 'out2'
								out2_tmp.RCREF = row12.RCREF;
								out2_tmp.RCTYP = row12.RCTYP;
								out2_tmp.RCFAM = row12.RCFAM;
								out2_tmp.RCSFAM = row12.RCSFAM;
								out2_tmp.RCFIL = row12.RCFIL;
								out2_tmp.RCTAR = row12.RCTAR;
								out2_tmp.RCREM = row12.RCREM;
								out2 = out2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */

							/**
							 * [tMap_10 process_data_begin ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_begin ] stop
							 */
// Start of branch "out2"
							if (out2 != null) {

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out2");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row11"
								///////////////////////////////////////////////

								boolean forceLooprow11 = false;

								row11Struct row11ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_9 = false;

									row11HashKey.CREF = out2.RCREF;

									row11HashKey.hashCodeDirty = true;

									tHash_Lookup_row11.lookup(row11HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G
																													// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'row11' and it contains more one result from keys : row11.CREF = '" +
									// row11HashKey.CREF + "'");
								} // G 071

								row11Struct row11 = null;

								row11Struct fromLookup_row11 = null;
								row11 = row11Default;

								if (tHash_Lookup_row11 != null && tHash_Lookup_row11.hasNext()) { // G 099

									fromLookup_row11 = tHash_Lookup_row11.next();

								} // G 099

								if (fromLookup_row11 != null) {
									row11 = fromLookup_row11;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
									// ###############################
									// # Output tables

									copyOfmain_6 = null;

// # Output table : 'copyOfmain_6'
									copyOfmain_6_tmp.idremise = out2.RCREF + out2.RCFAM + out2.RCSFAM;
									copyOfmain_6_tmp.numero_colonne_tarifaire = null;
									copyOfmain_6_tmp.pourcentage_remise = null;
									copyOfmain_6_tmp.idcli = null;
									copyOfmain_6_tmp.idfamille = null;
									copyOfmain_6_tmp.idsous_famille = null;
									copyOfmain_6 = copyOfmain_6_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_9 = false;

								tos_count_tMap_9++;

								/**
								 * [tMap_9 main ] stop
								 */

								/**
								 * [tMap_9 process_data_begin ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_begin ] stop
								 */
// Start of branch "copyOfmain_6"
								if (copyOfmain_6 != null) {

									/**
									 * [tDBOutput_9 main ] start
									 */

									currentComponent = "tDBOutput_9";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_6");
									}

									whetherReject_tDBOutput_9 = false;
									if (copyOfmain_6.idremise == null) {
										pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_9.setString(1, copyOfmain_6.idremise);
									}

									if (copyOfmain_6.numero_colonne_tarifaire == null) {
										pstmt_tDBOutput_9.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_9.setInt(2, copyOfmain_6.numero_colonne_tarifaire);
									}

									if (copyOfmain_6.pourcentage_remise == null) {
										pstmt_tDBOutput_9.setNull(3, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_9.setFloat(3, copyOfmain_6.pourcentage_remise);
									}

									if (copyOfmain_6.idcli == null) {
										pstmt_tDBOutput_9.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_9.setString(4, copyOfmain_6.idcli);
									}

									if (copyOfmain_6.idfamille == null) {
										pstmt_tDBOutput_9.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_9.setString(5, copyOfmain_6.idfamille);
									}

									if (copyOfmain_6.idsous_famille == null) {
										pstmt_tDBOutput_9.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_9.setString(6, copyOfmain_6.idsous_famille);
									}

									pstmt_tDBOutput_9.addBatch();
									nb_line_tDBOutput_9++;

									batchSizeCounter_tDBOutput_9++;

									if ((batchSize_tDBOutput_9 > 0)
											&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
										try {
											int countSum_tDBOutput_9 = 0;

											for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
												countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
														: countEach_tDBOutput_9);
											}

											insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

											batchSizeCounter_tDBOutput_9 = 0;
										} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
											java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
													sqle_tDBOutput_9 = null;
											String errormessage_tDBOutput_9;
											if (ne_tDBOutput_9 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_9 = new java.sql.SQLException(
														e_tDBOutput_9.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_9.getMessage(),
														ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(),
														ne_tDBOutput_9);
												errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
											} else {
												errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
											}

											int countSum_tDBOutput_9 = 0;
											for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
												countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
														: countEach_tDBOutput_9);
											}

											insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

											System.err.println(errormessage_tDBOutput_9);

										}
									}

									tos_count_tDBOutput_9++;

									/**
									 * [tDBOutput_9 main ] stop
									 */

									/**
									 * [tDBOutput_9 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_9";

									/**
									 * [tDBOutput_9 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_9 process_data_end ] start
									 */

									currentComponent = "tDBOutput_9";

									/**
									 * [tDBOutput_9 process_data_end ] stop
									 */

								} // End of branch "copyOfmain_6"

								/**
								 * [tMap_9 process_data_end ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_end ] stop
								 */

							} // End of branch "out2"

							/**
							 * [tMap_10 process_data_end ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_11 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9 + deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED", nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED", nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_6");
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row11");

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tFileInputDelimited_11 finally ] start
				 */

				currentComponent = "tFileInputDelimited_11";

				/**
				 * [tFileInputDelimited_11 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
					if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_9")) != null) {
						pstmtToClose_tDBOutput_9.close();
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_1Struct implements routines.system.IPersistableRow<copyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idrayon;

		public String getIdrayon() {
			return this.idrayon;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public String idsous_famille;

		public String getIdsous_famille() {
			return this.idsous_famille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idrayon == null) ? 0 : this.idrayon.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_1Struct other = (copyOfmain_1Struct) obj;

			if (this.idrayon == null) {
				if (other.idrayon != null)
					return false;

			} else if (!this.idrayon.equals(other.idrayon))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_1Struct other) {

			other.idrayon = this.idrayon;
			other.libelle = this.libelle;
			other.idsous_famille = this.idsous_famille;

		}

		public void copyKeysDataTo(copyOfmain_1Struct other) {

			other.idrayon = this.idrayon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.idrayon = readString(dis);

					this.libelle = readString(dis);

					this.idsous_famille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idrayon, dos);

				// String

				writeString(this.libelle, dos);

				// String

				writeString(this.idsous_famille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrayon=" + idrayon);
			sb.append(",libelle=" + libelle);
			sb.append(",idsous_famille=" + idsous_famille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrayon, other.idrayon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfmain_1Struct copyOfmain_1 = new copyOfmain_1Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_1");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("rayon");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("rayon");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"idrayon\",\"libelle\",\"idsous_famille\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_1Struct copyOfmain_1_tmp = new copyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/DEV/Data/Base Montauban/rayon.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/rayon.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row4.PA3PAR0 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row4.PA3PAR1 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row4.PA3PAR2 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row4.PA3PAR3 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row4.PA3PAR4 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							row4.PA3PAR5 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row4.PA3LIBEL = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row4.PA3COEF1 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							row4.PA3COEFA = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 9;

							row4.PA3COEFM = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 10;

							row4.PA3MARGR = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 11;

							row4.PA3IMPUT1 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 12;

							row4.PA3IMPUT2 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 13;

							row4.PA3IMPUT3 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 14;

							row4.PA3IMPUT4 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 15;

							row4.PA3IMPUT5 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 16;

							row4.PA3IMPUT6 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 17;

							row4.PA3DIFF = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 18;

							row4.PA3PAR0W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 19;

							row4.PA3PAR1W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 20;

							row4.PA3PAR2W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 21;

							row4.PA3PAR3W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 22;

							row4.PA3PAR4W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 23;

							row4.PA3PAR5W = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 24;

							row4.PA3COEFB = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 25;

							row4.PA3COEFC = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 26;

							row4.PA3RAYON = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 27;

							row4.PA3ARROND = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 28;

							row4.PA3EDNET = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 29;

							row4.PA3PROMDEB = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 30;

							row4.PA3PROMFIN = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_1 = null;

// # Output table : 'copyOfmain_1'
								copyOfmain_1_tmp.idrayon = row4.PA3RAYON;
								copyOfmain_1_tmp.libelle = row4.PA3LIBEL;
								copyOfmain_1_tmp.idsous_famille = row4.PA3PAR1 + row4.PA3PAR2;
								copyOfmain_1 = copyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_1"
							if (copyOfmain_1 != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_1");
								}

								whetherReject_tDBOutput_4 = false;
								if (copyOfmain_1.idrayon == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(1, copyOfmain_1.idrayon);
								}

								if (copyOfmain_1.libelle == null) {
									pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(2, copyOfmain_1.libelle);
								}

								if (copyOfmain_1.idsous_famille == null) {
									pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(3, copyOfmain_1.idsous_famille);
								}

								pstmt_tDBOutput_4.addBatch();
								nb_line_tDBOutput_4++;

								batchSizeCounter_tDBOutput_4++;

								if ((batchSize_tDBOutput_4 > 0)
										&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
									try {
										int countSum_tDBOutput_4 = 0;

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										batchSizeCounter_tDBOutput_4 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
										java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
												sqle_tDBOutput_4 = null;
										String errormessage_tDBOutput_4;
										if (ne_tDBOutput_4 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_4 = new java.sql.SQLException(
													e_tDBOutput_4.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_4.getMessage(),
													ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
													ne_tDBOutput_4);
											errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
										} else {
											errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
										}

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										System.err.println(errormessage_tDBOutput_4);

									}
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_1"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/rayon.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_1");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.CREF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CNOM = readString(dis, ois);

				this.CRUE = readString(dis, ois);

				this.CAUX = readString(dis, ois);

				this.CCPTL = readString(dis, ois);

				this.CVIL = readString(dis, ois);

				this.FILL01 = readString(dis, ois);

				this.CQUAL = readString(dis, ois);

				this.CCOM1 = readString(dis, ois);

				this.CCREP = readString(dis, ois);

				this.CREMFI = readString(dis, ois);

				this.CECHE = readString(dis, ois);

				this.CECHJ = readString(dis, ois);

				this.CPAI = readString(dis, ois);

				this.CCHAN = readString(dis, ois);

				this.CECHJ2 = readString(dis, ois);

				this.CMOD = readString(dis, ois);

				this.CBQ1 = readString(dis, ois);

				this.CBQ2 = readString(dis, ois);

				this.CBQ3 = readString(dis, ois);

				this.CBQ4 = readString(dis, ois);

				this.CBQ5 = readString(dis, ois);

				this.CBQ6 = readString(dis, ois);

				this.CFACT = readString(dis, ois);

				this.CBL = readString(dis, ois);

				this.CESC = readString(dis, ois);

				this.VARAD1 = readString(dis, ois);

				this.VARAD2 = readString(dis, ois);

				this.VARAD3 = readString(dis, ois);

				this.VARAD4 = readString(dis, ois);

				this.VARAD5 = readString(dis, ois);

				this.VARAD6 = readString(dis, ois);

				this.VARA1 = readString(dis, ois);

				this.VARA2 = readString(dis, ois);

				this.VARA3 = readString(dis, ois);

				this.VARA4 = readString(dis, ois);

				this.VARA5 = readString(dis, ois);

				this.VARB1 = readString(dis, ois);

				this.VARB2 = readString(dis, ois);

				this.VARB3 = readString(dis, ois);

				this.VARB4 = readString(dis, ois);

				this.VARB5 = readString(dis, ois);

				this.VARN1 = readString(dis, ois);

				this.VARN2 = readString(dis, ois);

				this.VARN3 = readString(dis, ois);

				this.VARN4 = readString(dis, ois);

				this.VARN5 = readString(dis, ois);

				this.CDATCRE = readString(dis, ois);

				this.CTEL1 = readString(dis, ois);

				this.CTEL2 = readString(dis, ois);

				this.CTEX1 = readString(dis, ois);

				this.CTEX2 = readString(dis, ois);

				this.CDELMOY = readString(dis, ois);

				this.CAFFAIRE = readString(dis, ois);

				this.CCPTFACT = readString(dis, ois);

				this.CINTERNET = readString(dis, ois);

				this.CIBAN1 = readString(dis, ois);

				this.CBIC_old = readString(dis, ois);

				this.CFIDEL = readString(dis, ois);

				this.CRFA = readString(dis, ois);

				this.CCOMREG = readString(dis, ois);

				this.CAPE2 = readString(dis, ois);

				this.CIBAN72 = readString(dis, ois);

				this.CIBAN8 = readString(dis, ois);

				this.CIBAN9 = readString(dis, ois);

				this.CBIC = readString(dis, ois);

				this.CTRANSP = readString(dis, ois);

				this.CFACTMAIL = readString(dis, ois);

				this.CBLMAIL = readString(dis, ois);

				this.CFACTWEB = readString(dis, ois);

				this.CBLWEB = readString(dis, ois);

				this.CPUBLIPOSTAGE = readString(dis, ois);

				this.CFACT_EDI = readString(dis, ois);

				this.CFACT_CHORUS = readString(dis, ois);

				this.CFACTORING = readString(dis, ois);

				this.CCHORUS_SERVICE = readString(dis, ois);

				this.CFIL14 = readString(dis, ois);

				this.CTAR = readString(dis, ois);

				this.FIL02 = readString(dis, ois);

				this.CREJ = readString(dis, ois);

				this.CSECT = readString(dis, ois);

				this.CTOUR = readString(dis, ois);

				this.CCAN1 = readString(dis, ois);

				this.CCAN2 = readString(dis, ois);

				this.CCAN3 = readString(dis, ois);

				this.CDATF = readString(dis, ois);

				this.CCAT = readString(dis, ois);

				this.CRESP = readString(dis, ois);

				this.CAPE = readString(dis, ois);

				this.CPREMC = readString(dis, ois);

				this.CDERNC = readString(dis, ois);

				this.CPROCC = readString(dis, ois);

				this.CTYPEC = readString(dis, ois);

				this.CSIRET = readString(dis, ois);

				this.CORIGIN = readString(dis, ois);

				this.CMOTCOUR = readString(dis, ois);

				this.CCOMPTA = readString(dis, ois);

				this.CAFFMEMO = readString(dis, ois);

				this.CFIL2 = readString(dis, ois);

				this.CPNAFF = readString(dis, ois);

				this.CDEVTAR = readString(dis, ois);

				this.CMINCOM = readString(dis, ois);

				this.CRELEVE = readString(dis, ois);

				this.CRELIQ = readString(dis, ois);

				this.CMAJ = readString(dis, ois);

				this.CECH = readString(dis, ois);

				this.CETIQ = readString(dis, ois);

				this.CCOEF = readString(dis, ois);

				this.CARROND = readString(dis, ois);

				this.CENCOUR = readString(dis, ois);

				this.CNIVREL = readString(dis, ois);

				this.CBLOCAG = readString(dis, ois);

				this.CDATREL = readString(dis, ois);

				this.CRESCO = readString(dis, ois);

				this.CRESFI = readString(dis, ois);

				this.CSFAC = readString(dis, ois);

				this.CDATENC = readString(dis, ois);

				this.CDATSFA = readString(dis, ois);

				this.CCONTR = readString(dis, ois);

				this.CDEREL = readString(dis, ois);

				this.CPAYS = readString(dis, ois);

				this.CBLTOT = readString(dis, ois);

				this.CBLLIG = readString(dis, ois);

				this.CENCDIS = readString(dis, ois);

				this.CNCEE = readString(dis, ois);

				this.CNSFAC = readString(dis, ois);

				this.CPSRDAT = readString(dis, ois);

				this.CEPNASR = readString(dis, ois);

				this.CCODTAR = readString(dis, ois);

				this.CDEVISE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CNOM, dos, oos);

				writeString(this.CRUE, dos, oos);

				writeString(this.CAUX, dos, oos);

				writeString(this.CCPTL, dos, oos);

				writeString(this.CVIL, dos, oos);

				writeString(this.FILL01, dos, oos);

				writeString(this.CQUAL, dos, oos);

				writeString(this.CCOM1, dos, oos);

				writeString(this.CCREP, dos, oos);

				writeString(this.CREMFI, dos, oos);

				writeString(this.CECHE, dos, oos);

				writeString(this.CECHJ, dos, oos);

				writeString(this.CPAI, dos, oos);

				writeString(this.CCHAN, dos, oos);

				writeString(this.CECHJ2, dos, oos);

				writeString(this.CMOD, dos, oos);

				writeString(this.CBQ1, dos, oos);

				writeString(this.CBQ2, dos, oos);

				writeString(this.CBQ3, dos, oos);

				writeString(this.CBQ4, dos, oos);

				writeString(this.CBQ5, dos, oos);

				writeString(this.CBQ6, dos, oos);

				writeString(this.CFACT, dos, oos);

				writeString(this.CBL, dos, oos);

				writeString(this.CESC, dos, oos);

				writeString(this.VARAD1, dos, oos);

				writeString(this.VARAD2, dos, oos);

				writeString(this.VARAD3, dos, oos);

				writeString(this.VARAD4, dos, oos);

				writeString(this.VARAD5, dos, oos);

				writeString(this.VARAD6, dos, oos);

				writeString(this.VARA1, dos, oos);

				writeString(this.VARA2, dos, oos);

				writeString(this.VARA3, dos, oos);

				writeString(this.VARA4, dos, oos);

				writeString(this.VARA5, dos, oos);

				writeString(this.VARB1, dos, oos);

				writeString(this.VARB2, dos, oos);

				writeString(this.VARB3, dos, oos);

				writeString(this.VARB4, dos, oos);

				writeString(this.VARB5, dos, oos);

				writeString(this.VARN1, dos, oos);

				writeString(this.VARN2, dos, oos);

				writeString(this.VARN3, dos, oos);

				writeString(this.VARN4, dos, oos);

				writeString(this.VARN5, dos, oos);

				writeString(this.CDATCRE, dos, oos);

				writeString(this.CTEL1, dos, oos);

				writeString(this.CTEL2, dos, oos);

				writeString(this.CTEX1, dos, oos);

				writeString(this.CTEX2, dos, oos);

				writeString(this.CDELMOY, dos, oos);

				writeString(this.CAFFAIRE, dos, oos);

				writeString(this.CCPTFACT, dos, oos);

				writeString(this.CINTERNET, dos, oos);

				writeString(this.CIBAN1, dos, oos);

				writeString(this.CBIC_old, dos, oos);

				writeString(this.CFIDEL, dos, oos);

				writeString(this.CRFA, dos, oos);

				writeString(this.CCOMREG, dos, oos);

				writeString(this.CAPE2, dos, oos);

				writeString(this.CIBAN72, dos, oos);

				writeString(this.CIBAN8, dos, oos);

				writeString(this.CIBAN9, dos, oos);

				writeString(this.CBIC, dos, oos);

				writeString(this.CTRANSP, dos, oos);

				writeString(this.CFACTMAIL, dos, oos);

				writeString(this.CBLMAIL, dos, oos);

				writeString(this.CFACTWEB, dos, oos);

				writeString(this.CBLWEB, dos, oos);

				writeString(this.CPUBLIPOSTAGE, dos, oos);

				writeString(this.CFACT_EDI, dos, oos);

				writeString(this.CFACT_CHORUS, dos, oos);

				writeString(this.CFACTORING, dos, oos);

				writeString(this.CCHORUS_SERVICE, dos, oos);

				writeString(this.CFIL14, dos, oos);

				writeString(this.CTAR, dos, oos);

				writeString(this.FIL02, dos, oos);

				writeString(this.CREJ, dos, oos);

				writeString(this.CSECT, dos, oos);

				writeString(this.CTOUR, dos, oos);

				writeString(this.CCAN1, dos, oos);

				writeString(this.CCAN2, dos, oos);

				writeString(this.CCAN3, dos, oos);

				writeString(this.CDATF, dos, oos);

				writeString(this.CCAT, dos, oos);

				writeString(this.CRESP, dos, oos);

				writeString(this.CAPE, dos, oos);

				writeString(this.CPREMC, dos, oos);

				writeString(this.CDERNC, dos, oos);

				writeString(this.CPROCC, dos, oos);

				writeString(this.CTYPEC, dos, oos);

				writeString(this.CSIRET, dos, oos);

				writeString(this.CORIGIN, dos, oos);

				writeString(this.CMOTCOUR, dos, oos);

				writeString(this.CCOMPTA, dos, oos);

				writeString(this.CAFFMEMO, dos, oos);

				writeString(this.CFIL2, dos, oos);

				writeString(this.CPNAFF, dos, oos);

				writeString(this.CDEVTAR, dos, oos);

				writeString(this.CMINCOM, dos, oos);

				writeString(this.CRELEVE, dos, oos);

				writeString(this.CRELIQ, dos, oos);

				writeString(this.CMAJ, dos, oos);

				writeString(this.CECH, dos, oos);

				writeString(this.CETIQ, dos, oos);

				writeString(this.CCOEF, dos, oos);

				writeString(this.CARROND, dos, oos);

				writeString(this.CENCOUR, dos, oos);

				writeString(this.CNIVREL, dos, oos);

				writeString(this.CBLOCAG, dos, oos);

				writeString(this.CDATREL, dos, oos);

				writeString(this.CRESCO, dos, oos);

				writeString(this.CRESFI, dos, oos);

				writeString(this.CSFAC, dos, oos);

				writeString(this.CDATENC, dos, oos);

				writeString(this.CDATSFA, dos, oos);

				writeString(this.CCONTR, dos, oos);

				writeString(this.CDEREL, dos, oos);

				writeString(this.CPAYS, dos, oos);

				writeString(this.CBLTOT, dos, oos);

				writeString(this.CBLLIG, dos, oos);

				writeString(this.CENCDIS, dos, oos);

				writeString(this.CNCEE, dos, oos);

				writeString(this.CNSFAC, dos, oos);

				writeString(this.CPSRDAT, dos, oos);

				writeString(this.CEPNASR, dos, oos);

				writeString(this.CCODTAR, dos, oos);

				writeString(this.CDEVISE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tFileInputDelimited_9 - inputs:(after_tFileInputDelimited_11)
				// outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11)
				// outputs:()
				// linked node: tMap_9 - inputs:(out2,row11) outputs:(copyOfmain_6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct>getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_9 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row11Struct row11) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 0;

						row11.CREF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 1;

						row11.CNOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 2;

						row11.CRUE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 3;

						row11.CAUX = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 4;

						row11.CCPTL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 5;

						row11.CVIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 6;

						row11.FILL01 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 7;

						row11.CQUAL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 8;

						row11.CCOM1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 9;

						row11.CCREP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 10;

						row11.CREMFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 11;

						row11.CECHE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 12;

						row11.CECHJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 13;

						row11.CPAI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 14;

						row11.CCHAN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 15;

						row11.CECHJ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 16;

						row11.CMOD = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 17;

						row11.CBQ1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 18;

						row11.CBQ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 19;

						row11.CBQ3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 20;

						row11.CBQ4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 21;

						row11.CBQ5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 22;

						row11.CBQ6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 23;

						row11.CFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 24;

						row11.CBL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 25;

						row11.CESC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 26;

						row11.VARAD1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 27;

						row11.VARAD2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 28;

						row11.VARAD3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 29;

						row11.VARAD4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 30;

						row11.VARAD5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 31;

						row11.VARAD6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 32;

						row11.VARA1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 33;

						row11.VARA2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 34;

						row11.VARA3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 35;

						row11.VARA4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 36;

						row11.VARA5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 37;

						row11.VARB1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 38;

						row11.VARB2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 39;

						row11.VARB3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 40;

						row11.VARB4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 41;

						row11.VARB5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 42;

						row11.VARN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 43;

						row11.VARN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 44;

						row11.VARN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 45;

						row11.VARN4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 46;

						row11.VARN5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 47;

						row11.CDATCRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 48;

						row11.CTEL1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 49;

						row11.CTEL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 50;

						row11.CTEX1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 51;

						row11.CTEX2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 52;

						row11.CDELMOY = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 53;

						row11.CAFFAIRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 54;

						row11.CCPTFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 55;

						row11.CINTERNET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 56;

						row11.CIBAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 57;

						row11.CBIC_old = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 58;

						row11.CFIDEL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 59;

						row11.CRFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 60;

						row11.CCOMREG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 61;

						row11.CAPE2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 62;

						row11.CIBAN72 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 63;

						row11.CIBAN8 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 64;

						row11.CIBAN9 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 65;

						row11.CBIC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 66;

						row11.CTRANSP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 67;

						row11.CFACTMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 68;

						row11.CBLMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 69;

						row11.CFACTWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 70;

						row11.CBLWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 71;

						row11.CPUBLIPOSTAGE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 72;

						row11.CFACT_EDI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 73;

						row11.CFACT_CHORUS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 74;

						row11.CFACTORING = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 75;

						row11.CCHORUS_SERVICE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 76;

						row11.CFIL14 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 77;

						row11.CTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 78;

						row11.FIL02 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 79;

						row11.CREJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 80;

						row11.CSECT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 81;

						row11.CTOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 82;

						row11.CCAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 83;

						row11.CCAN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 84;

						row11.CCAN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 85;

						row11.CDATF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 86;

						row11.CCAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 87;

						row11.CRESP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 88;

						row11.CAPE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 89;

						row11.CPREMC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 90;

						row11.CDERNC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 91;

						row11.CPROCC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 92;

						row11.CTYPEC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 93;

						row11.CSIRET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 94;

						row11.CORIGIN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 95;

						row11.CMOTCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 96;

						row11.CCOMPTA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 97;

						row11.CAFFMEMO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 98;

						row11.CFIL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 99;

						row11.CPNAFF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row11Struct row11) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 100;

						row11.CDEVTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 101;

						row11.CMINCOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 102;

						row11.CRELEVE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 103;

						row11.CRELIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 104;

						row11.CMAJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 105;

						row11.CECH = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 106;

						row11.CETIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 107;

						row11.CCOEF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 108;

						row11.CARROND = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 109;

						row11.CENCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 110;

						row11.CNIVREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 111;

						row11.CBLOCAG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 112;

						row11.CDATREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 113;

						row11.CRESCO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 114;

						row11.CRESFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 115;

						row11.CSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 116;

						row11.CDATENC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 117;

						row11.CDATSFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 118;

						row11.CCONTR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 119;

						row11.CDEREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 120;

						row11.CPAYS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 121;

						row11.CBLTOT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 122;

						row11.CBLLIG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 123;

						row11.CENCDIS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 124;

						row11.CNCEE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 125;

						row11.CNSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 126;

						row11.CPSRDAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 127;

						row11.CEPNASR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 128;

						row11.CCODTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 129;

						row11.CDEVISE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row11Struct row11) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_9, row11);

						valueToConn_1(fid_tFileInputDelimited_9, row11);

					}

				}
				RowHelper_tFileInputDelimited_9 rowHelper_tFileInputDelimited_9 = new RowHelper_tFileInputDelimited_9();

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try {

					Object filename_tFileInputDelimited_9 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0 || random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_9, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();

						row11 = null;

						row11 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row11 = new row11Struct();
						try {

							rowHelper_tFileInputDelimited_9.valueToConn(fid_tFileInputDelimited_9, row11);

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tAdvancedHash_row11 main ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
							}

							row11Struct row11_HashRow = new row11Struct();

							row11_HashRow.CREF = row11.CREF;

							row11_HashRow.CNOM = row11.CNOM;

							row11_HashRow.CRUE = row11.CRUE;

							row11_HashRow.CAUX = row11.CAUX;

							row11_HashRow.CCPTL = row11.CCPTL;

							row11_HashRow.CVIL = row11.CVIL;

							row11_HashRow.FILL01 = row11.FILL01;

							row11_HashRow.CQUAL = row11.CQUAL;

							row11_HashRow.CCOM1 = row11.CCOM1;

							row11_HashRow.CCREP = row11.CCREP;

							row11_HashRow.CREMFI = row11.CREMFI;

							row11_HashRow.CECHE = row11.CECHE;

							row11_HashRow.CECHJ = row11.CECHJ;

							row11_HashRow.CPAI = row11.CPAI;

							row11_HashRow.CCHAN = row11.CCHAN;

							row11_HashRow.CECHJ2 = row11.CECHJ2;

							row11_HashRow.CMOD = row11.CMOD;

							row11_HashRow.CBQ1 = row11.CBQ1;

							row11_HashRow.CBQ2 = row11.CBQ2;

							row11_HashRow.CBQ3 = row11.CBQ3;

							row11_HashRow.CBQ4 = row11.CBQ4;

							row11_HashRow.CBQ5 = row11.CBQ5;

							row11_HashRow.CBQ6 = row11.CBQ6;

							row11_HashRow.CFACT = row11.CFACT;

							row11_HashRow.CBL = row11.CBL;

							row11_HashRow.CESC = row11.CESC;

							row11_HashRow.VARAD1 = row11.VARAD1;

							row11_HashRow.VARAD2 = row11.VARAD2;

							row11_HashRow.VARAD3 = row11.VARAD3;

							row11_HashRow.VARAD4 = row11.VARAD4;

							row11_HashRow.VARAD5 = row11.VARAD5;

							row11_HashRow.VARAD6 = row11.VARAD6;

							row11_HashRow.VARA1 = row11.VARA1;

							row11_HashRow.VARA2 = row11.VARA2;

							row11_HashRow.VARA3 = row11.VARA3;

							row11_HashRow.VARA4 = row11.VARA4;

							row11_HashRow.VARA5 = row11.VARA5;

							row11_HashRow.VARB1 = row11.VARB1;

							row11_HashRow.VARB2 = row11.VARB2;

							row11_HashRow.VARB3 = row11.VARB3;

							row11_HashRow.VARB4 = row11.VARB4;

							row11_HashRow.VARB5 = row11.VARB5;

							row11_HashRow.VARN1 = row11.VARN1;

							row11_HashRow.VARN2 = row11.VARN2;

							row11_HashRow.VARN3 = row11.VARN3;

							row11_HashRow.VARN4 = row11.VARN4;

							row11_HashRow.VARN5 = row11.VARN5;

							row11_HashRow.CDATCRE = row11.CDATCRE;

							row11_HashRow.CTEL1 = row11.CTEL1;

							row11_HashRow.CTEL2 = row11.CTEL2;

							row11_HashRow.CTEX1 = row11.CTEX1;

							row11_HashRow.CTEX2 = row11.CTEX2;

							row11_HashRow.CDELMOY = row11.CDELMOY;

							row11_HashRow.CAFFAIRE = row11.CAFFAIRE;

							row11_HashRow.CCPTFACT = row11.CCPTFACT;

							row11_HashRow.CINTERNET = row11.CINTERNET;

							row11_HashRow.CIBAN1 = row11.CIBAN1;

							row11_HashRow.CBIC_old = row11.CBIC_old;

							row11_HashRow.CFIDEL = row11.CFIDEL;

							row11_HashRow.CRFA = row11.CRFA;

							row11_HashRow.CCOMREG = row11.CCOMREG;

							row11_HashRow.CAPE2 = row11.CAPE2;

							row11_HashRow.CIBAN72 = row11.CIBAN72;

							row11_HashRow.CIBAN8 = row11.CIBAN8;

							row11_HashRow.CIBAN9 = row11.CIBAN9;

							row11_HashRow.CBIC = row11.CBIC;

							row11_HashRow.CTRANSP = row11.CTRANSP;

							row11_HashRow.CFACTMAIL = row11.CFACTMAIL;

							row11_HashRow.CBLMAIL = row11.CBLMAIL;

							row11_HashRow.CFACTWEB = row11.CFACTWEB;

							row11_HashRow.CBLWEB = row11.CBLWEB;

							row11_HashRow.CPUBLIPOSTAGE = row11.CPUBLIPOSTAGE;

							row11_HashRow.CFACT_EDI = row11.CFACT_EDI;

							row11_HashRow.CFACT_CHORUS = row11.CFACT_CHORUS;

							row11_HashRow.CFACTORING = row11.CFACTORING;

							row11_HashRow.CCHORUS_SERVICE = row11.CCHORUS_SERVICE;

							row11_HashRow.CFIL14 = row11.CFIL14;

							row11_HashRow.CTAR = row11.CTAR;

							row11_HashRow.FIL02 = row11.FIL02;

							row11_HashRow.CREJ = row11.CREJ;

							row11_HashRow.CSECT = row11.CSECT;

							row11_HashRow.CTOUR = row11.CTOUR;

							row11_HashRow.CCAN1 = row11.CCAN1;

							row11_HashRow.CCAN2 = row11.CCAN2;

							row11_HashRow.CCAN3 = row11.CCAN3;

							row11_HashRow.CDATF = row11.CDATF;

							row11_HashRow.CCAT = row11.CCAT;

							row11_HashRow.CRESP = row11.CRESP;

							row11_HashRow.CAPE = row11.CAPE;

							row11_HashRow.CPREMC = row11.CPREMC;

							row11_HashRow.CDERNC = row11.CDERNC;

							row11_HashRow.CPROCC = row11.CPROCC;

							row11_HashRow.CTYPEC = row11.CTYPEC;

							row11_HashRow.CSIRET = row11.CSIRET;

							row11_HashRow.CORIGIN = row11.CORIGIN;

							row11_HashRow.CMOTCOUR = row11.CMOTCOUR;

							row11_HashRow.CCOMPTA = row11.CCOMPTA;

							row11_HashRow.CAFFMEMO = row11.CAFFMEMO;

							row11_HashRow.CFIL2 = row11.CFIL2;

							row11_HashRow.CPNAFF = row11.CPNAFF;

							row11_HashRow.CDEVTAR = row11.CDEVTAR;

							row11_HashRow.CMINCOM = row11.CMINCOM;

							row11_HashRow.CRELEVE = row11.CRELEVE;

							row11_HashRow.CRELIQ = row11.CRELIQ;

							row11_HashRow.CMAJ = row11.CMAJ;

							row11_HashRow.CECH = row11.CECH;

							row11_HashRow.CETIQ = row11.CETIQ;

							row11_HashRow.CCOEF = row11.CCOEF;

							row11_HashRow.CARROND = row11.CARROND;

							row11_HashRow.CENCOUR = row11.CENCOUR;

							row11_HashRow.CNIVREL = row11.CNIVREL;

							row11_HashRow.CBLOCAG = row11.CBLOCAG;

							row11_HashRow.CDATREL = row11.CDATREL;

							row11_HashRow.CRESCO = row11.CRESCO;

							row11_HashRow.CRESFI = row11.CRESFI;

							row11_HashRow.CSFAC = row11.CSFAC;

							row11_HashRow.CDATENC = row11.CDATENC;

							row11_HashRow.CDATSFA = row11.CDATSFA;

							row11_HashRow.CCONTR = row11.CCONTR;

							row11_HashRow.CDEREL = row11.CDEREL;

							row11_HashRow.CPAYS = row11.CPAYS;

							row11_HashRow.CBLTOT = row11.CBLTOT;

							row11_HashRow.CBLLIG = row11.CBLLIG;

							row11_HashRow.CENCDIS = row11.CENCDIS;

							row11_HashRow.CNCEE = row11.CNCEE;

							row11_HashRow.CNSFAC = row11.CNSFAC;

							row11_HashRow.CPSRDAT = row11.CPSRDAT;

							row11_HashRow.CEPNASR = row11.CEPNASR;

							row11_HashRow.CCODTAR = row11.CCODTAR;

							row11_HashRow.CDEVISE = row11.CDEVISE;

							tHash_Lookup_row11.put(row11_HashRow);

							tos_count_tAdvancedHash_row11++;

							/**
							 * [tAdvancedHash_row11 main ] stop
							 */

							/**
							 * [tAdvancedHash_row11 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							/**
							 * [tAdvancedHash_row11 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row11 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							/**
							 * [tAdvancedHash_row11 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Article = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Article = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String RCREF;

		public String getRCREF() {
			return this.RCREF;
		}

		public String RCTYP;

		public String getRCTYP() {
			return this.RCTYP;
		}

		public String RCFAM;

		public String getRCFAM() {
			return this.RCFAM;
		}

		public String RCSFAM;

		public String getRCSFAM() {
			return this.RCSFAM;
		}

		public String RCFIL;

		public String getRCFIL() {
			return this.RCFIL;
		}

		public String RCTAR;

		public String getRCTAR() {
			return this.RCTAR;
		}

		public String RCREM;

		public String getRCREM() {
			return this.RCREM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.RCREF == null) ? 0 : this.RCREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.RCREF == null) {
				if (other.RCREF != null)
					return false;

			} else if (!this.RCREF.equals(other.RCREF))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.RCREF = this.RCREF;
			other.RCTYP = this.RCTYP;
			other.RCFAM = this.RCFAM;
			other.RCSFAM = this.RCSFAM;
			other.RCFIL = this.RCFIL;
			other.RCTAR = this.RCTAR;
			other.RCREM = this.RCREM;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.RCREF = this.RCREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Article.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_Article.length == 0) {
						commonByteArray_LOCAL_PROJECT_Article = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Article = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Article, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_Article, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Article) {

				try {

					int length = 0;

					this.RCREF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RCREF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RCTYP = readString(dis, ois);

				this.RCFAM = readString(dis, ois);

				this.RCSFAM = readString(dis, ois);

				this.RCFIL = readString(dis, ois);

				this.RCTAR = readString(dis, ois);

				this.RCREM = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.RCTYP, dos, oos);

				writeString(this.RCFAM, dos, oos);

				writeString(this.RCSFAM, dos, oos);

				writeString(this.RCFIL, dos, oos);

				writeString(this.RCTAR, dos, oos);

				writeString(this.RCREM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCREF=" + RCREF);
			sb.append(",RCTYP=" + RCTYP);
			sb.append(",RCFAM=" + RCFAM);
			sb.append(",RCSFAM=" + RCSFAM);
			sb.append(",RCFIL=" + RCFIL);
			sb.append(",RCTAR=" + RCTAR);
			sb.append(",RCREM=" + RCREM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.RCREF, other.RCREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tFileInputDelimited_12 - inputs:(after_tFileInputDelimited_11)
				// outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12)
				// outputs:()
				// linked node: tMap_10 - inputs:(row10,row12) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct>getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				int limit_tFileInputDelimited_12 = -1;
				try {

					Object filename_tFileInputDelimited_12 = "C:/DEV/Data/Base Montauban/remises_clients.csv";
					if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
						if (footer_value_tFileInputDelimited_12 > 0 || random_value_tFileInputDelimited_12 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/remises_clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_12, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_12 != null && fid_tFileInputDelimited_12.nextRecord()) {
						rowstate_tFileInputDelimited_12.reset();

						row12 = null;

						row12 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row12 = new row12Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_12 = 0;

							columnIndexWithD_tFileInputDelimited_12 = 0;

							row12.RCREF = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 1;

							row12.RCTYP = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 2;

							row12.RCFAM = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 3;

							row12.RCSFAM = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 4;

							row12.RCFIL = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 5;

							row12.RCTAR = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 6;

							row12.RCREM = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							if (rowstate_tFileInputDelimited_12.getException() != null) {
								throw rowstate_tFileInputDelimited_12.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */

						/**
						 * [tFileInputDelimited_12 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_begin ] stop
						 */
// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tAdvancedHash_row12 main ] start
							 */

							currentComponent = "tAdvancedHash_row12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
							}

							row12Struct row12_HashRow = new row12Struct();

							row12_HashRow.RCREF = row12.RCREF;

							row12_HashRow.RCTYP = row12.RCTYP;

							row12_HashRow.RCFAM = row12.RCFAM;

							row12_HashRow.RCSFAM = row12.RCSFAM;

							row12_HashRow.RCFIL = row12.RCFIL;

							row12_HashRow.RCTAR = row12.RCTAR;

							row12_HashRow.RCREM = row12.RCREM;

							tHash_Lookup_row12.put(row12_HashRow);

							tos_count_tAdvancedHash_row12++;

							/**
							 * [tAdvancedHash_row12 main ] stop
							 */

							/**
							 * [tAdvancedHash_row12 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row12";

							/**
							 * [tAdvancedHash_row12 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row12 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row12";

							/**
							 * [tAdvancedHash_row12 process_data_end ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_12 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/remises_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_12 != null) {
							fid_tFileInputDelimited_12.close();
						}
					}
					if (fid_tFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE", fid_tFileInputDelimited_12.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public void tLogRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tLogRow_1 process_data_begin ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 process_data_end ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogRow_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Article ArticleClass = new Article();

		int exitCode = ArticleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Article.class.getClassLoader()
					.getResourceAsStream("local_project/article_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Article.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Article");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 416398 characters generated by Talend Open Studio for Data Integration on the
 * 21 février 2022 à 09:43:14 CET
 ************************************************************************************************/