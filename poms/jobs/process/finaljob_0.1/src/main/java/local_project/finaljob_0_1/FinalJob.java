// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.finaljob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: FinalJob Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class FinalJob implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "FinalJob";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					FinalJob.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(FinalJob.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_37_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_37_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_40_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_40_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_40_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_40_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_41_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_41_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_41_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_37_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_41_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_42_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_42_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_42_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_38_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_42_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_43_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_43_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_43_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_43_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_44_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_44_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_44_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_40_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_44_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_48_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_43_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_49_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_44_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_38_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_50_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_0_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_0_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row45_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_18_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_19_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_25_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_26_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_27_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_28_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_29_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_30_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_33_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_34_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_35_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_36_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_31_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_32_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_37_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_39_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_40_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_41_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_42_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_43_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_44_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_48_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_49_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class copyOfcopyOfmain_1Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long iddevise;

		public long getIddevise() {
			return this.iddevise;
		}

		public String libelle_devise;

		public String getLibelle_devise() {
			return this.libelle_devise;
		}

		public Float taux;

		public Float getTaux() {
			return this.taux;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddevise;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1Struct other = (copyOfcopyOfmain_1Struct) obj;

			if (this.iddevise != other.iddevise)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1Struct other) {

			other.iddevise = this.iddevise;
			other.libelle_devise = this.libelle_devise;
			other.taux = this.taux;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1Struct other) {

			other.iddevise = this.iddevise;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddevise = dis.readLong();

					this.libelle_devise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.taux = null;
					} else {
						this.taux = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.iddevise);

				// String

				writeString(this.libelle_devise, dos);

				// Float

				if (this.taux == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taux);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddevise=" + String.valueOf(iddevise));
			sb.append(",libelle_devise=" + libelle_devise);
			sb.append(",taux=" + String.valueOf(taux));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddevise, other.iddevise);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String iddevise;

		public String getIddevise() {
			return this.iddevise;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public String taux;

		public String getTaux() {
			return this.taux;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddevise = readString(dis);

					this.libelle = readString(dis);

					this.taux = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddevise, dos);

				// String

				writeString(this.libelle, dos);

				// String

				writeString(this.taux, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddevise=" + iddevise);
			sb.append(",libelle=" + libelle);
			sb.append(",taux=" + taux);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				copyOfcopyOfmain_1Struct copyOfcopyOfmain_1 = new copyOfcopyOfmain_1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("devise");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("devise");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_1 + "\"");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"iddevise\",\"libelle_devise\",\"taux\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1Struct copyOfcopyOfmain_1_tmp = new copyOfcopyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/DEV/Data/Base Montauban/Devise.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Devise.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.iddevise = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.libelle = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.taux = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1 = null;

// # Output table : 'copyOfcopyOfmain_1'
								copyOfcopyOfmain_1_tmp.iddevise = Long.parseLong(row1.iddevise);
								copyOfcopyOfmain_1_tmp.libelle_devise = row1.libelle;
								copyOfcopyOfmain_1_tmp.taux = Float.parseFloat(row1.taux);
								copyOfcopyOfmain_1 = copyOfcopyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1"
							if (copyOfcopyOfmain_1 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1");
								}

								whetherReject_tDBOutput_1 = false;
								pstmt_tDBOutput_1.setLong(1, copyOfcopyOfmain_1.iddevise);

								if (copyOfcopyOfmain_1.libelle_devise == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, copyOfcopyOfmain_1.libelle_devise);
								}

								if (copyOfcopyOfmain_1.taux == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_1.setFloat(3, copyOfcopyOfmain_1.taux);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Devise.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_1_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_1_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idtransporteur;

		public String getIdtransporteur() {
			return this.idtransporteur;
		}

		public String libelle_transporteur;

		public String getLibelle_transporteur() {
			return this.libelle_transporteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idtransporteur == null) ? 0 : this.idtransporteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1_0Struct other = (copyOfcopyOfmain_1_0Struct) obj;

			if (this.idtransporteur == null) {
				if (other.idtransporteur != null)
					return false;

			} else if (!this.idtransporteur.equals(other.idtransporteur))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1_0Struct other) {

			other.idtransporteur = this.idtransporteur;
			other.libelle_transporteur = this.libelle_transporteur;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1_0Struct other) {

			other.idtransporteur = this.idtransporteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idtransporteur = readString(dis);

					this.libelle_transporteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idtransporteur, dos);

				// String

				writeString(this.libelle_transporteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtransporteur=" + idtransporteur);
			sb.append(",libelle_transporteur=" + libelle_transporteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtransporteur, other.idtransporteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_TRANSPORTEUR;

		public String getCODE_TRANSPORTEUR() {
			return this.CODE_TRANSPORTEUR;
		}

		public String LIBELLE_TRANSPORTEUR;

		public String getLIBELLE_TRANSPORTEUR() {
			return this.LIBELLE_TRANSPORTEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_TRANSPORTEUR = readString(dis);

					this.LIBELLE_TRANSPORTEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_TRANSPORTEUR, dos);

				// String

				writeString(this.LIBELLE_TRANSPORTEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_TRANSPORTEUR=" + CODE_TRANSPORTEUR);
			sb.append(",LIBELLE_TRANSPORTEUR=" + LIBELLE_TRANSPORTEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfcopyOfmain_1_0Struct copyOfcopyOfmain_1_0 = new copyOfcopyOfmain_1_0Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1_0");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("transporteur");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("transporteur");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"idtransporteur\",\"libelle_transporteur\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1_0Struct copyOfcopyOfmain_1_0_tmp = new copyOfcopyOfmain_1_0Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/DEV/Data/Base Montauban/param/transporteurs.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/transporteurs.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.CODE_TRANSPORTEUR = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.LIBELLE_TRANSPORTEUR = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1_0 = null;

// # Output table : 'copyOfcopyOfmain_1_0'
								copyOfcopyOfmain_1_0_tmp.idtransporteur = row2.CODE_TRANSPORTEUR;
								copyOfcopyOfmain_1_0_tmp.libelle_transporteur = row2.CODE_TRANSPORTEUR == null ? null
										: row2.LIBELLE_TRANSPORTEUR;
								copyOfcopyOfmain_1_0 = copyOfcopyOfmain_1_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1_0"
							if (copyOfcopyOfmain_1_0 != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1_0");
								}

								whetherReject_tDBOutput_2 = false;
								if (copyOfcopyOfmain_1_0.idtransporteur == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(1, copyOfcopyOfmain_1_0.idtransporteur);
								}

								if (copyOfcopyOfmain_1_0.libelle_transporteur == null) {
									pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(2, copyOfcopyOfmain_1_0.libelle_transporteur);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;

								if ((batchSize_tDBOutput_2 > 0)
										&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
									try {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										batchSizeCounter_tDBOutput_2 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										System.err.println(errormessage_tDBOutput_2);

									}
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1_0"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/transporteurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1_0");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_1Struct implements routines.system.IPersistableRow<copyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idmode_payement;

		public String getIdmode_payement() {
			return this.idmode_payement;
		}

		public String libelle_payement;

		public String getLibelle_payement() {
			return this.libelle_payement;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idmode_payement == null) ? 0 : this.idmode_payement.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_1Struct other = (copyOfmain_1Struct) obj;

			if (this.idmode_payement == null) {
				if (other.idmode_payement != null)
					return false;

			} else if (!this.idmode_payement.equals(other.idmode_payement))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_1Struct other) {

			other.idmode_payement = this.idmode_payement;
			other.libelle_payement = this.libelle_payement;

		}

		public void copyKeysDataTo(copyOfmain_1Struct other) {

			other.idmode_payement = this.idmode_payement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idmode_payement = readString(dis);

					this.libelle_payement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idmode_payement, dos);

				// String

				writeString(this.libelle_payement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idmode_payement=" + idmode_payement);
			sb.append(",libelle_payement=" + libelle_payement);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idmode_payement, other.idmode_payement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_PAIEMENT;

		public String getCODE_PAIEMENT() {
			return this.CODE_PAIEMENT;
		}

		public String LIBELLE_PAIEMENT;

		public String getLIBELLE_PAIEMENT() {
			return this.LIBELLE_PAIEMENT;
		}

		public String DETAIL_PAIEMENT;

		public String getDETAIL_PAIEMENT() {
			return this.DETAIL_PAIEMENT;
		}

		public String JOURNAL_PAIEMENT;

		public String getJOURNAL_PAIEMENT() {
			return this.JOURNAL_PAIEMENT;
		}

		public String COMPTE_PAIEMENT;

		public String getCOMPTE_PAIEMENT() {
			return this.COMPTE_PAIEMENT;
		}

		public String TRAITE_PAIEMENT;

		public String getTRAITE_PAIEMENT() {
			return this.TRAITE_PAIEMENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_PAIEMENT = readString(dis);

					this.LIBELLE_PAIEMENT = readString(dis);

					this.DETAIL_PAIEMENT = readString(dis);

					this.JOURNAL_PAIEMENT = readString(dis);

					this.COMPTE_PAIEMENT = readString(dis);

					this.TRAITE_PAIEMENT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_PAIEMENT, dos);

				// String

				writeString(this.LIBELLE_PAIEMENT, dos);

				// String

				writeString(this.DETAIL_PAIEMENT, dos);

				// String

				writeString(this.JOURNAL_PAIEMENT, dos);

				// String

				writeString(this.COMPTE_PAIEMENT, dos);

				// String

				writeString(this.TRAITE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_PAIEMENT=" + CODE_PAIEMENT);
			sb.append(",LIBELLE_PAIEMENT=" + LIBELLE_PAIEMENT);
			sb.append(",DETAIL_PAIEMENT=" + DETAIL_PAIEMENT);
			sb.append(",JOURNAL_PAIEMENT=" + JOURNAL_PAIEMENT);
			sb.append(",COMPTE_PAIEMENT=" + COMPTE_PAIEMENT);
			sb.append(",TRAITE_PAIEMENT=" + TRAITE_PAIEMENT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				copyOfmain_1Struct copyOfmain_1 = new copyOfmain_1Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_1");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("mode_payement");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("mode_payement");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"idmode_payement\",\"libelle_payement\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_1Struct copyOfmain_1_tmp = new copyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/DEV/Data/Base Montauban/param/paiement.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/paiement.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row5.CODE_PAIEMENT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row5.LIBELLE_PAIEMENT = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row5.DETAIL_PAIEMENT = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row5.JOURNAL_PAIEMENT = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row5.COMPTE_PAIEMENT = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row5.TRAITE_PAIEMENT = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_1 = null;

// # Output table : 'copyOfmain_1'
								copyOfmain_1_tmp.idmode_payement = row5.CODE_PAIEMENT;
								copyOfmain_1_tmp.libelle_payement = row5.LIBELLE_PAIEMENT;
								copyOfmain_1 = copyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_1"
							if (copyOfmain_1 != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_1");
								}

								whetherReject_tDBOutput_3 = false;
								if (copyOfmain_1.idmode_payement == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(1, copyOfmain_1.idmode_payement);
								}

								if (copyOfmain_1.libelle_payement == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(2, copyOfmain_1.libelle_payement);
								}

								pstmt_tDBOutput_3.addBatch();
								nb_line_tDBOutput_3++;

								batchSizeCounter_tDBOutput_3++;

								if ((batchSize_tDBOutput_3 > 0)
										&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
									try {
										int countSum_tDBOutput_3 = 0;

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										batchSizeCounter_tDBOutput_3 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
										java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
												sqle_tDBOutput_3 = null;
										String errormessage_tDBOutput_3;
										if (ne_tDBOutput_3 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_3 = new java.sql.SQLException(
													e_tDBOutput_3.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_3.getMessage(),
													ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
													ne_tDBOutput_3);
											errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
										} else {
											errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
										}

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										System.err.println(errormessage_tDBOutput_3);

									}
								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_1"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/paiement.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_1");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_2Struct implements routines.system.IPersistableRow<copyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idsecteur;

		public String getIdsecteur() {
			return this.idsecteur;
		}

		public String libelle_secteur;

		public String getLibelle_secteur() {
			return this.libelle_secteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idsecteur == null) ? 0 : this.idsecteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_2Struct other = (copyOfmain_2Struct) obj;

			if (this.idsecteur == null) {
				if (other.idsecteur != null)
					return false;

			} else if (!this.idsecteur.equals(other.idsecteur))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_2Struct other) {

			other.idsecteur = this.idsecteur;
			other.libelle_secteur = this.libelle_secteur;

		}

		public void copyKeysDataTo(copyOfmain_2Struct other) {

			other.idsecteur = this.idsecteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idsecteur = readString(dis);

					this.libelle_secteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idsecteur, dos);

				// String

				writeString(this.libelle_secteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idsecteur=" + idsecteur);
			sb.append(",libelle_secteur=" + libelle_secteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idsecteur, other.idsecteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_SECTEUR;

		public String getCODE_SECTEUR() {
			return this.CODE_SECTEUR;
		}

		public String LIBELLE_SECTEUR;

		public String getLIBELLE_SECTEUR() {
			return this.LIBELLE_SECTEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_SECTEUR = readString(dis);

					this.LIBELLE_SECTEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_SECTEUR, dos);

				// String

				writeString(this.LIBELLE_SECTEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_SECTEUR=" + CODE_SECTEUR);
			sb.append(",LIBELLE_SECTEUR=" + LIBELLE_SECTEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfmain_2Struct copyOfmain_2 = new copyOfmain_2Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_2");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("secteur");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("secteur");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"idsecteur\",\"libelle_secteur\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_2Struct copyOfmain_2_tmp = new copyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/DEV/Data/Base Montauban/param/secteurs.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/secteurs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row7 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row7 = new row7Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row7.CODE_SECTEUR = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row7.LIBELLE_SECTEUR = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_2 = null;

// # Output table : 'copyOfmain_2'
								copyOfmain_2_tmp.idsecteur = row7.CODE_SECTEUR;
								copyOfmain_2_tmp.libelle_secteur = row7.LIBELLE_SECTEUR;
								copyOfmain_2 = copyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_2"
							if (copyOfmain_2 != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_2");
								}

								whetherReject_tDBOutput_4 = false;
								if (copyOfmain_2.idsecteur == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(1, copyOfmain_2.idsecteur);
								}

								if (copyOfmain_2.libelle_secteur == null) {
									pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(2, copyOfmain_2.libelle_secteur);
								}

								pstmt_tDBOutput_4.addBatch();
								nb_line_tDBOutput_4++;

								batchSizeCounter_tDBOutput_4++;

								if ((batchSize_tDBOutput_4 > 0)
										&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
									try {
										int countSum_tDBOutput_4 = 0;

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										batchSizeCounter_tDBOutput_4 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
										java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
												sqle_tDBOutput_4 = null;
										String errormessage_tDBOutput_4;
										if (ne_tDBOutput_4 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_4 = new java.sql.SQLException(
													e_tDBOutput_4.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_4.getMessage(),
													ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
													ne_tDBOutput_4);
											errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
										} else {
											errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
										}

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										System.err.println(errormessage_tDBOutput_4);

									}
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_2"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/secteurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_2");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_3Struct implements routines.system.IPersistableRow<copyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idqualite;

		public String getIdqualite() {
			return this.idqualite;
		}

		public String libelle_qualite;

		public String getLibelle_qualite() {
			return this.libelle_qualite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idqualite == null) ? 0 : this.idqualite.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_3Struct other = (copyOfmain_3Struct) obj;

			if (this.idqualite == null) {
				if (other.idqualite != null)
					return false;

			} else if (!this.idqualite.equals(other.idqualite))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_3Struct other) {

			other.idqualite = this.idqualite;
			other.libelle_qualite = this.libelle_qualite;

		}

		public void copyKeysDataTo(copyOfmain_3Struct other) {

			other.idqualite = this.idqualite;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idqualite = readString(dis);

					this.libelle_qualite = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idqualite, dos);

				// String

				writeString(this.libelle_qualite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idqualite=" + idqualite);
			sb.append(",libelle_qualite=" + libelle_qualite);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idqualite, other.idqualite);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_QUALITE;

		public String getCODE_QUALITE() {
			return this.CODE_QUALITE;
		}

		public String LIBELLE_QUALITE;

		public String getLIBELLE_QUALITE() {
			return this.LIBELLE_QUALITE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_QUALITE = readString(dis);

					this.LIBELLE_QUALITE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_QUALITE, dos);

				// String

				writeString(this.LIBELLE_QUALITE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_QUALITE=" + CODE_QUALITE);
			sb.append(",LIBELLE_QUALITE=" + LIBELLE_QUALITE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				copyOfmain_3Struct copyOfmain_3 = new copyOfmain_3Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_3");
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("qualite");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("qualite");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					stmtClear_tDBOutput_5.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_5 + "\"");
				}
				String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5
						+ "\" (\"idqualite\",\"libelle_qualite\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_3Struct copyOfmain_3_tmp = new copyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "C:/DEV/Data/Base Montauban/param/qualités.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/qualités.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row9 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row9.CODE_QUALITE = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row9.LIBELLE_QUALITE = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_3 = null;

// # Output table : 'copyOfmain_3'
								copyOfmain_3_tmp.idqualite = row9.CODE_QUALITE;
								copyOfmain_3_tmp.libelle_qualite = row9.LIBELLE_QUALITE;
								copyOfmain_3 = copyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_3"
							if (copyOfmain_3 != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_3");
								}

								whetherReject_tDBOutput_5 = false;
								if (copyOfmain_3.idqualite == null) {
									pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(1, copyOfmain_3.idqualite);
								}

								if (copyOfmain_3.libelle_qualite == null) {
									pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(2, copyOfmain_3.libelle_qualite);
								}

								pstmt_tDBOutput_5.addBatch();
								nb_line_tDBOutput_5++;

								batchSizeCounter_tDBOutput_5++;

								if ((batchSize_tDBOutput_5 > 0)
										&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
									try {
										int countSum_tDBOutput_5 = 0;

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										batchSizeCounter_tDBOutput_5 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
										java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
												sqle_tDBOutput_5 = null;
										String errormessage_tDBOutput_5;
										if (ne_tDBOutput_5 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_5 = new java.sql.SQLException(
													e_tDBOutput_5.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_5.getMessage(),
													ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
													ne_tDBOutput_5);
											errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
										} else {
											errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
										}

										int countSum_tDBOutput_5 = 0;
										for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										System.err.println(errormessage_tDBOutput_5);

									}
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_3"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/qualités.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_3");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_2Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcode_facturation;

		public int getIdcode_facturation() {
			return this.idcode_facturation;
		}

		public String libelle_code_facturation;

		public String getLibelle_code_facturation() {
			return this.libelle_code_facturation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcode_facturation;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_2Struct other = (copyOfcopyOfmain_2Struct) obj;

			if (this.idcode_facturation != other.idcode_facturation)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_2Struct other) {

			other.idcode_facturation = this.idcode_facturation;
			other.libelle_code_facturation = this.libelle_code_facturation;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_2Struct other) {

			other.idcode_facturation = this.idcode_facturation;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcode_facturation = dis.readInt();

					this.libelle_code_facturation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcode_facturation);

				// String

				writeString(this.libelle_code_facturation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcode_facturation=" + String.valueOf(idcode_facturation));
			sb.append(",libelle_code_facturation=" + libelle_code_facturation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcode_facturation, other.idcode_facturation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_FIDELITE;

		public String getCODE_FIDELITE() {
			return this.CODE_FIDELITE;
		}

		public String LIBELLE_FIDELITE;

		public String getLIBELLE_FIDELITE() {
			return this.LIBELLE_FIDELITE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_FIDELITE = readString(dis);

					this.LIBELLE_FIDELITE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_FIDELITE, dos);

				// String

				writeString(this.LIBELLE_FIDELITE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_FIDELITE=" + CODE_FIDELITE);
			sb.append(",LIBELLE_FIDELITE=" + LIBELLE_FIDELITE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				copyOfcopyOfmain_2Struct copyOfcopyOfmain_2 = new copyOfcopyOfmain_2Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_2");
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = ("code_facturation");
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("code_facturation");
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtClear_tDBOutput_6.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_6 + "\"");
				}
				String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6
						+ "\" (\"idcode_facturation\",\"libelle_code_facturation\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_2Struct copyOfcopyOfmain_2_tmp = new copyOfcopyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\r\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\r\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */
						"C:/DEV/Data/Base Montauban/param/fidelités.csv"/** End field tFileInputDelimited_6:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6.getValues();
								if (!(rowtFileInputDelimited_6.length == 1
										&& ("\015").equals(rowtFileInputDelimited_6[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
											: totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6
										? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_6)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {
						rowstate_tFileInputDelimited_6.reset();

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6.getValues();

						if (rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row10 = new row10Struct();
						try {

							char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_6_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row10.CODE_FIDELITE = null;

								row10.LIBELLE_FIDELITE = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row10.CODE_FIDELITE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row10.CODE_FIDELITE = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row10.LIBELLE_FIDELITE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row10.LIBELLE_FIDELITE = null;

								}

							}

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_2 = null;

// # Output table : 'copyOfcopyOfmain_2'
								copyOfcopyOfmain_2_tmp.idcode_facturation = Integer.parseInt(row10.CODE_FIDELITE);
								copyOfcopyOfmain_2_tmp.libelle_code_facturation = row10.LIBELLE_FIDELITE;
								copyOfcopyOfmain_2 = copyOfcopyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_2"
							if (copyOfcopyOfmain_2 != null) {

								/**
								 * [tDBOutput_6 main ] start
								 */

								currentComponent = "tDBOutput_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_2");
								}

								whetherReject_tDBOutput_6 = false;
								pstmt_tDBOutput_6.setInt(1, copyOfcopyOfmain_2.idcode_facturation);

								if (copyOfcopyOfmain_2.libelle_code_facturation == null) {
									pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(2, copyOfcopyOfmain_2.libelle_code_facturation);
								}

								pstmt_tDBOutput_6.addBatch();
								nb_line_tDBOutput_6++;

								batchSizeCounter_tDBOutput_6++;

								if ((batchSize_tDBOutput_6 > 0)
										&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
									try {
										int countSum_tDBOutput_6 = 0;

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										batchSizeCounter_tDBOutput_6 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
										java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),
												sqle_tDBOutput_6 = null;
										String errormessage_tDBOutput_6;
										if (ne_tDBOutput_6 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_6 = new java.sql.SQLException(
													e_tDBOutput_6.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_6.getMessage(),
													ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(),
													ne_tDBOutput_6);
											errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
										} else {
											errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
										}

										int countSum_tDBOutput_6 = 0;
										for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										System.err.println(errormessage_tDBOutput_6);

									}
								}

								tos_count_tDBOutput_6++;

								/**
								 * [tDBOutput_6 main ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_end ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_2"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", nb_line_tFileInputDelimited_6);
					}

				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_2");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortieStruct implements routines.system.IPersistableRow<copyOfsortieStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idcat;

		public String getIdcat() {
			return this.idcat;
		}

		public String libelle_categorie;

		public String getLibelle_categorie() {
			return this.libelle_categorie;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idcat == null) ? 0 : this.idcat.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortieStruct other = (copyOfsortieStruct) obj;

			if (this.idcat == null) {
				if (other.idcat != null)
					return false;

			} else if (!this.idcat.equals(other.idcat))

				return false;

			return true;
		}

		public void copyDataTo(copyOfsortieStruct other) {

			other.idcat = this.idcat;
			other.libelle_categorie = this.libelle_categorie;

		}

		public void copyKeysDataTo(copyOfsortieStruct other) {

			other.idcat = this.idcat;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcat = readString(dis);

					this.libelle_categorie = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idcat, dos);

				// String

				writeString(this.libelle_categorie, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcat=" + idcat);
			sb.append(",libelle_categorie=" + libelle_categorie);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortieStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcat, other.idcat);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_CATEGORIE;

		public String getCODE_CATEGORIE() {
			return this.CODE_CATEGORIE;
		}

		public String LIBELLE_CATEGORIE;

		public String getLIBELLE_CATEGORIE() {
			return this.LIBELLE_CATEGORIE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_CATEGORIE = readString(dis);

					this.LIBELLE_CATEGORIE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_CATEGORIE, dos);

				// String

				writeString(this.LIBELLE_CATEGORIE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_CATEGORIE=" + CODE_CATEGORIE);
			sb.append(",LIBELLE_CATEGORIE=" + LIBELLE_CATEGORIE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfsortieStruct copyOfsortie = new copyOfsortieStruct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie");
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = ("code_categorie");
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("code_categorie");
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
					stmtClear_tDBOutput_7.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_7 + "\"");
				}
				String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7
						+ "\" (\"idcat\",\"libelle_categorie\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortieStruct copyOfsortie_tmp = new copyOfsortieStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "C:/DEV/Data/Base Montauban/param/categories.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/categories.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row4.CODE_CATEGORIE = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row4.LIBELLE_CATEGORIE = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie = null;

// # Output table : 'copyOfsortie'
								copyOfsortie_tmp.idcat = row4.CODE_CATEGORIE;
								copyOfsortie_tmp.libelle_categorie = row4.LIBELLE_CATEGORIE;
								copyOfsortie = copyOfsortie_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */

							/**
							 * [tMap_7 process_data_begin ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie"
							if (copyOfsortie != null) {

								/**
								 * [tDBOutput_7 main ] start
								 */

								currentComponent = "tDBOutput_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie");
								}

								whetherReject_tDBOutput_7 = false;
								if (copyOfsortie.idcat == null) {
									pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(1, copyOfsortie.idcat);
								}

								if (copyOfsortie.libelle_categorie == null) {
									pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(2, copyOfsortie.libelle_categorie);
								}

								pstmt_tDBOutput_7.addBatch();
								nb_line_tDBOutput_7++;

								batchSizeCounter_tDBOutput_7++;

								if ((batchSize_tDBOutput_7 > 0)
										&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
									try {
										int countSum_tDBOutput_7 = 0;

										for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										batchSizeCounter_tDBOutput_7 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
										java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
												sqle_tDBOutput_7 = null;
										String errormessage_tDBOutput_7;
										if (ne_tDBOutput_7 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_7 = new java.sql.SQLException(
													e_tDBOutput_7.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_7.getMessage(),
													ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(),
													ne_tDBOutput_7);
											errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
										} else {
											errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
										}

										int countSum_tDBOutput_7 = 0;
										for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										System.err.println(errormessage_tDBOutput_7);

									}
								}

								tos_count_tDBOutput_7++;

								/**
								 * [tDBOutput_7 main ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_end ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie"

							/**
							 * [tMap_7 process_data_end ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/categories.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
					if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_7")) != null) {
						pstmtToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortie_0Struct implements routines.system.IPersistableRow<copyOfsortie_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idrepresentant;

		public String getIdrepresentant() {
			return this.idrepresentant;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idrepresentant == null) ? 0 : this.idrepresentant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortie_0Struct other = (copyOfsortie_0Struct) obj;

			if (this.idrepresentant == null) {
				if (other.idrepresentant != null)
					return false;

			} else if (!this.idrepresentant.equals(other.idrepresentant))

				return false;

			return true;
		}

		public void copyDataTo(copyOfsortie_0Struct other) {

			other.idrepresentant = this.idrepresentant;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(copyOfsortie_0Struct other) {

			other.idrepresentant = this.idrepresentant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idrepresentant = readString(dis);

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idrepresentant, dos);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrepresentant=" + idrepresentant);
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrepresentant, other.idrepresentant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CODE_VENDEUR;

		public String getCODE_VENDEUR() {
			return this.CODE_VENDEUR;
		}

		public String LIBELLE_VENDEUR;

		public String getLIBELLE_VENDEUR() {
			return this.LIBELLE_VENDEUR;
		}

		public String EMAIL_VENDEUR;

		public String getEMAIL_VENDEUR() {
			return this.EMAIL_VENDEUR;
		}

		public String CAISSE_VENDEUR;

		public String getCAISSE_VENDEUR() {
			return this.CAISSE_VENDEUR;
		}

		public String PASSWORD_VENDEUR;

		public String getPASSWORD_VENDEUR() {
			return this.PASSWORD_VENDEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CODE_VENDEUR = readString(dis);

					this.LIBELLE_VENDEUR = readString(dis);

					this.EMAIL_VENDEUR = readString(dis);

					this.CAISSE_VENDEUR = readString(dis);

					this.PASSWORD_VENDEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_VENDEUR, dos);

				// String

				writeString(this.LIBELLE_VENDEUR, dos);

				// String

				writeString(this.EMAIL_VENDEUR, dos);

				// String

				writeString(this.CAISSE_VENDEUR, dos);

				// String

				writeString(this.PASSWORD_VENDEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_VENDEUR=" + CODE_VENDEUR);
			sb.append(",LIBELLE_VENDEUR=" + LIBELLE_VENDEUR);
			sb.append(",EMAIL_VENDEUR=" + EMAIL_VENDEUR);
			sb.append(",CAISSE_VENDEUR=" + CAISSE_VENDEUR);
			sb.append(",PASSWORD_VENDEUR=" + PASSWORD_VENDEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				copyOfsortie_0Struct copyOfsortie_0 = new copyOfsortie_0Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie_0");
				}

				int tos_count_tDBOutput_8 = 0;

				String dbschema_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_8 = null;
				if (dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = ("code_representant");
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("code_representant");
				}

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;

				boolean whetherReject_tDBOutput_8 = false;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;

				conn_tDBOutput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
					stmtClear_tDBOutput_8.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_8 + "\"");
				}
				String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8
						+ "\" (\"idrepresentant\",\"nom\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_0Struct copyOfsortie_0_tmp = new copyOfsortie_0Struct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try {

					Object filename_tFileInputDelimited_8 = "C:/DEV/Data/Base Montauban/param/vendeurs.csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0 || random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/vendeurs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_8, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row6.CODE_VENDEUR = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row6.LIBELLE_VENDEUR = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row6.EMAIL_VENDEUR = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							row6.CAISSE_VENDEUR = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 4;

							row6.PASSWORD_VENDEUR = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							if (rowstate_tFileInputDelimited_8.getException() != null) {
								throw rowstate_tFileInputDelimited_8.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */

						/**
						 * [tFileInputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_8 main ] start
							 */

							currentComponent = "tMap_8";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8 = false;
							boolean mainRowRejected_tMap_8 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie_0 = null;

// # Output table : 'copyOfsortie_0'
								copyOfsortie_0_tmp.idrepresentant = row6.CODE_VENDEUR;
								copyOfsortie_0_tmp.nom = row6.LIBELLE_VENDEUR;
								copyOfsortie_0 = copyOfsortie_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_8 = false;

							tos_count_tMap_8++;

							/**
							 * [tMap_8 main ] stop
							 */

							/**
							 * [tMap_8 process_data_begin ] start
							 */

							currentComponent = "tMap_8";

							/**
							 * [tMap_8 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie_0"
							if (copyOfsortie_0 != null) {

								/**
								 * [tDBOutput_8 main ] start
								 */

								currentComponent = "tDBOutput_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie_0");
								}

								whetherReject_tDBOutput_8 = false;
								if (copyOfsortie_0.idrepresentant == null) {
									pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_8.setString(1, copyOfsortie_0.idrepresentant);
								}

								if (copyOfsortie_0.nom == null) {
									pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_8.setString(2, copyOfsortie_0.nom);
								}

								pstmt_tDBOutput_8.addBatch();
								nb_line_tDBOutput_8++;

								batchSizeCounter_tDBOutput_8++;

								if ((batchSize_tDBOutput_8 > 0)
										&& (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
									try {
										int countSum_tDBOutput_8 = 0;

										for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
											countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

										batchSizeCounter_tDBOutput_8 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
										java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),
												sqle_tDBOutput_8 = null;
										String errormessage_tDBOutput_8;
										if (ne_tDBOutput_8 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_8 = new java.sql.SQLException(
													e_tDBOutput_8.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_8.getMessage(),
													ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(),
													ne_tDBOutput_8);
											errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
										} else {
											errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
										}

										int countSum_tDBOutput_8 = 0;
										for (int countEach_tDBOutput_8 : e_tDBOutput_8.getUpdateCounts()) {
											countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

										System.err.println(errormessage_tDBOutput_8);

									}
								}

								tos_count_tDBOutput_8++;

								/**
								 * [tDBOutput_8 main ] stop
								 */

								/**
								 * [tDBOutput_8 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_8 process_data_end ] start
								 */

								currentComponent = "tDBOutput_8";

								/**
								 * [tDBOutput_8 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie_0"

							/**
							 * [tMap_8 process_data_end ] start
							 */

							currentComponent = "tMap_8";

							/**
							 * [tMap_8 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/vendeurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					int countSum_tDBOutput_8 = 0;
					if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}

					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

				} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
					java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(), sqle_tDBOutput_8 = null;
					String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(
								e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(),
								ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
					} else {
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e_tDBOutput_8.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					System.err.println(errormessage_tDBOutput_8);

				}

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie_0");
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
					if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_8")) != null) {
						pstmtToClose_tDBOutput_8.close();
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String code_ape;

		public String getCode_ape() {
			return this.code_ape;
		}

		public String code_rejet;

		public String getCode_rejet() {
			return this.code_rejet;
		}

		public String mot_court;

		public String getMot_court() {
			return this.mot_court;
		}

		public String nom_client;

		public String getNom_client() {
			return this.nom_client;
		}

		public String numero_compte_compta;

		public String getNumero_compte_compta() {
			return this.numero_compte_compta;
		}

		public String numero_identifiant_cee;

		public String getNumero_identifiant_cee() {
			return this.numero_identifiant_cee;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String idcategorie;

		public String getIdcategorie() {
			return this.idcategorie;
		}

		public String idrepresentant;

		public String getIdrepresentant() {
			return this.idrepresentant;
		}

		public Integer idcode_facturation;

		public Integer getIdcode_facturation() {
			return this.idcode_facturation;
		}

		public Long iddevise;

		public Long getIddevise() {
			return this.iddevise;
		}

		public String idmode_payement;

		public String getIdmode_payement() {
			return this.idmode_payement;
		}

		public String idqualite;

		public String getIdqualite() {
			return this.idqualite;
		}

		public String idsecteur;

		public String getIdsecteur() {
			return this.idsecteur;
		}

		public String idtransporteur;

		public String getIdtransporteur() {
			return this.idtransporteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idcli == null) ? 0 : this.idcli.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_2Struct other = (copyOfcopyOfcopyOfmain_2Struct) obj;

			if (this.idcli == null) {
				if (other.idcli != null)
					return false;

			} else if (!this.idcli.equals(other.idcli))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_2Struct other) {

			other.idcli = this.idcli;
			other.code_ape = this.code_ape;
			other.code_rejet = this.code_rejet;
			other.mot_court = this.mot_court;
			other.nom_client = this.nom_client;
			other.numero_compte_compta = this.numero_compte_compta;
			other.numero_identifiant_cee = this.numero_identifiant_cee;
			other.siret = this.siret;
			other.idcategorie = this.idcategorie;
			other.idrepresentant = this.idrepresentant;
			other.idcode_facturation = this.idcode_facturation;
			other.iddevise = this.iddevise;
			other.idmode_payement = this.idmode_payement;
			other.idqualite = this.idqualite;
			other.idsecteur = this.idsecteur;
			other.idtransporteur = this.idtransporteur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_2Struct other) {

			other.idcli = this.idcli;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcli = readString(dis);

					this.code_ape = readString(dis);

					this.code_rejet = readString(dis);

					this.mot_court = readString(dis);

					this.nom_client = readString(dis);

					this.numero_compte_compta = readString(dis);

					this.numero_identifiant_cee = readString(dis);

					this.siret = readString(dis);

					this.idcategorie = readString(dis);

					this.idrepresentant = readString(dis);

					this.idcode_facturation = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.iddevise = null;
					} else {
						this.iddevise = dis.readLong();
					}

					this.idmode_payement = readString(dis);

					this.idqualite = readString(dis);

					this.idsecteur = readString(dis);

					this.idtransporteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.code_ape, dos);

				// String

				writeString(this.code_rejet, dos);

				// String

				writeString(this.mot_court, dos);

				// String

				writeString(this.nom_client, dos);

				// String

				writeString(this.numero_compte_compta, dos);

				// String

				writeString(this.numero_identifiant_cee, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.idcategorie, dos);

				// String

				writeString(this.idrepresentant, dos);

				// Integer

				writeInteger(this.idcode_facturation, dos);

				// Long

				if (this.iddevise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.iddevise);
				}

				// String

				writeString(this.idmode_payement, dos);

				// String

				writeString(this.idqualite, dos);

				// String

				writeString(this.idsecteur, dos);

				// String

				writeString(this.idtransporteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcli=" + idcli);
			sb.append(",code_ape=" + code_ape);
			sb.append(",code_rejet=" + code_rejet);
			sb.append(",mot_court=" + mot_court);
			sb.append(",nom_client=" + nom_client);
			sb.append(",numero_compte_compta=" + numero_compte_compta);
			sb.append(",numero_identifiant_cee=" + numero_identifiant_cee);
			sb.append(",siret=" + siret);
			sb.append(",idcategorie=" + idcategorie);
			sb.append(",idrepresentant=" + idrepresentant);
			sb.append(",idcode_facturation=" + String.valueOf(idcode_facturation));
			sb.append(",iddevise=" + String.valueOf(iddevise));
			sb.append(",idmode_payement=" + idmode_payement);
			sb.append(",idqualite=" + idqualite);
			sb.append(",idsecteur=" + idsecteur);
			sb.append(",idtransporteur=" + idtransporteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcli, other.idcli);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfmain_2 = new copyOfcopyOfcopyOfmain_2Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_2");
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = ("client");
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("client");
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				conn_tDBOutput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
					stmtClear_tDBOutput_9.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_9 + "\"");
				}
				String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9
						+ "\" (\"idcli\",\"code_ape\",\"code_rejet\",\"mot_court\",\"nom_client\",\"numero_compte_compta\",\"numero_identifiant_cee\",\"siret\",\"idcategorie\",\"idrepresentant\",\"idcode_facturation\",\"iddevise\",\"idmode_payement\",\"idqualite\",\"idsecteur\",\"idtransporteur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfmain_2_tmp = new copyOfcopyOfcopyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_9 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row3Struct row3) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 0;

						row3.CREF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 1;

						row3.CNOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 2;

						row3.CRUE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 3;

						row3.CAUX = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 4;

						row3.CCPTL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 5;

						row3.CVIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 6;

						row3.FILL01 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 7;

						row3.CQUAL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 8;

						row3.CCOM1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 9;

						row3.CCREP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 10;

						row3.CREMFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 11;

						row3.CECHE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 12;

						row3.CECHJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 13;

						row3.CPAI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 14;

						row3.CCHAN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 15;

						row3.CECHJ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 16;

						row3.CMOD = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 17;

						row3.CBQ1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 18;

						row3.CBQ2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 19;

						row3.CBQ3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 20;

						row3.CBQ4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 21;

						row3.CBQ5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 22;

						row3.CBQ6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 23;

						row3.CFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 24;

						row3.CBL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 25;

						row3.CESC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 26;

						row3.VARAD1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 27;

						row3.VARAD2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 28;

						row3.VARAD3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 29;

						row3.VARAD4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 30;

						row3.VARAD5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 31;

						row3.VARAD6 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 32;

						row3.VARA1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 33;

						row3.VARA2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 34;

						row3.VARA3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 35;

						row3.VARA4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 36;

						row3.VARA5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 37;

						row3.VARB1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 38;

						row3.VARB2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 39;

						row3.VARB3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 40;

						row3.VARB4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 41;

						row3.VARB5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 42;

						row3.VARN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 43;

						row3.VARN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 44;

						row3.VARN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 45;

						row3.VARN4 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 46;

						row3.VARN5 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 47;

						row3.CDATCRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 48;

						row3.CTEL1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 49;

						row3.CTEL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 50;

						row3.CTEX1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 51;

						row3.CTEX2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 52;

						row3.CDELMOY = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 53;

						row3.CAFFAIRE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 54;

						row3.CCPTFACT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 55;

						row3.CINTERNET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 56;

						row3.CIBAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 57;

						row3.CBIC_old = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 58;

						row3.CFIDEL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 59;

						row3.CRFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 60;

						row3.CCOMREG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 61;

						row3.CAPE2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 62;

						row3.CIBAN72 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 63;

						row3.CIBAN8 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 64;

						row3.CIBAN9 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 65;

						row3.CBIC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 66;

						row3.CTRANSP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 67;

						row3.CFACTMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 68;

						row3.CBLMAIL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 69;

						row3.CFACTWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 70;

						row3.CBLWEB = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 71;

						row3.CPUBLIPOSTAGE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 72;

						row3.CFACT_EDI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 73;

						row3.CFACT_CHORUS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 74;

						row3.CFACTORING = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 75;

						row3.CCHORUS_SERVICE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 76;

						row3.CFIL14 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 77;

						row3.CTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 78;

						row3.FIL02 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 79;

						row3.CREJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 80;

						row3.CSECT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 81;

						row3.CTOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 82;

						row3.CCAN1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 83;

						row3.CCAN2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 84;

						row3.CCAN3 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 85;

						row3.CDATF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 86;

						row3.CCAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 87;

						row3.CRESP = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 88;

						row3.CAPE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 89;

						row3.CPREMC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 90;

						row3.CDERNC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 91;

						row3.CPROCC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 92;

						row3.CTYPEC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 93;

						row3.CSIRET = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 94;

						row3.CORIGIN = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 95;

						row3.CMOTCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 96;

						row3.CCOMPTA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 97;

						row3.CAFFMEMO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 98;

						row3.CFIL2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 99;

						row3.CPNAFF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row3Struct row3) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_9 = 0;

						columnIndexWithD_tFileInputDelimited_9 = 100;

						row3.CDEVTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 101;

						row3.CMINCOM = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 102;

						row3.CRELEVE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 103;

						row3.CRELIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 104;

						row3.CMAJ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 105;

						row3.CECH = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 106;

						row3.CETIQ = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 107;

						row3.CCOEF = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 108;

						row3.CARROND = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 109;

						row3.CENCOUR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 110;

						row3.CNIVREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 111;

						row3.CBLOCAG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 112;

						row3.CDATREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 113;

						row3.CRESCO = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 114;

						row3.CRESFI = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 115;

						row3.CSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 116;

						row3.CDATENC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 117;

						row3.CDATSFA = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 118;

						row3.CCONTR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 119;

						row3.CDEREL = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 120;

						row3.CPAYS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 121;

						row3.CBLTOT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 122;

						row3.CBLLIG = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 123;

						row3.CENCDIS = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 124;

						row3.CNCEE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 125;

						row3.CNSFAC = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 126;

						row3.CPSRDAT = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 127;

						row3.CEPNASR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 128;

						row3.CCODTAR = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

						columnIndexWithD_tFileInputDelimited_9 = 129;

						row3.CDEVISE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9,
							row3Struct row3) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_9, row3);

						valueToConn_1(fid_tFileInputDelimited_9, row3);

					}

				}
				RowHelper_tFileInputDelimited_9 rowHelper_tFileInputDelimited_9 = new RowHelper_tFileInputDelimited_9();

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try {

					Object filename_tFileInputDelimited_9 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0 || random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_9, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row3 = new row3Struct();
						try {

							rowHelper_tFileInputDelimited_9.valueToConn(fid_tFileInputDelimited_9, row3);

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_2 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_2'
								copyOfcopyOfcopyOfmain_2_tmp.idcli = row3.CREF;
								copyOfcopyOfcopyOfmain_2_tmp.code_ape = row3.CAPE + row3.CAPE2;
								copyOfcopyOfcopyOfmain_2_tmp.code_rejet = row3.CREJ;
								copyOfcopyOfcopyOfmain_2_tmp.mot_court = row3.CMOTCOUR;
								copyOfcopyOfcopyOfmain_2_tmp.nom_client = row3.CNOM;
								copyOfcopyOfcopyOfmain_2_tmp.numero_compte_compta = row3.CCOMPTA;
								copyOfcopyOfcopyOfmain_2_tmp.numero_identifiant_cee = row3.CNCEE;
								copyOfcopyOfcopyOfmain_2_tmp.siret = row3.CSIRET;
								copyOfcopyOfcopyOfmain_2_tmp.idcategorie = row3.CCAT.equals("1") ? new String("1")
										: row3.CCAT.equals("2") ? new String("2")
												: row3.CCAT.equals("3") ? new String("3")
														: row3.CCAT.equals("4") ? new String("4")
																: row3.CCAT.equals("5") ? new String("5") :

																		null;
								copyOfcopyOfcopyOfmain_2_tmp.idrepresentant = row3.CCREP.equals("0S") ? null
										: row3.CCREP;
								copyOfcopyOfcopyOfmain_2_tmp.idcode_facturation = row3.CTAR.equals("0") ? new Integer(1)
										: row3.CTAR.equals("3") ? new Integer(2) : Integer.parseInt(row3.CTAR);
								copyOfcopyOfcopyOfmain_2_tmp.iddevise = new Long(1);
								copyOfcopyOfcopyOfmain_2_tmp.idmode_payement = row3.CPAI;
								copyOfcopyOfcopyOfmain_2_tmp.idqualite = row3.CQUAL.isBlank() ? null : row3.CQUAL;
								copyOfcopyOfcopyOfmain_2_tmp.idsecteur = new String("A");
								copyOfcopyOfcopyOfmain_2_tmp.idtransporteur = row3.CTRANSP.isBlank() ? null
										: row3.CTRANSP;
								copyOfcopyOfcopyOfmain_2 = copyOfcopyOfcopyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */

							/**
							 * [tMap_9 process_data_begin ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_2"
							if (copyOfcopyOfcopyOfmain_2 != null) {

								/**
								 * [tDBOutput_9 main ] start
								 */

								currentComponent = "tDBOutput_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_2");
								}

								whetherReject_tDBOutput_9 = false;
								if (copyOfcopyOfcopyOfmain_2.idcli == null) {
									pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(1, copyOfcopyOfcopyOfmain_2.idcli);
								}

								if (copyOfcopyOfcopyOfmain_2.code_ape == null) {
									pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(2, copyOfcopyOfcopyOfmain_2.code_ape);
								}

								if (copyOfcopyOfcopyOfmain_2.code_rejet == null) {
									pstmt_tDBOutput_9.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(3, copyOfcopyOfcopyOfmain_2.code_rejet);
								}

								if (copyOfcopyOfcopyOfmain_2.mot_court == null) {
									pstmt_tDBOutput_9.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(4, copyOfcopyOfcopyOfmain_2.mot_court);
								}

								if (copyOfcopyOfcopyOfmain_2.nom_client == null) {
									pstmt_tDBOutput_9.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(5, copyOfcopyOfcopyOfmain_2.nom_client);
								}

								if (copyOfcopyOfcopyOfmain_2.numero_compte_compta == null) {
									pstmt_tDBOutput_9.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(6, copyOfcopyOfcopyOfmain_2.numero_compte_compta);
								}

								if (copyOfcopyOfcopyOfmain_2.numero_identifiant_cee == null) {
									pstmt_tDBOutput_9.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(7, copyOfcopyOfcopyOfmain_2.numero_identifiant_cee);
								}

								if (copyOfcopyOfcopyOfmain_2.siret == null) {
									pstmt_tDBOutput_9.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(8, copyOfcopyOfcopyOfmain_2.siret);
								}

								if (copyOfcopyOfcopyOfmain_2.idcategorie == null) {
									pstmt_tDBOutput_9.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(9, copyOfcopyOfcopyOfmain_2.idcategorie);
								}

								if (copyOfcopyOfcopyOfmain_2.idrepresentant == null) {
									pstmt_tDBOutput_9.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(10, copyOfcopyOfcopyOfmain_2.idrepresentant);
								}

								if (copyOfcopyOfcopyOfmain_2.idcode_facturation == null) {
									pstmt_tDBOutput_9.setNull(11, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_9.setInt(11, copyOfcopyOfcopyOfmain_2.idcode_facturation);
								}

								if (copyOfcopyOfcopyOfmain_2.iddevise == null) {
									pstmt_tDBOutput_9.setNull(12, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_9.setLong(12, copyOfcopyOfcopyOfmain_2.iddevise);
								}

								if (copyOfcopyOfcopyOfmain_2.idmode_payement == null) {
									pstmt_tDBOutput_9.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(13, copyOfcopyOfcopyOfmain_2.idmode_payement);
								}

								if (copyOfcopyOfcopyOfmain_2.idqualite == null) {
									pstmt_tDBOutput_9.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(14, copyOfcopyOfcopyOfmain_2.idqualite);
								}

								if (copyOfcopyOfcopyOfmain_2.idsecteur == null) {
									pstmt_tDBOutput_9.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(15, copyOfcopyOfcopyOfmain_2.idsecteur);
								}

								if (copyOfcopyOfcopyOfmain_2.idtransporteur == null) {
									pstmt_tDBOutput_9.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(16, copyOfcopyOfcopyOfmain_2.idtransporteur);
								}

								pstmt_tDBOutput_9.addBatch();
								nb_line_tDBOutput_9++;

								batchSizeCounter_tDBOutput_9++;

								if ((batchSize_tDBOutput_9 > 0)
										&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
									try {
										int countSum_tDBOutput_9 = 0;

										for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										batchSizeCounter_tDBOutput_9 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
										java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
												sqle_tDBOutput_9 = null;
										String errormessage_tDBOutput_9;
										if (ne_tDBOutput_9 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_9 = new java.sql.SQLException(
													e_tDBOutput_9.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_9.getMessage(),
													ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(),
													ne_tDBOutput_9);
											errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
										} else {
											errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
										}

										int countSum_tDBOutput_9 = 0;
										for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										System.err.println(errormessage_tDBOutput_9);

									}
								}

								tos_count_tDBOutput_9++;

								/**
								 * [tDBOutput_9 main ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_end ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_2"

							/**
							 * [tMap_9 process_data_end ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9 + deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED", nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED", nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_2");
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
			}

			tFileInputDelimited_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
					if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_9")) != null) {
						pstmtToClose_tDBOutput_9.close();
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmainStruct implements routines.system.IPersistableRow<copyOfmainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddocument;

		public int getIddocument() {
			return this.iddocument;
		}

		public String emplacement_disque;

		public String getEmplacement_disque() {
			return this.emplacement_disque;
		}

		public String nom_fichier;

		public String getNom_fichier() {
			return this.nom_fichier;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String type_origine;

		public String getType_origine() {
			return this.type_origine;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddocument;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmainStruct other = (copyOfmainStruct) obj;

			if (this.iddocument != other.iddocument)
				return false;

			return true;
		}

		public void copyDataTo(copyOfmainStruct other) {

			other.iddocument = this.iddocument;
			other.emplacement_disque = this.emplacement_disque;
			other.nom_fichier = this.nom_fichier;
			other.titre = this.titre;
			other.type_origine = this.type_origine;
			other.idarticle = this.idarticle;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfmainStruct other) {

			other.iddocument = this.iddocument;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddocument = dis.readInt();

					this.emplacement_disque = readString(dis);

					this.nom_fichier = readString(dis);

					this.titre = readString(dis);

					this.type_origine = readString(dis);

					this.idarticle = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddocument);

				// String

				writeString(this.emplacement_disque, dos);

				// String

				writeString(this.nom_fichier, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.type_origine, dos);

				// String

				writeString(this.idarticle, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddocument=" + String.valueOf(iddocument));
			sb.append(",emplacement_disque=" + emplacement_disque);
			sb.append(",nom_fichier=" + nom_fichier);
			sb.append(",titre=" + titre);
			sb.append(",type_origine=" + type_origine);
			sb.append(",idarticle=" + idarticle);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddocument, other.iddocument);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String DOCCAT;

		public String getDOCCAT() {
			return this.DOCCAT;
		}

		public String DOCLIEN;

		public String getDOCLIEN() {
			return this.DOCLIEN;
		}

		public String DOCCOMPT;

		public String getDOCCOMPT() {
			return this.DOCCOMPT;
		}

		public String DOCLIB;

		public String getDOCLIB() {
			return this.DOCLIB;
		}

		public String DOCEMPL;

		public String getDOCEMPL() {
			return this.DOCEMPL;
		}

		public String DOCNOM;

		public String getDOCNOM() {
			return this.DOCNOM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.DOCCAT = readString(dis);

					this.DOCLIEN = readString(dis);

					this.DOCCOMPT = readString(dis);

					this.DOCLIB = readString(dis);

					this.DOCEMPL = readString(dis);

					this.DOCNOM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DOCCAT, dos);

				// String

				writeString(this.DOCLIEN, dos);

				// String

				writeString(this.DOCCOMPT, dos);

				// String

				writeString(this.DOCLIB, dos);

				// String

				writeString(this.DOCEMPL, dos);

				// String

				writeString(this.DOCNOM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DOCCAT=" + DOCCAT);
			sb.append(",DOCLIEN=" + DOCLIEN);
			sb.append(",DOCCOMPT=" + DOCCOMPT);
			sb.append(",DOCLIB=" + DOCLIB);
			sb.append(",DOCEMPL=" + DOCEMPL);
			sb.append(",DOCNOM=" + DOCNOM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();
				copyOfmainStruct copyOfmain = new copyOfmainStruct();

				/**
				 * [tDBOutput_19 begin ] start
				 */

				ok_Hash.put("tDBOutput_19", false);
				start_Hash.put("tDBOutput_19", System.currentTimeMillis());

				currentComponent = "tDBOutput_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain");
				}

				int tos_count_tDBOutput_19 = 0;

				String dbschema_tDBOutput_19 = null;
				dbschema_tDBOutput_19 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_19 = null;
				if (dbschema_tDBOutput_19 == null || dbschema_tDBOutput_19.trim().length() == 0) {
					tableName_tDBOutput_19 = ("document");
				} else {
					tableName_tDBOutput_19 = dbschema_tDBOutput_19 + "\".\"" + ("document");
				}

				int nb_line_tDBOutput_19 = 0;
				int nb_line_update_tDBOutput_19 = 0;
				int nb_line_inserted_tDBOutput_19 = 0;
				int nb_line_deleted_tDBOutput_19 = 0;
				int nb_line_rejected_tDBOutput_19 = 0;

				int deletedCount_tDBOutput_19 = 0;
				int updatedCount_tDBOutput_19 = 0;
				int insertedCount_tDBOutput_19 = 0;
				int rejectedCount_tDBOutput_19 = 0;

				boolean whetherReject_tDBOutput_19 = false;

				java.sql.Connection conn_tDBOutput_19 = null;
				String dbUser_tDBOutput_19 = null;

				conn_tDBOutput_19 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_19 = 10000;
				int batchSizeCounter_tDBOutput_19 = 0;

				int count_tDBOutput_19 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_19 = conn_tDBOutput_19.createStatement()) {
					stmtClear_tDBOutput_19.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_19 + "\"");
				}
				String insert_tDBOutput_19 = "INSERT INTO \"" + tableName_tDBOutput_19
						+ "\" (\"iddocument\",\"emplacement_disque\",\"nom_fichier\",\"titre\",\"type_origine\",\"idarticle\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_19 = conn_tDBOutput_19.prepareStatement(insert_tDBOutput_19);
				resourceMap.put("pstmt_tDBOutput_19", pstmt_tDBOutput_19);

				/**
				 * [tDBOutput_19 begin ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());

				currentComponent = "tMap_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tMap_17 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmainStruct copyOfmain_tmp = new copyOfmainStruct();
// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_17 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_17 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_17 = null;
				int limit_tFileInputDelimited_17 = -1;
				try {

					Object filename_tFileInputDelimited_17 = "C:/DEV/Data/Base Montauban/docs.csv";
					if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_17 = 0, random_value_tFileInputDelimited_17 = -1;
						if (footer_value_tFileInputDelimited_17 > 0 || random_value_tFileInputDelimited_17 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_17 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/docs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_17, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_17 != null && fid_tFileInputDelimited_17.nextRecord()) {
						rowstate_tFileInputDelimited_17.reset();

						row15 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row15 = new row15Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_17 = 0;

							columnIndexWithD_tFileInputDelimited_17 = 0;

							row15.DOCCAT = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 1;

							row15.DOCLIEN = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 2;

							row15.DOCCOMPT = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 3;

							row15.DOCLIB = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 4;

							row15.DOCEMPL = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 5;

							row15.DOCNOM = fid_tFileInputDelimited_17.get(columnIndexWithD_tFileInputDelimited_17);

							if (rowstate_tFileInputDelimited_17.getException() != null) {
								throw rowstate_tFileInputDelimited_17.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */

						/**
						 * [tFileInputDelimited_17 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						/**
						 * [tFileInputDelimited_17 process_data_begin ] stop
						 */
// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tMap_17 main ] start
							 */

							currentComponent = "tMap_17";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_17 = false;
							boolean mainRowRejected_tMap_17 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
								// ###############################
								// # Output tables

								copyOfmain = null;

// # Output table : 'copyOfmain'
								copyOfmain_tmp.iddocument = Numeric.sequence("s1", 1, 1);
								copyOfmain_tmp.emplacement_disque = row15.DOCEMPL;
								copyOfmain_tmp.nom_fichier = row15.DOCNOM;
								copyOfmain_tmp.titre = row15.DOCLIB;
								copyOfmain_tmp.type_origine = row15.DOCCAT.equals("1") ? new String("Client")
										: row15.DOCCAT.equals("3") ? new String("Fourni")
												: row15.DOCCAT.equals("2") ? new String("Article") : null;
								copyOfmain_tmp.idarticle = null;
								copyOfmain_tmp.idcli = row15.DOCLIEN;
								copyOfmain_tmp.idfournisseur = null;
								copyOfmain = copyOfmain_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_17 = false;

							tos_count_tMap_17++;

							/**
							 * [tMap_17 main ] stop
							 */

							/**
							 * [tMap_17 process_data_begin ] start
							 */

							currentComponent = "tMap_17";

							/**
							 * [tMap_17 process_data_begin ] stop
							 */
// Start of branch "copyOfmain"
							if (copyOfmain != null) {

								/**
								 * [tDBOutput_19 main ] start
								 */

								currentComponent = "tDBOutput_19";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain");
								}

								whetherReject_tDBOutput_19 = false;
								pstmt_tDBOutput_19.setInt(1, copyOfmain.iddocument);

								if (copyOfmain.emplacement_disque == null) {
									pstmt_tDBOutput_19.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(2, copyOfmain.emplacement_disque);
								}

								if (copyOfmain.nom_fichier == null) {
									pstmt_tDBOutput_19.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(3, copyOfmain.nom_fichier);
								}

								if (copyOfmain.titre == null) {
									pstmt_tDBOutput_19.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(4, copyOfmain.titre);
								}

								if (copyOfmain.type_origine == null) {
									pstmt_tDBOutput_19.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(5, copyOfmain.type_origine);
								}

								if (copyOfmain.idarticle == null) {
									pstmt_tDBOutput_19.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(6, copyOfmain.idarticle);
								}

								if (copyOfmain.idcli == null) {
									pstmt_tDBOutput_19.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(7, copyOfmain.idcli);
								}

								if (copyOfmain.idfournisseur == null) {
									pstmt_tDBOutput_19.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_19.setString(8, copyOfmain.idfournisseur);
								}

								pstmt_tDBOutput_19.addBatch();
								nb_line_tDBOutput_19++;

								batchSizeCounter_tDBOutput_19++;

								if ((batchSize_tDBOutput_19 > 0)
										&& (batchSize_tDBOutput_19 <= batchSizeCounter_tDBOutput_19)) {
									try {
										int countSum_tDBOutput_19 = 0;

										for (int countEach_tDBOutput_19 : pstmt_tDBOutput_19.executeBatch()) {
											countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0
													: countEach_tDBOutput_19);
										}

										insertedCount_tDBOutput_19 += countSum_tDBOutput_19;

										batchSizeCounter_tDBOutput_19 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_19) {
										java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),
												sqle_tDBOutput_19 = null;
										String errormessage_tDBOutput_19;
										if (ne_tDBOutput_19 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_19 = new java.sql.SQLException(
													e_tDBOutput_19.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_19.getMessage(),
													ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(),
													ne_tDBOutput_19);
											errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
										} else {
											errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
										}

										int countSum_tDBOutput_19 = 0;
										for (int countEach_tDBOutput_19 : e_tDBOutput_19.getUpdateCounts()) {
											countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0
													: countEach_tDBOutput_19);
										}

										insertedCount_tDBOutput_19 += countSum_tDBOutput_19;

										System.err.println(errormessage_tDBOutput_19);

									}
								}

								tos_count_tDBOutput_19++;

								/**
								 * [tDBOutput_19 main ] stop
								 */

								/**
								 * [tDBOutput_19 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_19";

								/**
								 * [tDBOutput_19 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_19 process_data_end ] start
								 */

								currentComponent = "tDBOutput_19";

								/**
								 * [tDBOutput_19 process_data_end ] stop
								 */

							} // End of branch "copyOfmain"

							/**
							 * [tMap_17 process_data_end ] start
							 */

							currentComponent = "tMap_17";

							/**
							 * [tMap_17 process_data_end ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_17 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						/**
						 * [tFileInputDelimited_17 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/docs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_17 != null) {
							fid_tFileInputDelimited_17.close();
						}
					}
					if (fid_tFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE", fid_tFileInputDelimited_17.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tDBOutput_19 end ] start
				 */

				currentComponent = "tDBOutput_19";

				try {
					int countSum_tDBOutput_19 = 0;
					if (pstmt_tDBOutput_19 != null && batchSizeCounter_tDBOutput_19 > 0) {

						for (int countEach_tDBOutput_19 : pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}

					}

					insertedCount_tDBOutput_19 += countSum_tDBOutput_19;

				} catch (java.sql.BatchUpdateException e_tDBOutput_19) {
					java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(), sqle_tDBOutput_19 = null;
					String errormessage_tDBOutput_19;
					if (ne_tDBOutput_19 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_19 = new java.sql.SQLException(
								e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(),
								ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
						errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
					} else {
						errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
					}

					int countSum_tDBOutput_19 = 0;
					for (int countEach_tDBOutput_19 : e_tDBOutput_19.getUpdateCounts()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}

					insertedCount_tDBOutput_19 += countSum_tDBOutput_19;

					System.err.println(errormessage_tDBOutput_19);

				}

				if (pstmt_tDBOutput_19 != null) {

					pstmt_tDBOutput_19.close();
					resourceMap.remove("pstmt_tDBOutput_19");
				}
				resourceMap.put("statementClosed_tDBOutput_19", true);

				nb_line_deleted_tDBOutput_19 = nb_line_deleted_tDBOutput_19 + deletedCount_tDBOutput_19;
				nb_line_update_tDBOutput_19 = nb_line_update_tDBOutput_19 + updatedCount_tDBOutput_19;
				nb_line_inserted_tDBOutput_19 = nb_line_inserted_tDBOutput_19 + insertedCount_tDBOutput_19;
				nb_line_rejected_tDBOutput_19 = nb_line_rejected_tDBOutput_19 + rejectedCount_tDBOutput_19;

				globalMap.put("tDBOutput_19_NB_LINE", nb_line_tDBOutput_19);
				globalMap.put("tDBOutput_19_NB_LINE_UPDATED", nb_line_update_tDBOutput_19);
				globalMap.put("tDBOutput_19_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_19);
				globalMap.put("tDBOutput_19_NB_LINE_DELETED", nb_line_deleted_tDBOutput_19);
				globalMap.put("tDBOutput_19_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_19);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain");
				}

				ok_Hash.put("tDBOutput_19", true);
				end_Hash.put("tDBOutput_19", System.currentTimeMillis());

				/**
				 * [tDBOutput_19 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_17:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_17 finally ] start
				 */

				currentComponent = "tFileInputDelimited_17";

				/**
				 * [tFileInputDelimited_17 finally ] stop
				 */

				/**
				 * [tMap_17 finally ] start
				 */

				currentComponent = "tMap_17";

				/**
				 * [tMap_17 finally ] stop
				 */

				/**
				 * [tDBOutput_19 finally ] start
				 */

				currentComponent = "tDBOutput_19";

				if (resourceMap.get("statementClosed_tDBOutput_19") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_19 = null;
					if ((pstmtToClose_tDBOutput_19 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_19")) != null) {
						pstmtToClose_tDBOutput_19.close();
					}
				}

				/**
				 * [tDBOutput_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhisto;

		public int getIdhisto() {
			return this.idhisto;
		}

		public Double chiffre_affaire_annee;

		public Double getChiffre_affaire_annee() {
			return this.chiffre_affaire_annee;
		}

		public Double chiffre_affaire_august;

		public Double getChiffre_affaire_august() {
			return this.chiffre_affaire_august;
		}

		public Double chiffre_affaire_april;

		public Double getChiffre_affaire_april() {
			return this.chiffre_affaire_april;
		}

		public Double chiffre_affaire_december;

		public Double getChiffre_affaire_december() {
			return this.chiffre_affaire_december;
		}

		public Double chiffre_affaire_february;

		public Double getChiffre_affaire_february() {
			return this.chiffre_affaire_february;
		}

		public Double chiffre_affaire_january;

		public Double getChiffre_affaire_january() {
			return this.chiffre_affaire_january;
		}

		public Double chiffre_affaire_july;

		public Double getChiffre_affaire_july() {
			return this.chiffre_affaire_july;
		}

		public Double chiffre_affaire_june;

		public Double getChiffre_affaire_june() {
			return this.chiffre_affaire_june;
		}

		public Double chiffre_affaire_may;

		public Double getChiffre_affaire_may() {
			return this.chiffre_affaire_may;
		}

		public Double chiffre_affaire_march;

		public Double getChiffre_affaire_march() {
			return this.chiffre_affaire_march;
		}

		public Double chiffre_affaire_november;

		public Double getChiffre_affaire_november() {
			return this.chiffre_affaire_november;
		}

		public Double chiffre_affaire_october;

		public Double getChiffre_affaire_october() {
			return this.chiffre_affaire_october;
		}

		public Double chiffre_affaire_september;

		public Double getChiffre_affaire_september() {
			return this.chiffre_affaire_september;
		}

		public Double prix_achat_annee;

		public Double getPrix_achat_annee() {
			return this.prix_achat_annee;
		}

		public Double prix_achat_august;

		public Double getPrix_achat_august() {
			return this.prix_achat_august;
		}

		public Double prix_achat_april;

		public Double getPrix_achat_april() {
			return this.prix_achat_april;
		}

		public Double prix_achat_december;

		public Double getPrix_achat_december() {
			return this.prix_achat_december;
		}

		public Double prix_achat_february;

		public Double getPrix_achat_february() {
			return this.prix_achat_february;
		}

		public Double prix_achat_january;

		public Double getPrix_achat_january() {
			return this.prix_achat_january;
		}

		public Double prix_achat_july;

		public Double getPrix_achat_july() {
			return this.prix_achat_july;
		}

		public Double prix_achat_june;

		public Double getPrix_achat_june() {
			return this.prix_achat_june;
		}

		public Double prix_achat_may;

		public Double getPrix_achat_may() {
			return this.prix_achat_may;
		}

		public Double prix_achat_march;

		public Double getPrix_achat_march() {
			return this.prix_achat_march;
		}

		public Double prix_achat_november;

		public Double getPrix_achat_november() {
			return this.prix_achat_november;
		}

		public Double prix_achat_october;

		public Double getPrix_achat_october() {
			return this.prix_achat_october;
		}

		public Double prix_achat_september;

		public Double getPrix_achat_september() {
			return this.prix_achat_september;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idhisto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_0_0Struct other = (copyOfcopyOfmain_0_0Struct) obj;

			if (this.idhisto != other.idhisto)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;
			other.chiffre_affaire_annee = this.chiffre_affaire_annee;
			other.chiffre_affaire_august = this.chiffre_affaire_august;
			other.chiffre_affaire_april = this.chiffre_affaire_april;
			other.chiffre_affaire_december = this.chiffre_affaire_december;
			other.chiffre_affaire_february = this.chiffre_affaire_february;
			other.chiffre_affaire_january = this.chiffre_affaire_january;
			other.chiffre_affaire_july = this.chiffre_affaire_july;
			other.chiffre_affaire_june = this.chiffre_affaire_june;
			other.chiffre_affaire_may = this.chiffre_affaire_may;
			other.chiffre_affaire_march = this.chiffre_affaire_march;
			other.chiffre_affaire_november = this.chiffre_affaire_november;
			other.chiffre_affaire_october = this.chiffre_affaire_october;
			other.chiffre_affaire_september = this.chiffre_affaire_september;
			other.prix_achat_annee = this.prix_achat_annee;
			other.prix_achat_august = this.prix_achat_august;
			other.prix_achat_april = this.prix_achat_april;
			other.prix_achat_december = this.prix_achat_december;
			other.prix_achat_february = this.prix_achat_february;
			other.prix_achat_january = this.prix_achat_january;
			other.prix_achat_july = this.prix_achat_july;
			other.prix_achat_june = this.prix_achat_june;
			other.prix_achat_may = this.prix_achat_may;
			other.prix_achat_march = this.prix_achat_march;
			other.prix_achat_november = this.prix_achat_november;
			other.prix_achat_october = this.prix_achat_october;
			other.prix_achat_september = this.prix_achat_september;
			other.annee = this.annee;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idhisto = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_annee = null;
					} else {
						this.chiffre_affaire_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_august = null;
					} else {
						this.chiffre_affaire_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_april = null;
					} else {
						this.chiffre_affaire_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_december = null;
					} else {
						this.chiffre_affaire_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_february = null;
					} else {
						this.chiffre_affaire_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_january = null;
					} else {
						this.chiffre_affaire_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_july = null;
					} else {
						this.chiffre_affaire_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_june = null;
					} else {
						this.chiffre_affaire_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_may = null;
					} else {
						this.chiffre_affaire_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_march = null;
					} else {
						this.chiffre_affaire_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_november = null;
					} else {
						this.chiffre_affaire_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_october = null;
					} else {
						this.chiffre_affaire_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_september = null;
					} else {
						this.chiffre_affaire_september = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_annee = null;
					} else {
						this.prix_achat_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_august = null;
					} else {
						this.prix_achat_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_april = null;
					} else {
						this.prix_achat_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_december = null;
					} else {
						this.prix_achat_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_february = null;
					} else {
						this.prix_achat_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_january = null;
					} else {
						this.prix_achat_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_july = null;
					} else {
						this.prix_achat_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_june = null;
					} else {
						this.prix_achat_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_may = null;
					} else {
						this.prix_achat_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_march = null;
					} else {
						this.prix_achat_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_november = null;
					} else {
						this.prix_achat_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_october = null;
					} else {
						this.prix_achat_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_september = null;
					} else {
						this.prix_achat_september = dis.readDouble();
					}

					this.annee = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhisto);

				// Double

				if (this.chiffre_affaire_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_annee);
				}

				// Double

				if (this.chiffre_affaire_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_august);
				}

				// Double

				if (this.chiffre_affaire_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_april);
				}

				// Double

				if (this.chiffre_affaire_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_december);
				}

				// Double

				if (this.chiffre_affaire_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_february);
				}

				// Double

				if (this.chiffre_affaire_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_january);
				}

				// Double

				if (this.chiffre_affaire_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_july);
				}

				// Double

				if (this.chiffre_affaire_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_june);
				}

				// Double

				if (this.chiffre_affaire_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_may);
				}

				// Double

				if (this.chiffre_affaire_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_march);
				}

				// Double

				if (this.chiffre_affaire_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_november);
				}

				// Double

				if (this.chiffre_affaire_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_october);
				}

				// Double

				if (this.chiffre_affaire_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_september);
				}

				// Double

				if (this.prix_achat_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_annee);
				}

				// Double

				if (this.prix_achat_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_august);
				}

				// Double

				if (this.prix_achat_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_april);
				}

				// Double

				if (this.prix_achat_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_december);
				}

				// Double

				if (this.prix_achat_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_february);
				}

				// Double

				if (this.prix_achat_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_january);
				}

				// Double

				if (this.prix_achat_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_july);
				}

				// Double

				if (this.prix_achat_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_june);
				}

				// Double

				if (this.prix_achat_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_may);
				}

				// Double

				if (this.prix_achat_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_march);
				}

				// Double

				if (this.prix_achat_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_november);
				}

				// Double

				if (this.prix_achat_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_october);
				}

				// Double

				if (this.prix_achat_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_september);
				}

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhisto=" + String.valueOf(idhisto));
			sb.append(",chiffre_affaire_annee=" + String.valueOf(chiffre_affaire_annee));
			sb.append(",chiffre_affaire_august=" + String.valueOf(chiffre_affaire_august));
			sb.append(",chiffre_affaire_april=" + String.valueOf(chiffre_affaire_april));
			sb.append(",chiffre_affaire_december=" + String.valueOf(chiffre_affaire_december));
			sb.append(",chiffre_affaire_february=" + String.valueOf(chiffre_affaire_february));
			sb.append(",chiffre_affaire_january=" + String.valueOf(chiffre_affaire_january));
			sb.append(",chiffre_affaire_july=" + String.valueOf(chiffre_affaire_july));
			sb.append(",chiffre_affaire_june=" + String.valueOf(chiffre_affaire_june));
			sb.append(",chiffre_affaire_may=" + String.valueOf(chiffre_affaire_may));
			sb.append(",chiffre_affaire_march=" + String.valueOf(chiffre_affaire_march));
			sb.append(",chiffre_affaire_november=" + String.valueOf(chiffre_affaire_november));
			sb.append(",chiffre_affaire_october=" + String.valueOf(chiffre_affaire_october));
			sb.append(",chiffre_affaire_september=" + String.valueOf(chiffre_affaire_september));
			sb.append(",prix_achat_annee=" + String.valueOf(prix_achat_annee));
			sb.append(",prix_achat_august=" + String.valueOf(prix_achat_august));
			sb.append(",prix_achat_april=" + String.valueOf(prix_achat_april));
			sb.append(",prix_achat_december=" + String.valueOf(prix_achat_december));
			sb.append(",prix_achat_february=" + String.valueOf(prix_achat_february));
			sb.append(",prix_achat_january=" + String.valueOf(prix_achat_january));
			sb.append(",prix_achat_july=" + String.valueOf(prix_achat_july));
			sb.append(",prix_achat_june=" + String.valueOf(prix_achat_june));
			sb.append(",prix_achat_may=" + String.valueOf(prix_achat_may));
			sb.append(",prix_achat_march=" + String.valueOf(prix_achat_march));
			sb.append(",prix_achat_november=" + String.valueOf(prix_achat_november));
			sb.append(",prix_achat_october=" + String.valueOf(prix_achat_october));
			sb.append(",prix_achat_september=" + String.valueOf(prix_achat_september));
			sb.append(",annee=" + annee);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idhisto, other.idhisto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_10Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_10Struct other = (after_tFileInputDelimited_10Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_10Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_10Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_22Process(globalMap);

				row12Struct row12 = new row12Struct();
				copyOfcopyOfmain_0_0Struct copyOfcopyOfmain_0_0 = new copyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_10 = 0;

				String dbschema_tDBOutput_10 = null;
				dbschema_tDBOutput_10 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_10 = null;
				if (dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
					tableName_tDBOutput_10 = ("historiqueca");
				} else {
					tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("historiqueca");
				}

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;
				int rejectedCount_tDBOutput_10 = 0;

				boolean whetherReject_tDBOutput_10 = false;

				java.sql.Connection conn_tDBOutput_10 = null;
				String dbUser_tDBOutput_10 = null;

				conn_tDBOutput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_10 = 10000;
				int batchSizeCounter_tDBOutput_10 = 0;

				int count_tDBOutput_10 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
					stmtClear_tDBOutput_10.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_10 + "\"");
				}
				String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10
						+ "\" (\"idhisto\",\"chiffre_affaire_annee\",\"chiffre_affaire_august\",\"chiffre_affaire_april\",\"chiffre_affaire_december\",\"chiffre_affaire_february\",\"chiffre_affaire_january\",\"chiffre_affaire_july\",\"chiffre_affaire_june\",\"chiffre_affaire_may\",\"chiffre_affaire_march\",\"chiffre_affaire_november\",\"chiffre_affaire_october\",\"chiffre_affaire_september\",\"prix_achat_annee\",\"prix_achat_august\",\"prix_achat_april\",\"prix_achat_december\",\"prix_achat_february\",\"prix_achat_january\",\"prix_achat_july\",\"prix_achat_june\",\"prix_achat_may\",\"prix_achat_march\",\"prix_achat_november\",\"prix_achat_october\",\"prix_achat_september\",\"annee\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
				resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_0_0Struct copyOfcopyOfmain_0_0_tmp = new copyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_10 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row12Struct row12) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_10 = 0;

						columnIndexWithD_tFileInputDelimited_10 = 0;

						row12.CREF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 1;

						row12.CNOM = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 2;

						row12.CRUE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 3;

						row12.CAUX = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 4;

						row12.CCPTL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 5;

						row12.CVIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 6;

						row12.FILL01 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 7;

						row12.CQUAL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 8;

						row12.CCOM1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 9;

						row12.CCREP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 10;

						row12.CREMFI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 11;

						row12.CECHE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 12;

						row12.CECHJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 13;

						row12.CPAI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 14;

						row12.CCHAN = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 15;

						row12.CECHJ2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 16;

						row12.CMOD = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 17;

						row12.CBQ1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 18;

						row12.CBQ2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 19;

						row12.CBQ3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 20;

						row12.CBQ4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 21;

						row12.CBQ5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 22;

						row12.CBQ6 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 23;

						row12.CFACT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 24;

						row12.CBL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 25;

						row12.CESC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 26;

						row12.VARAD1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 27;

						row12.VARAD2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 28;

						row12.VARAD3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 29;

						row12.VARAD4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 30;

						row12.VARAD5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 31;

						row12.VARAD6 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 32;

						row12.VARA1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 33;

						row12.VARA2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 34;

						row12.VARA3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 35;

						row12.VARA4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 36;

						row12.VARA5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 37;

						row12.VARB1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 38;

						row12.VARB2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 39;

						row12.VARB3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 40;

						row12.VARB4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 41;

						row12.VARB5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 42;

						row12.VARN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 43;

						row12.VARN2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 44;

						row12.VARN3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 45;

						row12.VARN4 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 46;

						row12.VARN5 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 47;

						row12.CDATCRE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 48;

						row12.CTEL1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 49;

						row12.CTEL2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 50;

						row12.CTEX1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 51;

						row12.CTEX2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 52;

						row12.CDELMOY = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 53;

						row12.CAFFAIRE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 54;

						row12.CCPTFACT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 55;

						row12.CINTERNET = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 56;

						row12.CIBAN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 57;

						row12.CBIC_old = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 58;

						row12.CFIDEL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 59;

						row12.CRFA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 60;

						row12.CCOMREG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 61;

						row12.CAPE2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 62;

						row12.CIBAN72 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 63;

						row12.CIBAN8 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 64;

						row12.CIBAN9 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 65;

						row12.CBIC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 66;

						row12.CTRANSP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 67;

						row12.CFACTMAIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 68;

						row12.CBLMAIL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 69;

						row12.CFACTWEB = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 70;

						row12.CBLWEB = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 71;

						row12.CPUBLIPOSTAGE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 72;

						row12.CFACT_EDI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 73;

						row12.CFACT_CHORUS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 74;

						row12.CFACTORING = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 75;

						row12.CCHORUS_SERVICE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 76;

						row12.CFIL14 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 77;

						row12.CTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 78;

						row12.FIL02 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 79;

						row12.CREJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 80;

						row12.CSECT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 81;

						row12.CTOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 82;

						row12.CCAN1 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 83;

						row12.CCAN2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 84;

						row12.CCAN3 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 85;

						row12.CDATF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 86;

						row12.CCAT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 87;

						row12.CRESP = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 88;

						row12.CAPE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 89;

						row12.CPREMC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 90;

						row12.CDERNC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 91;

						row12.CPROCC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 92;

						row12.CTYPEC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 93;

						row12.CSIRET = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 94;

						row12.CORIGIN = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 95;

						row12.CMOTCOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 96;

						row12.CCOMPTA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 97;

						row12.CAFFMEMO = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 98;

						row12.CFIL2 = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 99;

						row12.CPNAFF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row12Struct row12) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_10 = 0;

						columnIndexWithD_tFileInputDelimited_10 = 100;

						row12.CDEVTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 101;

						row12.CMINCOM = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 102;

						row12.CRELEVE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 103;

						row12.CRELIQ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 104;

						row12.CMAJ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 105;

						row12.CECH = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 106;

						row12.CETIQ = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 107;

						row12.CCOEF = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 108;

						row12.CARROND = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 109;

						row12.CENCOUR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 110;

						row12.CNIVREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 111;

						row12.CBLOCAG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 112;

						row12.CDATREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 113;

						row12.CRESCO = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 114;

						row12.CRESFI = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 115;

						row12.CSFAC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 116;

						row12.CDATENC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 117;

						row12.CDATSFA = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 118;

						row12.CCONTR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 119;

						row12.CDEREL = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 120;

						row12.CPAYS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 121;

						row12.CBLTOT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 122;

						row12.CBLLIG = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 123;

						row12.CENCDIS = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 124;

						row12.CNCEE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 125;

						row12.CNSFAC = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 126;

						row12.CPSRDAT = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 127;

						row12.CEPNASR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 128;

						row12.CCODTAR = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

						columnIndexWithD_tFileInputDelimited_10 = 129;

						row12.CDEVISE = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10,
							row12Struct row12) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_10, row12);

						valueToConn_1(fid_tFileInputDelimited_10, row12);

					}

				}
				RowHelper_tFileInputDelimited_10 rowHelper_tFileInputDelimited_10 = new RowHelper_tFileInputDelimited_10();

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try {

					Object filename_tFileInputDelimited_10 = "C:/DEV/Data/Base Montauban/clients.csv";
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0 || random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_10, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();

						row12 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row12 = new row12Struct();
						try {

							rowHelper_tFileInputDelimited_10.valueToConn(fid_tFileInputDelimited_10, row12);

							if (rowstate_tFileInputDelimited_10.getException() != null) {
								throw rowstate_tFileInputDelimited_10.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */

						/**
						 * [tFileInputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_begin ] stop
						 */
// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row20"
							///////////////////////////////////////////////

							boolean forceLooprow20 = false;

							row20Struct row20ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_10 = false;

								row20HashKey.HISKLE = row12.CREF;

								row20HashKey.hashCodeDirty = true;

								tHash_Lookup_row20.lookup(row20HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row20' and it contains more one result from keys : row20.HISKLE = '" +
								// row20HashKey.HISKLE + "'");
							} // G 071

							row20Struct row20 = null;

							row20Struct fromLookup_row20 = null;
							row20 = row20Default;

							if (tHash_Lookup_row20 != null && tHash_Lookup_row20.hasNext()) { // G 099

								fromLookup_row20 = tHash_Lookup_row20.next();

							} // G 099

							if (fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfmain_0_0'
								copyOfcopyOfmain_0_0_tmp.idhisto = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_annee = row12.CCAN1 == null ? new Double(0)
										: row12.CCAN1.isBlank() ? new Double(0) : Double.parseDouble(row12.CCAN1);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_august = row20.HISCAN08 == null ? new Double(0)
										: row20.HISCAN08.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN08);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_april = row20.HISCAN04 == null ? new Double(0)
										: row20.HISCAN04.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN04);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_december = row20.HISCAN12 == null
										? new Double(0)
										: row20.HISCAN12.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN12);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_february = row20.HISCAN02 == null
										? new Double(0)
										: row20.HISCAN02.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN02);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_january = row20.HISCAN01 == null
										? new Double(0)
										: row20.HISCAN01.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN01);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_july = row20.HISCAN07 == null ? new Double(0)
										: row20.HISCAN07.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN07);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_june = row20.HISCAN06 == null ? new Double(0)
										: row20.HISCAN06.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN06);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_may = row20.HISCAN05 == null ? new Double(0)
										: row20.HISCAN05.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN05);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_march = row20.HISCAN03 == null ? new Double(0)
										: row20.HISCAN03.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN03);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_november = row20.HISCAN11 == null
										? new Double(0)
										: row20.HISCAN11.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN11);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_october = row20.HISCAN10 == null
										? new Double(0)
										: row20.HISCAN10.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN10);
								copyOfcopyOfmain_0_0_tmp.chiffre_affaire_september = row20.HISCAN09 == null
										? new Double(0)
										: row20.HISCAN09.isBlank() ? new Double(0) : Double.parseDouble(row20.HISCAN09);
								copyOfcopyOfmain_0_0_tmp.prix_achat_annee = row20.HISPAN01 == null
										|| row20.HISPAN02 == null || row20.HISPAN03 == null || row20.HISPAN04 == null
										|| row20.HISPAN05 == null || row20.HISPAN06 == null || row20.HISPAN07 == null
										|| row20.HISPAN08 == null || row20.HISPAN09 == null || row20.HISPAN10 == null
										|| row20.HISPAN11 == null || row20.HISPAN12 == null ? null
												: Double.parseDouble(row20.HISPAN01) +

														Double.parseDouble(row20.HISPAN02) +

														Double.parseDouble(row20.HISPAN03) +

														Double.parseDouble(row20.HISPAN04) +

														Double.parseDouble(row20.HISPAN05) +

														Double.parseDouble(row20.HISPAN06) +

														Double.parseDouble(row20.HISPAN07) +

														Double.parseDouble(row20.HISPAN08) +

														Double.parseDouble(row20.HISPAN09) +

														Double.parseDouble(row20.HISPAN10) +

														Double.parseDouble(row20.HISPAN11) +

														Double.parseDouble(row20.HISPAN12);
								copyOfcopyOfmain_0_0_tmp.prix_achat_august = row20.HISPAN08 == null ? new Double(0)
										: row20.HISPAN08.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN08);
								copyOfcopyOfmain_0_0_tmp.prix_achat_april = row20.HISPAN04 == null ? new Double(0)
										: row20.HISPAN04.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN04);
								copyOfcopyOfmain_0_0_tmp.prix_achat_december = row20.HISPAN12 == null ? new Double(0)
										: row20.HISPAN12.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN12);
								copyOfcopyOfmain_0_0_tmp.prix_achat_february = row20.HISPAN02 == null ? new Double(0)
										: row20.HISPAN02.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN02);
								copyOfcopyOfmain_0_0_tmp.prix_achat_january = row20.HISPAN01 == null ? new Double(0)
										: row20.HISPAN01.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN01);
								copyOfcopyOfmain_0_0_tmp.prix_achat_july = row20.HISPAN07 == null ? new Double(0)
										: row20.HISPAN07.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN07);
								copyOfcopyOfmain_0_0_tmp.prix_achat_june = row20.HISPAN06 == null ? new Double(0)
										: row20.HISPAN06.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN06);
								copyOfcopyOfmain_0_0_tmp.prix_achat_may = row20.HISPAN05 == null ? new Double(0)
										: row20.HISPAN05.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN05);
								copyOfcopyOfmain_0_0_tmp.prix_achat_march = row20.HISPAN03 == null ? new Double(0)
										: row20.HISPAN03.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN03);
								copyOfcopyOfmain_0_0_tmp.prix_achat_november = row20.HISPAN11 == null ? new Double(0)
										: row20.HISPAN11.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN11);
								copyOfcopyOfmain_0_0_tmp.prix_achat_october = row20.HISPAN10 == null ? new Double(0)
										: row20.HISPAN10.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN10);
								copyOfcopyOfmain_0_0_tmp.prix_achat_september = row20.HISPAN09 == null ? new Double(0)
										: row20.HISPAN09.isBlank() ? new Double(0) : Double.parseDouble(row20.HISPAN09);
								copyOfcopyOfmain_0_0_tmp.annee = new String("2021");
								copyOfcopyOfmain_0_0_tmp.idcli = row12.CREF;
								copyOfcopyOfmain_0_0 = copyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */

							/**
							 * [tMap_10 process_data_begin ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_0_0"
							if (copyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_10 main ] start
								 */

								currentComponent = "tDBOutput_10";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_10 = false;
								pstmt_tDBOutput_10.setInt(1, copyOfcopyOfmain_0_0.idhisto);

								if (copyOfcopyOfmain_0_0.chiffre_affaire_annee == null) {
									pstmt_tDBOutput_10.setNull(2, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(2, copyOfcopyOfmain_0_0.chiffre_affaire_annee);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_august == null) {
									pstmt_tDBOutput_10.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(3, copyOfcopyOfmain_0_0.chiffre_affaire_august);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_april == null) {
									pstmt_tDBOutput_10.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(4, copyOfcopyOfmain_0_0.chiffre_affaire_april);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_december == null) {
									pstmt_tDBOutput_10.setNull(5, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(5, copyOfcopyOfmain_0_0.chiffre_affaire_december);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_february == null) {
									pstmt_tDBOutput_10.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(6, copyOfcopyOfmain_0_0.chiffre_affaire_february);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_january == null) {
									pstmt_tDBOutput_10.setNull(7, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(7, copyOfcopyOfmain_0_0.chiffre_affaire_january);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_july == null) {
									pstmt_tDBOutput_10.setNull(8, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(8, copyOfcopyOfmain_0_0.chiffre_affaire_july);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_june == null) {
									pstmt_tDBOutput_10.setNull(9, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(9, copyOfcopyOfmain_0_0.chiffre_affaire_june);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_may == null) {
									pstmt_tDBOutput_10.setNull(10, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(10, copyOfcopyOfmain_0_0.chiffre_affaire_may);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_march == null) {
									pstmt_tDBOutput_10.setNull(11, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(11, copyOfcopyOfmain_0_0.chiffre_affaire_march);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_november == null) {
									pstmt_tDBOutput_10.setNull(12, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(12, copyOfcopyOfmain_0_0.chiffre_affaire_november);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_october == null) {
									pstmt_tDBOutput_10.setNull(13, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(13, copyOfcopyOfmain_0_0.chiffre_affaire_october);
								}

								if (copyOfcopyOfmain_0_0.chiffre_affaire_september == null) {
									pstmt_tDBOutput_10.setNull(14, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(14, copyOfcopyOfmain_0_0.chiffre_affaire_september);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_annee == null) {
									pstmt_tDBOutput_10.setNull(15, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(15, copyOfcopyOfmain_0_0.prix_achat_annee);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_august == null) {
									pstmt_tDBOutput_10.setNull(16, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(16, copyOfcopyOfmain_0_0.prix_achat_august);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_april == null) {
									pstmt_tDBOutput_10.setNull(17, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(17, copyOfcopyOfmain_0_0.prix_achat_april);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_december == null) {
									pstmt_tDBOutput_10.setNull(18, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(18, copyOfcopyOfmain_0_0.prix_achat_december);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_february == null) {
									pstmt_tDBOutput_10.setNull(19, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(19, copyOfcopyOfmain_0_0.prix_achat_february);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_january == null) {
									pstmt_tDBOutput_10.setNull(20, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(20, copyOfcopyOfmain_0_0.prix_achat_january);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_july == null) {
									pstmt_tDBOutput_10.setNull(21, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(21, copyOfcopyOfmain_0_0.prix_achat_july);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_june == null) {
									pstmt_tDBOutput_10.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(22, copyOfcopyOfmain_0_0.prix_achat_june);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_may == null) {
									pstmt_tDBOutput_10.setNull(23, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(23, copyOfcopyOfmain_0_0.prix_achat_may);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_march == null) {
									pstmt_tDBOutput_10.setNull(24, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(24, copyOfcopyOfmain_0_0.prix_achat_march);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_november == null) {
									pstmt_tDBOutput_10.setNull(25, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(25, copyOfcopyOfmain_0_0.prix_achat_november);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_october == null) {
									pstmt_tDBOutput_10.setNull(26, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(26, copyOfcopyOfmain_0_0.prix_achat_october);
								}

								if (copyOfcopyOfmain_0_0.prix_achat_september == null) {
									pstmt_tDBOutput_10.setNull(27, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_10.setDouble(27, copyOfcopyOfmain_0_0.prix_achat_september);
								}

								if (copyOfcopyOfmain_0_0.annee == null) {
									pstmt_tDBOutput_10.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(28, copyOfcopyOfmain_0_0.annee);
								}

								if (copyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_10.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(29, copyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_10.addBatch();
								nb_line_tDBOutput_10++;

								batchSizeCounter_tDBOutput_10++;

								if ((batchSize_tDBOutput_10 > 0)
										&& (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
									try {
										int countSum_tDBOutput_10 = 0;

										for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										batchSizeCounter_tDBOutput_10 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
										java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),
												sqle_tDBOutput_10 = null;
										String errormessage_tDBOutput_10;
										if (ne_tDBOutput_10 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_10 = new java.sql.SQLException(
													e_tDBOutput_10.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_10.getMessage(),
													ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(),
													ne_tDBOutput_10);
											errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
										} else {
											errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
										}

										int countSum_tDBOutput_10 = 0;
										for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										System.err.println(errormessage_tDBOutput_10);

									}
								}

								tos_count_tDBOutput_10++;

								/**
								 * [tDBOutput_10 main ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_end ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_0_0"

							/**
							 * [tMap_10 process_data_end ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_end ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					int countSum_tDBOutput_10 = 0;
					if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {

						for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}

					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

				} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
					java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(), sqle_tDBOutput_10 = null;
					String errormessage_tDBOutput_10;
					if (ne_tDBOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_10 = new java.sql.SQLException(
								e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(),
								ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
						errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
					} else {
						errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
					}

					int countSum_tDBOutput_10 = 0;
					for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					System.err.println(errormessage_tDBOutput_10);

				}

				if (pstmt_tDBOutput_10 != null) {

					pstmt_tDBOutput_10.close();
					resourceMap.remove("pstmt_tDBOutput_10");
				}
				resourceMap.put("statementClosed_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10 + deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED", nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED", nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tFileInputDelimited_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row20");

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
					if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_10")) != null) {
						pstmtToClose_tDBOutput_10.close();
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhisto;

		public int getIdhisto() {
			return this.idhisto;
		}

		public Double chiffre_affaire_annee;

		public Double getChiffre_affaire_annee() {
			return this.chiffre_affaire_annee;
		}

		public Double chiffre_affaire_august;

		public Double getChiffre_affaire_august() {
			return this.chiffre_affaire_august;
		}

		public Double chiffre_affaire_april;

		public Double getChiffre_affaire_april() {
			return this.chiffre_affaire_april;
		}

		public Double chiffre_affaire_december;

		public Double getChiffre_affaire_december() {
			return this.chiffre_affaire_december;
		}

		public Double chiffre_affaire_february;

		public Double getChiffre_affaire_february() {
			return this.chiffre_affaire_february;
		}

		public Double chiffre_affaire_january;

		public Double getChiffre_affaire_january() {
			return this.chiffre_affaire_january;
		}

		public Double chiffre_affaire_july;

		public Double getChiffre_affaire_july() {
			return this.chiffre_affaire_july;
		}

		public Double chiffre_affaire_june;

		public Double getChiffre_affaire_june() {
			return this.chiffre_affaire_june;
		}

		public Double chiffre_affaire_may;

		public Double getChiffre_affaire_may() {
			return this.chiffre_affaire_may;
		}

		public Double chiffre_affaire_march;

		public Double getChiffre_affaire_march() {
			return this.chiffre_affaire_march;
		}

		public Double chiffre_affaire_november;

		public Double getChiffre_affaire_november() {
			return this.chiffre_affaire_november;
		}

		public Double chiffre_affaire_october;

		public Double getChiffre_affaire_october() {
			return this.chiffre_affaire_october;
		}

		public Double chiffre_affaire_september;

		public Double getChiffre_affaire_september() {
			return this.chiffre_affaire_september;
		}

		public Double prix_achat_annee;

		public Double getPrix_achat_annee() {
			return this.prix_achat_annee;
		}

		public Double prix_achat_august;

		public Double getPrix_achat_august() {
			return this.prix_achat_august;
		}

		public Double prix_achat_april;

		public Double getPrix_achat_april() {
			return this.prix_achat_april;
		}

		public Double prix_achat_december;

		public Double getPrix_achat_december() {
			return this.prix_achat_december;
		}

		public Double prix_achat_february;

		public Double getPrix_achat_february() {
			return this.prix_achat_february;
		}

		public Double prix_achat_january;

		public Double getPrix_achat_january() {
			return this.prix_achat_january;
		}

		public Double prix_achat_july;

		public Double getPrix_achat_july() {
			return this.prix_achat_july;
		}

		public Double prix_achat_june;

		public Double getPrix_achat_june() {
			return this.prix_achat_june;
		}

		public Double prix_achat_may;

		public Double getPrix_achat_may() {
			return this.prix_achat_may;
		}

		public Double prix_achat_march;

		public Double getPrix_achat_march() {
			return this.prix_achat_march;
		}

		public Double prix_achat_november;

		public Double getPrix_achat_november() {
			return this.prix_achat_november;
		}

		public Double prix_achat_october;

		public Double getPrix_achat_october() {
			return this.prix_achat_october;
		}

		public Double prix_achat_september;

		public Double getPrix_achat_september() {
			return this.prix_achat_september;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idhisto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_0_0Struct other = (copyOfcopyOfcopyOfmain_0_0Struct) obj;

			if (this.idhisto != other.idhisto)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;
			other.chiffre_affaire_annee = this.chiffre_affaire_annee;
			other.chiffre_affaire_august = this.chiffre_affaire_august;
			other.chiffre_affaire_april = this.chiffre_affaire_april;
			other.chiffre_affaire_december = this.chiffre_affaire_december;
			other.chiffre_affaire_february = this.chiffre_affaire_february;
			other.chiffre_affaire_january = this.chiffre_affaire_january;
			other.chiffre_affaire_july = this.chiffre_affaire_july;
			other.chiffre_affaire_june = this.chiffre_affaire_june;
			other.chiffre_affaire_may = this.chiffre_affaire_may;
			other.chiffre_affaire_march = this.chiffre_affaire_march;
			other.chiffre_affaire_november = this.chiffre_affaire_november;
			other.chiffre_affaire_october = this.chiffre_affaire_october;
			other.chiffre_affaire_september = this.chiffre_affaire_september;
			other.prix_achat_annee = this.prix_achat_annee;
			other.prix_achat_august = this.prix_achat_august;
			other.prix_achat_april = this.prix_achat_april;
			other.prix_achat_december = this.prix_achat_december;
			other.prix_achat_february = this.prix_achat_february;
			other.prix_achat_january = this.prix_achat_january;
			other.prix_achat_july = this.prix_achat_july;
			other.prix_achat_june = this.prix_achat_june;
			other.prix_achat_may = this.prix_achat_may;
			other.prix_achat_march = this.prix_achat_march;
			other.prix_achat_november = this.prix_achat_november;
			other.prix_achat_october = this.prix_achat_october;
			other.prix_achat_september = this.prix_achat_september;
			other.annee = this.annee;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idhisto = this.idhisto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idhisto = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_annee = null;
					} else {
						this.chiffre_affaire_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_august = null;
					} else {
						this.chiffre_affaire_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_april = null;
					} else {
						this.chiffre_affaire_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_december = null;
					} else {
						this.chiffre_affaire_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_february = null;
					} else {
						this.chiffre_affaire_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_january = null;
					} else {
						this.chiffre_affaire_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_july = null;
					} else {
						this.chiffre_affaire_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_june = null;
					} else {
						this.chiffre_affaire_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_may = null;
					} else {
						this.chiffre_affaire_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_march = null;
					} else {
						this.chiffre_affaire_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_november = null;
					} else {
						this.chiffre_affaire_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_october = null;
					} else {
						this.chiffre_affaire_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chiffre_affaire_september = null;
					} else {
						this.chiffre_affaire_september = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_annee = null;
					} else {
						this.prix_achat_annee = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_august = null;
					} else {
						this.prix_achat_august = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_april = null;
					} else {
						this.prix_achat_april = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_december = null;
					} else {
						this.prix_achat_december = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_february = null;
					} else {
						this.prix_achat_february = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_january = null;
					} else {
						this.prix_achat_january = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_july = null;
					} else {
						this.prix_achat_july = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_june = null;
					} else {
						this.prix_achat_june = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_may = null;
					} else {
						this.prix_achat_may = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_march = null;
					} else {
						this.prix_achat_march = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_november = null;
					} else {
						this.prix_achat_november = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_october = null;
					} else {
						this.prix_achat_october = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_september = null;
					} else {
						this.prix_achat_september = dis.readDouble();
					}

					this.annee = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhisto);

				// Double

				if (this.chiffre_affaire_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_annee);
				}

				// Double

				if (this.chiffre_affaire_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_august);
				}

				// Double

				if (this.chiffre_affaire_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_april);
				}

				// Double

				if (this.chiffre_affaire_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_december);
				}

				// Double

				if (this.chiffre_affaire_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_february);
				}

				// Double

				if (this.chiffre_affaire_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_january);
				}

				// Double

				if (this.chiffre_affaire_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_july);
				}

				// Double

				if (this.chiffre_affaire_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_june);
				}

				// Double

				if (this.chiffre_affaire_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_may);
				}

				// Double

				if (this.chiffre_affaire_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_march);
				}

				// Double

				if (this.chiffre_affaire_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_november);
				}

				// Double

				if (this.chiffre_affaire_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_october);
				}

				// Double

				if (this.chiffre_affaire_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.chiffre_affaire_september);
				}

				// Double

				if (this.prix_achat_annee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_annee);
				}

				// Double

				if (this.prix_achat_august == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_august);
				}

				// Double

				if (this.prix_achat_april == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_april);
				}

				// Double

				if (this.prix_achat_december == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_december);
				}

				// Double

				if (this.prix_achat_february == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_february);
				}

				// Double

				if (this.prix_achat_january == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_january);
				}

				// Double

				if (this.prix_achat_july == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_july);
				}

				// Double

				if (this.prix_achat_june == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_june);
				}

				// Double

				if (this.prix_achat_may == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_may);
				}

				// Double

				if (this.prix_achat_march == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_march);
				}

				// Double

				if (this.prix_achat_november == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_november);
				}

				// Double

				if (this.prix_achat_october == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_october);
				}

				// Double

				if (this.prix_achat_september == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.prix_achat_september);
				}

				// String

				writeString(this.annee, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhisto=" + String.valueOf(idhisto));
			sb.append(",chiffre_affaire_annee=" + String.valueOf(chiffre_affaire_annee));
			sb.append(",chiffre_affaire_august=" + String.valueOf(chiffre_affaire_august));
			sb.append(",chiffre_affaire_april=" + String.valueOf(chiffre_affaire_april));
			sb.append(",chiffre_affaire_december=" + String.valueOf(chiffre_affaire_december));
			sb.append(",chiffre_affaire_february=" + String.valueOf(chiffre_affaire_february));
			sb.append(",chiffre_affaire_january=" + String.valueOf(chiffre_affaire_january));
			sb.append(",chiffre_affaire_july=" + String.valueOf(chiffre_affaire_july));
			sb.append(",chiffre_affaire_june=" + String.valueOf(chiffre_affaire_june));
			sb.append(",chiffre_affaire_may=" + String.valueOf(chiffre_affaire_may));
			sb.append(",chiffre_affaire_march=" + String.valueOf(chiffre_affaire_march));
			sb.append(",chiffre_affaire_november=" + String.valueOf(chiffre_affaire_november));
			sb.append(",chiffre_affaire_october=" + String.valueOf(chiffre_affaire_october));
			sb.append(",chiffre_affaire_september=" + String.valueOf(chiffre_affaire_september));
			sb.append(",prix_achat_annee=" + String.valueOf(prix_achat_annee));
			sb.append(",prix_achat_august=" + String.valueOf(prix_achat_august));
			sb.append(",prix_achat_april=" + String.valueOf(prix_achat_april));
			sb.append(",prix_achat_december=" + String.valueOf(prix_achat_december));
			sb.append(",prix_achat_february=" + String.valueOf(prix_achat_february));
			sb.append(",prix_achat_january=" + String.valueOf(prix_achat_january));
			sb.append(",prix_achat_july=" + String.valueOf(prix_achat_july));
			sb.append(",prix_achat_june=" + String.valueOf(prix_achat_june));
			sb.append(",prix_achat_may=" + String.valueOf(prix_achat_may));
			sb.append(",prix_achat_march=" + String.valueOf(prix_achat_march));
			sb.append(",prix_achat_november=" + String.valueOf(prix_achat_november));
			sb.append(",prix_achat_october=" + String.valueOf(prix_achat_october));
			sb.append(",prix_achat_september=" + String.valueOf(prix_achat_september));
			sb.append(",annee=" + annee);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idhisto, other.idhisto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_11Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_11Struct other = (after_tFileInputDelimited_11Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_11Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_11Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_23Process(globalMap);

				row13Struct row13 = new row13Struct();
				copyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfmain_0_0 = new copyOfcopyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_11 = 0;

				String dbschema_tDBOutput_11 = null;
				dbschema_tDBOutput_11 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_11 = null;
				if (dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
					tableName_tDBOutput_11 = ("historiqueca");
				} else {
					tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("historiqueca");
				}

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;
				int rejectedCount_tDBOutput_11 = 0;

				boolean whetherReject_tDBOutput_11 = false;

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbUser_tDBOutput_11 = null;

				conn_tDBOutput_11 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_11 = 10000;
				int batchSizeCounter_tDBOutput_11 = 0;

				int count_tDBOutput_11 = 0;
				String insert_tDBOutput_11 = "INSERT INTO \"" + tableName_tDBOutput_11
						+ "\" (\"idhisto\",\"chiffre_affaire_annee\",\"chiffre_affaire_august\",\"chiffre_affaire_april\",\"chiffre_affaire_december\",\"chiffre_affaire_february\",\"chiffre_affaire_january\",\"chiffre_affaire_july\",\"chiffre_affaire_june\",\"chiffre_affaire_may\",\"chiffre_affaire_march\",\"chiffre_affaire_november\",\"chiffre_affaire_october\",\"chiffre_affaire_september\",\"prix_achat_annee\",\"prix_achat_august\",\"prix_achat_april\",\"prix_achat_december\",\"prix_achat_february\",\"prix_achat_january\",\"prix_achat_july\",\"prix_achat_june\",\"prix_achat_may\",\"prix_achat_march\",\"prix_achat_november\",\"prix_achat_october\",\"prix_achat_september\",\"annee\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
				resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tMap_11 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14_0Struct> tHash_Lookup_row14_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14_0Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14_0Struct>) globalMap
						.get("tHash_Lookup_row14_0"));

				row14_0Struct row14_0HashKey = new row14_0Struct();
				row14_0Struct row14_0Default = new row14_0Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfmain_0_0_tmp = new copyOfcopyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_11 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row13Struct row13) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 0;

						row13.CREF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 1;

						row13.CNOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 2;

						row13.CRUE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 3;

						row13.CAUX = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 4;

						row13.CCPTL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 5;

						row13.CVIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 6;

						row13.FILL01 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 7;

						row13.CQUAL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 8;

						row13.CCOM1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 9;

						row13.CCREP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 10;

						row13.CREMFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 11;

						row13.CECHE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 12;

						row13.CECHJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 13;

						row13.CPAI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 14;

						row13.CCHAN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 15;

						row13.CECHJ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 16;

						row13.CMOD = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 17;

						row13.CBQ1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 18;

						row13.CBQ2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 19;

						row13.CBQ3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 20;

						row13.CBQ4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 21;

						row13.CBQ5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 22;

						row13.CBQ6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 23;

						row13.CFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 24;

						row13.CBL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 25;

						row13.CESC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 26;

						row13.VARAD1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 27;

						row13.VARAD2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 28;

						row13.VARAD3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 29;

						row13.VARAD4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 30;

						row13.VARAD5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 31;

						row13.VARAD6 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 32;

						row13.VARA1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 33;

						row13.VARA2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 34;

						row13.VARA3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 35;

						row13.VARA4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 36;

						row13.VARA5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 37;

						row13.VARB1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 38;

						row13.VARB2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 39;

						row13.VARB3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 40;

						row13.VARB4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 41;

						row13.VARB5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 42;

						row13.VARN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 43;

						row13.VARN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 44;

						row13.VARN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 45;

						row13.VARN4 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 46;

						row13.VARN5 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 47;

						row13.CDATCRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 48;

						row13.CTEL1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 49;

						row13.CTEL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 50;

						row13.CTEX1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 51;

						row13.CTEX2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 52;

						row13.CDELMOY = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 53;

						row13.CAFFAIRE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 54;

						row13.CCPTFACT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 55;

						row13.CINTERNET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 56;

						row13.CIBAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 57;

						row13.CBIC_old = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 58;

						row13.CFIDEL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 59;

						row13.CRFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 60;

						row13.CCOMREG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 61;

						row13.CAPE2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 62;

						row13.CIBAN72 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 63;

						row13.CIBAN8 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 64;

						row13.CIBAN9 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 65;

						row13.CBIC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 66;

						row13.CTRANSP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 67;

						row13.CFACTMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 68;

						row13.CBLMAIL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 69;

						row13.CFACTWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 70;

						row13.CBLWEB = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 71;

						row13.CPUBLIPOSTAGE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 72;

						row13.CFACT_EDI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 73;

						row13.CFACT_CHORUS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 74;

						row13.CFACTORING = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 75;

						row13.CCHORUS_SERVICE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 76;

						row13.CFIL14 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 77;

						row13.CTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 78;

						row13.FIL02 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 79;

						row13.CREJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 80;

						row13.CSECT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 81;

						row13.CTOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 82;

						row13.CCAN1 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 83;

						row13.CCAN2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 84;

						row13.CCAN3 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 85;

						row13.CDATF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 86;

						row13.CCAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 87;

						row13.CRESP = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 88;

						row13.CAPE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 89;

						row13.CPREMC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 90;

						row13.CDERNC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 91;

						row13.CPROCC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 92;

						row13.CTYPEC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 93;

						row13.CSIRET = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 94;

						row13.CORIGIN = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 95;

						row13.CMOTCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 96;

						row13.CCOMPTA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 97;

						row13.CAFFMEMO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 98;

						row13.CFIL2 = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 99;

						row13.CPNAFF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row13Struct row13) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_11 = 0;

						columnIndexWithD_tFileInputDelimited_11 = 100;

						row13.CDEVTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 101;

						row13.CMINCOM = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 102;

						row13.CRELEVE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 103;

						row13.CRELIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 104;

						row13.CMAJ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 105;

						row13.CECH = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 106;

						row13.CETIQ = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 107;

						row13.CCOEF = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 108;

						row13.CARROND = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 109;

						row13.CENCOUR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 110;

						row13.CNIVREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 111;

						row13.CBLOCAG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 112;

						row13.CDATREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 113;

						row13.CRESCO = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 114;

						row13.CRESFI = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 115;

						row13.CSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 116;

						row13.CDATENC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 117;

						row13.CDATSFA = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 118;

						row13.CCONTR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 119;

						row13.CDEREL = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 120;

						row13.CPAYS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 121;

						row13.CBLTOT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 122;

						row13.CBLLIG = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 123;

						row13.CENCDIS = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 124;

						row13.CNCEE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 125;

						row13.CNSFAC = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 126;

						row13.CPSRDAT = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 127;

						row13.CEPNASR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 128;

						row13.CCODTAR = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

						columnIndexWithD_tFileInputDelimited_11 = 129;

						row13.CDEVISE = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11,
							row13Struct row13) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_11, row13);

						valueToConn_1(fid_tFileInputDelimited_11, row13);

					}

				}
				RowHelper_tFileInputDelimited_11 rowHelper_tFileInputDelimited_11 = new RowHelper_tFileInputDelimited_11();

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try {

					Object filename_tFileInputDelimited_11 = "C:/DEV/Data/Base Montauban/clients.csv";
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0 || random_value_tFileInputDelimited_11 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_11, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();

						row13 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row13 = new row13Struct();
						try {

							rowHelper_tFileInputDelimited_11.valueToConn(fid_tFileInputDelimited_11, row13);

							if (rowstate_tFileInputDelimited_11.getException() != null) {
								throw rowstate_tFileInputDelimited_11.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */

						/**
						 * [tFileInputDelimited_11 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_begin ] stop
						 */
// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tMap_11 main ] start
							 */

							currentComponent = "tMap_11";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_11 = false;
							boolean mainRowRejected_tMap_11 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row14_0"
							///////////////////////////////////////////////

							boolean forceLooprow14_0 = false;

							row14_0Struct row14_0ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_11 = false;

								row14_0HashKey.HISKLE = row13.CREF;

								row14_0HashKey.hashCodeDirty = true;

								tHash_Lookup_row14_0.lookup(row14_0HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row14_0 != null && tHash_Lookup_row14_0.getCount(row14_0HashKey) > 1) { // G
																														// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row14_0' and it contains more one result from keys : row14_0.HISKLE = '" +
								// row14_0HashKey.HISKLE + "'");
							} // G 071

							row14_0Struct row14_0 = null;

							row14_0Struct fromLookup_row14_0 = null;
							row14_0 = row14_0Default;

							if (tHash_Lookup_row14_0 != null && tHash_Lookup_row14_0.hasNext()) { // G 099

								fromLookup_row14_0 = tHash_Lookup_row14_0.next();

							} // G 099

							if (fromLookup_row14_0 != null) {
								row14_0 = fromLookup_row14_0;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_0_0'
								copyOfcopyOfcopyOfmain_0_0_tmp.idhisto = Numeric.sequence("s1", 1, 1);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_annee = row13.CCAN2 == null
										? new Double(0)
										: row13.CCAN2.isBlank() ? new Double(0) : Double.parseDouble(row13.CCAN2);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_august = row14_0.HISCAN108 == null
										? new Double(0)
										: row14_0.HISCAN108.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN108);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_april = row14_0.HISCAN104 == null
										? new Double(0)
										: row14_0.HISCAN104.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN104);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_december = row14_0.HISCAN112 == null
										? new Double(0)
										: row14_0.HISCAN112.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_february = row14_0.HISCAN102 == null
										? new Double(0)
										: row14_0.HISCAN102.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN102);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_january = row14_0.HISCAN101 == null
										? new Double(0)
										: row14_0.HISCAN101.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN101);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_july = row14_0.HISCAN107 == null
										? new Double(0)
										: row14_0.HISCAN107.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN107);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_june = row14_0.HISCAN106 == null
										? new Double(0)
										: row14_0.HISCAN106.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN106);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_may = row14_0.HISCAN105 == null
										? new Double(0)
										: row14_0.HISCAN105.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN105);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_march = row14_0.HISCAN103 == null
										? new Double(0)
										: row14_0.HISCAN103.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN103);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_november = row14_0.HISCAN111 == null
										? new Double(0)
										: row14_0.HISCAN111.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN111);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_october = row14_0.HISCAN110 == null
										? new Double(0)
										: row14_0.HISCAN110.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN110);
								copyOfcopyOfcopyOfmain_0_0_tmp.chiffre_affaire_september = row14_0.HISCAN109 == null
										? new Double(0)
										: row14_0.HISCAN109.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISCAN109);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_annee = row14_0.HISPAN101 == null
										|| row14_0.HISPAN102 == null || row14_0.HISPAN103 == null
										|| row14_0.HISPAN104 == null || row14_0.HISPAN105 == null
										|| row14_0.HISPAN106 == null || row14_0.HISPAN107 == null
										|| row14_0.HISPAN108 == null || row14_0.HISPAN109 == null
										|| row14_0.HISPAN110 == null || row14_0.HISPAN111 == null
										|| row14_0.HISPAN112 == null ? null : Double.parseDouble(row14_0.HISPAN101) +

												Double.parseDouble(row14_0.HISPAN102) +

												Double.parseDouble(row14_0.HISPAN103) +

												Double.parseDouble(row14_0.HISPAN104) +

												Double.parseDouble(row14_0.HISPAN105) +

												Double.parseDouble(row14_0.HISPAN106) +

												Double.parseDouble(row14_0.HISPAN107) +

												Double.parseDouble(row14_0.HISPAN108) +

												Double.parseDouble(row14_0.HISPAN109) +

												Double.parseDouble(row14_0.HISPAN110) +

												Double.parseDouble(row14_0.HISPAN111) +

												Double.parseDouble(row14_0.HISPAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_august = row14_0.HISPAN108 == null
										? new Double(0)
										: row14_0.HISPAN108.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN108);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_april = row14_0.HISPAN104 == null
										? new Double(0)
										: row14_0.HISPAN104.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN104);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_december = row14_0.HISPAN112 == null
										? new Double(0)
										: row14_0.HISPAN112.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN112);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_february = row14_0.HISPAN102 == null
										? new Double(0)
										: row14_0.HISPAN102.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN102);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_january = row14_0.HISPAN101 == null
										? new Double(0)
										: row14_0.HISPAN101.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN101);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_july = row14_0.HISPAN107 == null
										? new Double(0)
										: row14_0.HISPAN107.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN107);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_june = row14_0.HISPAN106 == null
										? new Double(0)
										: row14_0.HISPAN106.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN106);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_may = row14_0.HISPAN105 == null
										? new Double(0)
										: row14_0.HISPAN105.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN105);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_march = row14_0.HISPAN103 == null
										? new Double(0)
										: row14_0.HISPAN103.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN103);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_november = row14_0.HISPAN111 == null
										? new Double(0)
										: row14_0.HISPAN111.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN111);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_october = row14_0.HISPAN110 == null
										? new Double(0)
										: row14_0.HISPAN110.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN110);
								copyOfcopyOfcopyOfmain_0_0_tmp.prix_achat_september = row14_0.HISPAN109 == null
										? new Double(0)
										: row14_0.HISPAN109.isBlank() ? new Double(0)
												: Double.parseDouble(row14_0.HISPAN109);
								copyOfcopyOfcopyOfmain_0_0_tmp.annee = new String("2020");
								copyOfcopyOfcopyOfmain_0_0_tmp.idcli = row13.CREF;
								copyOfcopyOfcopyOfmain_0_0 = copyOfcopyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_11 = false;

							tos_count_tMap_11++;

							/**
							 * [tMap_11 main ] stop
							 */

							/**
							 * [tMap_11 process_data_begin ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_0_0"
							if (copyOfcopyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_11 main ] start
								 */

								currentComponent = "tDBOutput_11";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_11 = false;
								pstmt_tDBOutput_11.setInt(1, copyOfcopyOfcopyOfmain_0_0.idhisto);

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_annee == null) {
									pstmt_tDBOutput_11.setNull(2, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(2, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_august == null) {
									pstmt_tDBOutput_11.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(3, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_august);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_april == null) {
									pstmt_tDBOutput_11.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(4, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_april);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_december == null) {
									pstmt_tDBOutput_11.setNull(5, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(5,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_december);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_february == null) {
									pstmt_tDBOutput_11.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(6,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_february);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_january == null) {
									pstmt_tDBOutput_11.setNull(7, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(7, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_january);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_july == null) {
									pstmt_tDBOutput_11.setNull(8, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(8, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_july);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_june == null) {
									pstmt_tDBOutput_11.setNull(9, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(9, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_june);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_may == null) {
									pstmt_tDBOutput_11.setNull(10, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(10, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_may);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_march == null) {
									pstmt_tDBOutput_11.setNull(11, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(11, copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_march);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_november == null) {
									pstmt_tDBOutput_11.setNull(12, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(12,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_november);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_october == null) {
									pstmt_tDBOutput_11.setNull(13, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(13,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_october);
								}

								if (copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_september == null) {
									pstmt_tDBOutput_11.setNull(14, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(14,
											copyOfcopyOfcopyOfmain_0_0.chiffre_affaire_september);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_annee == null) {
									pstmt_tDBOutput_11.setNull(15, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(15, copyOfcopyOfcopyOfmain_0_0.prix_achat_annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_august == null) {
									pstmt_tDBOutput_11.setNull(16, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(16, copyOfcopyOfcopyOfmain_0_0.prix_achat_august);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_april == null) {
									pstmt_tDBOutput_11.setNull(17, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(17, copyOfcopyOfcopyOfmain_0_0.prix_achat_april);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_december == null) {
									pstmt_tDBOutput_11.setNull(18, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(18, copyOfcopyOfcopyOfmain_0_0.prix_achat_december);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_february == null) {
									pstmt_tDBOutput_11.setNull(19, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(19, copyOfcopyOfcopyOfmain_0_0.prix_achat_february);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_january == null) {
									pstmt_tDBOutput_11.setNull(20, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(20, copyOfcopyOfcopyOfmain_0_0.prix_achat_january);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_july == null) {
									pstmt_tDBOutput_11.setNull(21, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(21, copyOfcopyOfcopyOfmain_0_0.prix_achat_july);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_june == null) {
									pstmt_tDBOutput_11.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(22, copyOfcopyOfcopyOfmain_0_0.prix_achat_june);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_may == null) {
									pstmt_tDBOutput_11.setNull(23, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(23, copyOfcopyOfcopyOfmain_0_0.prix_achat_may);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_march == null) {
									pstmt_tDBOutput_11.setNull(24, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(24, copyOfcopyOfcopyOfmain_0_0.prix_achat_march);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_november == null) {
									pstmt_tDBOutput_11.setNull(25, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(25, copyOfcopyOfcopyOfmain_0_0.prix_achat_november);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_october == null) {
									pstmt_tDBOutput_11.setNull(26, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(26, copyOfcopyOfcopyOfmain_0_0.prix_achat_october);
								}

								if (copyOfcopyOfcopyOfmain_0_0.prix_achat_september == null) {
									pstmt_tDBOutput_11.setNull(27, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_11.setDouble(27, copyOfcopyOfcopyOfmain_0_0.prix_achat_september);
								}

								if (copyOfcopyOfcopyOfmain_0_0.annee == null) {
									pstmt_tDBOutput_11.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(28, copyOfcopyOfcopyOfmain_0_0.annee);
								}

								if (copyOfcopyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_11.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_11.setString(29, copyOfcopyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_11.addBatch();
								nb_line_tDBOutput_11++;

								batchSizeCounter_tDBOutput_11++;

								if ((batchSize_tDBOutput_11 > 0)
										&& (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
									try {
										int countSum_tDBOutput_11 = 0;

										for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
											countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
													: countEach_tDBOutput_11);
										}

										insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

										batchSizeCounter_tDBOutput_11 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_11) {
										java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),
												sqle_tDBOutput_11 = null;
										String errormessage_tDBOutput_11;
										if (ne_tDBOutput_11 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_11 = new java.sql.SQLException(
													e_tDBOutput_11.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_11.getMessage(),
													ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(),
													ne_tDBOutput_11);
											errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
										} else {
											errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
										}

										int countSum_tDBOutput_11 = 0;
										for (int countEach_tDBOutput_11 : e_tDBOutput_11.getUpdateCounts()) {
											countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
													: countEach_tDBOutput_11);
										}

										insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

										System.err.println(errormessage_tDBOutput_11);

									}
								}

								tos_count_tDBOutput_11++;

								/**
								 * [tDBOutput_11 main ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_end ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_0_0"

							/**
							 * [tMap_11 process_data_end ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_end ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_11 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						/**
						 * [tFileInputDelimited_11 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row14_0 != null) {
					tHash_Lookup_row14_0.endGet();
				}
				globalMap.remove("tHash_Lookup_row14_0");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					int countSum_tDBOutput_11 = 0;
					if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}

					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

				} catch (java.sql.BatchUpdateException e_tDBOutput_11) {
					java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(), sqle_tDBOutput_11 = null;
					String errormessage_tDBOutput_11;
					if (ne_tDBOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_11 = new java.sql.SQLException(
								e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(),
								ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
						errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
					} else {
						errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
					}

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e_tDBOutput_11.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					System.err.println(errormessage_tDBOutput_11);

				}

				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();
					resourceMap.remove("pstmt_tDBOutput_11");
				}
				resourceMap.put("statementClosed_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11 + deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED", nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED", nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
			}

			tFileInputDelimited_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row14_0");

			try {

				/**
				 * [tFileInputDelimited_11 finally ] start
				 */

				currentComponent = "tFileInputDelimited_11";

				/**
				 * [tFileInputDelimited_11 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
					if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_11")) != null) {
						pstmtToClose_tDBOutput_11.close();
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_0_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_0_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfacture;

		public int getIdfacture() {
			return this.idfacture;
		}

		public String alias_nom;

		public String getAlias_nom() {
			return this.alias_nom;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String numero_saisie;

		public String getNumero_saisie() {
			return this.numero_saisie;
		}

		public Float total_ht;

		public Float getTotal_ht() {
			return this.total_ht;
		}

		public Float total_ttc;

		public Float getTotal_ttc() {
			return this.total_ttc;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfacture;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_0_0Struct other = (copyOfcopyOfcopyOfcopyOfmain_0_0Struct) obj;

			if (this.idfacture != other.idfacture)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idfacture = this.idfacture;
			other.alias_nom = this.alias_nom;
			other.date = this.date;
			other.numero_saisie = this.numero_saisie;
			other.total_ht = this.total_ht;
			other.total_ttc = this.total_ttc;
			other.type = this.type;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			other.idfacture = this.idfacture;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idfacture = dis.readInt();

					this.alias_nom = readString(dis);

					this.date = readString(dis);

					this.numero_saisie = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.total_ht = null;
					} else {
						this.total_ht = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_ttc = null;
					} else {
						this.total_ttc = dis.readFloat();
					}

					this.type = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfacture);

				// String

				writeString(this.alias_nom, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.numero_saisie, dos);

				// Float

				if (this.total_ht == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_ht);
				}

				// Float

				if (this.total_ttc == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.total_ttc);
				}

				// String

				writeString(this.type, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfacture=" + String.valueOf(idfacture));
			sb.append(",alias_nom=" + alias_nom);
			sb.append(",date=" + date);
			sb.append(",numero_saisie=" + numero_saisie);
			sb.append(",total_ht=" + String.valueOf(total_ht));
			sb.append(",total_ttc=" + String.valueOf(total_ttc));
			sb.append(",type=" + type);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_0_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfacture, other.idfacture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String Facture;

		public String getFacture() {
			return this.Facture;
		}

		public String totalHT;

		public String getTotalHT() {
			return this.totalHT;
		}

		public String totalTTC;

		public String getTotalTTC() {
			return this.totalTTC;
		}

		public String Client;

		public String getClient() {
			return this.Client;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String saisie;

		public String getSaisie() {
			return this.saisie;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.Facture = readString(dis);

					this.totalHT = readString(dis);

					this.totalTTC = readString(dis);

					this.Client = readString(dis);

					this.nom = readString(dis);

					this.date = readString(dis);

					this.type = readString(dis);

					this.saisie = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Facture, dos);

				// String

				writeString(this.totalHT, dos);

				// String

				writeString(this.totalTTC, dos);

				// String

				writeString(this.Client, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.saisie, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Facture=" + Facture);
			sb.append(",totalHT=" + totalHT);
			sb.append(",totalTTC=" + totalTTC);
			sb.append(",Client=" + Client);
			sb.append(",nom=" + nom);
			sb.append(",date=" + date);
			sb.append(",type=" + type);
			sb.append(",saisie=" + saisie);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				copyOfcopyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfcopyOfmain_0_0 = new copyOfcopyOfcopyOfcopyOfmain_0_0Struct();

				/**
				 * [tDBOutput_12 begin ] start
				 */

				ok_Hash.put("tDBOutput_12", false);
				start_Hash.put("tDBOutput_12", System.currentTimeMillis());

				currentComponent = "tDBOutput_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_0_0");
				}

				int tos_count_tDBOutput_12 = 0;

				String dbschema_tDBOutput_12 = null;
				dbschema_tDBOutput_12 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_12 = null;
				if (dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
					tableName_tDBOutput_12 = ("facture");
				} else {
					tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\"" + ("facture");
				}

				int nb_line_tDBOutput_12 = 0;
				int nb_line_update_tDBOutput_12 = 0;
				int nb_line_inserted_tDBOutput_12 = 0;
				int nb_line_deleted_tDBOutput_12 = 0;
				int nb_line_rejected_tDBOutput_12 = 0;

				int deletedCount_tDBOutput_12 = 0;
				int updatedCount_tDBOutput_12 = 0;
				int insertedCount_tDBOutput_12 = 0;
				int rejectedCount_tDBOutput_12 = 0;

				boolean whetherReject_tDBOutput_12 = false;

				java.sql.Connection conn_tDBOutput_12 = null;
				String dbUser_tDBOutput_12 = null;

				conn_tDBOutput_12 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_12 = 10000;
				int batchSizeCounter_tDBOutput_12 = 0;

				int count_tDBOutput_12 = 0;
				String insert_tDBOutput_12 = "INSERT INTO \"" + tableName_tDBOutput_12
						+ "\" (\"idfacture\",\"alias_nom\",\"date\",\"numero_saisie\",\"total_ht\",\"total_ttc\",\"type\",\"idcli\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
				resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);

				/**
				 * [tDBOutput_12 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_0_0Struct copyOfcopyOfcopyOfcopyOfmain_0_0_tmp = new copyOfcopyOfcopyOfcopyOfmain_0_0Struct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				int limit_tFileInputDelimited_12 = -1;
				try {

					Object filename_tFileInputDelimited_12 = "C:/DEV/Data/Base Montauban/Facture.csv";
					if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
						if (footer_value_tFileInputDelimited_12 > 0 || random_value_tFileInputDelimited_12 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Facture.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_12, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_12 != null && fid_tFileInputDelimited_12.nextRecord()) {
						rowstate_tFileInputDelimited_12.reset();

						row17 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row17 = new row17Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_12 = 0;

							columnIndexWithD_tFileInputDelimited_12 = 0;

							row17.Facture = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 1;

							row17.totalHT = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 2;

							row17.totalTTC = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 3;

							row17.Client = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 4;

							row17.nom = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 5;

							row17.date = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 6;

							row17.type = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 7;

							row17.saisie = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);

							if (rowstate_tFileInputDelimited_12.getException() != null) {
								throw rowstate_tFileInputDelimited_12.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */

						/**
						 * [tFileInputDelimited_12 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_begin ] stop
						 */
// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tMap_12 main ] start
							 */

							currentComponent = "tMap_12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_12 = false;
							boolean mainRowRejected_tMap_12 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_0_0 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_0_0'
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.idfacture = Integer.parseInt(row17.Facture);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.alias_nom = row17.nom;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.date = row17.date;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.numero_saisie = row17.saisie;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.total_ht = Float.parseFloat(row17.totalHT);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.total_ttc = Float.parseFloat(row17.totalTTC);
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.type = row17.type;
								copyOfcopyOfcopyOfcopyOfmain_0_0_tmp.idcli = row17.Client;
								copyOfcopyOfcopyOfcopyOfmain_0_0 = copyOfcopyOfcopyOfcopyOfmain_0_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_12 = false;

							tos_count_tMap_12++;

							/**
							 * [tMap_12 main ] stop
							 */

							/**
							 * [tMap_12 process_data_begin ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_0_0"
							if (copyOfcopyOfcopyOfcopyOfmain_0_0 != null) {

								/**
								 * [tDBOutput_12 main ] start
								 */

								currentComponent = "tDBOutput_12";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_0_0");
								}

								whetherReject_tDBOutput_12 = false;
								pstmt_tDBOutput_12.setInt(1, copyOfcopyOfcopyOfcopyOfmain_0_0.idfacture);

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.alias_nom == null) {
									pstmt_tDBOutput_12.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(2, copyOfcopyOfcopyOfcopyOfmain_0_0.alias_nom);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.date == null) {
									pstmt_tDBOutput_12.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(3, copyOfcopyOfcopyOfcopyOfmain_0_0.date);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.numero_saisie == null) {
									pstmt_tDBOutput_12.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(4, copyOfcopyOfcopyOfcopyOfmain_0_0.numero_saisie);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.total_ht == null) {
									pstmt_tDBOutput_12.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_12.setFloat(5, copyOfcopyOfcopyOfcopyOfmain_0_0.total_ht);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.total_ttc == null) {
									pstmt_tDBOutput_12.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_12.setFloat(6, copyOfcopyOfcopyOfcopyOfmain_0_0.total_ttc);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.type == null) {
									pstmt_tDBOutput_12.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(7, copyOfcopyOfcopyOfcopyOfmain_0_0.type);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_0_0.idcli == null) {
									pstmt_tDBOutput_12.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_12.setString(8, copyOfcopyOfcopyOfcopyOfmain_0_0.idcli);
								}

								pstmt_tDBOutput_12.addBatch();
								nb_line_tDBOutput_12++;

								batchSizeCounter_tDBOutput_12++;

								if ((batchSize_tDBOutput_12 > 0)
										&& (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
									try {
										int countSum_tDBOutput_12 = 0;

										for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
											countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

										batchSizeCounter_tDBOutput_12 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
										java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),
												sqle_tDBOutput_12 = null;
										String errormessage_tDBOutput_12;
										if (ne_tDBOutput_12 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_12 = new java.sql.SQLException(
													e_tDBOutput_12.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_12.getMessage(),
													ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(),
													ne_tDBOutput_12);
											errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
										} else {
											errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
										}

										int countSum_tDBOutput_12 = 0;
										for (int countEach_tDBOutput_12 : e_tDBOutput_12.getUpdateCounts()) {
											countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

										System.err.println(errormessage_tDBOutput_12);

									}
								}

								tos_count_tDBOutput_12++;

								/**
								 * [tDBOutput_12 main ] stop
								 */

								/**
								 * [tDBOutput_12 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_12";

								/**
								 * [tDBOutput_12 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_12 process_data_end ] start
								 */

								currentComponent = "tDBOutput_12";

								/**
								 * [tDBOutput_12 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_0_0"

							/**
							 * [tMap_12 process_data_end ] start
							 */

							currentComponent = "tMap_12";

							/**
							 * [tMap_12 process_data_end ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_12 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Facture.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_12 != null) {
							fid_tFileInputDelimited_12.close();
						}
					}
					if (fid_tFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE", fid_tFileInputDelimited_12.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_12 end ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					int countSum_tDBOutput_12 = 0;
					if (pstmt_tDBOutput_12 != null && batchSizeCounter_tDBOutput_12 > 0) {

						for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}

					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

				} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
					java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(), sqle_tDBOutput_12 = null;
					String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(
								e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(),
								ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
					} else {
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}

					int countSum_tDBOutput_12 = 0;
					for (int countEach_tDBOutput_12 : e_tDBOutput_12.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

					System.err.println(errormessage_tDBOutput_12);

				}

				if (pstmt_tDBOutput_12 != null) {

					pstmt_tDBOutput_12.close();
					resourceMap.remove("pstmt_tDBOutput_12");
				}
				resourceMap.put("statementClosed_tDBOutput_12", true);

				nb_line_deleted_tDBOutput_12 = nb_line_deleted_tDBOutput_12 + deletedCount_tDBOutput_12;
				nb_line_update_tDBOutput_12 = nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
				nb_line_inserted_tDBOutput_12 = nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
				nb_line_rejected_tDBOutput_12 = nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;

				globalMap.put("tDBOutput_12_NB_LINE", nb_line_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_UPDATED", nb_line_update_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_DELETED", nb_line_deleted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_0_0");
				}

				ok_Hash.put("tDBOutput_12", true);
				end_Hash.put("tDBOutput_12", System.currentTimeMillis());

				/**
				 * [tDBOutput_12 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tFileInputDelimited_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_12 finally ] start
				 */

				currentComponent = "tDBOutput_12";

				if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
					if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_12")) != null) {
						pstmtToClose_tDBOutput_12.close();
					}
				}

				/**
				 * [tDBOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_1_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_1_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idaffaire;

		public String getIdaffaire() {
			return this.idaffaire;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idaffaire == null) ? 0 : this.idaffaire.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1_1Struct other = (copyOfcopyOfmain_1_1Struct) obj;

			if (this.idaffaire == null) {
				if (other.idaffaire != null)
					return false;

			} else if (!this.idaffaire.equals(other.idaffaire))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1_1Struct other) {

			other.idaffaire = this.idaffaire;
			other.libelle = this.libelle;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1_1Struct other) {

			other.idaffaire = this.idaffaire;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idaffaire = readString(dis);

					this.libelle = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idaffaire, dos);

				// String

				writeString(this.libelle, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idaffaire=" + idaffaire);
			sb.append(",libelle=" + libelle);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idaffaire, other.idaffaire);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PNCLIE;

		public String getPNCLIE() {
			return this.PNCLIE;
		}

		public String PNPIECE;

		public String getPNPIECE() {
			return this.PNPIECE;
		}

		public String PNREF;

		public String getPNREF() {
			return this.PNREF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PNCLIE = readString(dis);

					this.PNPIECE = readString(dis);

					this.PNREF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PNCLIE, dos);

				// String

				writeString(this.PNPIECE, dos);

				// String

				writeString(this.PNREF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PNCLIE=" + PNCLIE);
			sb.append(",PNPIECE=" + PNPIECE);
			sb.append(",PNREF=" + PNREF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				copyOfcopyOfmain_1_1Struct copyOfcopyOfmain_1_1 = new copyOfcopyOfmain_1_1Struct();

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1_1");
				}

				int tos_count_tDBOutput_13 = 0;

				String dbschema_tDBOutput_13 = null;
				dbschema_tDBOutput_13 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_13 = null;
				if (dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = ("code_affaire");
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("code_affaire");
				}

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;

				boolean whetherReject_tDBOutput_13 = false;

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbUser_tDBOutput_13 = null;

				conn_tDBOutput_13 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_13 = 10000;
				int batchSizeCounter_tDBOutput_13 = 0;

				int count_tDBOutput_13 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
					stmtClear_tDBOutput_13.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_13 + "\"");
				}
				String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13
						+ "\" (\"idaffaire\",\"libelle\",\"idcli\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_13 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1_1Struct copyOfcopyOfmain_1_1_tmp = new copyOfcopyOfmain_1_1Struct();
// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_13 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				int limit_tFileInputDelimited_13 = -1;
				try {

					Object filename_tFileInputDelimited_13 = "C:/DEV/Data/Base Montauban/affaires.csv";
					if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
						if (footer_value_tFileInputDelimited_13 > 0 || random_value_tFileInputDelimited_13 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/affaires.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_13, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_13 != null && fid_tFileInputDelimited_13.nextRecord()) {
						rowstate_tFileInputDelimited_13.reset();

						row8 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row8 = new row8Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_13 = 0;

							columnIndexWithD_tFileInputDelimited_13 = 0;

							row8.PNCLIE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 1;

							row8.PNPIECE = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 2;

							row8.PNREF = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);

							if (rowstate_tFileInputDelimited_13.getException() != null) {
								throw rowstate_tFileInputDelimited_13.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */

						/**
						 * [tFileInputDelimited_13 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						/**
						 * [tFileInputDelimited_13 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1_1 = null;

// # Output table : 'copyOfcopyOfmain_1_1'
								copyOfcopyOfmain_1_1_tmp.idaffaire = row8.PNCLIE + row8.PNPIECE;
								copyOfcopyOfmain_1_1_tmp.libelle = row8.PNREF;
								copyOfcopyOfmain_1_1_tmp.idcli = row8.PNCLIE.equals("AFFAIR") ? null
										: row8.PNCLIE.equals("FINANC") ? null : row8.PNCLIE;
								copyOfcopyOfmain_1_1 = copyOfcopyOfmain_1_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */

							/**
							 * [tMap_13 process_data_begin ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1_1"
							if (copyOfcopyOfmain_1_1 != null) {

								/**
								 * [tDBOutput_13 main ] start
								 */

								currentComponent = "tDBOutput_13";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1_1");
								}

								whetherReject_tDBOutput_13 = false;
								if (copyOfcopyOfmain_1_1.idaffaire == null) {
									pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(1, copyOfcopyOfmain_1_1.idaffaire);
								}

								if (copyOfcopyOfmain_1_1.libelle == null) {
									pstmt_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(2, copyOfcopyOfmain_1_1.libelle);
								}

								if (copyOfcopyOfmain_1_1.idcli == null) {
									pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_13.setString(3, copyOfcopyOfmain_1_1.idcli);
								}

								pstmt_tDBOutput_13.addBatch();
								nb_line_tDBOutput_13++;

								batchSizeCounter_tDBOutput_13++;

								if ((batchSize_tDBOutput_13 > 0)
										&& (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
									try {
										int countSum_tDBOutput_13 = 0;

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
											countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

										batchSizeCounter_tDBOutput_13 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
										java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),
												sqle_tDBOutput_13 = null;
										String errormessage_tDBOutput_13;
										if (ne_tDBOutput_13 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_13 = new java.sql.SQLException(
													e_tDBOutput_13.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_13.getMessage(),
													ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(),
													ne_tDBOutput_13);
											errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
										} else {
											errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
										}

										int countSum_tDBOutput_13 = 0;
										for (int countEach_tDBOutput_13 : e_tDBOutput_13.getUpdateCounts()) {
											countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

										System.err.println(errormessage_tDBOutput_13);

									}
								}

								tos_count_tDBOutput_13++;

								/**
								 * [tDBOutput_13 main ] stop
								 */

								/**
								 * [tDBOutput_13 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_13";

								/**
								 * [tDBOutput_13 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_13 process_data_end ] start
								 */

								currentComponent = "tDBOutput_13";

								/**
								 * [tDBOutput_13 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1_1"

							/**
							 * [tMap_13 process_data_end ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_13 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						/**
						 * [tFileInputDelimited_13 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/affaires.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_13 != null) {
							fid_tFileInputDelimited_13.close();
						}
					}
					if (fid_tFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE", fid_tFileInputDelimited_13.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					int countSum_tDBOutput_13 = 0;
					if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {

						for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}

					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

				} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
					java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(), sqle_tDBOutput_13 = null;
					String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(
								e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(),
								ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
					} else {
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}

					int countSum_tDBOutput_13 = 0;
					for (int countEach_tDBOutput_13 : e_tDBOutput_13.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

					System.err.println(errormessage_tDBOutput_13);

				}

				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");
				}
				resourceMap.put("statementClosed_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13 + deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED", nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED", nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1_1");
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_13:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tFileInputDelimited_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_13 finally ] start
				 */

				currentComponent = "tFileInputDelimited_13";

				/**
				 * [tFileInputDelimited_13 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
					if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_13")) != null) {
						pstmtToClose_tDBOutput_13.close();
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddetail_cli;

		public int getIddetail_cli() {
			return this.iddetail_cli;
		}

		public Long autorie_sfac;

		public Long getAutorie_sfac() {
			return this.autorie_sfac;
		}

		public Boolean blocage_client;

		public Boolean getBlocage_client() {
			return this.blocage_client;
		}

		public Boolean blocage_facturation;

		public Boolean getBlocage_facturation() {
			return this.blocage_facturation;
		}

		public String code_chantier;

		public String getCode_chantier() {
			return this.code_chantier;
		}

		public String code_tarif_idem_code_client;

		public String getCode_tarif_idem_code_client() {
			return this.code_tarif_idem_code_client;
		}

		public String coef_multiplicateur_pub;

		public String getCoef_multiplicateur_pub() {
			return this.coef_multiplicateur_pub;
		}

		public String commentaire;

		public String getCommentaire() {
			return this.commentaire;
		}

		public String compte_facture;

		public String getCompte_facture() {
			return this.compte_facture;
		}

		public String date_creation;

		public String getDate_creation() {
			return this.date_creation;
		}

		public String date_dernier_encours;

		public String getDate_dernier_encours() {
			return this.date_dernier_encours;
		}

		public String date_dernier_sfac;

		public String getDate_dernier_sfac() {
			return this.date_dernier_sfac;
		}

		public String date_derniere_facture;

		public String getDate_derniere_facture() {
			return this.date_derniere_facture;
		}

		public String date_echeance;

		public String getDate_echeance() {
			return this.date_echeance;
		}

		public String date_psr;

		public String getDate_psr() {
			return this.date_psr;
		}

		public String date_relance;

		public String getDate_relance() {
			return this.date_relance;
		}

		public String echeance_report_au;

		public String getEcheance_report_au() {
			return this.echeance_report_au;
		}

		public String fidelite;

		public String getFidelite() {
			return this.fidelite;
		}

		public Boolean flag_modif;

		public Boolean getFlag_modif() {
			return this.flag_modif;
		}

		public Float frais_facturation;

		public Float getFrais_facturation() {
			return this.frais_facturation;
		}

		public Integer jour_echeance_fin_de_mois;

		public Integer getJour_echeance_fin_de_mois() {
			return this.jour_echeance_fin_de_mois;
		}

		public Double montant_encours;

		public Double getMontant_encours() {
			return this.montant_encours;
		}

		public Double montant_encours_disponible;

		public Double getMontant_encours_disponible() {
			return this.montant_encours_disponible;
		}

		public Integer montant_minimum_commande;

		public Integer getMontant_minimum_commande() {
			return this.montant_minimum_commande;
		}

		public String montant_sfac;

		public String getMontant_sfac() {
			return this.montant_sfac;
		}

		public String niveau_relance;

		public String getNiveau_relance() {
			return this.niveau_relance;
		}

		public String numero_sfac;

		public String getNumero_sfac() {
			return this.numero_sfac;
		}

		public Boolean reference_affaire_exigee;

		public Boolean getReference_affaire_exigee() {
			return this.reference_affaire_exigee;
		}

		public String regroupement_client;

		public String getRegroupement_client() {
			return this.regroupement_client;
		}

		public Float taux_descompte;

		public Float getTaux_descompte() {
			return this.taux_descompte;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddetail_cli;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.iddetail_cli != other.iddetail_cli)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.iddetail_cli = this.iddetail_cli;
			other.autorie_sfac = this.autorie_sfac;
			other.blocage_client = this.blocage_client;
			other.blocage_facturation = this.blocage_facturation;
			other.code_chantier = this.code_chantier;
			other.code_tarif_idem_code_client = this.code_tarif_idem_code_client;
			other.coef_multiplicateur_pub = this.coef_multiplicateur_pub;
			other.commentaire = this.commentaire;
			other.compte_facture = this.compte_facture;
			other.date_creation = this.date_creation;
			other.date_dernier_encours = this.date_dernier_encours;
			other.date_dernier_sfac = this.date_dernier_sfac;
			other.date_derniere_facture = this.date_derniere_facture;
			other.date_echeance = this.date_echeance;
			other.date_psr = this.date_psr;
			other.date_relance = this.date_relance;
			other.echeance_report_au = this.echeance_report_au;
			other.fidelite = this.fidelite;
			other.flag_modif = this.flag_modif;
			other.frais_facturation = this.frais_facturation;
			other.jour_echeance_fin_de_mois = this.jour_echeance_fin_de_mois;
			other.montant_encours = this.montant_encours;
			other.montant_encours_disponible = this.montant_encours_disponible;
			other.montant_minimum_commande = this.montant_minimum_commande;
			other.montant_sfac = this.montant_sfac;
			other.niveau_relance = this.niveau_relance;
			other.numero_sfac = this.numero_sfac;
			other.reference_affaire_exigee = this.reference_affaire_exigee;
			other.regroupement_client = this.regroupement_client;
			other.taux_descompte = this.taux_descompte;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.iddetail_cli = this.iddetail_cli;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddetail_cli = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.autorie_sfac = null;
					} else {
						this.autorie_sfac = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.blocage_client = null;
					} else {
						this.blocage_client = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.blocage_facturation = null;
					} else {
						this.blocage_facturation = dis.readBoolean();
					}

					this.code_chantier = readString(dis);

					this.code_tarif_idem_code_client = readString(dis);

					this.coef_multiplicateur_pub = readString(dis);

					this.commentaire = readString(dis);

					this.compte_facture = readString(dis);

					this.date_creation = readString(dis);

					this.date_dernier_encours = readString(dis);

					this.date_dernier_sfac = readString(dis);

					this.date_derniere_facture = readString(dis);

					this.date_echeance = readString(dis);

					this.date_psr = readString(dis);

					this.date_relance = readString(dis);

					this.echeance_report_au = readString(dis);

					this.fidelite = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.flag_modif = null;
					} else {
						this.flag_modif = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.frais_facturation = null;
					} else {
						this.frais_facturation = dis.readFloat();
					}

					this.jour_echeance_fin_de_mois = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_encours = null;
					} else {
						this.montant_encours = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_encours_disponible = null;
					} else {
						this.montant_encours_disponible = dis.readDouble();
					}

					this.montant_minimum_commande = readInteger(dis);

					this.montant_sfac = readString(dis);

					this.niveau_relance = readString(dis);

					this.numero_sfac = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.reference_affaire_exigee = null;
					} else {
						this.reference_affaire_exigee = dis.readBoolean();
					}

					this.regroupement_client = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.taux_descompte = null;
					} else {
						this.taux_descompte = dis.readFloat();
					}

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddetail_cli);

				// Long

				if (this.autorie_sfac == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.autorie_sfac);
				}

				// Boolean

				if (this.blocage_client == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.blocage_client);
				}

				// Boolean

				if (this.blocage_facturation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.blocage_facturation);
				}

				// String

				writeString(this.code_chantier, dos);

				// String

				writeString(this.code_tarif_idem_code_client, dos);

				// String

				writeString(this.coef_multiplicateur_pub, dos);

				// String

				writeString(this.commentaire, dos);

				// String

				writeString(this.compte_facture, dos);

				// String

				writeString(this.date_creation, dos);

				// String

				writeString(this.date_dernier_encours, dos);

				// String

				writeString(this.date_dernier_sfac, dos);

				// String

				writeString(this.date_derniere_facture, dos);

				// String

				writeString(this.date_echeance, dos);

				// String

				writeString(this.date_psr, dos);

				// String

				writeString(this.date_relance, dos);

				// String

				writeString(this.echeance_report_au, dos);

				// String

				writeString(this.fidelite, dos);

				// Boolean

				if (this.flag_modif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.flag_modif);
				}

				// Float

				if (this.frais_facturation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.frais_facturation);
				}

				// Integer

				writeInteger(this.jour_echeance_fin_de_mois, dos);

				// Double

				if (this.montant_encours == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_encours);
				}

				// Double

				if (this.montant_encours_disponible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_encours_disponible);
				}

				// Integer

				writeInteger(this.montant_minimum_commande, dos);

				// String

				writeString(this.montant_sfac, dos);

				// String

				writeString(this.niveau_relance, dos);

				// String

				writeString(this.numero_sfac, dos);

				// Boolean

				if (this.reference_affaire_exigee == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.reference_affaire_exigee);
				}

				// String

				writeString(this.regroupement_client, dos);

				// Float

				if (this.taux_descompte == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taux_descompte);
				}

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddetail_cli=" + String.valueOf(iddetail_cli));
			sb.append(",autorie_sfac=" + String.valueOf(autorie_sfac));
			sb.append(",blocage_client=" + String.valueOf(blocage_client));
			sb.append(",blocage_facturation=" + String.valueOf(blocage_facturation));
			sb.append(",code_chantier=" + code_chantier);
			sb.append(",code_tarif_idem_code_client=" + code_tarif_idem_code_client);
			sb.append(",coef_multiplicateur_pub=" + coef_multiplicateur_pub);
			sb.append(",commentaire=" + commentaire);
			sb.append(",compte_facture=" + compte_facture);
			sb.append(",date_creation=" + date_creation);
			sb.append(",date_dernier_encours=" + date_dernier_encours);
			sb.append(",date_dernier_sfac=" + date_dernier_sfac);
			sb.append(",date_derniere_facture=" + date_derniere_facture);
			sb.append(",date_echeance=" + date_echeance);
			sb.append(",date_psr=" + date_psr);
			sb.append(",date_relance=" + date_relance);
			sb.append(",echeance_report_au=" + echeance_report_au);
			sb.append(",fidelite=" + fidelite);
			sb.append(",flag_modif=" + String.valueOf(flag_modif));
			sb.append(",frais_facturation=" + String.valueOf(frais_facturation));
			sb.append(",jour_echeance_fin_de_mois=" + String.valueOf(jour_echeance_fin_de_mois));
			sb.append(",montant_encours=" + String.valueOf(montant_encours));
			sb.append(",montant_encours_disponible=" + String.valueOf(montant_encours_disponible));
			sb.append(",montant_minimum_commande=" + String.valueOf(montant_minimum_commande));
			sb.append(",montant_sfac=" + montant_sfac);
			sb.append(",niveau_relance=" + niveau_relance);
			sb.append(",numero_sfac=" + numero_sfac);
			sb.append(",reference_affaire_exigee=" + String.valueOf(reference_affaire_exigee));
			sb.append(",regroupement_client=" + regroupement_client);
			sb.append(",taux_descompte=" + String.valueOf(taux_descompte));
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddetail_cli, other.iddetail_cli);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_23 begin ] start
				 */

				ok_Hash.put("tDBOutput_23", false);
				start_Hash.put("tDBOutput_23", System.currentTimeMillis());

				currentComponent = "tDBOutput_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_23 = 0;

				String dbschema_tDBOutput_23 = null;
				dbschema_tDBOutput_23 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_23 = null;
				if (dbschema_tDBOutput_23 == null || dbschema_tDBOutput_23.trim().length() == 0) {
					tableName_tDBOutput_23 = ("client_detail");
				} else {
					tableName_tDBOutput_23 = dbschema_tDBOutput_23 + "\".\"" + ("client_detail");
				}

				int nb_line_tDBOutput_23 = 0;
				int nb_line_update_tDBOutput_23 = 0;
				int nb_line_inserted_tDBOutput_23 = 0;
				int nb_line_deleted_tDBOutput_23 = 0;
				int nb_line_rejected_tDBOutput_23 = 0;

				int deletedCount_tDBOutput_23 = 0;
				int updatedCount_tDBOutput_23 = 0;
				int insertedCount_tDBOutput_23 = 0;
				int rejectedCount_tDBOutput_23 = 0;

				boolean whetherReject_tDBOutput_23 = false;

				java.sql.Connection conn_tDBOutput_23 = null;
				String dbUser_tDBOutput_23 = null;

				conn_tDBOutput_23 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_23 = 10000;
				int batchSizeCounter_tDBOutput_23 = 0;

				int count_tDBOutput_23 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_23 = conn_tDBOutput_23.createStatement()) {
					stmtClear_tDBOutput_23.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_23 + "\"");
				}
				String insert_tDBOutput_23 = "INSERT INTO \"" + tableName_tDBOutput_23
						+ "\" (\"iddetail_cli\",\"autorie_sfac\",\"blocage_client\",\"blocage_facturation\",\"code_chantier\",\"code_tarif_idem_code_client\",\"coef_multiplicateur_pub\",\"commentaire\",\"compte_facture\",\"date_creation\",\"date_dernier_encours\",\"date_dernier_sfac\",\"date_derniere_facture\",\"date_echeance\",\"date_psr\",\"date_relance\",\"echeance_report_au\",\"fidelite\",\"flag_modif\",\"frais_facturation\",\"jour_echeance_fin_de_mois\",\"montant_encours\",\"montant_encours_disponible\",\"montant_minimum_commande\",\"montant_sfac\",\"niveau_relance\",\"numero_sfac\",\"reference_affaire_exigee\",\"regroupement_client\",\"taux_descompte\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_23 = conn_tDBOutput_23.prepareStatement(insert_tDBOutput_23);
				resourceMap.put("pstmt_tDBOutput_23", pstmt_tDBOutput_23);

				/**
				 * [tDBOutput_23 begin ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());

				currentComponent = "tMap_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_18 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_18", false);
				start_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_18";

				int tos_count_tFileInputDelimited_18 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_18 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_18 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_18,
							row16Struct row16) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_18 = 0;

						columnIndexWithD_tFileInputDelimited_18 = 0;

						row16.CREF = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 1;

						row16.CNOM = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 2;

						row16.CRUE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 3;

						row16.CAUX = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 4;

						row16.CCPTL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 5;

						row16.CVIL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 6;

						row16.FILL01 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 7;

						row16.CQUAL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 8;

						row16.CCOM1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 9;

						row16.CCREP = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 10;

						row16.CREMFI = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 11;

						row16.CECHE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 12;

						row16.CECHJ = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 13;

						row16.CPAI = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 14;

						row16.CCHAN = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 15;

						row16.CECHJ2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 16;

						row16.CMOD = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 17;

						row16.CBQ1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 18;

						row16.CBQ2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 19;

						row16.CBQ3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 20;

						row16.CBQ4 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 21;

						row16.CBQ5 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 22;

						row16.CBQ6 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 23;

						row16.CFACT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 24;

						row16.CBL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 25;

						row16.CESC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 26;

						row16.VARAD1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 27;

						row16.VARAD2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 28;

						row16.VARAD3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 29;

						row16.VARAD4 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 30;

						row16.VARAD5 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 31;

						row16.VARAD6 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 32;

						row16.VARA1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 33;

						row16.VARA2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 34;

						row16.VARA3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 35;

						row16.VARA4 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 36;

						row16.VARA5 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 37;

						row16.VARB1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 38;

						row16.VARB2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 39;

						row16.VARB3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 40;

						row16.VARB4 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 41;

						row16.VARB5 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 42;

						row16.VARN1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 43;

						row16.VARN2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 44;

						row16.VARN3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 45;

						row16.VARN4 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 46;

						row16.VARN5 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 47;

						row16.CDATCRE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 48;

						row16.CTEL1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 49;

						row16.CTEL2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 50;

						row16.CTEX1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 51;

						row16.CTEX2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 52;

						row16.CDELMOY = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 53;

						row16.CAFFAIRE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 54;

						row16.CCPTFACT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 55;

						row16.CINTERNET = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 56;

						row16.CIBAN1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 57;

						row16.CBIC_old = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 58;

						row16.CFIDEL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 59;

						row16.CRFA = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 60;

						row16.CCOMREG = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 61;

						row16.CAPE2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 62;

						row16.CIBAN72 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 63;

						row16.CIBAN8 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 64;

						row16.CIBAN9 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 65;

						row16.CBIC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 66;

						row16.CTRANSP = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 67;

						row16.CFACTMAIL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 68;

						row16.CBLMAIL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 69;

						row16.CFACTWEB = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 70;

						row16.CBLWEB = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 71;

						row16.CPUBLIPOSTAGE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 72;

						row16.CFACT_EDI = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 73;

						row16.CFACT_CHORUS = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 74;

						row16.CFACTORING = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 75;

						row16.CCHORUS_SERVICE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 76;

						row16.CFIL14 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 77;

						row16.CTAR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 78;

						row16.FIL02 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 79;

						row16.CREJ = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 80;

						row16.CSECT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 81;

						row16.CTOUR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 82;

						row16.CCAN1 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 83;

						row16.CCAN2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 84;

						row16.CCAN3 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 85;

						row16.CDATF = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 86;

						row16.CCAT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 87;

						row16.CRESP = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 88;

						row16.CAPE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 89;

						row16.CPREMC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 90;

						row16.CDERNC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 91;

						row16.CPROCC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 92;

						row16.CTYPEC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 93;

						row16.CSIRET = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 94;

						row16.CORIGIN = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 95;

						row16.CMOTCOUR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 96;

						row16.CCOMPTA = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 97;

						row16.CAFFMEMO = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 98;

						row16.CFIL2 = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 99;

						row16.CPNAFF = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_18,
							row16Struct row16) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_18 = 0;

						columnIndexWithD_tFileInputDelimited_18 = 100;

						row16.CDEVTAR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 101;

						row16.CMINCOM = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 102;

						row16.CRELEVE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 103;

						row16.CRELIQ = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 104;

						row16.CMAJ = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 105;

						row16.CECH = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 106;

						row16.CETIQ = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 107;

						row16.CCOEF = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 108;

						row16.CARROND = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 109;

						row16.CENCOUR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 110;

						row16.CNIVREL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 111;

						row16.CBLOCAG = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 112;

						row16.CDATREL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 113;

						row16.CRESCO = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 114;

						row16.CRESFI = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 115;

						row16.CSFAC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 116;

						row16.CDATENC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 117;

						row16.CDATSFA = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 118;

						row16.CCONTR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 119;

						row16.CDEREL = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 120;

						row16.CPAYS = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 121;

						row16.CBLTOT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 122;

						row16.CBLLIG = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 123;

						row16.CENCDIS = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 124;

						row16.CNCEE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 125;

						row16.CNSFAC = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 126;

						row16.CPSRDAT = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 127;

						row16.CEPNASR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 128;

						row16.CCODTAR = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

						columnIndexWithD_tFileInputDelimited_18 = 129;

						row16.CDEVISE = fid_tFileInputDelimited_18.get(columnIndexWithD_tFileInputDelimited_18);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_18,
							row16Struct row16) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_18, row16);

						valueToConn_1(fid_tFileInputDelimited_18, row16);

					}

				}
				RowHelper_tFileInputDelimited_18 rowHelper_tFileInputDelimited_18 = new RowHelper_tFileInputDelimited_18();

				int nb_line_tFileInputDelimited_18 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_18 = null;
				int limit_tFileInputDelimited_18 = -1;
				try {

					Object filename_tFileInputDelimited_18 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_18 = 0, random_value_tFileInputDelimited_18 = -1;
						if (footer_value_tFileInputDelimited_18 > 0 || random_value_tFileInputDelimited_18 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_18 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_18, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_18 != null && fid_tFileInputDelimited_18.nextRecord()) {
						rowstate_tFileInputDelimited_18.reset();

						row16 = null;

						boolean whetherReject_tFileInputDelimited_18 = false;
						row16 = new row16Struct();
						try {

							rowHelper_tFileInputDelimited_18.valueToConn(fid_tFileInputDelimited_18, row16);

							if (rowstate_tFileInputDelimited_18.getException() != null) {
								throw rowstate_tFileInputDelimited_18.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_18 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_18 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_18 main ] start
						 */

						currentComponent = "tFileInputDelimited_18";

						tos_count_tFileInputDelimited_18++;

						/**
						 * [tFileInputDelimited_18 main ] stop
						 */

						/**
						 * [tFileInputDelimited_18 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_18";

						/**
						 * [tFileInputDelimited_18 process_data_begin ] stop
						 */
// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tMap_18 main ] start
							 */

							currentComponent = "tMap_18";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_18 = false;
							boolean mainRowRejected_tMap_18 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.iddetail_cli = Numeric.sequence("cli", 1, 1);
								out1_tmp.autorie_sfac = null;
								out1_tmp.blocage_client = row16.CNIVREL.contains("B") ? true : false;
								out1_tmp.blocage_facturation = row16.CBLOCAG.isBlank() ? false : true;
								out1_tmp.code_chantier = row16.CCHAN;
								out1_tmp.code_tarif_idem_code_client = row16.CCODTAR;
								out1_tmp.coef_multiplicateur_pub = null;
								out1_tmp.commentaire = row16.CCOM1;
								out1_tmp.compte_facture = row16.CCPTFACT;
								out1_tmp.date_creation = row16.CDATCRE;
								out1_tmp.date_dernier_encours = row16.CDATENC;
								out1_tmp.date_dernier_sfac = row16.CDATSFA;
								out1_tmp.date_derniere_facture = row16.CDATF;
								out1_tmp.date_echeance = row16.CECH;
								out1_tmp.date_psr = row16.CPSRDAT;
								out1_tmp.date_relance = row16.CDATREL;
								out1_tmp.echeance_report_au = row16.CECHJ2;
								out1_tmp.fidelite = row16.CFIDEL;
								out1_tmp.flag_modif = row16.CMOD.isBlank() ? false : true;
								out1_tmp.frais_facturation = Float.parseFloat(row16.CETIQ);
								out1_tmp.jour_echeance_fin_de_mois = Integer.parseInt(row16.CECHJ);
								out1_tmp.montant_encours = Double.parseDouble(row16.CENCOUR);
								out1_tmp.montant_encours_disponible = Double.parseDouble(row16.CENCDIS);
								out1_tmp.montant_minimum_commande = Integer.parseInt(row16.CMINCOM);
								out1_tmp.montant_sfac = row16.CSFAC;
								out1_tmp.niveau_relance = row16.CDEREL;
								out1_tmp.numero_sfac = row16.CNSFAC;
								out1_tmp.reference_affaire_exigee = row16.CAFFAIRE.equals("O") ? true : false;
								out1_tmp.regroupement_client = row16.CCOMREG;
								out1_tmp.taux_descompte = Float.parseFloat(row16.CESC);
								out1_tmp.idcli = row16.CREF;
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_18 = false;

							tos_count_tMap_18++;

							/**
							 * [tMap_18 main ] stop
							 */

							/**
							 * [tMap_18 process_data_begin ] start
							 */

							currentComponent = "tMap_18";

							/**
							 * [tMap_18 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tDBOutput_23 main ] start
								 */

								currentComponent = "tDBOutput_23";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								whetherReject_tDBOutput_23 = false;
								pstmt_tDBOutput_23.setInt(1, out1.iddetail_cli);

								if (out1.autorie_sfac == null) {
									pstmt_tDBOutput_23.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_23.setLong(2, out1.autorie_sfac);
								}

								if (out1.blocage_client == null) {
									pstmt_tDBOutput_23.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_23.setBoolean(3, out1.blocage_client);
								}

								if (out1.blocage_facturation == null) {
									pstmt_tDBOutput_23.setNull(4, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_23.setBoolean(4, out1.blocage_facturation);
								}

								if (out1.code_chantier == null) {
									pstmt_tDBOutput_23.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(5, out1.code_chantier);
								}

								if (out1.code_tarif_idem_code_client == null) {
									pstmt_tDBOutput_23.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(6, out1.code_tarif_idem_code_client);
								}

								if (out1.coef_multiplicateur_pub == null) {
									pstmt_tDBOutput_23.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(7, out1.coef_multiplicateur_pub);
								}

								if (out1.commentaire == null) {
									pstmt_tDBOutput_23.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(8, out1.commentaire);
								}

								if (out1.compte_facture == null) {
									pstmt_tDBOutput_23.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(9, out1.compte_facture);
								}

								if (out1.date_creation == null) {
									pstmt_tDBOutput_23.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(10, out1.date_creation);
								}

								if (out1.date_dernier_encours == null) {
									pstmt_tDBOutput_23.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(11, out1.date_dernier_encours);
								}

								if (out1.date_dernier_sfac == null) {
									pstmt_tDBOutput_23.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(12, out1.date_dernier_sfac);
								}

								if (out1.date_derniere_facture == null) {
									pstmt_tDBOutput_23.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(13, out1.date_derniere_facture);
								}

								if (out1.date_echeance == null) {
									pstmt_tDBOutput_23.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(14, out1.date_echeance);
								}

								if (out1.date_psr == null) {
									pstmt_tDBOutput_23.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(15, out1.date_psr);
								}

								if (out1.date_relance == null) {
									pstmt_tDBOutput_23.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(16, out1.date_relance);
								}

								if (out1.echeance_report_au == null) {
									pstmt_tDBOutput_23.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(17, out1.echeance_report_au);
								}

								if (out1.fidelite == null) {
									pstmt_tDBOutput_23.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(18, out1.fidelite);
								}

								if (out1.flag_modif == null) {
									pstmt_tDBOutput_23.setNull(19, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_23.setBoolean(19, out1.flag_modif);
								}

								if (out1.frais_facturation == null) {
									pstmt_tDBOutput_23.setNull(20, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_23.setFloat(20, out1.frais_facturation);
								}

								if (out1.jour_echeance_fin_de_mois == null) {
									pstmt_tDBOutput_23.setNull(21, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_23.setInt(21, out1.jour_echeance_fin_de_mois);
								}

								if (out1.montant_encours == null) {
									pstmt_tDBOutput_23.setNull(22, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_23.setDouble(22, out1.montant_encours);
								}

								if (out1.montant_encours_disponible == null) {
									pstmt_tDBOutput_23.setNull(23, java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_23.setDouble(23, out1.montant_encours_disponible);
								}

								if (out1.montant_minimum_commande == null) {
									pstmt_tDBOutput_23.setNull(24, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_23.setInt(24, out1.montant_minimum_commande);
								}

								if (out1.montant_sfac == null) {
									pstmt_tDBOutput_23.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(25, out1.montant_sfac);
								}

								if (out1.niveau_relance == null) {
									pstmt_tDBOutput_23.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(26, out1.niveau_relance);
								}

								if (out1.numero_sfac == null) {
									pstmt_tDBOutput_23.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(27, out1.numero_sfac);
								}

								if (out1.reference_affaire_exigee == null) {
									pstmt_tDBOutput_23.setNull(28, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_23.setBoolean(28, out1.reference_affaire_exigee);
								}

								if (out1.regroupement_client == null) {
									pstmt_tDBOutput_23.setNull(29, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(29, out1.regroupement_client);
								}

								if (out1.taux_descompte == null) {
									pstmt_tDBOutput_23.setNull(30, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_23.setFloat(30, out1.taux_descompte);
								}

								if (out1.idcli == null) {
									pstmt_tDBOutput_23.setNull(31, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_23.setString(31, out1.idcli);
								}

								pstmt_tDBOutput_23.addBatch();
								nb_line_tDBOutput_23++;

								batchSizeCounter_tDBOutput_23++;

								if ((batchSize_tDBOutput_23 > 0)
										&& (batchSize_tDBOutput_23 <= batchSizeCounter_tDBOutput_23)) {
									try {
										int countSum_tDBOutput_23 = 0;

										for (int countEach_tDBOutput_23 : pstmt_tDBOutput_23.executeBatch()) {
											countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0
													: countEach_tDBOutput_23);
										}

										insertedCount_tDBOutput_23 += countSum_tDBOutput_23;

										batchSizeCounter_tDBOutput_23 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_23) {
										java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),
												sqle_tDBOutput_23 = null;
										String errormessage_tDBOutput_23;
										if (ne_tDBOutput_23 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_23 = new java.sql.SQLException(
													e_tDBOutput_23.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_23.getMessage(),
													ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(),
													ne_tDBOutput_23);
											errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
										} else {
											errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
										}

										int countSum_tDBOutput_23 = 0;
										for (int countEach_tDBOutput_23 : e_tDBOutput_23.getUpdateCounts()) {
											countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0
													: countEach_tDBOutput_23);
										}

										insertedCount_tDBOutput_23 += countSum_tDBOutput_23;

										System.err.println(errormessage_tDBOutput_23);

									}
								}

								tos_count_tDBOutput_23++;

								/**
								 * [tDBOutput_23 main ] stop
								 */

								/**
								 * [tDBOutput_23 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_23";

								/**
								 * [tDBOutput_23 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_23 process_data_end ] start
								 */

								currentComponent = "tDBOutput_23";

								/**
								 * [tDBOutput_23 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_18 process_data_end ] start
							 */

							currentComponent = "tMap_18";

							/**
							 * [tMap_18 process_data_end ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_18 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_18";

						/**
						 * [tFileInputDelimited_18 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_18 end ] start
						 */

						currentComponent = "tFileInputDelimited_18";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_18 != null) {
							fid_tFileInputDelimited_18.close();
						}
					}
					if (fid_tFileInputDelimited_18 != null) {
						globalMap.put("tFileInputDelimited_18_NB_LINE", fid_tFileInputDelimited_18.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_18", true);
				end_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_18 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tDBOutput_23 end ] start
				 */

				currentComponent = "tDBOutput_23";

				try {
					int countSum_tDBOutput_23 = 0;
					if (pstmt_tDBOutput_23 != null && batchSizeCounter_tDBOutput_23 > 0) {

						for (int countEach_tDBOutput_23 : pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}

					}

					insertedCount_tDBOutput_23 += countSum_tDBOutput_23;

				} catch (java.sql.BatchUpdateException e_tDBOutput_23) {
					java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(), sqle_tDBOutput_23 = null;
					String errormessage_tDBOutput_23;
					if (ne_tDBOutput_23 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_23 = new java.sql.SQLException(
								e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(),
								ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
						errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
					} else {
						errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
					}

					int countSum_tDBOutput_23 = 0;
					for (int countEach_tDBOutput_23 : e_tDBOutput_23.getUpdateCounts()) {
						countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
					}

					insertedCount_tDBOutput_23 += countSum_tDBOutput_23;

					System.err.println(errormessage_tDBOutput_23);

				}

				if (pstmt_tDBOutput_23 != null) {

					pstmt_tDBOutput_23.close();
					resourceMap.remove("pstmt_tDBOutput_23");
				}
				resourceMap.put("statementClosed_tDBOutput_23", true);

				nb_line_deleted_tDBOutput_23 = nb_line_deleted_tDBOutput_23 + deletedCount_tDBOutput_23;
				nb_line_update_tDBOutput_23 = nb_line_update_tDBOutput_23 + updatedCount_tDBOutput_23;
				nb_line_inserted_tDBOutput_23 = nb_line_inserted_tDBOutput_23 + insertedCount_tDBOutput_23;
				nb_line_rejected_tDBOutput_23 = nb_line_rejected_tDBOutput_23 + rejectedCount_tDBOutput_23;

				globalMap.put("tDBOutput_23_NB_LINE", nb_line_tDBOutput_23);
				globalMap.put("tDBOutput_23_NB_LINE_UPDATED", nb_line_update_tDBOutput_23);
				globalMap.put("tDBOutput_23_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_23);
				globalMap.put("tDBOutput_23_NB_LINE_DELETED", nb_line_deleted_tDBOutput_23);
				globalMap.put("tDBOutput_23_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_23);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_23", true);
				end_Hash.put("tDBOutput_23", System.currentTimeMillis());

				/**
				 * [tDBOutput_23 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_18:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
			}

			tFileInputDelimited_19Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_18 finally ] start
				 */

				currentComponent = "tFileInputDelimited_18";

				/**
				 * [tFileInputDelimited_18 finally ] stop
				 */

				/**
				 * [tMap_18 finally ] start
				 */

				currentComponent = "tMap_18";

				/**
				 * [tMap_18 finally ] stop
				 */

				/**
				 * [tDBOutput_23 finally ] start
				 */

				currentComponent = "tDBOutput_23";

				if (resourceMap.get("statementClosed_tDBOutput_23") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_23 = null;
					if ((pstmtToClose_tDBOutput_23 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_23")) != null) {
						pstmtToClose_tDBOutput_23.close();
					}
				}

				/**
				 * [tDBOutput_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_18_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortie_1Struct implements routines.system.IPersistableRow<copyOfsortie_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idparamclient;

		public int getIdparamclient() {
			return this.idparamclient;
		}

		public Boolean affacturage;

		public Boolean getAffacturage() {
			return this.affacturage;
		}

		public Boolean affichage;

		public Boolean getAffichage() {
			return this.affichage;
		}

		public String bl_chiffre_en_ligne;

		public String getBl_chiffre_en_ligne() {
			return this.bl_chiffre_en_ligne;
		}

		public Boolean bl_chiffre_en_total;

		public Boolean getBl_chiffre_en_total() {
			return this.bl_chiffre_en_total;
		}

		public Boolean chorus_service;

		public Boolean getChorus_service() {
			return this.chorus_service;
		}

		public Float coef_majo_factu;

		public Float getCoef_majo_factu() {
			return this.coef_majo_factu;
		}

		public Boolean controle_cde;

		public Boolean getControle_cde() {
			return this.controle_cde;
		}

		public Boolean edition_pn_remise;

		public Boolean getEdition_pn_remise() {
			return this.edition_pn_remise;
		}

		public Boolean envoie_bl_mail;

		public Boolean getEnvoie_bl_mail() {
			return this.envoie_bl_mail;
		}

		public Boolean envoie_bl_web;

		public Boolean getEnvoie_bl_web() {
			return this.envoie_bl_web;
		}

		public Boolean envoie_facture_mail;

		public Boolean getEnvoie_facture_mail() {
			return this.envoie_facture_mail;
		}

		public Boolean envoie_facture_web;

		public Boolean getEnvoie_facture_web() {
			return this.envoie_facture_web;
		}

		public String facturation_releve;

		public String getFacturation_releve() {
			return this.facturation_releve;
		}

		public Boolean facture_chorus;

		public Boolean getFacture_chorus() {
			return this.facture_chorus;
		}

		public Boolean facture_edi;

		public Boolean getFacture_edi() {
			return this.facture_edi;
		}

		public Boolean gestion_fidelite;

		public Boolean getGestion_fidelite() {
			return this.gestion_fidelite;
		}

		public Boolean gestion_reliquat;

		public Boolean getGestion_reliquat() {
			return this.gestion_reliquat;
		}

		public Boolean internet;

		public Boolean getInternet() {
			return this.internet;
		}

		public Integer nb_bon_liv;

		public Integer getNb_bon_liv() {
			return this.nb_bon_liv;
		}

		public Integer nombre_facture;

		public Integer getNombre_facture() {
			return this.nombre_facture;
		}

		public Boolean prix_net;

		public Boolean getPrix_net() {
			return this.prix_net;
		}

		public Boolean publipostage;

		public Boolean getPublipostage() {
			return this.publipostage;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idparamclient;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortie_1Struct other = (copyOfsortie_1Struct) obj;

			if (this.idparamclient != other.idparamclient)
				return false;

			return true;
		}

		public void copyDataTo(copyOfsortie_1Struct other) {

			other.idparamclient = this.idparamclient;
			other.affacturage = this.affacturage;
			other.affichage = this.affichage;
			other.bl_chiffre_en_ligne = this.bl_chiffre_en_ligne;
			other.bl_chiffre_en_total = this.bl_chiffre_en_total;
			other.chorus_service = this.chorus_service;
			other.coef_majo_factu = this.coef_majo_factu;
			other.controle_cde = this.controle_cde;
			other.edition_pn_remise = this.edition_pn_remise;
			other.envoie_bl_mail = this.envoie_bl_mail;
			other.envoie_bl_web = this.envoie_bl_web;
			other.envoie_facture_mail = this.envoie_facture_mail;
			other.envoie_facture_web = this.envoie_facture_web;
			other.facturation_releve = this.facturation_releve;
			other.facture_chorus = this.facture_chorus;
			other.facture_edi = this.facture_edi;
			other.gestion_fidelite = this.gestion_fidelite;
			other.gestion_reliquat = this.gestion_reliquat;
			other.internet = this.internet;
			other.nb_bon_liv = this.nb_bon_liv;
			other.nombre_facture = this.nombre_facture;
			other.prix_net = this.prix_net;
			other.publipostage = this.publipostage;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfsortie_1Struct other) {

			other.idparamclient = this.idparamclient;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idparamclient = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.affacturage = null;
					} else {
						this.affacturage = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.affichage = null;
					} else {
						this.affichage = dis.readBoolean();
					}

					this.bl_chiffre_en_ligne = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bl_chiffre_en_total = null;
					} else {
						this.bl_chiffre_en_total = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.chorus_service = null;
					} else {
						this.chorus_service = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_majo_factu = null;
					} else {
						this.coef_majo_factu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.controle_cde = null;
					} else {
						this.controle_cde = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.edition_pn_remise = null;
					} else {
						this.edition_pn_remise = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_bl_mail = null;
					} else {
						this.envoie_bl_mail = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_bl_web = null;
					} else {
						this.envoie_bl_web = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_facture_mail = null;
					} else {
						this.envoie_facture_mail = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_facture_web = null;
					} else {
						this.envoie_facture_web = dis.readBoolean();
					}

					this.facturation_releve = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.facture_chorus = null;
					} else {
						this.facture_chorus = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.facture_edi = null;
					} else {
						this.facture_edi = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.gestion_fidelite = null;
					} else {
						this.gestion_fidelite = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.gestion_reliquat = null;
					} else {
						this.gestion_reliquat = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.internet = null;
					} else {
						this.internet = dis.readBoolean();
					}

					this.nb_bon_liv = readInteger(dis);

					this.nombre_facture = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_net = null;
					} else {
						this.prix_net = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.publipostage = null;
					} else {
						this.publipostage = dis.readBoolean();
					}

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idparamclient);

				// Boolean

				if (this.affacturage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.affacturage);
				}

				// Boolean

				if (this.affichage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.affichage);
				}

				// String

				writeString(this.bl_chiffre_en_ligne, dos);

				// Boolean

				if (this.bl_chiffre_en_total == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bl_chiffre_en_total);
				}

				// Boolean

				if (this.chorus_service == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.chorus_service);
				}

				// Float

				if (this.coef_majo_factu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_majo_factu);
				}

				// Boolean

				if (this.controle_cde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.controle_cde);
				}

				// Boolean

				if (this.edition_pn_remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.edition_pn_remise);
				}

				// Boolean

				if (this.envoie_bl_mail == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_bl_mail);
				}

				// Boolean

				if (this.envoie_bl_web == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_bl_web);
				}

				// Boolean

				if (this.envoie_facture_mail == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_facture_mail);
				}

				// Boolean

				if (this.envoie_facture_web == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_facture_web);
				}

				// String

				writeString(this.facturation_releve, dos);

				// Boolean

				if (this.facture_chorus == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.facture_chorus);
				}

				// Boolean

				if (this.facture_edi == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.facture_edi);
				}

				// Boolean

				if (this.gestion_fidelite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.gestion_fidelite);
				}

				// Boolean

				if (this.gestion_reliquat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.gestion_reliquat);
				}

				// Boolean

				if (this.internet == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.internet);
				}

				// Integer

				writeInteger(this.nb_bon_liv, dos);

				// Integer

				writeInteger(this.nombre_facture, dos);

				// Boolean

				if (this.prix_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.prix_net);
				}

				// Boolean

				if (this.publipostage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.publipostage);
				}

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idparamclient=" + String.valueOf(idparamclient));
			sb.append(",affacturage=" + String.valueOf(affacturage));
			sb.append(",affichage=" + String.valueOf(affichage));
			sb.append(",bl_chiffre_en_ligne=" + bl_chiffre_en_ligne);
			sb.append(",bl_chiffre_en_total=" + String.valueOf(bl_chiffre_en_total));
			sb.append(",chorus_service=" + String.valueOf(chorus_service));
			sb.append(",coef_majo_factu=" + String.valueOf(coef_majo_factu));
			sb.append(",controle_cde=" + String.valueOf(controle_cde));
			sb.append(",edition_pn_remise=" + String.valueOf(edition_pn_remise));
			sb.append(",envoie_bl_mail=" + String.valueOf(envoie_bl_mail));
			sb.append(",envoie_bl_web=" + String.valueOf(envoie_bl_web));
			sb.append(",envoie_facture_mail=" + String.valueOf(envoie_facture_mail));
			sb.append(",envoie_facture_web=" + String.valueOf(envoie_facture_web));
			sb.append(",facturation_releve=" + facturation_releve);
			sb.append(",facture_chorus=" + String.valueOf(facture_chorus));
			sb.append(",facture_edi=" + String.valueOf(facture_edi));
			sb.append(",gestion_fidelite=" + String.valueOf(gestion_fidelite));
			sb.append(",gestion_reliquat=" + String.valueOf(gestion_reliquat));
			sb.append(",internet=" + String.valueOf(internet));
			sb.append(",nb_bon_liv=" + String.valueOf(nb_bon_liv));
			sb.append(",nombre_facture=" + String.valueOf(nombre_facture));
			sb.append(",prix_net=" + String.valueOf(prix_net));
			sb.append(",publipostage=" + String.valueOf(publipostage));
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idparamclient, other.idparamclient);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				copyOfsortie_1Struct copyOfsortie_1 = new copyOfsortie_1Struct();

				/**
				 * [tDBOutput_20 begin ] start
				 */

				ok_Hash.put("tDBOutput_20", false);
				start_Hash.put("tDBOutput_20", System.currentTimeMillis());

				currentComponent = "tDBOutput_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie_1");
				}

				int tos_count_tDBOutput_20 = 0;

				String dbschema_tDBOutput_20 = null;
				dbschema_tDBOutput_20 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_20 = null;
				if (dbschema_tDBOutput_20 == null || dbschema_tDBOutput_20.trim().length() == 0) {
					tableName_tDBOutput_20 = ("param_client");
				} else {
					tableName_tDBOutput_20 = dbschema_tDBOutput_20 + "\".\"" + ("param_client");
				}

				int nb_line_tDBOutput_20 = 0;
				int nb_line_update_tDBOutput_20 = 0;
				int nb_line_inserted_tDBOutput_20 = 0;
				int nb_line_deleted_tDBOutput_20 = 0;
				int nb_line_rejected_tDBOutput_20 = 0;

				int deletedCount_tDBOutput_20 = 0;
				int updatedCount_tDBOutput_20 = 0;
				int insertedCount_tDBOutput_20 = 0;
				int rejectedCount_tDBOutput_20 = 0;

				boolean whetherReject_tDBOutput_20 = false;

				java.sql.Connection conn_tDBOutput_20 = null;
				String dbUser_tDBOutput_20 = null;

				conn_tDBOutput_20 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_20 = 10000;
				int batchSizeCounter_tDBOutput_20 = 0;

				int count_tDBOutput_20 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_20 = conn_tDBOutput_20.createStatement()) {
					stmtClear_tDBOutput_20.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_20 + "\"");
				}
				String insert_tDBOutput_20 = "INSERT INTO \"" + tableName_tDBOutput_20
						+ "\" (\"idparamclient\",\"affacturage\",\"affichage\",\"bl_chiffre_en_ligne\",\"bl_chiffre_en_total\",\"chorus_service\",\"coef_majo_factu\",\"controle_cde\",\"edition_pn_remise\",\"envoie_bl_mail\",\"envoie_bl_web\",\"envoie_facture_mail\",\"envoie_facture_web\",\"facturation_releve\",\"facture_chorus\",\"facture_edi\",\"gestion_fidelite\",\"gestion_reliquat\",\"internet\",\"nb_bon_liv\",\"nombre_facture\",\"prix_net\",\"publipostage\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_20 = conn_tDBOutput_20.prepareStatement(insert_tDBOutput_20);
				resourceMap.put("pstmt_tDBOutput_20", pstmt_tDBOutput_20);

				/**
				 * [tDBOutput_20 begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				currentComponent = "tMap_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tMap_19 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_1Struct copyOfsortie_1_tmp = new copyOfsortie_1Struct();
// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_19", false);
				start_Hash.put("tFileInputDelimited_19", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_19";

				int tos_count_tFileInputDelimited_19 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_19 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_19 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_19,
							row18Struct row18) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_19 = 0;

						columnIndexWithD_tFileInputDelimited_19 = 0;

						row18.CREF = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 1;

						row18.CNOM = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 2;

						row18.CRUE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 3;

						row18.CAUX = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 4;

						row18.CCPTL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 5;

						row18.CVIL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 6;

						row18.FILL01 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 7;

						row18.CQUAL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 8;

						row18.CCOM1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 9;

						row18.CCREP = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 10;

						row18.CREMFI = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 11;

						row18.CECHE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 12;

						row18.CECHJ = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 13;

						row18.CPAI = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 14;

						row18.CCHAN = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 15;

						row18.CECHJ2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 16;

						row18.CMOD = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 17;

						row18.CBQ1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 18;

						row18.CBQ2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 19;

						row18.CBQ3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 20;

						row18.CBQ4 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 21;

						row18.CBQ5 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 22;

						row18.CBQ6 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 23;

						row18.CFACT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 24;

						row18.CBL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 25;

						row18.CESC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 26;

						row18.VARAD1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 27;

						row18.VARAD2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 28;

						row18.VARAD3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 29;

						row18.VARAD4 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 30;

						row18.VARAD5 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 31;

						row18.VARAD6 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 32;

						row18.VARA1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 33;

						row18.VARA2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 34;

						row18.VARA3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 35;

						row18.VARA4 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 36;

						row18.VARA5 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 37;

						row18.VARB1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 38;

						row18.VARB2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 39;

						row18.VARB3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 40;

						row18.VARB4 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 41;

						row18.VARB5 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 42;

						row18.VARN1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 43;

						row18.VARN2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 44;

						row18.VARN3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 45;

						row18.VARN4 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 46;

						row18.VARN5 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 47;

						row18.CDATCRE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 48;

						row18.CTEL1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 49;

						row18.CTEL2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 50;

						row18.CTEX1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 51;

						row18.CTEX2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 52;

						row18.CDELMOY = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 53;

						row18.CAFFAIRE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 54;

						row18.CCPTFACT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 55;

						row18.CINTERNET = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 56;

						row18.CIBAN1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 57;

						row18.CBIC_old = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 58;

						row18.CFIDEL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 59;

						row18.CRFA = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 60;

						row18.CCOMREG = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 61;

						row18.CAPE2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 62;

						row18.CIBAN72 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 63;

						row18.CIBAN8 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 64;

						row18.CIBAN9 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 65;

						row18.CBIC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 66;

						row18.CTRANSP = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 67;

						row18.CFACTMAIL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 68;

						row18.CBLMAIL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 69;

						row18.CFACTWEB = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 70;

						row18.CBLWEB = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 71;

						row18.CPUBLIPOSTAGE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 72;

						row18.CFACT_EDI = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 73;

						row18.CFACT_CHORUS = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 74;

						row18.CFACTORING = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 75;

						row18.CCHORUS_SERVICE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 76;

						row18.CFIL14 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 77;

						row18.CTAR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 78;

						row18.FIL02 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 79;

						row18.CREJ = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 80;

						row18.CSECT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 81;

						row18.CTOUR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 82;

						row18.CCAN1 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 83;

						row18.CCAN2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 84;

						row18.CCAN3 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 85;

						row18.CDATF = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 86;

						row18.CCAT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 87;

						row18.CRESP = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 88;

						row18.CAPE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 89;

						row18.CPREMC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 90;

						row18.CDERNC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 91;

						row18.CPROCC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 92;

						row18.CTYPEC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 93;

						row18.CSIRET = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 94;

						row18.CORIGIN = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 95;

						row18.CMOTCOUR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 96;

						row18.CCOMPTA = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 97;

						row18.CAFFMEMO = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 98;

						row18.CFIL2 = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 99;

						row18.CPNAFF = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_19,
							row18Struct row18) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_19 = 0;

						columnIndexWithD_tFileInputDelimited_19 = 100;

						row18.CDEVTAR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 101;

						row18.CMINCOM = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 102;

						row18.CRELEVE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 103;

						row18.CRELIQ = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 104;

						row18.CMAJ = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 105;

						row18.CECH = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 106;

						row18.CETIQ = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 107;

						row18.CCOEF = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 108;

						row18.CARROND = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 109;

						row18.CENCOUR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 110;

						row18.CNIVREL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 111;

						row18.CBLOCAG = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 112;

						row18.CDATREL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 113;

						row18.CRESCO = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 114;

						row18.CRESFI = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 115;

						row18.CSFAC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 116;

						row18.CDATENC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 117;

						row18.CDATSFA = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 118;

						row18.CCONTR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 119;

						row18.CDEREL = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 120;

						row18.CPAYS = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 121;

						row18.CBLTOT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 122;

						row18.CBLLIG = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 123;

						row18.CENCDIS = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 124;

						row18.CNCEE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 125;

						row18.CNSFAC = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 126;

						row18.CPSRDAT = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 127;

						row18.CEPNASR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 128;

						row18.CCODTAR = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

						columnIndexWithD_tFileInputDelimited_19 = 129;

						row18.CDEVISE = fid_tFileInputDelimited_19.get(columnIndexWithD_tFileInputDelimited_19);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_19,
							row18Struct row18) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_19, row18);

						valueToConn_1(fid_tFileInputDelimited_19, row18);

					}

				}
				RowHelper_tFileInputDelimited_19 rowHelper_tFileInputDelimited_19 = new RowHelper_tFileInputDelimited_19();

				int nb_line_tFileInputDelimited_19 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_19 = null;
				int limit_tFileInputDelimited_19 = -1;
				try {

					Object filename_tFileInputDelimited_19 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_19 = 0, random_value_tFileInputDelimited_19 = -1;
						if (footer_value_tFileInputDelimited_19 > 0 || random_value_tFileInputDelimited_19 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_19 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_19, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_19 != null && fid_tFileInputDelimited_19.nextRecord()) {
						rowstate_tFileInputDelimited_19.reset();

						row18 = null;

						boolean whetherReject_tFileInputDelimited_19 = false;
						row18 = new row18Struct();
						try {

							rowHelper_tFileInputDelimited_19.valueToConn(fid_tFileInputDelimited_19, row18);

							if (rowstate_tFileInputDelimited_19.getException() != null) {
								throw rowstate_tFileInputDelimited_19.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_19 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_19 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_19 main ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						tos_count_tFileInputDelimited_19++;

						/**
						 * [tFileInputDelimited_19 main ] stop
						 */

						/**
						 * [tFileInputDelimited_19 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						/**
						 * [tFileInputDelimited_19 process_data_begin ] stop
						 */
// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tMap_19 main ] start
							 */

							currentComponent = "tMap_19";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_19 = false;
							boolean mainRowRejected_tMap_19 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie_1 = null;

// # Output table : 'copyOfsortie_1'
								copyOfsortie_1_tmp.idparamclient = Numeric.sequence("s4", 1, 1);
								copyOfsortie_1_tmp.affacturage = row18.CFACTORING.equals("N") ? false : true;
								copyOfsortie_1_tmp.affichage = row18.CAFFMEMO.equals("O") ? true : false;
								copyOfsortie_1_tmp.bl_chiffre_en_ligne = row18.CBLLIG;
								copyOfsortie_1_tmp.bl_chiffre_en_total = row18.CBLTOT.equals("N") ? false : true;
								copyOfsortie_1_tmp.chorus_service = row18.CCHORUS_SERVICE.equals("N") ? false : true;
								copyOfsortie_1_tmp.coef_majo_factu = new Float(row18.CMAJ);
								copyOfsortie_1_tmp.controle_cde = row18.CCONTR.equals("N") ? false : true;
								copyOfsortie_1_tmp.edition_pn_remise = row18.CEPNASR.equals("N") ? false : true;
								copyOfsortie_1_tmp.envoie_bl_mail = row18.CBLMAIL.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_bl_web = row18.CBLWEB.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_facture_mail = row18.CFACTMAIL.equals("O") ? true : false;
								copyOfsortie_1_tmp.envoie_facture_web = row18.CFACTWEB.equals("O") ? true : false;
								copyOfsortie_1_tmp.facturation_releve = row18.CRELEVE;
								copyOfsortie_1_tmp.facture_chorus = row18.CFACT_CHORUS.equals("O") ? true : false;
								copyOfsortie_1_tmp.facture_edi = row18.CFACT_EDI.equals("N") ? false : true;
								copyOfsortie_1_tmp.gestion_fidelite = row18.CFIDEL.equals("O") ? true : false;
								copyOfsortie_1_tmp.gestion_reliquat = row18.CRELIQ.equals("O") ? true : false;
								copyOfsortie_1_tmp.internet = row18.CINTERNET.equals("O") ? true : false;
								copyOfsortie_1_tmp.nb_bon_liv = new Integer(row18.CBL);
								copyOfsortie_1_tmp.nombre_facture = Integer.parseInt(row18.CFACT);
								copyOfsortie_1_tmp.prix_net = row18.CPNAFF.equals("N") ? false : true;
								copyOfsortie_1_tmp.publipostage = row18.CPUBLIPOSTAGE.isBlank() ? false : true;
								copyOfsortie_1_tmp.idcli = row18.CREF;
								copyOfsortie_1 = copyOfsortie_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_19 = false;

							tos_count_tMap_19++;

							/**
							 * [tMap_19 main ] stop
							 */

							/**
							 * [tMap_19 process_data_begin ] start
							 */

							currentComponent = "tMap_19";

							/**
							 * [tMap_19 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie_1"
							if (copyOfsortie_1 != null) {

								/**
								 * [tDBOutput_20 main ] start
								 */

								currentComponent = "tDBOutput_20";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie_1");
								}

								whetherReject_tDBOutput_20 = false;
								pstmt_tDBOutput_20.setInt(1, copyOfsortie_1.idparamclient);

								if (copyOfsortie_1.affacturage == null) {
									pstmt_tDBOutput_20.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(2, copyOfsortie_1.affacturage);
								}

								if (copyOfsortie_1.affichage == null) {
									pstmt_tDBOutput_20.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(3, copyOfsortie_1.affichage);
								}

								if (copyOfsortie_1.bl_chiffre_en_ligne == null) {
									pstmt_tDBOutput_20.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_20.setString(4, copyOfsortie_1.bl_chiffre_en_ligne);
								}

								if (copyOfsortie_1.bl_chiffre_en_total == null) {
									pstmt_tDBOutput_20.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(5, copyOfsortie_1.bl_chiffre_en_total);
								}

								if (copyOfsortie_1.chorus_service == null) {
									pstmt_tDBOutput_20.setNull(6, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(6, copyOfsortie_1.chorus_service);
								}

								if (copyOfsortie_1.coef_majo_factu == null) {
									pstmt_tDBOutput_20.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_20.setFloat(7, copyOfsortie_1.coef_majo_factu);
								}

								if (copyOfsortie_1.controle_cde == null) {
									pstmt_tDBOutput_20.setNull(8, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(8, copyOfsortie_1.controle_cde);
								}

								if (copyOfsortie_1.edition_pn_remise == null) {
									pstmt_tDBOutput_20.setNull(9, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(9, copyOfsortie_1.edition_pn_remise);
								}

								if (copyOfsortie_1.envoie_bl_mail == null) {
									pstmt_tDBOutput_20.setNull(10, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(10, copyOfsortie_1.envoie_bl_mail);
								}

								if (copyOfsortie_1.envoie_bl_web == null) {
									pstmt_tDBOutput_20.setNull(11, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(11, copyOfsortie_1.envoie_bl_web);
								}

								if (copyOfsortie_1.envoie_facture_mail == null) {
									pstmt_tDBOutput_20.setNull(12, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(12, copyOfsortie_1.envoie_facture_mail);
								}

								if (copyOfsortie_1.envoie_facture_web == null) {
									pstmt_tDBOutput_20.setNull(13, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(13, copyOfsortie_1.envoie_facture_web);
								}

								if (copyOfsortie_1.facturation_releve == null) {
									pstmt_tDBOutput_20.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_20.setString(14, copyOfsortie_1.facturation_releve);
								}

								if (copyOfsortie_1.facture_chorus == null) {
									pstmt_tDBOutput_20.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(15, copyOfsortie_1.facture_chorus);
								}

								if (copyOfsortie_1.facture_edi == null) {
									pstmt_tDBOutput_20.setNull(16, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(16, copyOfsortie_1.facture_edi);
								}

								if (copyOfsortie_1.gestion_fidelite == null) {
									pstmt_tDBOutput_20.setNull(17, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(17, copyOfsortie_1.gestion_fidelite);
								}

								if (copyOfsortie_1.gestion_reliquat == null) {
									pstmt_tDBOutput_20.setNull(18, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(18, copyOfsortie_1.gestion_reliquat);
								}

								if (copyOfsortie_1.internet == null) {
									pstmt_tDBOutput_20.setNull(19, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(19, copyOfsortie_1.internet);
								}

								if (copyOfsortie_1.nb_bon_liv == null) {
									pstmt_tDBOutput_20.setNull(20, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_20.setInt(20, copyOfsortie_1.nb_bon_liv);
								}

								if (copyOfsortie_1.nombre_facture == null) {
									pstmt_tDBOutput_20.setNull(21, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_20.setInt(21, copyOfsortie_1.nombre_facture);
								}

								if (copyOfsortie_1.prix_net == null) {
									pstmt_tDBOutput_20.setNull(22, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(22, copyOfsortie_1.prix_net);
								}

								if (copyOfsortie_1.publipostage == null) {
									pstmt_tDBOutput_20.setNull(23, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_20.setBoolean(23, copyOfsortie_1.publipostage);
								}

								if (copyOfsortie_1.idcli == null) {
									pstmt_tDBOutput_20.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_20.setString(24, copyOfsortie_1.idcli);
								}

								pstmt_tDBOutput_20.addBatch();
								nb_line_tDBOutput_20++;

								batchSizeCounter_tDBOutput_20++;

								if ((batchSize_tDBOutput_20 > 0)
										&& (batchSize_tDBOutput_20 <= batchSizeCounter_tDBOutput_20)) {
									try {
										int countSum_tDBOutput_20 = 0;

										for (int countEach_tDBOutput_20 : pstmt_tDBOutput_20.executeBatch()) {
											countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0
													: countEach_tDBOutput_20);
										}

										insertedCount_tDBOutput_20 += countSum_tDBOutput_20;

										batchSizeCounter_tDBOutput_20 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_20) {
										java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),
												sqle_tDBOutput_20 = null;
										String errormessage_tDBOutput_20;
										if (ne_tDBOutput_20 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_20 = new java.sql.SQLException(
													e_tDBOutput_20.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_20.getMessage(),
													ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(),
													ne_tDBOutput_20);
											errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
										} else {
											errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
										}

										int countSum_tDBOutput_20 = 0;
										for (int countEach_tDBOutput_20 : e_tDBOutput_20.getUpdateCounts()) {
											countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0
													: countEach_tDBOutput_20);
										}

										insertedCount_tDBOutput_20 += countSum_tDBOutput_20;

										System.err.println(errormessage_tDBOutput_20);

									}
								}

								tos_count_tDBOutput_20++;

								/**
								 * [tDBOutput_20 main ] stop
								 */

								/**
								 * [tDBOutput_20 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_20";

								/**
								 * [tDBOutput_20 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_20 process_data_end ] start
								 */

								currentComponent = "tDBOutput_20";

								/**
								 * [tDBOutput_20 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie_1"

							/**
							 * [tMap_19 process_data_end ] start
							 */

							currentComponent = "tMap_19";

							/**
							 * [tMap_19 process_data_end ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_19 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						/**
						 * [tFileInputDelimited_19 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_19 end ] start
						 */

						currentComponent = "tFileInputDelimited_19";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_19 != null) {
							fid_tFileInputDelimited_19.close();
						}
					}
					if (fid_tFileInputDelimited_19 != null) {
						globalMap.put("tFileInputDelimited_19_NB_LINE", fid_tFileInputDelimited_19.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_19", true);
				end_Hash.put("tFileInputDelimited_19", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_19 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tDBOutput_20 end ] start
				 */

				currentComponent = "tDBOutput_20";

				try {
					int countSum_tDBOutput_20 = 0;
					if (pstmt_tDBOutput_20 != null && batchSizeCounter_tDBOutput_20 > 0) {

						for (int countEach_tDBOutput_20 : pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}

					}

					insertedCount_tDBOutput_20 += countSum_tDBOutput_20;

				} catch (java.sql.BatchUpdateException e_tDBOutput_20) {
					java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(), sqle_tDBOutput_20 = null;
					String errormessage_tDBOutput_20;
					if (ne_tDBOutput_20 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_20 = new java.sql.SQLException(
								e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(),
								ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
						errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
					} else {
						errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
					}

					int countSum_tDBOutput_20 = 0;
					for (int countEach_tDBOutput_20 : e_tDBOutput_20.getUpdateCounts()) {
						countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
					}

					insertedCount_tDBOutput_20 += countSum_tDBOutput_20;

					System.err.println(errormessage_tDBOutput_20);

				}

				if (pstmt_tDBOutput_20 != null) {

					pstmt_tDBOutput_20.close();
					resourceMap.remove("pstmt_tDBOutput_20");
				}
				resourceMap.put("statementClosed_tDBOutput_20", true);

				nb_line_deleted_tDBOutput_20 = nb_line_deleted_tDBOutput_20 + deletedCount_tDBOutput_20;
				nb_line_update_tDBOutput_20 = nb_line_update_tDBOutput_20 + updatedCount_tDBOutput_20;
				nb_line_inserted_tDBOutput_20 = nb_line_inserted_tDBOutput_20 + insertedCount_tDBOutput_20;
				nb_line_rejected_tDBOutput_20 = nb_line_rejected_tDBOutput_20 + rejectedCount_tDBOutput_20;

				globalMap.put("tDBOutput_20_NB_LINE", nb_line_tDBOutput_20);
				globalMap.put("tDBOutput_20_NB_LINE_UPDATED", nb_line_update_tDBOutput_20);
				globalMap.put("tDBOutput_20_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_20);
				globalMap.put("tDBOutput_20_NB_LINE_DELETED", nb_line_deleted_tDBOutput_20);
				globalMap.put("tDBOutput_20_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_20);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie_1");
				}

				ok_Hash.put("tDBOutput_20", true);
				end_Hash.put("tDBOutput_20", System.currentTimeMillis());

				/**
				 * [tDBOutput_20 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_19:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tFileInputDelimited_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_19 finally ] start
				 */

				currentComponent = "tFileInputDelimited_19";

				/**
				 * [tFileInputDelimited_19 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tDBOutput_20 finally ] start
				 */

				currentComponent = "tDBOutput_20";

				if (resourceMap.get("statementClosed_tDBOutput_20") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_20 = null;
					if ((pstmtToClose_tDBOutput_20 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_20")) != null) {
						pstmtToClose_tDBOutput_20.close();
					}
				}

				/**
				 * [tDBOutput_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfsortieStruct implements routines.system.IPersistableRow<copyOfcopyOfsortieStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idvariable;

		public int getIdvariable() {
			return this.idvariable;
		}

		public String champ_libre_10char_1;

		public String getChamp_libre_10char_1() {
			return this.champ_libre_10char_1;
		}

		public String champ_libre_10char_2;

		public String getChamp_libre_10char_2() {
			return this.champ_libre_10char_2;
		}

		public String champ_libre_10char_3;

		public String getChamp_libre_10char_3() {
			return this.champ_libre_10char_3;
		}

		public String champ_libre_10char_4;

		public String getChamp_libre_10char_4() {
			return this.champ_libre_10char_4;
		}

		public String champ_libre_10char_5;

		public String getChamp_libre_10char_5() {
			return this.champ_libre_10char_5;
		}

		public String champ_libre_20char_1;

		public String getChamp_libre_20char_1() {
			return this.champ_libre_20char_1;
		}

		public String champ_libre_20char_2;

		public String getChamp_libre_20char_2() {
			return this.champ_libre_20char_2;
		}

		public String champ_libre_20char_3;

		public String getChamp_libre_20char_3() {
			return this.champ_libre_20char_3;
		}

		public String champ_libre_20char_4;

		public String getChamp_libre_20char_4() {
			return this.champ_libre_20char_4;
		}

		public String champ_libre_20char_5;

		public String getChamp_libre_20char_5() {
			return this.champ_libre_20char_5;
		}

		public Float champ_libre_6digits_1;

		public Float getChamp_libre_6digits_1() {
			return this.champ_libre_6digits_1;
		}

		public Float champ_libre_6digits_2;

		public Float getChamp_libre_6digits_2() {
			return this.champ_libre_6digits_2;
		}

		public Float champ_libre_6digits_3;

		public Float getChamp_libre_6digits_3() {
			return this.champ_libre_6digits_3;
		}

		public Float champ_libre_6digits_4;

		public Float getChamp_libre_6digits_4() {
			return this.champ_libre_6digits_4;
		}

		public Float champ_libre_6digits_5;

		public Float getChamp_libre_6digits_5() {
			return this.champ_libre_6digits_5;
		}

		public String date_1;

		public String getDate_1() {
			return this.date_1;
		}

		public String date_2;

		public String getDate_2() {
			return this.date_2;
		}

		public String date_3;

		public String getDate_3() {
			return this.date_3;
		}

		public String date_4;

		public String getDate_4() {
			return this.date_4;
		}

		public String date_5;

		public String getDate_5() {
			return this.date_5;
		}

		public String date_6;

		public String getDate_6() {
			return this.date_6;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idvariable;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfsortieStruct other = (copyOfcopyOfsortieStruct) obj;

			if (this.idvariable != other.idvariable)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfsortieStruct other) {

			other.idvariable = this.idvariable;
			other.champ_libre_10char_1 = this.champ_libre_10char_1;
			other.champ_libre_10char_2 = this.champ_libre_10char_2;
			other.champ_libre_10char_3 = this.champ_libre_10char_3;
			other.champ_libre_10char_4 = this.champ_libre_10char_4;
			other.champ_libre_10char_5 = this.champ_libre_10char_5;
			other.champ_libre_20char_1 = this.champ_libre_20char_1;
			other.champ_libre_20char_2 = this.champ_libre_20char_2;
			other.champ_libre_20char_3 = this.champ_libre_20char_3;
			other.champ_libre_20char_4 = this.champ_libre_20char_4;
			other.champ_libre_20char_5 = this.champ_libre_20char_5;
			other.champ_libre_6digits_1 = this.champ_libre_6digits_1;
			other.champ_libre_6digits_2 = this.champ_libre_6digits_2;
			other.champ_libre_6digits_3 = this.champ_libre_6digits_3;
			other.champ_libre_6digits_4 = this.champ_libre_6digits_4;
			other.champ_libre_6digits_5 = this.champ_libre_6digits_5;
			other.date_1 = this.date_1;
			other.date_2 = this.date_2;
			other.date_3 = this.date_3;
			other.date_4 = this.date_4;
			other.date_5 = this.date_5;
			other.date_6 = this.date_6;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfsortieStruct other) {

			other.idvariable = this.idvariable;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idvariable = dis.readInt();

					this.champ_libre_10char_1 = readString(dis);

					this.champ_libre_10char_2 = readString(dis);

					this.champ_libre_10char_3 = readString(dis);

					this.champ_libre_10char_4 = readString(dis);

					this.champ_libre_10char_5 = readString(dis);

					this.champ_libre_20char_1 = readString(dis);

					this.champ_libre_20char_2 = readString(dis);

					this.champ_libre_20char_3 = readString(dis);

					this.champ_libre_20char_4 = readString(dis);

					this.champ_libre_20char_5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_1 = null;
					} else {
						this.champ_libre_6digits_1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_2 = null;
					} else {
						this.champ_libre_6digits_2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_3 = null;
					} else {
						this.champ_libre_6digits_3 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_4 = null;
					} else {
						this.champ_libre_6digits_4 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.champ_libre_6digits_5 = null;
					} else {
						this.champ_libre_6digits_5 = dis.readFloat();
					}

					this.date_1 = readString(dis);

					this.date_2 = readString(dis);

					this.date_3 = readString(dis);

					this.date_4 = readString(dis);

					this.date_5 = readString(dis);

					this.date_6 = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idvariable);

				// String

				writeString(this.champ_libre_10char_1, dos);

				// String

				writeString(this.champ_libre_10char_2, dos);

				// String

				writeString(this.champ_libre_10char_3, dos);

				// String

				writeString(this.champ_libre_10char_4, dos);

				// String

				writeString(this.champ_libre_10char_5, dos);

				// String

				writeString(this.champ_libre_20char_1, dos);

				// String

				writeString(this.champ_libre_20char_2, dos);

				// String

				writeString(this.champ_libre_20char_3, dos);

				// String

				writeString(this.champ_libre_20char_4, dos);

				// String

				writeString(this.champ_libre_20char_5, dos);

				// Float

				if (this.champ_libre_6digits_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_1);
				}

				// Float

				if (this.champ_libre_6digits_2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_2);
				}

				// Float

				if (this.champ_libre_6digits_3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_3);
				}

				// Float

				if (this.champ_libre_6digits_4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_4);
				}

				// Float

				if (this.champ_libre_6digits_5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.champ_libre_6digits_5);
				}

				// String

				writeString(this.date_1, dos);

				// String

				writeString(this.date_2, dos);

				// String

				writeString(this.date_3, dos);

				// String

				writeString(this.date_4, dos);

				// String

				writeString(this.date_5, dos);

				// String

				writeString(this.date_6, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idvariable=" + String.valueOf(idvariable));
			sb.append(",champ_libre_10char_1=" + champ_libre_10char_1);
			sb.append(",champ_libre_10char_2=" + champ_libre_10char_2);
			sb.append(",champ_libre_10char_3=" + champ_libre_10char_3);
			sb.append(",champ_libre_10char_4=" + champ_libre_10char_4);
			sb.append(",champ_libre_10char_5=" + champ_libre_10char_5);
			sb.append(",champ_libre_20char_1=" + champ_libre_20char_1);
			sb.append(",champ_libre_20char_2=" + champ_libre_20char_2);
			sb.append(",champ_libre_20char_3=" + champ_libre_20char_3);
			sb.append(",champ_libre_20char_4=" + champ_libre_20char_4);
			sb.append(",champ_libre_20char_5=" + champ_libre_20char_5);
			sb.append(",champ_libre_6digits_1=" + String.valueOf(champ_libre_6digits_1));
			sb.append(",champ_libre_6digits_2=" + String.valueOf(champ_libre_6digits_2));
			sb.append(",champ_libre_6digits_3=" + String.valueOf(champ_libre_6digits_3));
			sb.append(",champ_libre_6digits_4=" + String.valueOf(champ_libre_6digits_4));
			sb.append(",champ_libre_6digits_5=" + String.valueOf(champ_libre_6digits_5));
			sb.append(",date_1=" + date_1);
			sb.append(",date_2=" + date_2);
			sb.append(",date_3=" + date_3);
			sb.append(",date_4=" + date_4);
			sb.append(",date_5=" + date_5);
			sb.append(",date_6=" + date_6);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortieStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idvariable, other.idvariable);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				copyOfcopyOfsortieStruct copyOfcopyOfsortie = new copyOfcopyOfsortieStruct();

				/**
				 * [tDBOutput_21 begin ] start
				 */

				ok_Hash.put("tDBOutput_21", false);
				start_Hash.put("tDBOutput_21", System.currentTimeMillis());

				currentComponent = "tDBOutput_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfsortie");
				}

				int tos_count_tDBOutput_21 = 0;

				String dbschema_tDBOutput_21 = null;
				dbschema_tDBOutput_21 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_21 = null;
				if (dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
					tableName_tDBOutput_21 = ("variable_temporaire");
				} else {
					tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("variable_temporaire");
				}

				int nb_line_tDBOutput_21 = 0;
				int nb_line_update_tDBOutput_21 = 0;
				int nb_line_inserted_tDBOutput_21 = 0;
				int nb_line_deleted_tDBOutput_21 = 0;
				int nb_line_rejected_tDBOutput_21 = 0;

				int deletedCount_tDBOutput_21 = 0;
				int updatedCount_tDBOutput_21 = 0;
				int insertedCount_tDBOutput_21 = 0;
				int rejectedCount_tDBOutput_21 = 0;

				boolean whetherReject_tDBOutput_21 = false;

				java.sql.Connection conn_tDBOutput_21 = null;
				String dbUser_tDBOutput_21 = null;

				conn_tDBOutput_21 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_21 = 10000;
				int batchSizeCounter_tDBOutput_21 = 0;

				int count_tDBOutput_21 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_21 = conn_tDBOutput_21.createStatement()) {
					stmtClear_tDBOutput_21.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_21 + "\"");
				}
				String insert_tDBOutput_21 = "INSERT INTO \"" + tableName_tDBOutput_21
						+ "\" (\"idvariable\",\"champ_libre_10char_1\",\"champ_libre_10char_2\",\"champ_libre_10char_3\",\"champ_libre_10char_4\",\"champ_libre_10char_5\",\"champ_libre_20char_1\",\"champ_libre_20char_2\",\"champ_libre_20char_3\",\"champ_libre_20char_4\",\"champ_libre_20char_5\",\"champ_libre_6digits_1\",\"champ_libre_6digits_2\",\"champ_libre_6digits_3\",\"champ_libre_6digits_4\",\"champ_libre_6digits_5\",\"date_1\",\"date_2\",\"date_3\",\"date_4\",\"date_5\",\"date_6\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(insert_tDBOutput_21);
				resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);

				/**
				 * [tDBOutput_21 begin ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());

				currentComponent = "tMap_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tMap_20 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_20__Struct {
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortieStruct copyOfcopyOfsortie_tmp = new copyOfcopyOfsortieStruct();
// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_20 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_20 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_20,
							row19Struct row19) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_20 = 0;

						columnIndexWithD_tFileInputDelimited_20 = 0;

						row19.CREF = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 1;

						row19.CNOM = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 2;

						row19.CRUE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 3;

						row19.CAUX = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 4;

						row19.CCPTL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 5;

						row19.CVIL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 6;

						row19.FILL01 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 7;

						row19.CQUAL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 8;

						row19.CCOM1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 9;

						row19.CCREP = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 10;

						row19.CREMFI = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 11;

						row19.CECHE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 12;

						row19.CECHJ = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 13;

						row19.CPAI = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 14;

						row19.CCHAN = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 15;

						row19.CECHJ2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 16;

						row19.CMOD = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 17;

						row19.CBQ1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 18;

						row19.CBQ2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 19;

						row19.CBQ3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 20;

						row19.CBQ4 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 21;

						row19.CBQ5 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 22;

						row19.CBQ6 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 23;

						row19.CFACT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 24;

						row19.CBL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 25;

						row19.CESC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 26;

						row19.VARAD1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 27;

						row19.VARAD2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 28;

						row19.VARAD3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 29;

						row19.VARAD4 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 30;

						row19.VARAD5 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 31;

						row19.VARAD6 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 32;

						row19.VARA1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 33;

						row19.VARA2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 34;

						row19.VARA3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 35;

						row19.VARA4 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 36;

						row19.VARA5 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 37;

						row19.VARB1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 38;

						row19.VARB2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 39;

						row19.VARB3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 40;

						row19.VARB4 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 41;

						row19.VARB5 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 42;

						row19.VARN1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 43;

						row19.VARN2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 44;

						row19.VARN3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 45;

						row19.VARN4 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 46;

						row19.VARN5 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 47;

						row19.CDATCRE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 48;

						row19.CTEL1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 49;

						row19.CTEL2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 50;

						row19.CTEX1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 51;

						row19.CTEX2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 52;

						row19.CDELMOY = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 53;

						row19.CAFFAIRE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 54;

						row19.CCPTFACT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 55;

						row19.CINTERNET = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 56;

						row19.CIBAN1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 57;

						row19.CBIC_old = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 58;

						row19.CFIDEL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 59;

						row19.CRFA = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 60;

						row19.CCOMREG = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 61;

						row19.CAPE2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 62;

						row19.CIBAN72 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 63;

						row19.CIBAN8 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 64;

						row19.CIBAN9 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 65;

						row19.CBIC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 66;

						row19.CTRANSP = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 67;

						row19.CFACTMAIL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 68;

						row19.CBLMAIL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 69;

						row19.CFACTWEB = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 70;

						row19.CBLWEB = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 71;

						row19.CPUBLIPOSTAGE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 72;

						row19.CFACT_EDI = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 73;

						row19.CFACT_CHORUS = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 74;

						row19.CFACTORING = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 75;

						row19.CCHORUS_SERVICE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 76;

						row19.CFIL14 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 77;

						row19.CTAR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 78;

						row19.FIL02 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 79;

						row19.CREJ = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 80;

						row19.CSECT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 81;

						row19.CTOUR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 82;

						row19.CCAN1 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 83;

						row19.CCAN2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 84;

						row19.CCAN3 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 85;

						row19.CDATF = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 86;

						row19.CCAT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 87;

						row19.CRESP = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 88;

						row19.CAPE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 89;

						row19.CPREMC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 90;

						row19.CDERNC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 91;

						row19.CPROCC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 92;

						row19.CTYPEC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 93;

						row19.CSIRET = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 94;

						row19.CORIGIN = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 95;

						row19.CMOTCOUR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 96;

						row19.CCOMPTA = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 97;

						row19.CAFFMEMO = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 98;

						row19.CFIL2 = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 99;

						row19.CPNAFF = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_20,
							row19Struct row19) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_20 = 0;

						columnIndexWithD_tFileInputDelimited_20 = 100;

						row19.CDEVTAR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 101;

						row19.CMINCOM = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 102;

						row19.CRELEVE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 103;

						row19.CRELIQ = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 104;

						row19.CMAJ = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 105;

						row19.CECH = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 106;

						row19.CETIQ = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 107;

						row19.CCOEF = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 108;

						row19.CARROND = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 109;

						row19.CENCOUR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 110;

						row19.CNIVREL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 111;

						row19.CBLOCAG = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 112;

						row19.CDATREL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 113;

						row19.CRESCO = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 114;

						row19.CRESFI = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 115;

						row19.CSFAC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 116;

						row19.CDATENC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 117;

						row19.CDATSFA = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 118;

						row19.CCONTR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 119;

						row19.CDEREL = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 120;

						row19.CPAYS = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 121;

						row19.CBLTOT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 122;

						row19.CBLLIG = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 123;

						row19.CENCDIS = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 124;

						row19.CNCEE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 125;

						row19.CNSFAC = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 126;

						row19.CPSRDAT = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 127;

						row19.CEPNASR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 128;

						row19.CCODTAR = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

						columnIndexWithD_tFileInputDelimited_20 = 129;

						row19.CDEVISE = fid_tFileInputDelimited_20.get(columnIndexWithD_tFileInputDelimited_20);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_20,
							row19Struct row19) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_20, row19);

						valueToConn_1(fid_tFileInputDelimited_20, row19);

					}

				}
				RowHelper_tFileInputDelimited_20 rowHelper_tFileInputDelimited_20 = new RowHelper_tFileInputDelimited_20();

				int nb_line_tFileInputDelimited_20 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_20 = null;
				int limit_tFileInputDelimited_20 = -1;
				try {

					Object filename_tFileInputDelimited_20 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_20 = 0, random_value_tFileInputDelimited_20 = -1;
						if (footer_value_tFileInputDelimited_20 > 0 || random_value_tFileInputDelimited_20 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_20 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_20, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_20 != null && fid_tFileInputDelimited_20.nextRecord()) {
						rowstate_tFileInputDelimited_20.reset();

						row19 = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						row19 = new row19Struct();
						try {

							rowHelper_tFileInputDelimited_20.valueToConn(fid_tFileInputDelimited_20, row19);

							if (rowstate_tFileInputDelimited_20.getException() != null) {
								throw rowstate_tFileInputDelimited_20.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */

						/**
						 * [tFileInputDelimited_20 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						/**
						 * [tFileInputDelimited_20 process_data_begin ] stop
						 */
// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tMap_20 main ] start
							 */

							currentComponent = "tMap_20";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_20 = false;
							boolean mainRowRejected_tMap_20 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfsortie = null;

// # Output table : 'copyOfcopyOfsortie'
								copyOfcopyOfsortie_tmp.idvariable = Numeric.sequence("s5", 1, 1);
								copyOfcopyOfsortie_tmp.champ_libre_10char_1 = row19.VARB1;
								copyOfcopyOfsortie_tmp.champ_libre_10char_2 = row19.VARB2;
								copyOfcopyOfsortie_tmp.champ_libre_10char_3 = row19.VARB3;
								copyOfcopyOfsortie_tmp.champ_libre_10char_4 = row19.VARB4;
								copyOfcopyOfsortie_tmp.champ_libre_10char_5 = row19.VARB5;
								copyOfcopyOfsortie_tmp.champ_libre_20char_1 = row19.VARA1;
								copyOfcopyOfsortie_tmp.champ_libre_20char_2 = row19.VARA2;
								copyOfcopyOfsortie_tmp.champ_libre_20char_3 = row19.VARA3;
								copyOfcopyOfsortie_tmp.champ_libre_20char_4 = row19.VARA4;
								copyOfcopyOfsortie_tmp.champ_libre_20char_5 = row19.VARA5;
								copyOfcopyOfsortie_tmp.champ_libre_6digits_1 = new Float(row19.VARN1);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_2 = new Float(row19.VARN2);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_3 = new Float(row19.VARN3);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_4 = new Float(row19.VARN4);
								copyOfcopyOfsortie_tmp.champ_libre_6digits_5 = new Float(row19.VARN5);
								copyOfcopyOfsortie_tmp.date_1 = row19.VARAD1;
								copyOfcopyOfsortie_tmp.date_2 = row19.VARAD2;
								copyOfcopyOfsortie_tmp.date_3 = row19.VARAD3;
								copyOfcopyOfsortie_tmp.date_4 = row19.VARAD4;
								copyOfcopyOfsortie_tmp.date_5 = row19.VARAD5;
								copyOfcopyOfsortie_tmp.date_6 = row19.VARAD6;
								copyOfcopyOfsortie_tmp.idcli = row19.CREF;
								copyOfcopyOfsortie = copyOfcopyOfsortie_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_20 = false;

							tos_count_tMap_20++;

							/**
							 * [tMap_20 main ] stop
							 */

							/**
							 * [tMap_20 process_data_begin ] start
							 */

							currentComponent = "tMap_20";

							/**
							 * [tMap_20 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfsortie"
							if (copyOfcopyOfsortie != null) {

								/**
								 * [tDBOutput_21 main ] start
								 */

								currentComponent = "tDBOutput_21";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfsortie");
								}

								whetherReject_tDBOutput_21 = false;
								pstmt_tDBOutput_21.setInt(1, copyOfcopyOfsortie.idvariable);

								if (copyOfcopyOfsortie.champ_libre_10char_1 == null) {
									pstmt_tDBOutput_21.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(2, copyOfcopyOfsortie.champ_libre_10char_1);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_2 == null) {
									pstmt_tDBOutput_21.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(3, copyOfcopyOfsortie.champ_libre_10char_2);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_3 == null) {
									pstmt_tDBOutput_21.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(4, copyOfcopyOfsortie.champ_libre_10char_3);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_4 == null) {
									pstmt_tDBOutput_21.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(5, copyOfcopyOfsortie.champ_libre_10char_4);
								}

								if (copyOfcopyOfsortie.champ_libre_10char_5 == null) {
									pstmt_tDBOutput_21.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(6, copyOfcopyOfsortie.champ_libre_10char_5);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_1 == null) {
									pstmt_tDBOutput_21.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(7, copyOfcopyOfsortie.champ_libre_20char_1);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_2 == null) {
									pstmt_tDBOutput_21.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(8, copyOfcopyOfsortie.champ_libre_20char_2);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_3 == null) {
									pstmt_tDBOutput_21.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(9, copyOfcopyOfsortie.champ_libre_20char_3);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_4 == null) {
									pstmt_tDBOutput_21.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(10, copyOfcopyOfsortie.champ_libre_20char_4);
								}

								if (copyOfcopyOfsortie.champ_libre_20char_5 == null) {
									pstmt_tDBOutput_21.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(11, copyOfcopyOfsortie.champ_libre_20char_5);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_1 == null) {
									pstmt_tDBOutput_21.setNull(12, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_21.setFloat(12, copyOfcopyOfsortie.champ_libre_6digits_1);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_2 == null) {
									pstmt_tDBOutput_21.setNull(13, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_21.setFloat(13, copyOfcopyOfsortie.champ_libre_6digits_2);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_3 == null) {
									pstmt_tDBOutput_21.setNull(14, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_21.setFloat(14, copyOfcopyOfsortie.champ_libre_6digits_3);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_4 == null) {
									pstmt_tDBOutput_21.setNull(15, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_21.setFloat(15, copyOfcopyOfsortie.champ_libre_6digits_4);
								}

								if (copyOfcopyOfsortie.champ_libre_6digits_5 == null) {
									pstmt_tDBOutput_21.setNull(16, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_21.setFloat(16, copyOfcopyOfsortie.champ_libre_6digits_5);
								}

								if (copyOfcopyOfsortie.date_1 == null) {
									pstmt_tDBOutput_21.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(17, copyOfcopyOfsortie.date_1);
								}

								if (copyOfcopyOfsortie.date_2 == null) {
									pstmt_tDBOutput_21.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(18, copyOfcopyOfsortie.date_2);
								}

								if (copyOfcopyOfsortie.date_3 == null) {
									pstmt_tDBOutput_21.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(19, copyOfcopyOfsortie.date_3);
								}

								if (copyOfcopyOfsortie.date_4 == null) {
									pstmt_tDBOutput_21.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(20, copyOfcopyOfsortie.date_4);
								}

								if (copyOfcopyOfsortie.date_5 == null) {
									pstmt_tDBOutput_21.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(21, copyOfcopyOfsortie.date_5);
								}

								if (copyOfcopyOfsortie.date_6 == null) {
									pstmt_tDBOutput_21.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(22, copyOfcopyOfsortie.date_6);
								}

								if (copyOfcopyOfsortie.idcli == null) {
									pstmt_tDBOutput_21.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_21.setString(23, copyOfcopyOfsortie.idcli);
								}

								pstmt_tDBOutput_21.addBatch();
								nb_line_tDBOutput_21++;

								batchSizeCounter_tDBOutput_21++;

								if ((batchSize_tDBOutput_21 > 0)
										&& (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
									try {
										int countSum_tDBOutput_21 = 0;

										for (int countEach_tDBOutput_21 : pstmt_tDBOutput_21.executeBatch()) {
											countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0
													: countEach_tDBOutput_21);
										}

										insertedCount_tDBOutput_21 += countSum_tDBOutput_21;

										batchSizeCounter_tDBOutput_21 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_21) {
										java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),
												sqle_tDBOutput_21 = null;
										String errormessage_tDBOutput_21;
										if (ne_tDBOutput_21 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_21 = new java.sql.SQLException(
													e_tDBOutput_21.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_21.getMessage(),
													ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(),
													ne_tDBOutput_21);
											errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
										} else {
											errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
										}

										int countSum_tDBOutput_21 = 0;
										for (int countEach_tDBOutput_21 : e_tDBOutput_21.getUpdateCounts()) {
											countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0
													: countEach_tDBOutput_21);
										}

										insertedCount_tDBOutput_21 += countSum_tDBOutput_21;

										System.err.println(errormessage_tDBOutput_21);

									}
								}

								tos_count_tDBOutput_21++;

								/**
								 * [tDBOutput_21 main ] stop
								 */

								/**
								 * [tDBOutput_21 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_21";

								/**
								 * [tDBOutput_21 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_21 process_data_end ] start
								 */

								currentComponent = "tDBOutput_21";

								/**
								 * [tDBOutput_21 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfsortie"

							/**
							 * [tMap_20 process_data_end ] start
							 */

							currentComponent = "tMap_20";

							/**
							 * [tMap_20 process_data_end ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_20 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						/**
						 * [tFileInputDelimited_20 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_20 != null) {
							fid_tFileInputDelimited_20.close();
						}
					}
					if (fid_tFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE", fid_tFileInputDelimited_20.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tDBOutput_21 end ] start
				 */

				currentComponent = "tDBOutput_21";

				try {
					int countSum_tDBOutput_21 = 0;
					if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {

						for (int countEach_tDBOutput_21 : pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}

					}

					insertedCount_tDBOutput_21 += countSum_tDBOutput_21;

				} catch (java.sql.BatchUpdateException e_tDBOutput_21) {
					java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(), sqle_tDBOutput_21 = null;
					String errormessage_tDBOutput_21;
					if (ne_tDBOutput_21 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_21 = new java.sql.SQLException(
								e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(),
								ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
						errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
					} else {
						errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
					}

					int countSum_tDBOutput_21 = 0;
					for (int countEach_tDBOutput_21 : e_tDBOutput_21.getUpdateCounts()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}

					insertedCount_tDBOutput_21 += countSum_tDBOutput_21;

					System.err.println(errormessage_tDBOutput_21);

				}

				if (pstmt_tDBOutput_21 != null) {

					pstmt_tDBOutput_21.close();
					resourceMap.remove("pstmt_tDBOutput_21");
				}
				resourceMap.put("statementClosed_tDBOutput_21", true);

				nb_line_deleted_tDBOutput_21 = nb_line_deleted_tDBOutput_21 + deletedCount_tDBOutput_21;
				nb_line_update_tDBOutput_21 = nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
				nb_line_inserted_tDBOutput_21 = nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
				nb_line_rejected_tDBOutput_21 = nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;

				globalMap.put("tDBOutput_21_NB_LINE", nb_line_tDBOutput_21);
				globalMap.put("tDBOutput_21_NB_LINE_UPDATED", nb_line_update_tDBOutput_21);
				globalMap.put("tDBOutput_21_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_21);
				globalMap.put("tDBOutput_21_NB_LINE_DELETED", nb_line_deleted_tDBOutput_21);
				globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfsortie");
				}

				ok_Hash.put("tDBOutput_21", true);
				end_Hash.put("tDBOutput_21", System.currentTimeMillis());

				/**
				 * [tDBOutput_21 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_20:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
			}

			tFileInputDelimited_21Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_20 finally ] start
				 */

				currentComponent = "tFileInputDelimited_20";

				/**
				 * [tFileInputDelimited_20 finally ] stop
				 */

				/**
				 * [tMap_20 finally ] start
				 */

				currentComponent = "tMap_20";

				/**
				 * [tMap_20 finally ] stop
				 */

				/**
				 * [tDBOutput_21 finally ] start
				 */

				currentComponent = "tDBOutput_21";

				if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
					if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_21")) != null) {
						pstmtToClose_tDBOutput_21.close();
					}
				}

				/**
				 * [tDBOutput_21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfsortie_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfsortie_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idtypcon;

		public int getIdtypcon() {
			return this.idtypcon;
		}

		public String date_dernier_contact;

		public String getDate_dernier_contact() {
			return this.date_dernier_contact;
		}

		public String date_premier_contact;

		public String getDate_premier_contact() {
			return this.date_premier_contact;
		}

		public String date_prochain_contact;

		public String getDate_prochain_contact() {
			return this.date_prochain_contact;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idtypcon;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfsortie_0Struct other = (copyOfcopyOfsortie_0Struct) obj;

			if (this.idtypcon != other.idtypcon)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfsortie_0Struct other) {

			other.idtypcon = this.idtypcon;
			other.date_dernier_contact = this.date_dernier_contact;
			other.date_premier_contact = this.date_premier_contact;
			other.date_prochain_contact = this.date_prochain_contact;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfsortie_0Struct other) {

			other.idtypcon = this.idtypcon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idtypcon = dis.readInt();

					this.date_dernier_contact = readString(dis);

					this.date_premier_contact = readString(dis);

					this.date_prochain_contact = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtypcon);

				// String

				writeString(this.date_dernier_contact, dos);

				// String

				writeString(this.date_premier_contact, dos);

				// String

				writeString(this.date_prochain_contact, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtypcon=" + String.valueOf(idtypcon));
			sb.append(",date_dernier_contact=" + date_dernier_contact);
			sb.append(",date_premier_contact=" + date_premier_contact);
			sb.append(",date_prochain_contact=" + date_prochain_contact);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtypcon, other.idtypcon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11_0Struct implements routines.system.IPersistableRow<row11_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11_0Struct row11_0 = new row11_0Struct();
				copyOfcopyOfsortie_0Struct copyOfcopyOfsortie_0 = new copyOfcopyOfsortie_0Struct();

				/**
				 * [tDBOutput_22 begin ] start
				 */

				ok_Hash.put("tDBOutput_22", false);
				start_Hash.put("tDBOutput_22", System.currentTimeMillis());

				currentComponent = "tDBOutput_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfsortie_0");
				}

				int tos_count_tDBOutput_22 = 0;

				String dbschema_tDBOutput_22 = null;
				dbschema_tDBOutput_22 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_22 = null;
				if (dbschema_tDBOutput_22 == null || dbschema_tDBOutput_22.trim().length() == 0) {
					tableName_tDBOutput_22 = ("type_contact");
				} else {
					tableName_tDBOutput_22 = dbschema_tDBOutput_22 + "\".\"" + ("type_contact");
				}

				int nb_line_tDBOutput_22 = 0;
				int nb_line_update_tDBOutput_22 = 0;
				int nb_line_inserted_tDBOutput_22 = 0;
				int nb_line_deleted_tDBOutput_22 = 0;
				int nb_line_rejected_tDBOutput_22 = 0;

				int deletedCount_tDBOutput_22 = 0;
				int updatedCount_tDBOutput_22 = 0;
				int insertedCount_tDBOutput_22 = 0;
				int rejectedCount_tDBOutput_22 = 0;

				boolean whetherReject_tDBOutput_22 = false;

				java.sql.Connection conn_tDBOutput_22 = null;
				String dbUser_tDBOutput_22 = null;

				conn_tDBOutput_22 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_22 = 10000;
				int batchSizeCounter_tDBOutput_22 = 0;

				int count_tDBOutput_22 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_22 = conn_tDBOutput_22.createStatement()) {
					stmtClear_tDBOutput_22.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_22 + "\"");
				}
				String insert_tDBOutput_22 = "INSERT INTO \"" + tableName_tDBOutput_22
						+ "\" (\"idtypcon\",\"date_dernier_contact\",\"date_premier_contact\",\"date_prochain_contact\",\"idcli\") VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_22 = conn_tDBOutput_22.prepareStatement(insert_tDBOutput_22);
				resourceMap.put("pstmt_tDBOutput_22", pstmt_tDBOutput_22);

				/**
				 * [tDBOutput_22 begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11_0");
				}

				int tos_count_tMap_21 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortie_0Struct copyOfcopyOfsortie_0_tmp = new copyOfcopyOfsortie_0Struct();
// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_21", false);
				start_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_21";

				int tos_count_tFileInputDelimited_21 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_21 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_21 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_21,
							row11_0Struct row11_0) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_21 = 0;

						columnIndexWithD_tFileInputDelimited_21 = 0;

						row11_0.CREF = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 1;

						row11_0.CNOM = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 2;

						row11_0.CRUE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 3;

						row11_0.CAUX = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 4;

						row11_0.CCPTL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 5;

						row11_0.CVIL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 6;

						row11_0.FILL01 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 7;

						row11_0.CQUAL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 8;

						row11_0.CCOM1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 9;

						row11_0.CCREP = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 10;

						row11_0.CREMFI = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 11;

						row11_0.CECHE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 12;

						row11_0.CECHJ = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 13;

						row11_0.CPAI = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 14;

						row11_0.CCHAN = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 15;

						row11_0.CECHJ2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 16;

						row11_0.CMOD = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 17;

						row11_0.CBQ1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 18;

						row11_0.CBQ2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 19;

						row11_0.CBQ3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 20;

						row11_0.CBQ4 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 21;

						row11_0.CBQ5 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 22;

						row11_0.CBQ6 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 23;

						row11_0.CFACT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 24;

						row11_0.CBL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 25;

						row11_0.CESC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 26;

						row11_0.VARAD1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 27;

						row11_0.VARAD2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 28;

						row11_0.VARAD3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 29;

						row11_0.VARAD4 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 30;

						row11_0.VARAD5 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 31;

						row11_0.VARAD6 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 32;

						row11_0.VARA1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 33;

						row11_0.VARA2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 34;

						row11_0.VARA3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 35;

						row11_0.VARA4 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 36;

						row11_0.VARA5 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 37;

						row11_0.VARB1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 38;

						row11_0.VARB2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 39;

						row11_0.VARB3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 40;

						row11_0.VARB4 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 41;

						row11_0.VARB5 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 42;

						row11_0.VARN1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 43;

						row11_0.VARN2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 44;

						row11_0.VARN3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 45;

						row11_0.VARN4 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 46;

						row11_0.VARN5 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 47;

						row11_0.CDATCRE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 48;

						row11_0.CTEL1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 49;

						row11_0.CTEL2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 50;

						row11_0.CTEX1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 51;

						row11_0.CTEX2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 52;

						row11_0.CDELMOY = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 53;

						row11_0.CAFFAIRE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 54;

						row11_0.CCPTFACT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 55;

						row11_0.CINTERNET = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 56;

						row11_0.CIBAN1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 57;

						row11_0.CBIC_old = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 58;

						row11_0.CFIDEL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 59;

						row11_0.CRFA = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 60;

						row11_0.CCOMREG = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 61;

						row11_0.CAPE2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 62;

						row11_0.CIBAN72 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 63;

						row11_0.CIBAN8 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 64;

						row11_0.CIBAN9 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 65;

						row11_0.CBIC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 66;

						row11_0.CTRANSP = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 67;

						row11_0.CFACTMAIL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 68;

						row11_0.CBLMAIL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 69;

						row11_0.CFACTWEB = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 70;

						row11_0.CBLWEB = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 71;

						row11_0.CPUBLIPOSTAGE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 72;

						row11_0.CFACT_EDI = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 73;

						row11_0.CFACT_CHORUS = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 74;

						row11_0.CFACTORING = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 75;

						row11_0.CCHORUS_SERVICE = fid_tFileInputDelimited_21
								.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 76;

						row11_0.CFIL14 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 77;

						row11_0.CTAR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 78;

						row11_0.FIL02 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 79;

						row11_0.CREJ = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 80;

						row11_0.CSECT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 81;

						row11_0.CTOUR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 82;

						row11_0.CCAN1 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 83;

						row11_0.CCAN2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 84;

						row11_0.CCAN3 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 85;

						row11_0.CDATF = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 86;

						row11_0.CCAT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 87;

						row11_0.CRESP = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 88;

						row11_0.CAPE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 89;

						row11_0.CPREMC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 90;

						row11_0.CDERNC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 91;

						row11_0.CPROCC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 92;

						row11_0.CTYPEC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 93;

						row11_0.CSIRET = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 94;

						row11_0.CORIGIN = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 95;

						row11_0.CMOTCOUR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 96;

						row11_0.CCOMPTA = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 97;

						row11_0.CAFFMEMO = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 98;

						row11_0.CFIL2 = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 99;

						row11_0.CPNAFF = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_21,
							row11_0Struct row11_0) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_21 = 0;

						columnIndexWithD_tFileInputDelimited_21 = 100;

						row11_0.CDEVTAR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 101;

						row11_0.CMINCOM = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 102;

						row11_0.CRELEVE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 103;

						row11_0.CRELIQ = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 104;

						row11_0.CMAJ = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 105;

						row11_0.CECH = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 106;

						row11_0.CETIQ = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 107;

						row11_0.CCOEF = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 108;

						row11_0.CARROND = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 109;

						row11_0.CENCOUR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 110;

						row11_0.CNIVREL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 111;

						row11_0.CBLOCAG = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 112;

						row11_0.CDATREL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 113;

						row11_0.CRESCO = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 114;

						row11_0.CRESFI = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 115;

						row11_0.CSFAC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 116;

						row11_0.CDATENC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 117;

						row11_0.CDATSFA = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 118;

						row11_0.CCONTR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 119;

						row11_0.CDEREL = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 120;

						row11_0.CPAYS = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 121;

						row11_0.CBLTOT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 122;

						row11_0.CBLLIG = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 123;

						row11_0.CENCDIS = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 124;

						row11_0.CNCEE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 125;

						row11_0.CNSFAC = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 126;

						row11_0.CPSRDAT = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 127;

						row11_0.CEPNASR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 128;

						row11_0.CCODTAR = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

						columnIndexWithD_tFileInputDelimited_21 = 129;

						row11_0.CDEVISE = fid_tFileInputDelimited_21.get(columnIndexWithD_tFileInputDelimited_21);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_21,
							row11_0Struct row11_0) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_21, row11_0);

						valueToConn_1(fid_tFileInputDelimited_21, row11_0);

					}

				}
				RowHelper_tFileInputDelimited_21 rowHelper_tFileInputDelimited_21 = new RowHelper_tFileInputDelimited_21();

				int nb_line_tFileInputDelimited_21 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_21 = null;
				int limit_tFileInputDelimited_21 = -1;
				try {

					Object filename_tFileInputDelimited_21 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_21 = 0, random_value_tFileInputDelimited_21 = -1;
						if (footer_value_tFileInputDelimited_21 > 0 || random_value_tFileInputDelimited_21 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_21 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_21, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_21 != null && fid_tFileInputDelimited_21.nextRecord()) {
						rowstate_tFileInputDelimited_21.reset();

						row11_0 = null;

						boolean whetherReject_tFileInputDelimited_21 = false;
						row11_0 = new row11_0Struct();
						try {

							rowHelper_tFileInputDelimited_21.valueToConn(fid_tFileInputDelimited_21, row11_0);

							if (rowstate_tFileInputDelimited_21.getException() != null) {
								throw rowstate_tFileInputDelimited_21.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_21 = true;

							System.err.println(e.getMessage());
							row11_0 = null;

						}

						/**
						 * [tFileInputDelimited_21 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_21 main ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						tos_count_tFileInputDelimited_21++;

						/**
						 * [tFileInputDelimited_21 main ] stop
						 */

						/**
						 * [tFileInputDelimited_21 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						/**
						 * [tFileInputDelimited_21 process_data_begin ] stop
						 */
// Start of branch "row11_0"
						if (row11_0 != null) {

							/**
							 * [tMap_21 main ] start
							 */

							currentComponent = "tMap_21";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11_0");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_21 = false;
							boolean mainRowRejected_tMap_21 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfsortie_0 = null;

// # Output table : 'copyOfcopyOfsortie_0'
								copyOfcopyOfsortie_0_tmp.idtypcon = Numeric.sequence("s6", 1, 1);
								copyOfcopyOfsortie_0_tmp.date_dernier_contact = row11_0.CDERNC;
								copyOfcopyOfsortie_0_tmp.date_premier_contact = row11_0.CPREMC;
								copyOfcopyOfsortie_0_tmp.date_prochain_contact = row11_0.CPROCC;
								copyOfcopyOfsortie_0_tmp.idcli = row11_0.CREF;
								copyOfcopyOfsortie_0 = copyOfcopyOfsortie_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_21 = false;

							tos_count_tMap_21++;

							/**
							 * [tMap_21 main ] stop
							 */

							/**
							 * [tMap_21 process_data_begin ] start
							 */

							currentComponent = "tMap_21";

							/**
							 * [tMap_21 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfsortie_0"
							if (copyOfcopyOfsortie_0 != null) {

								/**
								 * [tDBOutput_22 main ] start
								 */

								currentComponent = "tDBOutput_22";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfsortie_0");
								}

								whetherReject_tDBOutput_22 = false;
								pstmt_tDBOutput_22.setInt(1, copyOfcopyOfsortie_0.idtypcon);

								if (copyOfcopyOfsortie_0.date_dernier_contact == null) {
									pstmt_tDBOutput_22.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_22.setString(2, copyOfcopyOfsortie_0.date_dernier_contact);
								}

								if (copyOfcopyOfsortie_0.date_premier_contact == null) {
									pstmt_tDBOutput_22.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_22.setString(3, copyOfcopyOfsortie_0.date_premier_contact);
								}

								if (copyOfcopyOfsortie_0.date_prochain_contact == null) {
									pstmt_tDBOutput_22.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_22.setString(4, copyOfcopyOfsortie_0.date_prochain_contact);
								}

								if (copyOfcopyOfsortie_0.idcli == null) {
									pstmt_tDBOutput_22.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_22.setString(5, copyOfcopyOfsortie_0.idcli);
								}

								pstmt_tDBOutput_22.addBatch();
								nb_line_tDBOutput_22++;

								batchSizeCounter_tDBOutput_22++;

								if ((batchSize_tDBOutput_22 > 0)
										&& (batchSize_tDBOutput_22 <= batchSizeCounter_tDBOutput_22)) {
									try {
										int countSum_tDBOutput_22 = 0;

										for (int countEach_tDBOutput_22 : pstmt_tDBOutput_22.executeBatch()) {
											countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0
													: countEach_tDBOutput_22);
										}

										insertedCount_tDBOutput_22 += countSum_tDBOutput_22;

										batchSizeCounter_tDBOutput_22 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_22) {
										java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),
												sqle_tDBOutput_22 = null;
										String errormessage_tDBOutput_22;
										if (ne_tDBOutput_22 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_22 = new java.sql.SQLException(
													e_tDBOutput_22.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_22.getMessage(),
													ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(),
													ne_tDBOutput_22);
											errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
										} else {
											errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
										}

										int countSum_tDBOutput_22 = 0;
										for (int countEach_tDBOutput_22 : e_tDBOutput_22.getUpdateCounts()) {
											countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0
													: countEach_tDBOutput_22);
										}

										insertedCount_tDBOutput_22 += countSum_tDBOutput_22;

										System.err.println(errormessage_tDBOutput_22);

									}
								}

								tos_count_tDBOutput_22++;

								/**
								 * [tDBOutput_22 main ] stop
								 */

								/**
								 * [tDBOutput_22 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_22";

								/**
								 * [tDBOutput_22 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_22 process_data_end ] start
								 */

								currentComponent = "tDBOutput_22";

								/**
								 * [tDBOutput_22 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfsortie_0"

							/**
							 * [tMap_21 process_data_end ] start
							 */

							currentComponent = "tMap_21";

							/**
							 * [tMap_21 process_data_end ] stop
							 */

						} // End of branch "row11_0"

						/**
						 * [tFileInputDelimited_21 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						/**
						 * [tFileInputDelimited_21 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_21 end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_21 != null) {
							fid_tFileInputDelimited_21.close();
						}
					}
					if (fid_tFileInputDelimited_21 != null) {
						globalMap.put("tFileInputDelimited_21_NB_LINE", fid_tFileInputDelimited_21.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_21", true);
				end_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_21 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11_0");
				}

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tDBOutput_22 end ] start
				 */

				currentComponent = "tDBOutput_22";

				try {
					int countSum_tDBOutput_22 = 0;
					if (pstmt_tDBOutput_22 != null && batchSizeCounter_tDBOutput_22 > 0) {

						for (int countEach_tDBOutput_22 : pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}

					}

					insertedCount_tDBOutput_22 += countSum_tDBOutput_22;

				} catch (java.sql.BatchUpdateException e_tDBOutput_22) {
					java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(), sqle_tDBOutput_22 = null;
					String errormessage_tDBOutput_22;
					if (ne_tDBOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_22 = new java.sql.SQLException(
								e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(),
								ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
						errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
					} else {
						errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
					}

					int countSum_tDBOutput_22 = 0;
					for (int countEach_tDBOutput_22 : e_tDBOutput_22.getUpdateCounts()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}

					insertedCount_tDBOutput_22 += countSum_tDBOutput_22;

					System.err.println(errormessage_tDBOutput_22);

				}

				if (pstmt_tDBOutput_22 != null) {

					pstmt_tDBOutput_22.close();
					resourceMap.remove("pstmt_tDBOutput_22");
				}
				resourceMap.put("statementClosed_tDBOutput_22", true);

				nb_line_deleted_tDBOutput_22 = nb_line_deleted_tDBOutput_22 + deletedCount_tDBOutput_22;
				nb_line_update_tDBOutput_22 = nb_line_update_tDBOutput_22 + updatedCount_tDBOutput_22;
				nb_line_inserted_tDBOutput_22 = nb_line_inserted_tDBOutput_22 + insertedCount_tDBOutput_22;
				nb_line_rejected_tDBOutput_22 = nb_line_rejected_tDBOutput_22 + rejectedCount_tDBOutput_22;

				globalMap.put("tDBOutput_22_NB_LINE", nb_line_tDBOutput_22);
				globalMap.put("tDBOutput_22_NB_LINE_UPDATED", nb_line_update_tDBOutput_22);
				globalMap.put("tDBOutput_22_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_22);
				globalMap.put("tDBOutput_22_NB_LINE_DELETED", nb_line_deleted_tDBOutput_22);
				globalMap.put("tDBOutput_22_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_22);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfsortie_0");
				}

				ok_Hash.put("tDBOutput_22", true);
				end_Hash.put("tDBOutput_22", System.currentTimeMillis());

				/**
				 * [tDBOutput_22 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_21:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
			}

			tFileInputDelimited_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_21 finally ] start
				 */

				currentComponent = "tFileInputDelimited_21";

				/**
				 * [tFileInputDelimited_21 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tDBOutput_22 finally ] start
				 */

				currentComponent = "tDBOutput_22";

				if (resourceMap.get("statementClosed_tDBOutput_22") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_22 = null;
					if ((pstmtToClose_tDBOutput_22 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_22")) != null) {
						pstmtToClose_tDBOutput_22.close();
					}
				}

				/**
				 * [tDBOutput_22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddossier;

		public String getIddossier() {
			return this.iddossier;
		}

		public String contenu;

		public String getContenu() {
			return this.contenu;
		}

		public String date_creation;

		public String getDate_creation() {
			return this.date_creation;
		}

		public Long numero_ligne;

		public Long getNumero_ligne() {
			return this.numero_ligne;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iddossier == null) ? 0 : this.iddossier.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3Struct other = (copyOfcopyOfmain_3Struct) obj;

			if (this.iddossier == null) {
				if (other.iddossier != null)
					return false;

			} else if (!this.iddossier.equals(other.iddossier))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3Struct other) {

			other.iddossier = this.iddossier;
			other.contenu = this.contenu;
			other.date_creation = this.date_creation;
			other.numero_ligne = this.numero_ligne;
			other.titre = this.titre;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3Struct other) {

			other.iddossier = this.iddossier;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddossier = readString(dis);

					this.contenu = readString(dis);

					this.date_creation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numero_ligne = null;
					} else {
						this.numero_ligne = dis.readLong();
					}

					this.titre = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddossier, dos);

				// String

				writeString(this.contenu, dos);

				// String

				writeString(this.date_creation, dos);

				// Long

				if (this.numero_ligne == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.numero_ligne);
				}

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddossier=" + iddossier);
			sb.append(",contenu=" + contenu);
			sb.append(",date_creation=" + date_creation);
			sb.append(",numero_ligne=" + String.valueOf(numero_ligne));
			sb.append(",titre=" + titre);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddossier, other.iddossier);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CARCLI;

		public String getCARCLI() {
			return this.CARCLI;
		}

		public String CARNUM;

		public String getCARNUM() {
			return this.CARNUM;
		}

		public String CARLIG;

		public String getCARLIG() {
			return this.CARLIG;
		}

		public String CARJJ;

		public String getCARJJ() {
			return this.CARJJ;
		}

		public String CARMM;

		public String getCARMM() {
			return this.CARMM;
		}

		public String CARAA;

		public String getCARAA() {
			return this.CARAA;
		}

		public String CARLIB;

		public String getCARLIB() {
			return this.CARLIB;
		}

		public String CARRCLI;

		public String getCARRCLI() {
			return this.CARRCLI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CARCLI = readString(dis);

					this.CARNUM = readString(dis);

					this.CARLIG = readString(dis);

					this.CARJJ = readString(dis);

					this.CARMM = readString(dis);

					this.CARAA = readString(dis);

					this.CARLIB = readString(dis);

					this.CARRCLI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CARCLI, dos);

				// String

				writeString(this.CARNUM, dos);

				// String

				writeString(this.CARLIG, dos);

				// String

				writeString(this.CARJJ, dos);

				// String

				writeString(this.CARMM, dos);

				// String

				writeString(this.CARAA, dos);

				// String

				writeString(this.CARLIB, dos);

				// String

				writeString(this.CARRCLI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CARCLI=" + CARCLI);
			sb.append(",CARNUM=" + CARNUM);
			sb.append(",CARLIG=" + CARLIG);
			sb.append(",CARJJ=" + CARJJ);
			sb.append(",CARMM=" + CARMM);
			sb.append(",CARAA=" + CARAA);
			sb.append(",CARLIB=" + CARLIB);
			sb.append(",CARRCLI=" + CARRCLI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				copyOfcopyOfmain_3Struct copyOfcopyOfmain_3 = new copyOfcopyOfmain_3Struct();

				/**
				 * [tDBOutput_14 begin ] start
				 */

				ok_Hash.put("tDBOutput_14", false);
				start_Hash.put("tDBOutput_14", System.currentTimeMillis());

				currentComponent = "tDBOutput_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3");
				}

				int tos_count_tDBOutput_14 = 0;

				String dbschema_tDBOutput_14 = null;
				dbschema_tDBOutput_14 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_14 = null;
				if (dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
					tableName_tDBOutput_14 = ("dossier");
				} else {
					tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\"" + ("dossier");
				}

				int nb_line_tDBOutput_14 = 0;
				int nb_line_update_tDBOutput_14 = 0;
				int nb_line_inserted_tDBOutput_14 = 0;
				int nb_line_deleted_tDBOutput_14 = 0;
				int nb_line_rejected_tDBOutput_14 = 0;

				int deletedCount_tDBOutput_14 = 0;
				int updatedCount_tDBOutput_14 = 0;
				int insertedCount_tDBOutput_14 = 0;
				int rejectedCount_tDBOutput_14 = 0;

				boolean whetherReject_tDBOutput_14 = false;

				java.sql.Connection conn_tDBOutput_14 = null;
				String dbUser_tDBOutput_14 = null;

				conn_tDBOutput_14 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_14 = 10000;
				int batchSizeCounter_tDBOutput_14 = 0;

				int count_tDBOutput_14 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
					stmtClear_tDBOutput_14.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_14 + "\"");
				}
				String insert_tDBOutput_14 = "INSERT INTO \"" + tableName_tDBOutput_14
						+ "\" (\"iddossier\",\"contenu\",\"date_creation\",\"numero_ligne\",\"titre\",\"idcli\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
				resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);

				/**
				 * [tDBOutput_14 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_14 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3Struct copyOfcopyOfmain_3_tmp = new copyOfcopyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_14 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_14 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_14 = null;
				int limit_tFileInputDelimited_14 = -1;
				try {

					Object filename_tFileInputDelimited_14 = "C:/DEV/Data/Base Montauban/dossisers_clients.csv";
					if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_14 = 0, random_value_tFileInputDelimited_14 = -1;
						if (footer_value_tFileInputDelimited_14 > 0 || random_value_tFileInputDelimited_14 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_14 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/dossisers_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_14, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_14 != null && fid_tFileInputDelimited_14.nextRecord()) {
						rowstate_tFileInputDelimited_14.reset();

						row11 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row11 = new row11Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_14 = 0;

							columnIndexWithD_tFileInputDelimited_14 = 0;

							row11.CARCLI = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 1;

							row11.CARNUM = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 2;

							row11.CARLIG = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 3;

							row11.CARJJ = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 4;

							row11.CARMM = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 5;

							row11.CARAA = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 6;

							row11.CARLIB = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 7;

							row11.CARRCLI = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);

							if (rowstate_tFileInputDelimited_14.getException() != null) {
								throw rowstate_tFileInputDelimited_14.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */

						/**
						 * [tFileInputDelimited_14 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						/**
						 * [tFileInputDelimited_14 process_data_begin ] stop
						 */
// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMap_14 main ] start
							 */

							currentComponent = "tMap_14";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_14 = false;
							boolean mainRowRejected_tMap_14 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3 = null;

// # Output table : 'copyOfcopyOfmain_3'
								copyOfcopyOfmain_3_tmp.iddossier = row11.CARCLI + row11.CARNUM + row11.CARLIG;
								copyOfcopyOfmain_3_tmp.contenu = row11.CARLIB;
								copyOfcopyOfmain_3_tmp.date_creation = row11.CARJJ + new String("/") + row11.CARMM
										+ new String("/") + row11.CARAA;
								copyOfcopyOfmain_3_tmp.numero_ligne = row11.CARLIG.isBlank() ? null
										: new Long(row11.CARLIG);
								copyOfcopyOfmain_3_tmp.titre = row11.CARLIG.isEmpty() ? row11.CARLIB : null;
								copyOfcopyOfmain_3_tmp.idcli = row11.CARCLI;
								copyOfcopyOfmain_3 = copyOfcopyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_14 = false;

							tos_count_tMap_14++;

							/**
							 * [tMap_14 main ] stop
							 */

							/**
							 * [tMap_14 process_data_begin ] start
							 */

							currentComponent = "tMap_14";

							/**
							 * [tMap_14 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3"
							if (copyOfcopyOfmain_3 != null) {

								/**
								 * [tDBOutput_14 main ] start
								 */

								currentComponent = "tDBOutput_14";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3");
								}

								whetherReject_tDBOutput_14 = false;
								if (copyOfcopyOfmain_3.iddossier == null) {
									pstmt_tDBOutput_14.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(1, copyOfcopyOfmain_3.iddossier);
								}

								if (copyOfcopyOfmain_3.contenu == null) {
									pstmt_tDBOutput_14.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(2, copyOfcopyOfmain_3.contenu);
								}

								if (copyOfcopyOfmain_3.date_creation == null) {
									pstmt_tDBOutput_14.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(3, copyOfcopyOfmain_3.date_creation);
								}

								if (copyOfcopyOfmain_3.numero_ligne == null) {
									pstmt_tDBOutput_14.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_14.setLong(4, copyOfcopyOfmain_3.numero_ligne);
								}

								if (copyOfcopyOfmain_3.titre == null) {
									pstmt_tDBOutput_14.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(5, copyOfcopyOfmain_3.titre);
								}

								if (copyOfcopyOfmain_3.idcli == null) {
									pstmt_tDBOutput_14.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_14.setString(6, copyOfcopyOfmain_3.idcli);
								}

								pstmt_tDBOutput_14.addBatch();
								nb_line_tDBOutput_14++;

								batchSizeCounter_tDBOutput_14++;

								if ((batchSize_tDBOutput_14 > 0)
										&& (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
									try {
										int countSum_tDBOutput_14 = 0;

										for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14.executeBatch()) {
											countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

										batchSizeCounter_tDBOutput_14 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
										java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),
												sqle_tDBOutput_14 = null;
										String errormessage_tDBOutput_14;
										if (ne_tDBOutput_14 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_14 = new java.sql.SQLException(
													e_tDBOutput_14.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_14.getMessage(),
													ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(),
													ne_tDBOutput_14);
											errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
										} else {
											errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
										}

										int countSum_tDBOutput_14 = 0;
										for (int countEach_tDBOutput_14 : e_tDBOutput_14.getUpdateCounts()) {
											countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

										System.err.println(errormessage_tDBOutput_14);

									}
								}

								tos_count_tDBOutput_14++;

								/**
								 * [tDBOutput_14 main ] stop
								 */

								/**
								 * [tDBOutput_14 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_14";

								/**
								 * [tDBOutput_14 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_14 process_data_end ] start
								 */

								currentComponent = "tDBOutput_14";

								/**
								 * [tDBOutput_14 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3"

							/**
							 * [tMap_14 process_data_end ] start
							 */

							currentComponent = "tMap_14";

							/**
							 * [tMap_14 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_14 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						/**
						 * [tFileInputDelimited_14 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/dossisers_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_14 != null) {
							fid_tFileInputDelimited_14.close();
						}
					}
					if (fid_tFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE", fid_tFileInputDelimited_14.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tDBOutput_14 end ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					int countSum_tDBOutput_14 = 0;
					if (pstmt_tDBOutput_14 != null && batchSizeCounter_tDBOutput_14 > 0) {

						for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}

					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

				} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
					java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(), sqle_tDBOutput_14 = null;
					String errormessage_tDBOutput_14;
					if (ne_tDBOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_14 = new java.sql.SQLException(
								e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(),
								ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
						errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
					} else {
						errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
					}

					int countSum_tDBOutput_14 = 0;
					for (int countEach_tDBOutput_14 : e_tDBOutput_14.getUpdateCounts()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

					System.err.println(errormessage_tDBOutput_14);

				}

				if (pstmt_tDBOutput_14 != null) {

					pstmt_tDBOutput_14.close();
					resourceMap.remove("pstmt_tDBOutput_14");
				}
				resourceMap.put("statementClosed_tDBOutput_14", true);

				nb_line_deleted_tDBOutput_14 = nb_line_deleted_tDBOutput_14 + deletedCount_tDBOutput_14;
				nb_line_update_tDBOutput_14 = nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
				nb_line_inserted_tDBOutput_14 = nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
				nb_line_rejected_tDBOutput_14 = nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;

				globalMap.put("tDBOutput_14_NB_LINE", nb_line_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_UPDATED", nb_line_update_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_DELETED", nb_line_deleted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3");
				}

				ok_Hash.put("tDBOutput_14", true);
				end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				/**
				 * [tDBOutput_14 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_14:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
			}

			tFileInputDelimited_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_14 finally ] start
				 */

				currentComponent = "tFileInputDelimited_14";

				/**
				 * [tFileInputDelimited_14 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tDBOutput_14 finally ] start
				 */

				currentComponent = "tDBOutput_14";

				if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
					if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_14")) != null) {
						pstmtToClose_tDBOutput_14.close();
					}
				}

				/**
				 * [tDBOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_3_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_3_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom_contact;

		public String getNom_contact() {
			return this.nom_contact;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_3_1Struct other = (copyOfcopyOfcopyOfmain_3_1Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom_contact = this.nom_contact;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom_contact = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom_contact, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom_contact=" + nom_contact);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_3_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				copyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfmain_3_1 = new copyOfcopyOfcopyOfmain_3_1Struct();

				/**
				 * [tDBOutput_15 begin ] start
				 */

				ok_Hash.put("tDBOutput_15", false);
				start_Hash.put("tDBOutput_15", System.currentTimeMillis());

				currentComponent = "tDBOutput_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_3_1");
				}

				int tos_count_tDBOutput_15 = 0;

				String dbschema_tDBOutput_15 = null;
				dbschema_tDBOutput_15 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_15 = null;
				if (dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
					tableName_tDBOutput_15 = ("contact");
				} else {
					tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_15 = 0;
				int nb_line_update_tDBOutput_15 = 0;
				int nb_line_inserted_tDBOutput_15 = 0;
				int nb_line_deleted_tDBOutput_15 = 0;
				int nb_line_rejected_tDBOutput_15 = 0;

				int deletedCount_tDBOutput_15 = 0;
				int updatedCount_tDBOutput_15 = 0;
				int insertedCount_tDBOutput_15 = 0;
				int rejectedCount_tDBOutput_15 = 0;

				boolean whetherReject_tDBOutput_15 = false;

				java.sql.Connection conn_tDBOutput_15 = null;
				String dbUser_tDBOutput_15 = null;

				conn_tDBOutput_15 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_15 = 10000;
				int batchSizeCounter_tDBOutput_15 = 0;

				int count_tDBOutput_15 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_15 = conn_tDBOutput_15.createStatement()) {
					stmtClear_tDBOutput_15.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_15 + "\"");
				}
				String insert_tDBOutput_15 = "INSERT INTO \"" + tableName_tDBOutput_15
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom_contact\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(insert_tDBOutput_15);
				resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);

				/**
				 * [tDBOutput_15 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tMap_15 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfmain_3_1_tmp = new copyOfcopyOfcopyOfmain_3_1Struct();
// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_15 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_15 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row14Struct row14) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_15 = 0;

						columnIndexWithD_tFileInputDelimited_15 = 0;

						row14.CREF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 1;

						row14.CNOM = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 2;

						row14.CRUE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 3;

						row14.CAUX = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 4;

						row14.CCPTL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 5;

						row14.CVIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 6;

						row14.FILL01 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 7;

						row14.CQUAL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 8;

						row14.CCOM1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 9;

						row14.CCREP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 10;

						row14.CREMFI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 11;

						row14.CECHE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 12;

						row14.CECHJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 13;

						row14.CPAI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 14;

						row14.CCHAN = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 15;

						row14.CECHJ2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 16;

						row14.CMOD = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 17;

						row14.CBQ1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 18;

						row14.CBQ2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 19;

						row14.CBQ3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 20;

						row14.CBQ4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 21;

						row14.CBQ5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 22;

						row14.CBQ6 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 23;

						row14.CFACT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 24;

						row14.CBL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 25;

						row14.CESC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 26;

						row14.VARAD1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 27;

						row14.VARAD2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 28;

						row14.VARAD3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 29;

						row14.VARAD4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 30;

						row14.VARAD5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 31;

						row14.VARAD6 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 32;

						row14.VARA1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 33;

						row14.VARA2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 34;

						row14.VARA3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 35;

						row14.VARA4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 36;

						row14.VARA5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 37;

						row14.VARB1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 38;

						row14.VARB2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 39;

						row14.VARB3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 40;

						row14.VARB4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 41;

						row14.VARB5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 42;

						row14.VARN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 43;

						row14.VARN2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 44;

						row14.VARN3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 45;

						row14.VARN4 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 46;

						row14.VARN5 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 47;

						row14.CDATCRE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 48;

						row14.CTEL1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 49;

						row14.CTEL2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 50;

						row14.CTEX1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 51;

						row14.CTEX2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 52;

						row14.CDELMOY = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 53;

						row14.CAFFAIRE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 54;

						row14.CCPTFACT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 55;

						row14.CINTERNET = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 56;

						row14.CIBAN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 57;

						row14.CBIC_old = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 58;

						row14.CFIDEL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 59;

						row14.CRFA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 60;

						row14.CCOMREG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 61;

						row14.CAPE2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 62;

						row14.CIBAN72 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 63;

						row14.CIBAN8 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 64;

						row14.CIBAN9 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 65;

						row14.CBIC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 66;

						row14.CTRANSP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 67;

						row14.CFACTMAIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 68;

						row14.CBLMAIL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 69;

						row14.CFACTWEB = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 70;

						row14.CBLWEB = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 71;

						row14.CPUBLIPOSTAGE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 72;

						row14.CFACT_EDI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 73;

						row14.CFACT_CHORUS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 74;

						row14.CFACTORING = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 75;

						row14.CCHORUS_SERVICE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 76;

						row14.CFIL14 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 77;

						row14.CTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 78;

						row14.FIL02 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 79;

						row14.CREJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 80;

						row14.CSECT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 81;

						row14.CTOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 82;

						row14.CCAN1 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 83;

						row14.CCAN2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 84;

						row14.CCAN3 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 85;

						row14.CDATF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 86;

						row14.CCAT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 87;

						row14.CRESP = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 88;

						row14.CAPE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 89;

						row14.CPREMC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 90;

						row14.CDERNC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 91;

						row14.CPROCC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 92;

						row14.CTYPEC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 93;

						row14.CSIRET = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 94;

						row14.CORIGIN = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 95;

						row14.CMOTCOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 96;

						row14.CCOMPTA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 97;

						row14.CAFFMEMO = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 98;

						row14.CFIL2 = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 99;

						row14.CPNAFF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row14Struct row14) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_15 = 0;

						columnIndexWithD_tFileInputDelimited_15 = 100;

						row14.CDEVTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 101;

						row14.CMINCOM = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 102;

						row14.CRELEVE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 103;

						row14.CRELIQ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 104;

						row14.CMAJ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 105;

						row14.CECH = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 106;

						row14.CETIQ = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 107;

						row14.CCOEF = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 108;

						row14.CARROND = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 109;

						row14.CENCOUR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 110;

						row14.CNIVREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 111;

						row14.CBLOCAG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 112;

						row14.CDATREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 113;

						row14.CRESCO = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 114;

						row14.CRESFI = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 115;

						row14.CSFAC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 116;

						row14.CDATENC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 117;

						row14.CDATSFA = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 118;

						row14.CCONTR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 119;

						row14.CDEREL = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 120;

						row14.CPAYS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 121;

						row14.CBLTOT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 122;

						row14.CBLLIG = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 123;

						row14.CENCDIS = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 124;

						row14.CNCEE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 125;

						row14.CNSFAC = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 126;

						row14.CPSRDAT = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 127;

						row14.CEPNASR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 128;

						row14.CCODTAR = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

						columnIndexWithD_tFileInputDelimited_15 = 129;

						row14.CDEVISE = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15,
							row14Struct row14) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_15, row14);

						valueToConn_1(fid_tFileInputDelimited_15, row14);

					}

				}
				RowHelper_tFileInputDelimited_15 rowHelper_tFileInputDelimited_15 = new RowHelper_tFileInputDelimited_15();

				int nb_line_tFileInputDelimited_15 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15 = null;
				int limit_tFileInputDelimited_15 = -1;
				try {

					Object filename_tFileInputDelimited_15 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_15 = 0, random_value_tFileInputDelimited_15 = -1;
						if (footer_value_tFileInputDelimited_15 > 0 || random_value_tFileInputDelimited_15 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_15 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_15, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_15 != null && fid_tFileInputDelimited_15.nextRecord()) {
						rowstate_tFileInputDelimited_15.reset();

						row14 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row14 = new row14Struct();
						try {

							rowHelper_tFileInputDelimited_15.valueToConn(fid_tFileInputDelimited_15, row14);

							if (rowstate_tFileInputDelimited_15.getException() != null) {
								throw rowstate_tFileInputDelimited_15.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */

						/**
						 * [tFileInputDelimited_15 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						/**
						 * [tFileInputDelimited_15 process_data_begin ] stop
						 */
// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tMap_15 main ] start
							 */

							currentComponent = "tMap_15";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_15 = false;
							boolean mainRowRejected_tMap_15 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_3_1 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_3_1'
								copyOfcopyOfcopyOfmain_3_1_tmp.idcontact = Numeric.sequence("contact", 1, 1);
								copyOfcopyOfcopyOfmain_3_1_tmp.principal = true;
								copyOfcopyOfcopyOfmain_3_1_tmp.fax = row14.CTEX2;
								copyOfcopyOfcopyOfmain_3_1_tmp.fonction = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.internet = row14.CINTERNET;
								copyOfcopyOfcopyOfmain_3_1_tmp.login = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.mail = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.mail_validateur = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.niveau_validateur = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_contact = row14.CNOM;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_responsable = row14.CRESP;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_commerc = row14.CRESCO;
								copyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_financier = row14.CRESFI;
								copyOfcopyOfcopyOfmain_3_1_tmp.password = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.portable = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.rang = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.service = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.telephone = row14.CTEL1;
								copyOfcopyOfcopyOfmain_3_1_tmp.telephonebis = row14.CTEL2;
								copyOfcopyOfcopyOfmain_3_1_tmp.idadresse_livraison = null;
								copyOfcopyOfcopyOfmain_3_1_tmp.idcli = row14.CREF;
								copyOfcopyOfcopyOfmain_3_1_tmp.idfournisseur = null;
								copyOfcopyOfcopyOfmain_3_1 = copyOfcopyOfcopyOfmain_3_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_15 = false;

							tos_count_tMap_15++;

							/**
							 * [tMap_15 main ] stop
							 */

							/**
							 * [tMap_15 process_data_begin ] start
							 */

							currentComponent = "tMap_15";

							/**
							 * [tMap_15 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_3_1"
							if (copyOfcopyOfcopyOfmain_3_1 != null) {

								/**
								 * [tDBOutput_15 main ] start
								 */

								currentComponent = "tDBOutput_15";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_3_1");
								}

								whetherReject_tDBOutput_15 = false;
								pstmt_tDBOutput_15.setInt(1, copyOfcopyOfcopyOfmain_3_1.idcontact);

								if (copyOfcopyOfcopyOfmain_3_1.principal == null) {
									pstmt_tDBOutput_15.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_15.setBoolean(2, copyOfcopyOfcopyOfmain_3_1.principal);
								}

								if (copyOfcopyOfcopyOfmain_3_1.fax == null) {
									pstmt_tDBOutput_15.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(3, copyOfcopyOfcopyOfmain_3_1.fax);
								}

								if (copyOfcopyOfcopyOfmain_3_1.fonction == null) {
									pstmt_tDBOutput_15.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(4, copyOfcopyOfcopyOfmain_3_1.fonction);
								}

								if (copyOfcopyOfcopyOfmain_3_1.internet == null) {
									pstmt_tDBOutput_15.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(5, copyOfcopyOfcopyOfmain_3_1.internet);
								}

								if (copyOfcopyOfcopyOfmain_3_1.login == null) {
									pstmt_tDBOutput_15.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(6, copyOfcopyOfcopyOfmain_3_1.login);
								}

								if (copyOfcopyOfcopyOfmain_3_1.mail == null) {
									pstmt_tDBOutput_15.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(7, copyOfcopyOfcopyOfmain_3_1.mail);
								}

								if (copyOfcopyOfcopyOfmain_3_1.mail_validateur == null) {
									pstmt_tDBOutput_15.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(8, copyOfcopyOfcopyOfmain_3_1.mail_validateur);
								}

								if (copyOfcopyOfcopyOfmain_3_1.niveau_validateur == null) {
									pstmt_tDBOutput_15.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(9, copyOfcopyOfcopyOfmain_3_1.niveau_validateur);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_contact == null) {
									pstmt_tDBOutput_15.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(10, copyOfcopyOfcopyOfmain_3_1.nom_contact);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_responsable == null) {
									pstmt_tDBOutput_15.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(11, copyOfcopyOfcopyOfmain_3_1.nom_responsable);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_respon_commerc == null) {
									pstmt_tDBOutput_15.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(12, copyOfcopyOfcopyOfmain_3_1.nom_respon_commerc);
								}

								if (copyOfcopyOfcopyOfmain_3_1.nom_respon_financier == null) {
									pstmt_tDBOutput_15.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(13, copyOfcopyOfcopyOfmain_3_1.nom_respon_financier);
								}

								if (copyOfcopyOfcopyOfmain_3_1.password == null) {
									pstmt_tDBOutput_15.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(14, copyOfcopyOfcopyOfmain_3_1.password);
								}

								if (copyOfcopyOfcopyOfmain_3_1.portable == null) {
									pstmt_tDBOutput_15.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(15, copyOfcopyOfcopyOfmain_3_1.portable);
								}

								if (copyOfcopyOfcopyOfmain_3_1.rang == null) {
									pstmt_tDBOutput_15.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(16, copyOfcopyOfcopyOfmain_3_1.rang);
								}

								if (copyOfcopyOfcopyOfmain_3_1.service == null) {
									pstmt_tDBOutput_15.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(17, copyOfcopyOfcopyOfmain_3_1.service);
								}

								if (copyOfcopyOfcopyOfmain_3_1.telephone == null) {
									pstmt_tDBOutput_15.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(18, copyOfcopyOfcopyOfmain_3_1.telephone);
								}

								if (copyOfcopyOfcopyOfmain_3_1.telephonebis == null) {
									pstmt_tDBOutput_15.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(19, copyOfcopyOfcopyOfmain_3_1.telephonebis);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idadresse_livraison == null) {
									pstmt_tDBOutput_15.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(20, copyOfcopyOfcopyOfmain_3_1.idadresse_livraison);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idcli == null) {
									pstmt_tDBOutput_15.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(21, copyOfcopyOfcopyOfmain_3_1.idcli);
								}

								if (copyOfcopyOfcopyOfmain_3_1.idfournisseur == null) {
									pstmt_tDBOutput_15.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_15.setString(22, copyOfcopyOfcopyOfmain_3_1.idfournisseur);
								}

								pstmt_tDBOutput_15.addBatch();
								nb_line_tDBOutput_15++;

								batchSizeCounter_tDBOutput_15++;

								if ((batchSize_tDBOutput_15 > 0)
										&& (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
									try {
										int countSum_tDBOutput_15 = 0;

										for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15.executeBatch()) {
											countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
													: countEach_tDBOutput_15);
										}

										insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

										batchSizeCounter_tDBOutput_15 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_15) {
										java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),
												sqle_tDBOutput_15 = null;
										String errormessage_tDBOutput_15;
										if (ne_tDBOutput_15 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_15 = new java.sql.SQLException(
													e_tDBOutput_15.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_15.getMessage(),
													ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(),
													ne_tDBOutput_15);
											errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
										} else {
											errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
										}

										int countSum_tDBOutput_15 = 0;
										for (int countEach_tDBOutput_15 : e_tDBOutput_15.getUpdateCounts()) {
											countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
													: countEach_tDBOutput_15);
										}

										insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

										System.err.println(errormessage_tDBOutput_15);

									}
								}

								tos_count_tDBOutput_15++;

								/**
								 * [tDBOutput_15 main ] stop
								 */

								/**
								 * [tDBOutput_15 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_15";

								/**
								 * [tDBOutput_15 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_15 process_data_end ] start
								 */

								currentComponent = "tDBOutput_15";

								/**
								 * [tDBOutput_15 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_3_1"

							/**
							 * [tMap_15 process_data_end ] start
							 */

							currentComponent = "tMap_15";

							/**
							 * [tMap_15 process_data_end ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_15 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						/**
						 * [tFileInputDelimited_15 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_15 != null) {
							fid_tFileInputDelimited_15.close();
						}
					}
					if (fid_tFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE", fid_tFileInputDelimited_15.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tDBOutput_15 end ] start
				 */

				currentComponent = "tDBOutput_15";

				try {
					int countSum_tDBOutput_15 = 0;
					if (pstmt_tDBOutput_15 != null && batchSizeCounter_tDBOutput_15 > 0) {

						for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}

					}

					insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

				} catch (java.sql.BatchUpdateException e_tDBOutput_15) {
					java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(), sqle_tDBOutput_15 = null;
					String errormessage_tDBOutput_15;
					if (ne_tDBOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_15 = new java.sql.SQLException(
								e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(),
								ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
						errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
					} else {
						errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
					}

					int countSum_tDBOutput_15 = 0;
					for (int countEach_tDBOutput_15 : e_tDBOutput_15.getUpdateCounts()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}

					insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

					System.err.println(errormessage_tDBOutput_15);

				}

				if (pstmt_tDBOutput_15 != null) {

					pstmt_tDBOutput_15.close();
					resourceMap.remove("pstmt_tDBOutput_15");
				}
				resourceMap.put("statementClosed_tDBOutput_15", true);

				nb_line_deleted_tDBOutput_15 = nb_line_deleted_tDBOutput_15 + deletedCount_tDBOutput_15;
				nb_line_update_tDBOutput_15 = nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
				nb_line_inserted_tDBOutput_15 = nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
				nb_line_rejected_tDBOutput_15 = nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;

				globalMap.put("tDBOutput_15_NB_LINE", nb_line_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_UPDATED", nb_line_update_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_DELETED", nb_line_deleted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_3_1");
				}

				ok_Hash.put("tDBOutput_15", true);
				end_Hash.put("tDBOutput_15", System.currentTimeMillis());

				/**
				 * [tDBOutput_15 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_15 finally ] start
				 */

				currentComponent = "tFileInputDelimited_15";

				/**
				 * [tFileInputDelimited_15 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tDBOutput_15 finally ] start
				 */

				currentComponent = "tDBOutput_15";

				if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
					if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_15")) != null) {
						pstmtToClose_tDBOutput_15.close();
					}
				}

				/**
				 * [tDBOutput_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_3_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom_contact;

		public String getNom_contact() {
			return this.nom_contact;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3_1Struct other = (copyOfcopyOfmain_3_1Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom_contact = this.nom_contact;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom_contact = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom_contact, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom_contact=" + nom_contact);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8_0Struct implements routines.system.IPersistableRow<row8_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_16Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CREF == null) ? 0 : this.CREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_16Struct other = (after_tFileInputDelimited_16Struct) obj;

			if (this.CREF == null) {
				if (other.CREF != null)
					return false;

			} else if (!this.CREF.equals(other.CREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_16Struct other) {

			other.CREF = this.CREF;
			other.CNOM = this.CNOM;
			other.CRUE = this.CRUE;
			other.CAUX = this.CAUX;
			other.CCPTL = this.CCPTL;
			other.CVIL = this.CVIL;
			other.FILL01 = this.FILL01;
			other.CQUAL = this.CQUAL;
			other.CCOM1 = this.CCOM1;
			other.CCREP = this.CCREP;
			other.CREMFI = this.CREMFI;
			other.CECHE = this.CECHE;
			other.CECHJ = this.CECHJ;
			other.CPAI = this.CPAI;
			other.CCHAN = this.CCHAN;
			other.CECHJ2 = this.CECHJ2;
			other.CMOD = this.CMOD;
			other.CBQ1 = this.CBQ1;
			other.CBQ2 = this.CBQ2;
			other.CBQ3 = this.CBQ3;
			other.CBQ4 = this.CBQ4;
			other.CBQ5 = this.CBQ5;
			other.CBQ6 = this.CBQ6;
			other.CFACT = this.CFACT;
			other.CBL = this.CBL;
			other.CESC = this.CESC;
			other.VARAD1 = this.VARAD1;
			other.VARAD2 = this.VARAD2;
			other.VARAD3 = this.VARAD3;
			other.VARAD4 = this.VARAD4;
			other.VARAD5 = this.VARAD5;
			other.VARAD6 = this.VARAD6;
			other.VARA1 = this.VARA1;
			other.VARA2 = this.VARA2;
			other.VARA3 = this.VARA3;
			other.VARA4 = this.VARA4;
			other.VARA5 = this.VARA5;
			other.VARB1 = this.VARB1;
			other.VARB2 = this.VARB2;
			other.VARB3 = this.VARB3;
			other.VARB4 = this.VARB4;
			other.VARB5 = this.VARB5;
			other.VARN1 = this.VARN1;
			other.VARN2 = this.VARN2;
			other.VARN3 = this.VARN3;
			other.VARN4 = this.VARN4;
			other.VARN5 = this.VARN5;
			other.CDATCRE = this.CDATCRE;
			other.CTEL1 = this.CTEL1;
			other.CTEL2 = this.CTEL2;
			other.CTEX1 = this.CTEX1;
			other.CTEX2 = this.CTEX2;
			other.CDELMOY = this.CDELMOY;
			other.CAFFAIRE = this.CAFFAIRE;
			other.CCPTFACT = this.CCPTFACT;
			other.CINTERNET = this.CINTERNET;
			other.CIBAN1 = this.CIBAN1;
			other.CBIC_old = this.CBIC_old;
			other.CFIDEL = this.CFIDEL;
			other.CRFA = this.CRFA;
			other.CCOMREG = this.CCOMREG;
			other.CAPE2 = this.CAPE2;
			other.CIBAN72 = this.CIBAN72;
			other.CIBAN8 = this.CIBAN8;
			other.CIBAN9 = this.CIBAN9;
			other.CBIC = this.CBIC;
			other.CTRANSP = this.CTRANSP;
			other.CFACTMAIL = this.CFACTMAIL;
			other.CBLMAIL = this.CBLMAIL;
			other.CFACTWEB = this.CFACTWEB;
			other.CBLWEB = this.CBLWEB;
			other.CPUBLIPOSTAGE = this.CPUBLIPOSTAGE;
			other.CFACT_EDI = this.CFACT_EDI;
			other.CFACT_CHORUS = this.CFACT_CHORUS;
			other.CFACTORING = this.CFACTORING;
			other.CCHORUS_SERVICE = this.CCHORUS_SERVICE;
			other.CFIL14 = this.CFIL14;
			other.CTAR = this.CTAR;
			other.FIL02 = this.FIL02;
			other.CREJ = this.CREJ;
			other.CSECT = this.CSECT;
			other.CTOUR = this.CTOUR;
			other.CCAN1 = this.CCAN1;
			other.CCAN2 = this.CCAN2;
			other.CCAN3 = this.CCAN3;
			other.CDATF = this.CDATF;
			other.CCAT = this.CCAT;
			other.CRESP = this.CRESP;
			other.CAPE = this.CAPE;
			other.CPREMC = this.CPREMC;
			other.CDERNC = this.CDERNC;
			other.CPROCC = this.CPROCC;
			other.CTYPEC = this.CTYPEC;
			other.CSIRET = this.CSIRET;
			other.CORIGIN = this.CORIGIN;
			other.CMOTCOUR = this.CMOTCOUR;
			other.CCOMPTA = this.CCOMPTA;
			other.CAFFMEMO = this.CAFFMEMO;
			other.CFIL2 = this.CFIL2;
			other.CPNAFF = this.CPNAFF;
			other.CDEVTAR = this.CDEVTAR;
			other.CMINCOM = this.CMINCOM;
			other.CRELEVE = this.CRELEVE;
			other.CRELIQ = this.CRELIQ;
			other.CMAJ = this.CMAJ;
			other.CECH = this.CECH;
			other.CETIQ = this.CETIQ;
			other.CCOEF = this.CCOEF;
			other.CARROND = this.CARROND;
			other.CENCOUR = this.CENCOUR;
			other.CNIVREL = this.CNIVREL;
			other.CBLOCAG = this.CBLOCAG;
			other.CDATREL = this.CDATREL;
			other.CRESCO = this.CRESCO;
			other.CRESFI = this.CRESFI;
			other.CSFAC = this.CSFAC;
			other.CDATENC = this.CDATENC;
			other.CDATSFA = this.CDATSFA;
			other.CCONTR = this.CCONTR;
			other.CDEREL = this.CDEREL;
			other.CPAYS = this.CPAYS;
			other.CBLTOT = this.CBLTOT;
			other.CBLLIG = this.CBLLIG;
			other.CENCDIS = this.CENCDIS;
			other.CNCEE = this.CNCEE;
			other.CNSFAC = this.CNSFAC;
			other.CPSRDAT = this.CPSRDAT;
			other.CEPNASR = this.CEPNASR;
			other.CCODTAR = this.CCODTAR;
			other.CDEVISE = this.CDEVISE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_16Struct other) {

			other.CREF = this.CREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CREF, other.CREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_24Process(globalMap);

				row8_0Struct row8_0 = new row8_0Struct();
				copyOfcopyOfmain_3_1Struct copyOfcopyOfmain_3_1 = new copyOfcopyOfmain_3_1Struct();

				/**
				 * [tDBOutput_16 begin ] start
				 */

				ok_Hash.put("tDBOutput_16", false);
				start_Hash.put("tDBOutput_16", System.currentTimeMillis());

				currentComponent = "tDBOutput_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3_1");
				}

				int tos_count_tDBOutput_16 = 0;

				String dbschema_tDBOutput_16 = null;
				dbschema_tDBOutput_16 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_16 = null;
				if (dbschema_tDBOutput_16 == null || dbschema_tDBOutput_16.trim().length() == 0) {
					tableName_tDBOutput_16 = ("contact");
				} else {
					tableName_tDBOutput_16 = dbschema_tDBOutput_16 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_16 = 0;
				int nb_line_update_tDBOutput_16 = 0;
				int nb_line_inserted_tDBOutput_16 = 0;
				int nb_line_deleted_tDBOutput_16 = 0;
				int nb_line_rejected_tDBOutput_16 = 0;

				int deletedCount_tDBOutput_16 = 0;
				int updatedCount_tDBOutput_16 = 0;
				int insertedCount_tDBOutput_16 = 0;
				int rejectedCount_tDBOutput_16 = 0;

				boolean whetherReject_tDBOutput_16 = false;

				java.sql.Connection conn_tDBOutput_16 = null;
				String dbUser_tDBOutput_16 = null;

				conn_tDBOutput_16 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_16 = 10000;
				int batchSizeCounter_tDBOutput_16 = 0;

				int count_tDBOutput_16 = 0;
				String insert_tDBOutput_16 = "INSERT INTO \"" + tableName_tDBOutput_16
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom_contact\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_16 = conn_tDBOutput_16.prepareStatement(insert_tDBOutput_16);
				resourceMap.put("pstmt_tDBOutput_16", pstmt_tDBOutput_16);

				/**
				 * [tDBOutput_16 begin ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());

				currentComponent = "tMap_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8_0");
				}

				int tos_count_tMap_16 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15_0Struct> tHash_Lookup_row15_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15_0Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15_0Struct>) globalMap
						.get("tHash_Lookup_row15_0"));

				row15_0Struct row15_0HashKey = new row15_0Struct();
				row15_0Struct row15_0Default = new row15_0Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3_1Struct copyOfcopyOfmain_3_1_tmp = new copyOfcopyOfmain_3_1Struct();
// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_16 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_16 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16,
							row8_0Struct row8_0) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_16 = 0;

						columnIndexWithD_tFileInputDelimited_16 = 0;

						row8_0.CREF = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 1;

						row8_0.CNOM = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 2;

						row8_0.CRUE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 3;

						row8_0.CAUX = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 4;

						row8_0.CCPTL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 5;

						row8_0.CVIL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 6;

						row8_0.FILL01 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 7;

						row8_0.CQUAL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 8;

						row8_0.CCOM1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 9;

						row8_0.CCREP = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 10;

						row8_0.CREMFI = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 11;

						row8_0.CECHE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 12;

						row8_0.CECHJ = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 13;

						row8_0.CPAI = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 14;

						row8_0.CCHAN = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 15;

						row8_0.CECHJ2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 16;

						row8_0.CMOD = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 17;

						row8_0.CBQ1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 18;

						row8_0.CBQ2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 19;

						row8_0.CBQ3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 20;

						row8_0.CBQ4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 21;

						row8_0.CBQ5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 22;

						row8_0.CBQ6 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 23;

						row8_0.CFACT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 24;

						row8_0.CBL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 25;

						row8_0.CESC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 26;

						row8_0.VARAD1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 27;

						row8_0.VARAD2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 28;

						row8_0.VARAD3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 29;

						row8_0.VARAD4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 30;

						row8_0.VARAD5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 31;

						row8_0.VARAD6 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 32;

						row8_0.VARA1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 33;

						row8_0.VARA2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 34;

						row8_0.VARA3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 35;

						row8_0.VARA4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 36;

						row8_0.VARA5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 37;

						row8_0.VARB1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 38;

						row8_0.VARB2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 39;

						row8_0.VARB3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 40;

						row8_0.VARB4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 41;

						row8_0.VARB5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 42;

						row8_0.VARN1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 43;

						row8_0.VARN2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 44;

						row8_0.VARN3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 45;

						row8_0.VARN4 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 46;

						row8_0.VARN5 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 47;

						row8_0.CDATCRE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 48;

						row8_0.CTEL1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 49;

						row8_0.CTEL2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 50;

						row8_0.CTEX1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 51;

						row8_0.CTEX2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 52;

						row8_0.CDELMOY = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 53;

						row8_0.CAFFAIRE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 54;

						row8_0.CCPTFACT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 55;

						row8_0.CINTERNET = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 56;

						row8_0.CIBAN1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 57;

						row8_0.CBIC_old = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 58;

						row8_0.CFIDEL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 59;

						row8_0.CRFA = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 60;

						row8_0.CCOMREG = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 61;

						row8_0.CAPE2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 62;

						row8_0.CIBAN72 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 63;

						row8_0.CIBAN8 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 64;

						row8_0.CIBAN9 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 65;

						row8_0.CBIC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 66;

						row8_0.CTRANSP = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 67;

						row8_0.CFACTMAIL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 68;

						row8_0.CBLMAIL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 69;

						row8_0.CFACTWEB = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 70;

						row8_0.CBLWEB = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 71;

						row8_0.CPUBLIPOSTAGE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 72;

						row8_0.CFACT_EDI = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 73;

						row8_0.CFACT_CHORUS = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 74;

						row8_0.CFACTORING = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 75;

						row8_0.CCHORUS_SERVICE = fid_tFileInputDelimited_16
								.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 76;

						row8_0.CFIL14 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 77;

						row8_0.CTAR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 78;

						row8_0.FIL02 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 79;

						row8_0.CREJ = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 80;

						row8_0.CSECT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 81;

						row8_0.CTOUR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 82;

						row8_0.CCAN1 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 83;

						row8_0.CCAN2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 84;

						row8_0.CCAN3 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 85;

						row8_0.CDATF = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 86;

						row8_0.CCAT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 87;

						row8_0.CRESP = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 88;

						row8_0.CAPE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 89;

						row8_0.CPREMC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 90;

						row8_0.CDERNC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 91;

						row8_0.CPROCC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 92;

						row8_0.CTYPEC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 93;

						row8_0.CSIRET = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 94;

						row8_0.CORIGIN = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 95;

						row8_0.CMOTCOUR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 96;

						row8_0.CCOMPTA = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 97;

						row8_0.CAFFMEMO = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 98;

						row8_0.CFIL2 = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 99;

						row8_0.CPNAFF = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16,
							row8_0Struct row8_0) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_16 = 0;

						columnIndexWithD_tFileInputDelimited_16 = 100;

						row8_0.CDEVTAR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 101;

						row8_0.CMINCOM = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 102;

						row8_0.CRELEVE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 103;

						row8_0.CRELIQ = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 104;

						row8_0.CMAJ = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 105;

						row8_0.CECH = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 106;

						row8_0.CETIQ = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 107;

						row8_0.CCOEF = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 108;

						row8_0.CARROND = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 109;

						row8_0.CENCOUR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 110;

						row8_0.CNIVREL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 111;

						row8_0.CBLOCAG = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 112;

						row8_0.CDATREL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 113;

						row8_0.CRESCO = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 114;

						row8_0.CRESFI = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 115;

						row8_0.CSFAC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 116;

						row8_0.CDATENC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 117;

						row8_0.CDATSFA = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 118;

						row8_0.CCONTR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 119;

						row8_0.CDEREL = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 120;

						row8_0.CPAYS = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 121;

						row8_0.CBLTOT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 122;

						row8_0.CBLLIG = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 123;

						row8_0.CENCDIS = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 124;

						row8_0.CNCEE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 125;

						row8_0.CNSFAC = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 126;

						row8_0.CPSRDAT = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 127;

						row8_0.CEPNASR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 128;

						row8_0.CCODTAR = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

						columnIndexWithD_tFileInputDelimited_16 = 129;

						row8_0.CDEVISE = fid_tFileInputDelimited_16.get(columnIndexWithD_tFileInputDelimited_16);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16,
							row8_0Struct row8_0) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_16, row8_0);

						valueToConn_1(fid_tFileInputDelimited_16, row8_0);

					}

				}
				RowHelper_tFileInputDelimited_16 rowHelper_tFileInputDelimited_16 = new RowHelper_tFileInputDelimited_16();

				int nb_line_tFileInputDelimited_16 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16 = null;
				int limit_tFileInputDelimited_16 = -1;
				try {

					Object filename_tFileInputDelimited_16 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_16 = 0, random_value_tFileInputDelimited_16 = -1;
						if (footer_value_tFileInputDelimited_16 > 0 || random_value_tFileInputDelimited_16 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_16 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_16, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_16 != null && fid_tFileInputDelimited_16.nextRecord()) {
						rowstate_tFileInputDelimited_16.reset();

						row8_0 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row8_0 = new row8_0Struct();
						try {

							rowHelper_tFileInputDelimited_16.valueToConn(fid_tFileInputDelimited_16, row8_0);

							if (rowstate_tFileInputDelimited_16.getException() != null) {
								throw rowstate_tFileInputDelimited_16.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row8_0 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */

						/**
						 * [tFileInputDelimited_16 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_begin ] stop
						 */
// Start of branch "row8_0"
						if (row8_0 != null) {

							/**
							 * [tMap_16 main ] start
							 */

							currentComponent = "tMap_16";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row8_0");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_16 = false;
							boolean mainRowRejected_tMap_16 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row15_0"
							///////////////////////////////////////////////

							boolean forceLooprow15_0 = false;

							row15_0Struct row15_0ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_16 = false;

								row15_0HashKey.CLIENT_KEY = row8_0.CREF;

								row15_0HashKey.hashCodeDirty = true;

								tHash_Lookup_row15_0.lookup(row15_0HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row15_0 != null && tHash_Lookup_row15_0.getCount(row15_0HashKey) > 1) { // G
																														// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row15_0' and it contains more one result from keys : row15_0.CLIENT_KEY = '"
								// + row15_0HashKey.CLIENT_KEY + "'");
							} // G 071

							row15_0Struct row15_0 = null;

							row15_0Struct fromLookup_row15_0 = null;
							row15_0 = row15_0Default;

							if (tHash_Lookup_row15_0 != null && tHash_Lookup_row15_0.hasNext()) { // G 099

								fromLookup_row15_0 = tHash_Lookup_row15_0.next();

							} // G 099

							if (fromLookup_row15_0 != null) {
								row15_0 = fromLookup_row15_0;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3_1 = null;

// # Output table : 'copyOfcopyOfmain_3_1'
								copyOfcopyOfmain_3_1_tmp.idcontact = Numeric.sequence("contact", 1, 1);
								copyOfcopyOfmain_3_1_tmp.principal = false;
								copyOfcopyOfmain_3_1_tmp.fax = row15_0.FAX;
								copyOfcopyOfmain_3_1_tmp.fonction = row15_0.FONCTION;
								copyOfcopyOfmain_3_1_tmp.internet = row15_0.CONT_INTERNET == null ? null
										: row15_0.CONT_INTERNET.isBlank() ? null : row15_0.CONT_INTERNET;
								copyOfcopyOfmain_3_1_tmp.login = row15_0.LOGIN;
								copyOfcopyOfmain_3_1_tmp.mail = row15_0.EMAIL;
								copyOfcopyOfmain_3_1_tmp.mail_validateur = row15_0.CONT_VALIDATEUR;
								copyOfcopyOfmain_3_1_tmp.niveau_validateur = row15_0.CONT_NIVEAU;
								copyOfcopyOfmain_3_1_tmp.nom_contact = row8_0.CNOM;
								copyOfcopyOfmain_3_1_tmp.nom_responsable = null;
								copyOfcopyOfmain_3_1_tmp.nom_respon_commerc = null;
								copyOfcopyOfmain_3_1_tmp.nom_respon_financier = null;
								copyOfcopyOfmain_3_1_tmp.password = row15_0.PASSWORD;
								copyOfcopyOfmain_3_1_tmp.portable = row15_0.PORTABLE;
								copyOfcopyOfmain_3_1_tmp.rang = row15_0.RANG_KEY;
								copyOfcopyOfmain_3_1_tmp.service = row15_0.SERVICE;
								copyOfcopyOfmain_3_1_tmp.telephone = row15_0.TELEPHONE;
								copyOfcopyOfmain_3_1_tmp.telephonebis = null;
								copyOfcopyOfmain_3_1_tmp.idadresse_livraison = null;
								copyOfcopyOfmain_3_1_tmp.idcli = row15_0.CLIENT_KEY;
								copyOfcopyOfmain_3_1_tmp.idfournisseur = null;
								copyOfcopyOfmain_3_1 = copyOfcopyOfmain_3_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_16 = false;

							tos_count_tMap_16++;

							/**
							 * [tMap_16 main ] stop
							 */

							/**
							 * [tMap_16 process_data_begin ] start
							 */

							currentComponent = "tMap_16";

							/**
							 * [tMap_16 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3_1"
							if (copyOfcopyOfmain_3_1 != null) {

								/**
								 * [tDBOutput_16 main ] start
								 */

								currentComponent = "tDBOutput_16";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3_1");
								}

								whetherReject_tDBOutput_16 = false;
								pstmt_tDBOutput_16.setInt(1, copyOfcopyOfmain_3_1.idcontact);

								if (copyOfcopyOfmain_3_1.principal == null) {
									pstmt_tDBOutput_16.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_16.setBoolean(2, copyOfcopyOfmain_3_1.principal);
								}

								if (copyOfcopyOfmain_3_1.fax == null) {
									pstmt_tDBOutput_16.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(3, copyOfcopyOfmain_3_1.fax);
								}

								if (copyOfcopyOfmain_3_1.fonction == null) {
									pstmt_tDBOutput_16.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(4, copyOfcopyOfmain_3_1.fonction);
								}

								if (copyOfcopyOfmain_3_1.internet == null) {
									pstmt_tDBOutput_16.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(5, copyOfcopyOfmain_3_1.internet);
								}

								if (copyOfcopyOfmain_3_1.login == null) {
									pstmt_tDBOutput_16.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(6, copyOfcopyOfmain_3_1.login);
								}

								if (copyOfcopyOfmain_3_1.mail == null) {
									pstmt_tDBOutput_16.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(7, copyOfcopyOfmain_3_1.mail);
								}

								if (copyOfcopyOfmain_3_1.mail_validateur == null) {
									pstmt_tDBOutput_16.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(8, copyOfcopyOfmain_3_1.mail_validateur);
								}

								if (copyOfcopyOfmain_3_1.niveau_validateur == null) {
									pstmt_tDBOutput_16.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(9, copyOfcopyOfmain_3_1.niveau_validateur);
								}

								if (copyOfcopyOfmain_3_1.nom_contact == null) {
									pstmt_tDBOutput_16.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(10, copyOfcopyOfmain_3_1.nom_contact);
								}

								if (copyOfcopyOfmain_3_1.nom_responsable == null) {
									pstmt_tDBOutput_16.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(11, copyOfcopyOfmain_3_1.nom_responsable);
								}

								if (copyOfcopyOfmain_3_1.nom_respon_commerc == null) {
									pstmt_tDBOutput_16.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(12, copyOfcopyOfmain_3_1.nom_respon_commerc);
								}

								if (copyOfcopyOfmain_3_1.nom_respon_financier == null) {
									pstmt_tDBOutput_16.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(13, copyOfcopyOfmain_3_1.nom_respon_financier);
								}

								if (copyOfcopyOfmain_3_1.password == null) {
									pstmt_tDBOutput_16.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(14, copyOfcopyOfmain_3_1.password);
								}

								if (copyOfcopyOfmain_3_1.portable == null) {
									pstmt_tDBOutput_16.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(15, copyOfcopyOfmain_3_1.portable);
								}

								if (copyOfcopyOfmain_3_1.rang == null) {
									pstmt_tDBOutput_16.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(16, copyOfcopyOfmain_3_1.rang);
								}

								if (copyOfcopyOfmain_3_1.service == null) {
									pstmt_tDBOutput_16.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(17, copyOfcopyOfmain_3_1.service);
								}

								if (copyOfcopyOfmain_3_1.telephone == null) {
									pstmt_tDBOutput_16.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(18, copyOfcopyOfmain_3_1.telephone);
								}

								if (copyOfcopyOfmain_3_1.telephonebis == null) {
									pstmt_tDBOutput_16.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(19, copyOfcopyOfmain_3_1.telephonebis);
								}

								if (copyOfcopyOfmain_3_1.idadresse_livraison == null) {
									pstmt_tDBOutput_16.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(20, copyOfcopyOfmain_3_1.idadresse_livraison);
								}

								if (copyOfcopyOfmain_3_1.idcli == null) {
									pstmt_tDBOutput_16.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(21, copyOfcopyOfmain_3_1.idcli);
								}

								if (copyOfcopyOfmain_3_1.idfournisseur == null) {
									pstmt_tDBOutput_16.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_16.setString(22, copyOfcopyOfmain_3_1.idfournisseur);
								}

								pstmt_tDBOutput_16.addBatch();
								nb_line_tDBOutput_16++;

								batchSizeCounter_tDBOutput_16++;

								if ((batchSize_tDBOutput_16 > 0)
										&& (batchSize_tDBOutput_16 <= batchSizeCounter_tDBOutput_16)) {
									try {
										int countSum_tDBOutput_16 = 0;

										for (int countEach_tDBOutput_16 : pstmt_tDBOutput_16.executeBatch()) {
											countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0
													: countEach_tDBOutput_16);
										}

										insertedCount_tDBOutput_16 += countSum_tDBOutput_16;

										batchSizeCounter_tDBOutput_16 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_16) {
										java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),
												sqle_tDBOutput_16 = null;
										String errormessage_tDBOutput_16;
										if (ne_tDBOutput_16 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_16 = new java.sql.SQLException(
													e_tDBOutput_16.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_16.getMessage(),
													ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(),
													ne_tDBOutput_16);
											errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
										} else {
											errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
										}

										int countSum_tDBOutput_16 = 0;
										for (int countEach_tDBOutput_16 : e_tDBOutput_16.getUpdateCounts()) {
											countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0
													: countEach_tDBOutput_16);
										}

										insertedCount_tDBOutput_16 += countSum_tDBOutput_16;

										System.err.println(errormessage_tDBOutput_16);

									}
								}

								tos_count_tDBOutput_16++;

								/**
								 * [tDBOutput_16 main ] stop
								 */

								/**
								 * [tDBOutput_16 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_16";

								/**
								 * [tDBOutput_16 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_16 process_data_end ] start
								 */

								currentComponent = "tDBOutput_16";

								/**
								 * [tDBOutput_16 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3_1"

							/**
							 * [tMap_16 process_data_end ] start
							 */

							currentComponent = "tMap_16";

							/**
							 * [tMap_16 process_data_end ] stop
							 */

						} // End of branch "row8_0"

						/**
						 * [tFileInputDelimited_16 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_16 != null) {
							fid_tFileInputDelimited_16.close();
						}
					}
					if (fid_tFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE", fid_tFileInputDelimited_16.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row15_0 != null) {
					tHash_Lookup_row15_0.endGet();
				}
				globalMap.remove("tHash_Lookup_row15_0");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8_0");
				}

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tDBOutput_16 end ] start
				 */

				currentComponent = "tDBOutput_16";

				try {
					int countSum_tDBOutput_16 = 0;
					if (pstmt_tDBOutput_16 != null && batchSizeCounter_tDBOutput_16 > 0) {

						for (int countEach_tDBOutput_16 : pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}

					}

					insertedCount_tDBOutput_16 += countSum_tDBOutput_16;

				} catch (java.sql.BatchUpdateException e_tDBOutput_16) {
					java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(), sqle_tDBOutput_16 = null;
					String errormessage_tDBOutput_16;
					if (ne_tDBOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_16 = new java.sql.SQLException(
								e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(),
								ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
						errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
					} else {
						errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
					}

					int countSum_tDBOutput_16 = 0;
					for (int countEach_tDBOutput_16 : e_tDBOutput_16.getUpdateCounts()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}

					insertedCount_tDBOutput_16 += countSum_tDBOutput_16;

					System.err.println(errormessage_tDBOutput_16);

				}

				if (pstmt_tDBOutput_16 != null) {

					pstmt_tDBOutput_16.close();
					resourceMap.remove("pstmt_tDBOutput_16");
				}
				resourceMap.put("statementClosed_tDBOutput_16", true);

				nb_line_deleted_tDBOutput_16 = nb_line_deleted_tDBOutput_16 + deletedCount_tDBOutput_16;
				nb_line_update_tDBOutput_16 = nb_line_update_tDBOutput_16 + updatedCount_tDBOutput_16;
				nb_line_inserted_tDBOutput_16 = nb_line_inserted_tDBOutput_16 + insertedCount_tDBOutput_16;
				nb_line_rejected_tDBOutput_16 = nb_line_rejected_tDBOutput_16 + rejectedCount_tDBOutput_16;

				globalMap.put("tDBOutput_16_NB_LINE", nb_line_tDBOutput_16);
				globalMap.put("tDBOutput_16_NB_LINE_UPDATED", nb_line_update_tDBOutput_16);
				globalMap.put("tDBOutput_16_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_16);
				globalMap.put("tDBOutput_16_NB_LINE_DELETED", nb_line_deleted_tDBOutput_16);
				globalMap.put("tDBOutput_16_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_16);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3_1");
				}

				ok_Hash.put("tDBOutput_16", true);
				end_Hash.put("tDBOutput_16", System.currentTimeMillis());

				/**
				 * [tDBOutput_16 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_16:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
			}

			tFileInputDelimited_25Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_16"
			globalMap.remove("tHash_Lookup_row15_0");

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tMap_16 finally ] start
				 */

				currentComponent = "tMap_16";

				/**
				 * [tMap_16 finally ] stop
				 */

				/**
				 * [tDBOutput_16 finally ] start
				 */

				currentComponent = "tDBOutput_16";

				if (resourceMap.get("statementClosed_tDBOutput_16") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_16 = null;
					if ((pstmtToClose_tDBOutput_16 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_16")) != null) {
						pstmtToClose_tDBOutput_16.close();
					}
				}

				/**
				 * [tDBOutput_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_3_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idrib;

		public int getIdrib() {
			return this.idrib;
		}

		public String cle_rib;

		public String getCle_rib() {
			return this.cle_rib;
		}

		public String code_agence;

		public String getCode_agence() {
			return this.code_agence;
		}

		public String code_bic;

		public String getCode_bic() {
			return this.code_bic;
		}

		public String code_banque;

		public String getCode_banque() {
			return this.code_banque;
		}

		public String iban1;

		public String getIban1() {
			return this.iban1;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		public String iban8;

		public String getIban8() {
			return this.iban8;
		}

		public String iban9;

		public String getIban9() {
			return this.iban9;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String nom_banque;

		public String getNom_banque() {
			return this.nom_banque;
		}

		public String numero_compte;

		public String getNumero_compte() {
			return this.numero_compte;
		}

		public String ville_banque;

		public String getVille_banque() {
			return this.ville_banque;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idrib;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3_0Struct other = (copyOfcopyOfmain_3_0Struct) obj;

			if (this.idrib != other.idrib)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;
			other.cle_rib = this.cle_rib;
			other.code_agence = this.code_agence;
			other.code_bic = this.code_bic;
			other.code_banque = this.code_banque;
			other.iban1 = this.iban1;
			other.iban2 = this.iban2;
			other.iban3 = this.iban3;
			other.iban4 = this.iban4;
			other.iban5 = this.iban5;
			other.iban6 = this.iban6;
			other.iban7 = this.iban7;
			other.iban8 = this.iban8;
			other.iban9 = this.iban9;
			other.principal = this.principal;
			other.nom_banque = this.nom_banque;
			other.numero_compte = this.numero_compte;
			other.ville_banque = this.ville_banque;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idrib = dis.readInt();

					this.cle_rib = readString(dis);

					this.code_agence = readString(dis);

					this.code_bic = readString(dis);

					this.code_banque = readString(dis);

					this.iban1 = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

					this.iban8 = readString(dis);

					this.iban9 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.nom_banque = readString(dis);

					this.numero_compte = readString(dis);

					this.ville_banque = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idrib);

				// String

				writeString(this.cle_rib, dos);

				// String

				writeString(this.code_agence, dos);

				// String

				writeString(this.code_bic, dos);

				// String

				writeString(this.code_banque, dos);

				// String

				writeString(this.iban1, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

				// String

				writeString(this.iban8, dos);

				// String

				writeString(this.iban9, dos);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.nom_banque, dos);

				// String

				writeString(this.numero_compte, dos);

				// String

				writeString(this.ville_banque, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrib=" + String.valueOf(idrib));
			sb.append(",cle_rib=" + cle_rib);
			sb.append(",code_agence=" + code_agence);
			sb.append(",code_bic=" + code_bic);
			sb.append(",code_banque=" + code_banque);
			sb.append(",iban1=" + iban1);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append(",iban8=" + iban8);
			sb.append(",iban9=" + iban9);
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",nom_banque=" + nom_banque);
			sb.append(",numero_compte=" + numero_compte);
			sb.append(",ville_banque=" + ville_banque);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrib, other.idrib);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();
				copyOfcopyOfmain_3_0Struct copyOfcopyOfmain_3_0 = new copyOfcopyOfmain_3_0Struct();

				/**
				 * [tDBOutput_17 begin ] start
				 */

				ok_Hash.put("tDBOutput_17", false);
				start_Hash.put("tDBOutput_17", System.currentTimeMillis());

				currentComponent = "tDBOutput_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3_0");
				}

				int tos_count_tDBOutput_17 = 0;

				String dbschema_tDBOutput_17 = null;
				dbschema_tDBOutput_17 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_17 = null;
				if (dbschema_tDBOutput_17 == null || dbschema_tDBOutput_17.trim().length() == 0) {
					tableName_tDBOutput_17 = ("rib");
				} else {
					tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\"" + ("rib");
				}

				int nb_line_tDBOutput_17 = 0;
				int nb_line_update_tDBOutput_17 = 0;
				int nb_line_inserted_tDBOutput_17 = 0;
				int nb_line_deleted_tDBOutput_17 = 0;
				int nb_line_rejected_tDBOutput_17 = 0;

				int deletedCount_tDBOutput_17 = 0;
				int updatedCount_tDBOutput_17 = 0;
				int insertedCount_tDBOutput_17 = 0;
				int rejectedCount_tDBOutput_17 = 0;

				boolean whetherReject_tDBOutput_17 = false;

				java.sql.Connection conn_tDBOutput_17 = null;
				String dbUser_tDBOutput_17 = null;

				conn_tDBOutput_17 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_17 = 10000;
				int batchSizeCounter_tDBOutput_17 = 0;

				int count_tDBOutput_17 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_17 = conn_tDBOutput_17.createStatement()) {
					stmtClear_tDBOutput_17.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_17 + "\"");
				}
				String insert_tDBOutput_17 = "INSERT INTO \"" + tableName_tDBOutput_17
						+ "\" (\"idrib\",\"cle_rib\",\"code_agence\",\"code_bic\",\"code_banque\",\"iban1\",\"iban2\",\"iban3\",\"iban4\",\"iban5\",\"iban6\",\"iban7\",\"iban8\",\"iban9\",\"principal\",\"nom_banque\",\"numero_compte\",\"ville_banque\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17.prepareStatement(insert_tDBOutput_17);
				resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);

				/**
				 * [tDBOutput_17 begin ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());

				currentComponent = "tMap_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_22 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_22__Struct {
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3_0Struct copyOfcopyOfmain_3_0_tmp = new copyOfcopyOfmain_3_0Struct();
// ###############################

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_25 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_25", false);
				start_Hash.put("tFileInputDelimited_25", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_25";

				int tos_count_tFileInputDelimited_25 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_25 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_25 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_25,
							row21Struct row21) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_25 = 0;

						columnIndexWithD_tFileInputDelimited_25 = 0;

						row21.CREF = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 1;

						row21.CNOM = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 2;

						row21.CRUE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 3;

						row21.CAUX = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 4;

						row21.CCPTL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 5;

						row21.CVIL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 6;

						row21.FILL01 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 7;

						row21.CQUAL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 8;

						row21.CCOM1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 9;

						row21.CCREP = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 10;

						row21.CREMFI = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 11;

						row21.CECHE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 12;

						row21.CECHJ = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 13;

						row21.CPAI = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 14;

						row21.CCHAN = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 15;

						row21.CECHJ2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 16;

						row21.CMOD = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 17;

						row21.CBQ1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 18;

						row21.CBQ2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 19;

						row21.CBQ3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 20;

						row21.CBQ4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 21;

						row21.CBQ5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 22;

						row21.CBQ6 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 23;

						row21.CFACT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 24;

						row21.CBL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 25;

						row21.CESC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 26;

						row21.VARAD1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 27;

						row21.VARAD2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 28;

						row21.VARAD3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 29;

						row21.VARAD4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 30;

						row21.VARAD5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 31;

						row21.VARAD6 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 32;

						row21.VARA1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 33;

						row21.VARA2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 34;

						row21.VARA3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 35;

						row21.VARA4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 36;

						row21.VARA5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 37;

						row21.VARB1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 38;

						row21.VARB2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 39;

						row21.VARB3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 40;

						row21.VARB4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 41;

						row21.VARB5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 42;

						row21.VARN1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 43;

						row21.VARN2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 44;

						row21.VARN3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 45;

						row21.VARN4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 46;

						row21.VARN5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 47;

						row21.CDATCRE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 48;

						row21.CTEL1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 49;

						row21.CTEL2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 50;

						row21.CTEX1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 51;

						row21.CTEX2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 52;

						row21.CDELMOY = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 53;

						row21.CAFFAIRE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 54;

						row21.CCPTFACT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 55;

						row21.CINTERNET = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 56;

						row21.CIBAN1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 57;

						row21.CBIC_old = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 58;

						row21.CFIDEL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 59;

						row21.CRFA = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 60;

						row21.CCOMREG = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 61;

						row21.CAPE2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 62;

						row21.CIBAN72 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 63;

						row21.CIBAN8 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 64;

						row21.CIBAN9 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 65;

						row21.CBIC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 66;

						row21.CTRANSP = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 67;

						row21.CFACTMAIL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 68;

						row21.CBLMAIL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 69;

						row21.CFACTWEB = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 70;

						row21.CBLWEB = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 71;

						row21.CPUBLIPOSTAGE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 72;

						row21.CFACT_EDI = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 73;

						row21.CFACT_CHORUS = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 74;

						row21.CFACTORING = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 75;

						row21.CCHORUS_SERVICE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 76;

						row21.CFIL14 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 77;

						row21.CTAR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 78;

						row21.FIL02 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 79;

						row21.CREJ = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 80;

						row21.CSECT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 81;

						row21.CTOUR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 82;

						row21.CCAN1 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 83;

						row21.CCAN2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 84;

						row21.CCAN3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 85;

						row21.CDATF = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 86;

						row21.CCAT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 87;

						row21.CRESP = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 88;

						row21.CAPE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 89;

						row21.CPREMC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 90;

						row21.CDERNC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 91;

						row21.CPROCC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 92;

						row21.CTYPEC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 93;

						row21.CSIRET = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 94;

						row21.CORIGIN = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 95;

						row21.CMOTCOUR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 96;

						row21.CCOMPTA = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 97;

						row21.CAFFMEMO = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 98;

						row21.CFIL2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 99;

						row21.CPNAFF = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_25,
							row21Struct row21) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_25 = 0;

						columnIndexWithD_tFileInputDelimited_25 = 100;

						row21.CDEVTAR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 101;

						row21.CMINCOM = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 102;

						row21.CRELEVE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 103;

						row21.CRELIQ = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 104;

						row21.CMAJ = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 105;

						row21.CECH = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 106;

						row21.CETIQ = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 107;

						row21.CCOEF = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 108;

						row21.CARROND = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 109;

						row21.CENCOUR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 110;

						row21.CNIVREL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 111;

						row21.CBLOCAG = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 112;

						row21.CDATREL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 113;

						row21.CRESCO = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 114;

						row21.CRESFI = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 115;

						row21.CSFAC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 116;

						row21.CDATENC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 117;

						row21.CDATSFA = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 118;

						row21.CCONTR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 119;

						row21.CDEREL = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 120;

						row21.CPAYS = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 121;

						row21.CBLTOT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 122;

						row21.CBLLIG = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 123;

						row21.CENCDIS = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 124;

						row21.CNCEE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 125;

						row21.CNSFAC = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 126;

						row21.CPSRDAT = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 127;

						row21.CEPNASR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 128;

						row21.CCODTAR = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 129;

						row21.CDEVISE = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 130;

						row21.iban2 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 131;

						row21.iban3 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 132;

						row21.iban4 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 133;

						row21.iban5 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 134;

						row21.iban6 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

						columnIndexWithD_tFileInputDelimited_25 = 135;

						row21.iban7 = fid_tFileInputDelimited_25.get(columnIndexWithD_tFileInputDelimited_25);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_25,
							row21Struct row21) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_25, row21);

						valueToConn_1(fid_tFileInputDelimited_25, row21);

					}

				}
				RowHelper_tFileInputDelimited_25 rowHelper_tFileInputDelimited_25 = new RowHelper_tFileInputDelimited_25();

				int nb_line_tFileInputDelimited_25 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_25 = null;
				int limit_tFileInputDelimited_25 = -1;
				try {

					Object filename_tFileInputDelimited_25 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_25 = 0, random_value_tFileInputDelimited_25 = -1;
						if (footer_value_tFileInputDelimited_25 > 0 || random_value_tFileInputDelimited_25 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_25 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_25, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_25 != null && fid_tFileInputDelimited_25.nextRecord()) {
						rowstate_tFileInputDelimited_25.reset();

						row21 = null;

						boolean whetherReject_tFileInputDelimited_25 = false;
						row21 = new row21Struct();
						try {

							rowHelper_tFileInputDelimited_25.valueToConn(fid_tFileInputDelimited_25, row21);

							if (rowstate_tFileInputDelimited_25.getException() != null) {
								throw rowstate_tFileInputDelimited_25.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_25 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_25 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_25 main ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						tos_count_tFileInputDelimited_25++;

						/**
						 * [tFileInputDelimited_25 main ] stop
						 */

						/**
						 * [tFileInputDelimited_25 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						/**
						 * [tFileInputDelimited_25 process_data_begin ] stop
						 */
// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tMap_22 main ] start
							 */

							currentComponent = "tMap_22";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_22 = false;
							boolean mainRowRejected_tMap_22 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3_0 = null;

// # Output table : 'copyOfcopyOfmain_3_0'
								copyOfcopyOfmain_3_0_tmp.idrib = Numeric.sequence("rib1", 1, 1);
								copyOfcopyOfmain_3_0_tmp.cle_rib = row21.CBQ6;
								copyOfcopyOfmain_3_0_tmp.code_agence = row21.CBQ4;
								copyOfcopyOfmain_3_0_tmp.code_bic = row21.CBIC;
								copyOfcopyOfmain_3_0_tmp.code_banque = row21.CBQ3;
								copyOfcopyOfmain_3_0_tmp.iban1 = row21.CIBAN1;
								copyOfcopyOfmain_3_0_tmp.iban2 = row21.iban2;
								copyOfcopyOfmain_3_0_tmp.iban3 = row21.iban3;
								copyOfcopyOfmain_3_0_tmp.iban4 = row21.iban4;
								copyOfcopyOfmain_3_0_tmp.iban5 = row21.iban5;
								copyOfcopyOfmain_3_0_tmp.iban6 = row21.iban6;
								copyOfcopyOfmain_3_0_tmp.iban7 = row21.iban7;
								copyOfcopyOfmain_3_0_tmp.iban8 = row21.CIBAN8;
								copyOfcopyOfmain_3_0_tmp.iban9 = row21.CIBAN9;
								copyOfcopyOfmain_3_0_tmp.principal = true;
								copyOfcopyOfmain_3_0_tmp.nom_banque = row21.CBQ1;
								copyOfcopyOfmain_3_0_tmp.numero_compte = row21.CBQ5;
								copyOfcopyOfmain_3_0_tmp.ville_banque = row21.CBQ2;
								copyOfcopyOfmain_3_0_tmp.idcli = row21.CREF;
								copyOfcopyOfmain_3_0_tmp.idfournisseur = null;
								copyOfcopyOfmain_3_0 = copyOfcopyOfmain_3_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_22 = false;

							tos_count_tMap_22++;

							/**
							 * [tMap_22 main ] stop
							 */

							/**
							 * [tMap_22 process_data_begin ] start
							 */

							currentComponent = "tMap_22";

							/**
							 * [tMap_22 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3_0"
							if (copyOfcopyOfmain_3_0 != null) {

								/**
								 * [tDBOutput_17 main ] start
								 */

								currentComponent = "tDBOutput_17";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3_0");
								}

								whetherReject_tDBOutput_17 = false;
								pstmt_tDBOutput_17.setInt(1, copyOfcopyOfmain_3_0.idrib);

								if (copyOfcopyOfmain_3_0.cle_rib == null) {
									pstmt_tDBOutput_17.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(2, copyOfcopyOfmain_3_0.cle_rib);
								}

								if (copyOfcopyOfmain_3_0.code_agence == null) {
									pstmt_tDBOutput_17.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(3, copyOfcopyOfmain_3_0.code_agence);
								}

								if (copyOfcopyOfmain_3_0.code_bic == null) {
									pstmt_tDBOutput_17.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(4, copyOfcopyOfmain_3_0.code_bic);
								}

								if (copyOfcopyOfmain_3_0.code_banque == null) {
									pstmt_tDBOutput_17.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(5, copyOfcopyOfmain_3_0.code_banque);
								}

								if (copyOfcopyOfmain_3_0.iban1 == null) {
									pstmt_tDBOutput_17.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(6, copyOfcopyOfmain_3_0.iban1);
								}

								if (copyOfcopyOfmain_3_0.iban2 == null) {
									pstmt_tDBOutput_17.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(7, copyOfcopyOfmain_3_0.iban2);
								}

								if (copyOfcopyOfmain_3_0.iban3 == null) {
									pstmt_tDBOutput_17.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(8, copyOfcopyOfmain_3_0.iban3);
								}

								if (copyOfcopyOfmain_3_0.iban4 == null) {
									pstmt_tDBOutput_17.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(9, copyOfcopyOfmain_3_0.iban4);
								}

								if (copyOfcopyOfmain_3_0.iban5 == null) {
									pstmt_tDBOutput_17.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(10, copyOfcopyOfmain_3_0.iban5);
								}

								if (copyOfcopyOfmain_3_0.iban6 == null) {
									pstmt_tDBOutput_17.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(11, copyOfcopyOfmain_3_0.iban6);
								}

								if (copyOfcopyOfmain_3_0.iban7 == null) {
									pstmt_tDBOutput_17.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(12, copyOfcopyOfmain_3_0.iban7);
								}

								if (copyOfcopyOfmain_3_0.iban8 == null) {
									pstmt_tDBOutput_17.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(13, copyOfcopyOfmain_3_0.iban8);
								}

								if (copyOfcopyOfmain_3_0.iban9 == null) {
									pstmt_tDBOutput_17.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(14, copyOfcopyOfmain_3_0.iban9);
								}

								if (copyOfcopyOfmain_3_0.principal == null) {
									pstmt_tDBOutput_17.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_17.setBoolean(15, copyOfcopyOfmain_3_0.principal);
								}

								if (copyOfcopyOfmain_3_0.nom_banque == null) {
									pstmt_tDBOutput_17.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(16, copyOfcopyOfmain_3_0.nom_banque);
								}

								if (copyOfcopyOfmain_3_0.numero_compte == null) {
									pstmt_tDBOutput_17.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(17, copyOfcopyOfmain_3_0.numero_compte);
								}

								if (copyOfcopyOfmain_3_0.ville_banque == null) {
									pstmt_tDBOutput_17.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(18, copyOfcopyOfmain_3_0.ville_banque);
								}

								if (copyOfcopyOfmain_3_0.idcli == null) {
									pstmt_tDBOutput_17.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(19, copyOfcopyOfmain_3_0.idcli);
								}

								if (copyOfcopyOfmain_3_0.idfournisseur == null) {
									pstmt_tDBOutput_17.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_17.setString(20, copyOfcopyOfmain_3_0.idfournisseur);
								}

								pstmt_tDBOutput_17.addBatch();
								nb_line_tDBOutput_17++;

								batchSizeCounter_tDBOutput_17++;

								if ((batchSize_tDBOutput_17 > 0)
										&& (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
									try {
										int countSum_tDBOutput_17 = 0;

										for (int countEach_tDBOutput_17 : pstmt_tDBOutput_17.executeBatch()) {
											countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
													: countEach_tDBOutput_17);
										}

										insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

										batchSizeCounter_tDBOutput_17 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_17) {
										java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),
												sqle_tDBOutput_17 = null;
										String errormessage_tDBOutput_17;
										if (ne_tDBOutput_17 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_17 = new java.sql.SQLException(
													e_tDBOutput_17.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_17.getMessage(),
													ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(),
													ne_tDBOutput_17);
											errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
										} else {
											errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
										}

										int countSum_tDBOutput_17 = 0;
										for (int countEach_tDBOutput_17 : e_tDBOutput_17.getUpdateCounts()) {
											countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
													: countEach_tDBOutput_17);
										}

										insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

										System.err.println(errormessage_tDBOutput_17);

									}
								}

								tos_count_tDBOutput_17++;

								/**
								 * [tDBOutput_17 main ] stop
								 */

								/**
								 * [tDBOutput_17 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_17";

								/**
								 * [tDBOutput_17 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_17 process_data_end ] start
								 */

								currentComponent = "tDBOutput_17";

								/**
								 * [tDBOutput_17 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3_0"

							/**
							 * [tMap_22 process_data_end ] start
							 */

							currentComponent = "tMap_22";

							/**
							 * [tMap_22 process_data_end ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_25 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						/**
						 * [tFileInputDelimited_25 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_25 end ] start
						 */

						currentComponent = "tFileInputDelimited_25";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_25 != null) {
							fid_tFileInputDelimited_25.close();
						}
					}
					if (fid_tFileInputDelimited_25 != null) {
						globalMap.put("tFileInputDelimited_25_NB_LINE", fid_tFileInputDelimited_25.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_25", true);
				end_Hash.put("tFileInputDelimited_25", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_25 end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tDBOutput_17 end ] start
				 */

				currentComponent = "tDBOutput_17";

				try {
					int countSum_tDBOutput_17 = 0;
					if (pstmt_tDBOutput_17 != null && batchSizeCounter_tDBOutput_17 > 0) {

						for (int countEach_tDBOutput_17 : pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}

					}

					insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

				} catch (java.sql.BatchUpdateException e_tDBOutput_17) {
					java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(), sqle_tDBOutput_17 = null;
					String errormessage_tDBOutput_17;
					if (ne_tDBOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_17 = new java.sql.SQLException(
								e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(),
								ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
						errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
					} else {
						errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
					}

					int countSum_tDBOutput_17 = 0;
					for (int countEach_tDBOutput_17 : e_tDBOutput_17.getUpdateCounts()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}

					insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

					System.err.println(errormessage_tDBOutput_17);

				}

				if (pstmt_tDBOutput_17 != null) {

					pstmt_tDBOutput_17.close();
					resourceMap.remove("pstmt_tDBOutput_17");
				}
				resourceMap.put("statementClosed_tDBOutput_17", true);

				nb_line_deleted_tDBOutput_17 = nb_line_deleted_tDBOutput_17 + deletedCount_tDBOutput_17;
				nb_line_update_tDBOutput_17 = nb_line_update_tDBOutput_17 + updatedCount_tDBOutput_17;
				nb_line_inserted_tDBOutput_17 = nb_line_inserted_tDBOutput_17 + insertedCount_tDBOutput_17;
				nb_line_rejected_tDBOutput_17 = nb_line_rejected_tDBOutput_17 + rejectedCount_tDBOutput_17;

				globalMap.put("tDBOutput_17_NB_LINE", nb_line_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_UPDATED", nb_line_update_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_DELETED", nb_line_deleted_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_17);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3_0");
				}

				ok_Hash.put("tDBOutput_17", true);
				end_Hash.put("tDBOutput_17", System.currentTimeMillis());

				/**
				 * [tDBOutput_17 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_25:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
			}

			tFileInputDelimited_26Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_25 finally ] start
				 */

				currentComponent = "tFileInputDelimited_25";

				/**
				 * [tFileInputDelimited_25 finally ] stop
				 */

				/**
				 * [tMap_22 finally ] start
				 */

				currentComponent = "tMap_22";

				/**
				 * [tMap_22 finally ] stop
				 */

				/**
				 * [tDBOutput_17 finally ] start
				 */

				currentComponent = "tDBOutput_17";

				if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
					if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_17")) != null) {
						pstmtToClose_tDBOutput_17.close();
					}
				}

				/**
				 * [tDBOutput_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_3_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_3_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idrib;

		public int getIdrib() {
			return this.idrib;
		}

		public String cle_rib;

		public String getCle_rib() {
			return this.cle_rib;
		}

		public String code_agence;

		public String getCode_agence() {
			return this.code_agence;
		}

		public String code_bic;

		public String getCode_bic() {
			return this.code_bic;
		}

		public String code_banque;

		public String getCode_banque() {
			return this.code_banque;
		}

		public String iban1;

		public String getIban1() {
			return this.iban1;
		}

		public String iban2;

		public String getIban2() {
			return this.iban2;
		}

		public String iban3;

		public String getIban3() {
			return this.iban3;
		}

		public String iban4;

		public String getIban4() {
			return this.iban4;
		}

		public String iban5;

		public String getIban5() {
			return this.iban5;
		}

		public String iban6;

		public String getIban6() {
			return this.iban6;
		}

		public String iban7;

		public String getIban7() {
			return this.iban7;
		}

		public String iban8;

		public String getIban8() {
			return this.iban8;
		}

		public String iban9;

		public String getIban9() {
			return this.iban9;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String nom_banque;

		public String getNom_banque() {
			return this.nom_banque;
		}

		public String numero_compte;

		public String getNumero_compte() {
			return this.numero_compte;
		}

		public String ville_banque;

		public String getVille_banque() {
			return this.ville_banque;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idrib;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_3_0Struct other = (copyOfcopyOfcopyOfmain_3_0Struct) obj;

			if (this.idrib != other.idrib)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;
			other.cle_rib = this.cle_rib;
			other.code_agence = this.code_agence;
			other.code_bic = this.code_bic;
			other.code_banque = this.code_banque;
			other.iban1 = this.iban1;
			other.iban2 = this.iban2;
			other.iban3 = this.iban3;
			other.iban4 = this.iban4;
			other.iban5 = this.iban5;
			other.iban6 = this.iban6;
			other.iban7 = this.iban7;
			other.iban8 = this.iban8;
			other.iban9 = this.iban9;
			other.principal = this.principal;
			other.nom_banque = this.nom_banque;
			other.numero_compte = this.numero_compte;
			other.ville_banque = this.ville_banque;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			other.idrib = this.idrib;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idrib = dis.readInt();

					this.cle_rib = readString(dis);

					this.code_agence = readString(dis);

					this.code_bic = readString(dis);

					this.code_banque = readString(dis);

					this.iban1 = readString(dis);

					this.iban2 = readString(dis);

					this.iban3 = readString(dis);

					this.iban4 = readString(dis);

					this.iban5 = readString(dis);

					this.iban6 = readString(dis);

					this.iban7 = readString(dis);

					this.iban8 = readString(dis);

					this.iban9 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.nom_banque = readString(dis);

					this.numero_compte = readString(dis);

					this.ville_banque = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idrib);

				// String

				writeString(this.cle_rib, dos);

				// String

				writeString(this.code_agence, dos);

				// String

				writeString(this.code_bic, dos);

				// String

				writeString(this.code_banque, dos);

				// String

				writeString(this.iban1, dos);

				// String

				writeString(this.iban2, dos);

				// String

				writeString(this.iban3, dos);

				// String

				writeString(this.iban4, dos);

				// String

				writeString(this.iban5, dos);

				// String

				writeString(this.iban6, dos);

				// String

				writeString(this.iban7, dos);

				// String

				writeString(this.iban8, dos);

				// String

				writeString(this.iban9, dos);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.nom_banque, dos);

				// String

				writeString(this.numero_compte, dos);

				// String

				writeString(this.ville_banque, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrib=" + String.valueOf(idrib));
			sb.append(",cle_rib=" + cle_rib);
			sb.append(",code_agence=" + code_agence);
			sb.append(",code_bic=" + code_bic);
			sb.append(",code_banque=" + code_banque);
			sb.append(",iban1=" + iban1);
			sb.append(",iban2=" + iban2);
			sb.append(",iban3=" + iban3);
			sb.append(",iban4=" + iban4);
			sb.append(",iban5=" + iban5);
			sb.append(",iban6=" + iban6);
			sb.append(",iban7=" + iban7);
			sb.append(",iban8=" + iban8);
			sb.append(",iban9=" + iban9);
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",nom_banque=" + nom_banque);
			sb.append(",numero_compte=" + numero_compte);
			sb.append(",ville_banque=" + ville_banque);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_3_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrib, other.idrib);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16_0Struct implements routines.system.IPersistableRow<row16_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String RIB_CLI;

		public String getRIB_CLI() {
			return this.RIB_CLI;
		}

		public String RIB_RANG;

		public String getRIB_RANG() {
			return this.RIB_RANG;
		}

		public String RIB_NOM_BANQUE;

		public String getRIB_NOM_BANQUE() {
			return this.RIB_NOM_BANQUE;
		}

		public String RIB_VILLE_BANQUE;

		public String getRIB_VILLE_BANQUE() {
			return this.RIB_VILLE_BANQUE;
		}

		public String RIB_IBAN2;

		public String getRIB_IBAN2() {
			return this.RIB_IBAN2;
		}

		public String RIB_IBAN3;

		public String getRIB_IBAN3() {
			return this.RIB_IBAN3;
		}

		public String RIB_IBAN4;

		public String getRIB_IBAN4() {
			return this.RIB_IBAN4;
		}

		public String RIB_IBAN5;

		public String getRIB_IBAN5() {
			return this.RIB_IBAN5;
		}

		public String RIB_IBAN6;

		public String getRIB_IBAN6() {
			return this.RIB_IBAN6;
		}

		public String RIB_IBAN71;

		public String getRIB_IBAN71() {
			return this.RIB_IBAN71;
		}

		public String RIN_IBAN1;

		public String getRIN_IBAN1() {
			return this.RIN_IBAN1;
		}

		public String RIN_IBANBIC;

		public String getRIN_IBANBIC() {
			return this.RIN_IBANBIC;
		}

		public String RIN_IBAN72;

		public String getRIN_IBAN72() {
			return this.RIN_IBAN72;
		}

		public String RIN_IBAN8;

		public String getRIN_IBAN8() {
			return this.RIN_IBAN8;
		}

		public String RIB_IBAN9;

		public String getRIB_IBAN9() {
			return this.RIB_IBAN9;
		}

		public String RIB_IBAN7;

		public String getRIB_IBAN7() {
			return this.RIB_IBAN7;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.RIB_CLI = readString(dis);

					this.RIB_RANG = readString(dis);

					this.RIB_NOM_BANQUE = readString(dis);

					this.RIB_VILLE_BANQUE = readString(dis);

					this.RIB_IBAN2 = readString(dis);

					this.RIB_IBAN3 = readString(dis);

					this.RIB_IBAN4 = readString(dis);

					this.RIB_IBAN5 = readString(dis);

					this.RIB_IBAN6 = readString(dis);

					this.RIB_IBAN71 = readString(dis);

					this.RIN_IBAN1 = readString(dis);

					this.RIN_IBANBIC = readString(dis);

					this.RIN_IBAN72 = readString(dis);

					this.RIN_IBAN8 = readString(dis);

					this.RIB_IBAN9 = readString(dis);

					this.RIB_IBAN7 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RIB_CLI, dos);

				// String

				writeString(this.RIB_RANG, dos);

				// String

				writeString(this.RIB_NOM_BANQUE, dos);

				// String

				writeString(this.RIB_VILLE_BANQUE, dos);

				// String

				writeString(this.RIB_IBAN2, dos);

				// String

				writeString(this.RIB_IBAN3, dos);

				// String

				writeString(this.RIB_IBAN4, dos);

				// String

				writeString(this.RIB_IBAN5, dos);

				// String

				writeString(this.RIB_IBAN6, dos);

				// String

				writeString(this.RIB_IBAN71, dos);

				// String

				writeString(this.RIN_IBAN1, dos);

				// String

				writeString(this.RIN_IBANBIC, dos);

				// String

				writeString(this.RIN_IBAN72, dos);

				// String

				writeString(this.RIN_IBAN8, dos);

				// String

				writeString(this.RIB_IBAN9, dos);

				// String

				writeString(this.RIB_IBAN7, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RIB_CLI=" + RIB_CLI);
			sb.append(",RIB_RANG=" + RIB_RANG);
			sb.append(",RIB_NOM_BANQUE=" + RIB_NOM_BANQUE);
			sb.append(",RIB_VILLE_BANQUE=" + RIB_VILLE_BANQUE);
			sb.append(",RIB_IBAN2=" + RIB_IBAN2);
			sb.append(",RIB_IBAN3=" + RIB_IBAN3);
			sb.append(",RIB_IBAN4=" + RIB_IBAN4);
			sb.append(",RIB_IBAN5=" + RIB_IBAN5);
			sb.append(",RIB_IBAN6=" + RIB_IBAN6);
			sb.append(",RIB_IBAN71=" + RIB_IBAN71);
			sb.append(",RIN_IBAN1=" + RIN_IBAN1);
			sb.append(",RIN_IBANBIC=" + RIN_IBANBIC);
			sb.append(",RIN_IBAN72=" + RIN_IBAN72);
			sb.append(",RIN_IBAN8=" + RIN_IBAN8);
			sb.append(",RIB_IBAN9=" + RIB_IBAN9);
			sb.append(",RIB_IBAN7=" + RIB_IBAN7);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16_0Struct row16_0 = new row16_0Struct();
				copyOfcopyOfcopyOfmain_3_0Struct copyOfcopyOfcopyOfmain_3_0 = new copyOfcopyOfcopyOfmain_3_0Struct();

				/**
				 * [tDBOutput_18 begin ] start
				 */

				ok_Hash.put("tDBOutput_18", false);
				start_Hash.put("tDBOutput_18", System.currentTimeMillis());

				currentComponent = "tDBOutput_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_3_0");
				}

				int tos_count_tDBOutput_18 = 0;

				String dbschema_tDBOutput_18 = null;
				dbschema_tDBOutput_18 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_18 = null;
				if (dbschema_tDBOutput_18 == null || dbschema_tDBOutput_18.trim().length() == 0) {
					tableName_tDBOutput_18 = ("rib");
				} else {
					tableName_tDBOutput_18 = dbschema_tDBOutput_18 + "\".\"" + ("rib");
				}

				int nb_line_tDBOutput_18 = 0;
				int nb_line_update_tDBOutput_18 = 0;
				int nb_line_inserted_tDBOutput_18 = 0;
				int nb_line_deleted_tDBOutput_18 = 0;
				int nb_line_rejected_tDBOutput_18 = 0;

				int deletedCount_tDBOutput_18 = 0;
				int updatedCount_tDBOutput_18 = 0;
				int insertedCount_tDBOutput_18 = 0;
				int rejectedCount_tDBOutput_18 = 0;

				boolean whetherReject_tDBOutput_18 = false;

				java.sql.Connection conn_tDBOutput_18 = null;
				String dbUser_tDBOutput_18 = null;

				conn_tDBOutput_18 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_18 = 10000;
				int batchSizeCounter_tDBOutput_18 = 0;

				int count_tDBOutput_18 = 0;
				String insert_tDBOutput_18 = "INSERT INTO \"" + tableName_tDBOutput_18
						+ "\" (\"idrib\",\"cle_rib\",\"code_agence\",\"code_bic\",\"code_banque\",\"iban1\",\"iban2\",\"iban3\",\"iban4\",\"iban5\",\"iban6\",\"iban7\",\"iban8\",\"iban9\",\"principal\",\"nom_banque\",\"numero_compte\",\"ville_banque\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_18 = conn_tDBOutput_18.prepareStatement(insert_tDBOutput_18);
				resourceMap.put("pstmt_tDBOutput_18", pstmt_tDBOutput_18);

				/**
				 * [tDBOutput_18 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16_0");
				}

				int tos_count_tMap_23 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_3_0Struct copyOfcopyOfcopyOfmain_3_0_tmp = new copyOfcopyOfcopyOfmain_3_0Struct();
// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_26 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_26", false);
				start_Hash.put("tFileInputDelimited_26", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_26";

				int tos_count_tFileInputDelimited_26 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_26 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_26 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_26 = null;
				int limit_tFileInputDelimited_26 = -1;
				try {

					Object filename_tFileInputDelimited_26 = "C:/DEV/Data/Base Montauban/fichier_rib.csv";
					if (filename_tFileInputDelimited_26 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_26 = 0, random_value_tFileInputDelimited_26 = -1;
						if (footer_value_tFileInputDelimited_26 > 0 || random_value_tFileInputDelimited_26 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_26 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/fichier_rib.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_26, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_26 != null && fid_tFileInputDelimited_26.nextRecord()) {
						rowstate_tFileInputDelimited_26.reset();

						row16_0 = null;

						boolean whetherReject_tFileInputDelimited_26 = false;
						row16_0 = new row16_0Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_26 = 0;

							columnIndexWithD_tFileInputDelimited_26 = 0;

							row16_0.RIB_CLI = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 1;

							row16_0.RIB_RANG = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 2;

							row16_0.RIB_NOM_BANQUE = fid_tFileInputDelimited_26
									.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 3;

							row16_0.RIB_VILLE_BANQUE = fid_tFileInputDelimited_26
									.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 4;

							row16_0.RIB_IBAN2 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 5;

							row16_0.RIB_IBAN3 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 6;

							row16_0.RIB_IBAN4 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 7;

							row16_0.RIB_IBAN5 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 8;

							row16_0.RIB_IBAN6 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 9;

							row16_0.RIB_IBAN71 = fid_tFileInputDelimited_26
									.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 10;

							row16_0.RIN_IBAN1 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 11;

							row16_0.RIN_IBANBIC = fid_tFileInputDelimited_26
									.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 12;

							row16_0.RIN_IBAN72 = fid_tFileInputDelimited_26
									.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 13;

							row16_0.RIN_IBAN8 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 14;

							row16_0.RIB_IBAN9 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							columnIndexWithD_tFileInputDelimited_26 = 15;

							row16_0.RIB_IBAN7 = fid_tFileInputDelimited_26.get(columnIndexWithD_tFileInputDelimited_26);

							if (rowstate_tFileInputDelimited_26.getException() != null) {
								throw rowstate_tFileInputDelimited_26.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_26 = true;

							System.err.println(e.getMessage());
							row16_0 = null;

						}

						/**
						 * [tFileInputDelimited_26 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_26 main ] start
						 */

						currentComponent = "tFileInputDelimited_26";

						tos_count_tFileInputDelimited_26++;

						/**
						 * [tFileInputDelimited_26 main ] stop
						 */

						/**
						 * [tFileInputDelimited_26 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_26";

						/**
						 * [tFileInputDelimited_26 process_data_begin ] stop
						 */
// Start of branch "row16_0"
						if (row16_0 != null) {

							/**
							 * [tMap_23 main ] start
							 */

							currentComponent = "tMap_23";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row16_0");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_23 = false;
							boolean mainRowRejected_tMap_23 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_3_0 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_3_0'
								copyOfcopyOfcopyOfmain_3_0_tmp.idrib = Numeric.sequence("rib1", 1, 1);
								copyOfcopyOfcopyOfmain_3_0_tmp.cle_rib = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_agence = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_bic = row16_0.RIN_IBANBIC;
								copyOfcopyOfcopyOfmain_3_0_tmp.code_banque = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban1 = row16_0.RIN_IBAN1;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban2 = row16_0.RIB_IBAN2;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban3 = row16_0.RIB_IBAN3;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban4 = row16_0.RIB_IBAN4;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban5 = row16_0.RIB_IBAN5;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban6 = row16_0.RIB_IBAN6;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban7 = row16_0.RIB_IBAN7;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban8 = row16_0.RIN_IBAN8;
								copyOfcopyOfcopyOfmain_3_0_tmp.iban9 = row16_0.RIB_IBAN9;
								copyOfcopyOfcopyOfmain_3_0_tmp.principal = false;
								copyOfcopyOfcopyOfmain_3_0_tmp.nom_banque = row16_0.RIB_NOM_BANQUE;
								copyOfcopyOfcopyOfmain_3_0_tmp.numero_compte = null;
								copyOfcopyOfcopyOfmain_3_0_tmp.ville_banque = row16_0.RIB_VILLE_BANQUE;
								copyOfcopyOfcopyOfmain_3_0_tmp.idcli = row16_0.RIB_CLI;
								copyOfcopyOfcopyOfmain_3_0_tmp.idfournisseur = null;
								copyOfcopyOfcopyOfmain_3_0 = copyOfcopyOfcopyOfmain_3_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_23 = false;

							tos_count_tMap_23++;

							/**
							 * [tMap_23 main ] stop
							 */

							/**
							 * [tMap_23 process_data_begin ] start
							 */

							currentComponent = "tMap_23";

							/**
							 * [tMap_23 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_3_0"
							if (copyOfcopyOfcopyOfmain_3_0 != null) {

								/**
								 * [tDBOutput_18 main ] start
								 */

								currentComponent = "tDBOutput_18";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_3_0");
								}

								whetherReject_tDBOutput_18 = false;
								pstmt_tDBOutput_18.setInt(1, copyOfcopyOfcopyOfmain_3_0.idrib);

								if (copyOfcopyOfcopyOfmain_3_0.cle_rib == null) {
									pstmt_tDBOutput_18.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(2, copyOfcopyOfcopyOfmain_3_0.cle_rib);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_agence == null) {
									pstmt_tDBOutput_18.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(3, copyOfcopyOfcopyOfmain_3_0.code_agence);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_bic == null) {
									pstmt_tDBOutput_18.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(4, copyOfcopyOfcopyOfmain_3_0.code_bic);
								}

								if (copyOfcopyOfcopyOfmain_3_0.code_banque == null) {
									pstmt_tDBOutput_18.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(5, copyOfcopyOfcopyOfmain_3_0.code_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban1 == null) {
									pstmt_tDBOutput_18.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(6, copyOfcopyOfcopyOfmain_3_0.iban1);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban2 == null) {
									pstmt_tDBOutput_18.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(7, copyOfcopyOfcopyOfmain_3_0.iban2);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban3 == null) {
									pstmt_tDBOutput_18.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(8, copyOfcopyOfcopyOfmain_3_0.iban3);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban4 == null) {
									pstmt_tDBOutput_18.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(9, copyOfcopyOfcopyOfmain_3_0.iban4);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban5 == null) {
									pstmt_tDBOutput_18.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(10, copyOfcopyOfcopyOfmain_3_0.iban5);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban6 == null) {
									pstmt_tDBOutput_18.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(11, copyOfcopyOfcopyOfmain_3_0.iban6);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban7 == null) {
									pstmt_tDBOutput_18.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(12, copyOfcopyOfcopyOfmain_3_0.iban7);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban8 == null) {
									pstmt_tDBOutput_18.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(13, copyOfcopyOfcopyOfmain_3_0.iban8);
								}

								if (copyOfcopyOfcopyOfmain_3_0.iban9 == null) {
									pstmt_tDBOutput_18.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(14, copyOfcopyOfcopyOfmain_3_0.iban9);
								}

								if (copyOfcopyOfcopyOfmain_3_0.principal == null) {
									pstmt_tDBOutput_18.setNull(15, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_18.setBoolean(15, copyOfcopyOfcopyOfmain_3_0.principal);
								}

								if (copyOfcopyOfcopyOfmain_3_0.nom_banque == null) {
									pstmt_tDBOutput_18.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(16, copyOfcopyOfcopyOfmain_3_0.nom_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.numero_compte == null) {
									pstmt_tDBOutput_18.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(17, copyOfcopyOfcopyOfmain_3_0.numero_compte);
								}

								if (copyOfcopyOfcopyOfmain_3_0.ville_banque == null) {
									pstmt_tDBOutput_18.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(18, copyOfcopyOfcopyOfmain_3_0.ville_banque);
								}

								if (copyOfcopyOfcopyOfmain_3_0.idcli == null) {
									pstmt_tDBOutput_18.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(19, copyOfcopyOfcopyOfmain_3_0.idcli);
								}

								if (copyOfcopyOfcopyOfmain_3_0.idfournisseur == null) {
									pstmt_tDBOutput_18.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_18.setString(20, copyOfcopyOfcopyOfmain_3_0.idfournisseur);
								}

								pstmt_tDBOutput_18.addBatch();
								nb_line_tDBOutput_18++;

								batchSizeCounter_tDBOutput_18++;

								if ((batchSize_tDBOutput_18 > 0)
										&& (batchSize_tDBOutput_18 <= batchSizeCounter_tDBOutput_18)) {
									try {
										int countSum_tDBOutput_18 = 0;

										for (int countEach_tDBOutput_18 : pstmt_tDBOutput_18.executeBatch()) {
											countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0
													: countEach_tDBOutput_18);
										}

										insertedCount_tDBOutput_18 += countSum_tDBOutput_18;

										batchSizeCounter_tDBOutput_18 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_18) {
										java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),
												sqle_tDBOutput_18 = null;
										String errormessage_tDBOutput_18;
										if (ne_tDBOutput_18 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_18 = new java.sql.SQLException(
													e_tDBOutput_18.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_18.getMessage(),
													ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(),
													ne_tDBOutput_18);
											errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
										} else {
											errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
										}

										int countSum_tDBOutput_18 = 0;
										for (int countEach_tDBOutput_18 : e_tDBOutput_18.getUpdateCounts()) {
											countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0
													: countEach_tDBOutput_18);
										}

										insertedCount_tDBOutput_18 += countSum_tDBOutput_18;

										System.err.println(errormessage_tDBOutput_18);

									}
								}

								tos_count_tDBOutput_18++;

								/**
								 * [tDBOutput_18 main ] stop
								 */

								/**
								 * [tDBOutput_18 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_18";

								/**
								 * [tDBOutput_18 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_18 process_data_end ] start
								 */

								currentComponent = "tDBOutput_18";

								/**
								 * [tDBOutput_18 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_3_0"

							/**
							 * [tMap_23 process_data_end ] start
							 */

							currentComponent = "tMap_23";

							/**
							 * [tMap_23 process_data_end ] stop
							 */

						} // End of branch "row16_0"

						/**
						 * [tFileInputDelimited_26 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_26";

						/**
						 * [tFileInputDelimited_26 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_26 end ] start
						 */

						currentComponent = "tFileInputDelimited_26";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/fichier_rib.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_26 != null) {
							fid_tFileInputDelimited_26.close();
						}
					}
					if (fid_tFileInputDelimited_26 != null) {
						globalMap.put("tFileInputDelimited_26_NB_LINE", fid_tFileInputDelimited_26.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_26", true);
				end_Hash.put("tFileInputDelimited_26", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_26 end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16_0");
				}

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tDBOutput_18 end ] start
				 */

				currentComponent = "tDBOutput_18";

				try {
					int countSum_tDBOutput_18 = 0;
					if (pstmt_tDBOutput_18 != null && batchSizeCounter_tDBOutput_18 > 0) {

						for (int countEach_tDBOutput_18 : pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}

					}

					insertedCount_tDBOutput_18 += countSum_tDBOutput_18;

				} catch (java.sql.BatchUpdateException e_tDBOutput_18) {
					java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(), sqle_tDBOutput_18 = null;
					String errormessage_tDBOutput_18;
					if (ne_tDBOutput_18 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_18 = new java.sql.SQLException(
								e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(),
								ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
						errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
					} else {
						errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
					}

					int countSum_tDBOutput_18 = 0;
					for (int countEach_tDBOutput_18 : e_tDBOutput_18.getUpdateCounts()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}

					insertedCount_tDBOutput_18 += countSum_tDBOutput_18;

					System.err.println(errormessage_tDBOutput_18);

				}

				if (pstmt_tDBOutput_18 != null) {

					pstmt_tDBOutput_18.close();
					resourceMap.remove("pstmt_tDBOutput_18");
				}
				resourceMap.put("statementClosed_tDBOutput_18", true);

				nb_line_deleted_tDBOutput_18 = nb_line_deleted_tDBOutput_18 + deletedCount_tDBOutput_18;
				nb_line_update_tDBOutput_18 = nb_line_update_tDBOutput_18 + updatedCount_tDBOutput_18;
				nb_line_inserted_tDBOutput_18 = nb_line_inserted_tDBOutput_18 + insertedCount_tDBOutput_18;
				nb_line_rejected_tDBOutput_18 = nb_line_rejected_tDBOutput_18 + rejectedCount_tDBOutput_18;

				globalMap.put("tDBOutput_18_NB_LINE", nb_line_tDBOutput_18);
				globalMap.put("tDBOutput_18_NB_LINE_UPDATED", nb_line_update_tDBOutput_18);
				globalMap.put("tDBOutput_18_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_18);
				globalMap.put("tDBOutput_18_NB_LINE_DELETED", nb_line_deleted_tDBOutput_18);
				globalMap.put("tDBOutput_18_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_18);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_3_0");
				}

				ok_Hash.put("tDBOutput_18", true);
				end_Hash.put("tDBOutput_18", System.currentTimeMillis());

				/**
				 * [tDBOutput_18 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_26:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
			}

			tFileInputDelimited_27Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_26 finally ] start
				 */

				currentComponent = "tFileInputDelimited_26";

				/**
				 * [tFileInputDelimited_26 finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tDBOutput_18 finally ] start
				 */

				currentComponent = "tDBOutput_18";

				if (resourceMap.get("statementClosed_tDBOutput_18") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_18 = null;
					if ((pstmtToClose_tDBOutput_18 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_18")) != null) {
						pstmtToClose_tDBOutput_18.close();
					}
				}

				/**
				 * [tDBOutput_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmainStruct implements routines.system.IPersistableRow<copyOfcopyOfmainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		public Float coef_achat;

		public Float getCoef_achat() {
			return this.coef_achat;
		}

		public Float coef_marge;

		public Float getCoef_marge() {
			return this.coef_marge;
		}

		public Float coef_vente;

		public Float getCoef_vente() {
			return this.coef_vente;
		}

		public String imput_01;

		public String getImput_01() {
			return this.imput_01;
		}

		public String imput_02;

		public String getImput_02() {
			return this.imput_02;
		}

		public String imput_03;

		public String getImput_03() {
			return this.imput_03;
		}

		public String imput_04;

		public String getImput_04() {
			return this.imput_04;
		}

		public String imput_05;

		public String getImput_05() {
			return this.imput_05;
		}

		public String imput_06;

		public String getImput_06() {
			return this.imput_06;
		}

		public String controle_marge;

		public String getControle_marge() {
			return this.controle_marge;
		}

		public String libelle_famille;

		public String getLibelle_famille() {
			return this.libelle_famille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idfamille == null) ? 0 : this.idfamille.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmainStruct other = (copyOfcopyOfmainStruct) obj;

			if (this.idfamille == null) {
				if (other.idfamille != null)
					return false;

			} else if (!this.idfamille.equals(other.idfamille))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmainStruct other) {

			other.idfamille = this.idfamille;
			other.coef_achat = this.coef_achat;
			other.coef_marge = this.coef_marge;
			other.coef_vente = this.coef_vente;
			other.imput_01 = this.imput_01;
			other.imput_02 = this.imput_02;
			other.imput_03 = this.imput_03;
			other.imput_04 = this.imput_04;
			other.imput_05 = this.imput_05;
			other.imput_06 = this.imput_06;
			other.controle_marge = this.controle_marge;
			other.libelle_famille = this.libelle_famille;

		}

		public void copyKeysDataTo(copyOfcopyOfmainStruct other) {

			other.idfamille = this.idfamille;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idfamille = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coef_achat = null;
					} else {
						this.coef_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_marge = null;
					} else {
						this.coef_marge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_vente = null;
					} else {
						this.coef_vente = dis.readFloat();
					}

					this.imput_01 = readString(dis);

					this.imput_02 = readString(dis);

					this.imput_03 = readString(dis);

					this.imput_04 = readString(dis);

					this.imput_05 = readString(dis);

					this.imput_06 = readString(dis);

					this.controle_marge = readString(dis);

					this.libelle_famille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idfamille, dos);

				// Float

				if (this.coef_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_achat);
				}

				// Float

				if (this.coef_marge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_marge);
				}

				// Float

				if (this.coef_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_vente);
				}

				// String

				writeString(this.imput_01, dos);

				// String

				writeString(this.imput_02, dos);

				// String

				writeString(this.imput_03, dos);

				// String

				writeString(this.imput_04, dos);

				// String

				writeString(this.imput_05, dos);

				// String

				writeString(this.imput_06, dos);

				// String

				writeString(this.controle_marge, dos);

				// String

				writeString(this.libelle_famille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfamille=" + idfamille);
			sb.append(",coef_achat=" + String.valueOf(coef_achat));
			sb.append(",coef_marge=" + String.valueOf(coef_marge));
			sb.append(",coef_vente=" + String.valueOf(coef_vente));
			sb.append(",imput_01=" + imput_01);
			sb.append(",imput_02=" + imput_02);
			sb.append(",imput_03=" + imput_03);
			sb.append(",imput_04=" + imput_04);
			sb.append(",imput_05=" + imput_05);
			sb.append(",imput_06=" + imput_06);
			sb.append(",controle_marge=" + controle_marge);
			sb.append(",libelle_famille=" + libelle_famille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfamille, other.idfamille);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();
				copyOfcopyOfmainStruct copyOfcopyOfmain = new copyOfcopyOfmainStruct();

				/**
				 * [tDBOutput_24 begin ] start
				 */

				ok_Hash.put("tDBOutput_24", false);
				start_Hash.put("tDBOutput_24", System.currentTimeMillis());

				currentComponent = "tDBOutput_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain");
				}

				int tos_count_tDBOutput_24 = 0;

				String dbschema_tDBOutput_24 = null;
				dbschema_tDBOutput_24 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_24 = null;
				if (dbschema_tDBOutput_24 == null || dbschema_tDBOutput_24.trim().length() == 0) {
					tableName_tDBOutput_24 = ("famille");
				} else {
					tableName_tDBOutput_24 = dbschema_tDBOutput_24 + "\".\"" + ("famille");
				}

				int nb_line_tDBOutput_24 = 0;
				int nb_line_update_tDBOutput_24 = 0;
				int nb_line_inserted_tDBOutput_24 = 0;
				int nb_line_deleted_tDBOutput_24 = 0;
				int nb_line_rejected_tDBOutput_24 = 0;

				int deletedCount_tDBOutput_24 = 0;
				int updatedCount_tDBOutput_24 = 0;
				int insertedCount_tDBOutput_24 = 0;
				int rejectedCount_tDBOutput_24 = 0;

				boolean whetherReject_tDBOutput_24 = false;

				java.sql.Connection conn_tDBOutput_24 = null;
				String dbUser_tDBOutput_24 = null;

				conn_tDBOutput_24 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_24 = 10000;
				int batchSizeCounter_tDBOutput_24 = 0;

				int count_tDBOutput_24 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_24 = conn_tDBOutput_24.createStatement()) {
					stmtClear_tDBOutput_24.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_24 + "\"");
				}
				String insert_tDBOutput_24 = "INSERT INTO \"" + tableName_tDBOutput_24
						+ "\" (\"idfamille\",\"coef_achat\",\"coef_marge\",\"coef_vente\",\"imput_01\",\"imput_02\",\"imput_03\",\"imput_04\",\"imput_05\",\"imput_06\",\"controle_marge\",\"libelle_famille\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_24 = conn_tDBOutput_24.prepareStatement(insert_tDBOutput_24);
				resourceMap.put("pstmt_tDBOutput_24", pstmt_tDBOutput_24);

				/**
				 * [tDBOutput_24 begin ] stop
				 */

				/**
				 * [tMap_24 begin ] start
				 */

				ok_Hash.put("tMap_24", false);
				start_Hash.put("tMap_24", System.currentTimeMillis());

				currentComponent = "tMap_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_24 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_24__Struct {
				}
				Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmainStruct copyOfcopyOfmain_tmp = new copyOfcopyOfmainStruct();
// ###############################

				/**
				 * [tMap_24 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_27 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_27", false);
				start_Hash.put("tFileInputDelimited_27", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_27";

				int tos_count_tFileInputDelimited_27 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_27 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_27 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_27 = null;
				int limit_tFileInputDelimited_27 = -1;
				try {

					Object filename_tFileInputDelimited_27 = "C:/DEV/Data/Base Montauban/familles.csv";
					if (filename_tFileInputDelimited_27 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_27 = 0, random_value_tFileInputDelimited_27 = -1;
						if (footer_value_tFileInputDelimited_27 > 0 || random_value_tFileInputDelimited_27 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_27 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/familles.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_27, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_27 != null && fid_tFileInputDelimited_27.nextRecord()) {
						rowstate_tFileInputDelimited_27.reset();

						row22 = null;

						boolean whetherReject_tFileInputDelimited_27 = false;
						row22 = new row22Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_27 = 0;

							columnIndexWithD_tFileInputDelimited_27 = 0;

							row22.PA3PAR0 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 1;

							row22.PA3PAR1 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 2;

							row22.PA3PAR2 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 3;

							row22.PA3PAR3 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 4;

							row22.PA3PAR4 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 5;

							row22.PA3PAR5 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 6;

							row22.PA3LIBEL = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 7;

							row22.PA3COEF1 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 8;

							row22.PA3COEFA = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 9;

							row22.PA3COEFM = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 10;

							row22.PA3MARGR = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 11;

							row22.PA3IMPUT1 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 12;

							row22.PA3IMPUT2 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 13;

							row22.PA3IMPUT3 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 14;

							row22.PA3IMPUT4 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 15;

							row22.PA3IMPUT5 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 16;

							row22.PA3IMPUT6 = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 17;

							row22.PA3DIFF = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 18;

							row22.PA3PAR0W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 19;

							row22.PA3PAR1W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 20;

							row22.PA3PAR2W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 21;

							row22.PA3PAR3W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 22;

							row22.PA3PAR4W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 23;

							row22.PA3PAR5W = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 24;

							row22.PA3COEFB = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 25;

							row22.PA3COEFC = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 26;

							row22.PA3RAYON = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 27;

							row22.PA3ARROND = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 28;

							row22.PA3EDNET = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 29;

							row22.PA3PROMDEB = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							columnIndexWithD_tFileInputDelimited_27 = 30;

							row22.PA3PROMFIN = fid_tFileInputDelimited_27.get(columnIndexWithD_tFileInputDelimited_27);

							if (rowstate_tFileInputDelimited_27.getException() != null) {
								throw rowstate_tFileInputDelimited_27.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_27 = true;

							System.err.println(e.getMessage());
							row22 = null;

						}

						/**
						 * [tFileInputDelimited_27 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_27 main ] start
						 */

						currentComponent = "tFileInputDelimited_27";

						tos_count_tFileInputDelimited_27++;

						/**
						 * [tFileInputDelimited_27 main ] stop
						 */

						/**
						 * [tFileInputDelimited_27 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_27";

						/**
						 * [tFileInputDelimited_27 process_data_begin ] stop
						 */
// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tMap_24 main ] start
							 */

							currentComponent = "tMap_24";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_24 = false;
							boolean mainRowRejected_tMap_24 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain = null;

// # Output table : 'copyOfcopyOfmain'
								copyOfcopyOfmain_tmp.idfamille = row22.PA3PAR1;
								copyOfcopyOfmain_tmp.coef_achat = row22.PA3COEFA.isBlank() ? new Float(0)
										: Float.parseFloat(row22.PA3COEFA);
								copyOfcopyOfmain_tmp.coef_marge = row22.PA3COEFM.isBlank() ? new Float(0)
										: Float.parseFloat(row22.PA3COEFM);
								copyOfcopyOfmain_tmp.coef_vente = row22.PA3COEF1.isBlank() ? new Float(0)
										: Float.parseFloat(row22.PA3COEF1);
								copyOfcopyOfmain_tmp.imput_01 = row22.PA3IMPUT1;
								copyOfcopyOfmain_tmp.imput_02 = row22.PA3IMPUT2;
								copyOfcopyOfmain_tmp.imput_03 = row22.PA3IMPUT3;
								copyOfcopyOfmain_tmp.imput_04 = row22.PA3IMPUT4;
								copyOfcopyOfmain_tmp.imput_05 = row22.PA3IMPUT5;
								copyOfcopyOfmain_tmp.imput_06 = row22.PA3IMPUT6;
								copyOfcopyOfmain_tmp.controle_marge = row22.PA3MARGR;
								copyOfcopyOfmain_tmp.libelle_famille = row22.PA3LIBEL;
								copyOfcopyOfmain = copyOfcopyOfmain_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_24 = false;

							tos_count_tMap_24++;

							/**
							 * [tMap_24 main ] stop
							 */

							/**
							 * [tMap_24 process_data_begin ] start
							 */

							currentComponent = "tMap_24";

							/**
							 * [tMap_24 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain"
							if (copyOfcopyOfmain != null) {

								/**
								 * [tDBOutput_24 main ] start
								 */

								currentComponent = "tDBOutput_24";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain");
								}

								whetherReject_tDBOutput_24 = false;
								if (copyOfcopyOfmain.idfamille == null) {
									pstmt_tDBOutput_24.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(1, copyOfcopyOfmain.idfamille);
								}

								if (copyOfcopyOfmain.coef_achat == null) {
									pstmt_tDBOutput_24.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_24.setFloat(2, copyOfcopyOfmain.coef_achat);
								}

								if (copyOfcopyOfmain.coef_marge == null) {
									pstmt_tDBOutput_24.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_24.setFloat(3, copyOfcopyOfmain.coef_marge);
								}

								if (copyOfcopyOfmain.coef_vente == null) {
									pstmt_tDBOutput_24.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_24.setFloat(4, copyOfcopyOfmain.coef_vente);
								}

								if (copyOfcopyOfmain.imput_01 == null) {
									pstmt_tDBOutput_24.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(5, copyOfcopyOfmain.imput_01);
								}

								if (copyOfcopyOfmain.imput_02 == null) {
									pstmt_tDBOutput_24.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(6, copyOfcopyOfmain.imput_02);
								}

								if (copyOfcopyOfmain.imput_03 == null) {
									pstmt_tDBOutput_24.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(7, copyOfcopyOfmain.imput_03);
								}

								if (copyOfcopyOfmain.imput_04 == null) {
									pstmt_tDBOutput_24.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(8, copyOfcopyOfmain.imput_04);
								}

								if (copyOfcopyOfmain.imput_05 == null) {
									pstmt_tDBOutput_24.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(9, copyOfcopyOfmain.imput_05);
								}

								if (copyOfcopyOfmain.imput_06 == null) {
									pstmt_tDBOutput_24.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(10, copyOfcopyOfmain.imput_06);
								}

								if (copyOfcopyOfmain.controle_marge == null) {
									pstmt_tDBOutput_24.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(11, copyOfcopyOfmain.controle_marge);
								}

								if (copyOfcopyOfmain.libelle_famille == null) {
									pstmt_tDBOutput_24.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_24.setString(12, copyOfcopyOfmain.libelle_famille);
								}

								pstmt_tDBOutput_24.addBatch();
								nb_line_tDBOutput_24++;

								batchSizeCounter_tDBOutput_24++;

								if ((batchSize_tDBOutput_24 > 0)
										&& (batchSize_tDBOutput_24 <= batchSizeCounter_tDBOutput_24)) {
									try {
										int countSum_tDBOutput_24 = 0;

										for (int countEach_tDBOutput_24 : pstmt_tDBOutput_24.executeBatch()) {
											countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0
													: countEach_tDBOutput_24);
										}

										insertedCount_tDBOutput_24 += countSum_tDBOutput_24;

										batchSizeCounter_tDBOutput_24 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_24) {
										java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(),
												sqle_tDBOutput_24 = null;
										String errormessage_tDBOutput_24;
										if (ne_tDBOutput_24 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_24 = new java.sql.SQLException(
													e_tDBOutput_24.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_24.getMessage(),
													ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(),
													ne_tDBOutput_24);
											errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
										} else {
											errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
										}

										int countSum_tDBOutput_24 = 0;
										for (int countEach_tDBOutput_24 : e_tDBOutput_24.getUpdateCounts()) {
											countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0
													: countEach_tDBOutput_24);
										}

										insertedCount_tDBOutput_24 += countSum_tDBOutput_24;

										System.err.println(errormessage_tDBOutput_24);

									}
								}

								tos_count_tDBOutput_24++;

								/**
								 * [tDBOutput_24 main ] stop
								 */

								/**
								 * [tDBOutput_24 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_24";

								/**
								 * [tDBOutput_24 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_24 process_data_end ] start
								 */

								currentComponent = "tDBOutput_24";

								/**
								 * [tDBOutput_24 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain"

							/**
							 * [tMap_24 process_data_end ] start
							 */

							currentComponent = "tMap_24";

							/**
							 * [tMap_24 process_data_end ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_27 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_27";

						/**
						 * [tFileInputDelimited_27 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_27 end ] start
						 */

						currentComponent = "tFileInputDelimited_27";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/familles.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_27 != null) {
							fid_tFileInputDelimited_27.close();
						}
					}
					if (fid_tFileInputDelimited_27 != null) {
						globalMap.put("tFileInputDelimited_27_NB_LINE", fid_tFileInputDelimited_27.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_27", true);
				end_Hash.put("tFileInputDelimited_27", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_27 end ] stop
				 */

				/**
				 * [tMap_24 end ] start
				 */

				currentComponent = "tMap_24";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_24", true);
				end_Hash.put("tMap_24", System.currentTimeMillis());

				/**
				 * [tMap_24 end ] stop
				 */

				/**
				 * [tDBOutput_24 end ] start
				 */

				currentComponent = "tDBOutput_24";

				try {
					int countSum_tDBOutput_24 = 0;
					if (pstmt_tDBOutput_24 != null && batchSizeCounter_tDBOutput_24 > 0) {

						for (int countEach_tDBOutput_24 : pstmt_tDBOutput_24.executeBatch()) {
							countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
						}

					}

					insertedCount_tDBOutput_24 += countSum_tDBOutput_24;

				} catch (java.sql.BatchUpdateException e_tDBOutput_24) {
					java.sql.SQLException ne_tDBOutput_24 = e_tDBOutput_24.getNextException(), sqle_tDBOutput_24 = null;
					String errormessage_tDBOutput_24;
					if (ne_tDBOutput_24 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_24 = new java.sql.SQLException(
								e_tDBOutput_24.getMessage() + "\ncaused by: " + ne_tDBOutput_24.getMessage(),
								ne_tDBOutput_24.getSQLState(), ne_tDBOutput_24.getErrorCode(), ne_tDBOutput_24);
						errormessage_tDBOutput_24 = sqle_tDBOutput_24.getMessage();
					} else {
						errormessage_tDBOutput_24 = e_tDBOutput_24.getMessage();
					}

					int countSum_tDBOutput_24 = 0;
					for (int countEach_tDBOutput_24 : e_tDBOutput_24.getUpdateCounts()) {
						countSum_tDBOutput_24 += (countEach_tDBOutput_24 < 0 ? 0 : countEach_tDBOutput_24);
					}

					insertedCount_tDBOutput_24 += countSum_tDBOutput_24;

					System.err.println(errormessage_tDBOutput_24);

				}

				if (pstmt_tDBOutput_24 != null) {

					pstmt_tDBOutput_24.close();
					resourceMap.remove("pstmt_tDBOutput_24");
				}
				resourceMap.put("statementClosed_tDBOutput_24", true);

				nb_line_deleted_tDBOutput_24 = nb_line_deleted_tDBOutput_24 + deletedCount_tDBOutput_24;
				nb_line_update_tDBOutput_24 = nb_line_update_tDBOutput_24 + updatedCount_tDBOutput_24;
				nb_line_inserted_tDBOutput_24 = nb_line_inserted_tDBOutput_24 + insertedCount_tDBOutput_24;
				nb_line_rejected_tDBOutput_24 = nb_line_rejected_tDBOutput_24 + rejectedCount_tDBOutput_24;

				globalMap.put("tDBOutput_24_NB_LINE", nb_line_tDBOutput_24);
				globalMap.put("tDBOutput_24_NB_LINE_UPDATED", nb_line_update_tDBOutput_24);
				globalMap.put("tDBOutput_24_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_24);
				globalMap.put("tDBOutput_24_NB_LINE_DELETED", nb_line_deleted_tDBOutput_24);
				globalMap.put("tDBOutput_24_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_24);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain");
				}

				ok_Hash.put("tDBOutput_24", true);
				end_Hash.put("tDBOutput_24", System.currentTimeMillis());

				/**
				 * [tDBOutput_24 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_27:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
			}

			tFileInputDelimited_28Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_27 finally ] start
				 */

				currentComponent = "tFileInputDelimited_27";

				/**
				 * [tFileInputDelimited_27 finally ] stop
				 */

				/**
				 * [tMap_24 finally ] start
				 */

				currentComponent = "tMap_24";

				/**
				 * [tMap_24 finally ] stop
				 */

				/**
				 * [tDBOutput_24 finally ] start
				 */

				currentComponent = "tDBOutput_24";

				if (resourceMap.get("statementClosed_tDBOutput_24") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_24 = null;
					if ((pstmtToClose_tDBOutput_24 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_24")) != null) {
						pstmtToClose_tDBOutput_24.close();
					}
				}

				/**
				 * [tDBOutput_24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_27_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_0Struct implements routines.system.IPersistableRow<copyOfmain_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idsous_fam;

		public String getIdsous_fam() {
			return this.idsous_fam;
		}

		public String arrondi;

		public String getArrondi() {
			return this.arrondi;
		}

		public Float coef_achat;

		public Float getCoef_achat() {
			return this.coef_achat;
		}

		public Float coef_marge;

		public Float getCoef_marge() {
			return this.coef_marge;
		}

		public Float coef_vente;

		public Float getCoef_vente() {
			return this.coef_vente;
		}

		public String contr_marge;

		public String getContr_marge() {
			return this.contr_marge;
		}

		public String degressif;

		public String getDegressif() {
			return this.degressif;
		}

		public String imput_01;

		public String getImput_01() {
			return this.imput_01;
		}

		public String imput_02;

		public String getImput_02() {
			return this.imput_02;
		}

		public String imput_03;

		public String getImput_03() {
			return this.imput_03;
		}

		public String imput_04;

		public String getImput_04() {
			return this.imput_04;
		}

		public String imput_05;

		public String getImput_05() {
			return this.imput_05;
		}

		public String imput_06;

		public String getImput_06() {
			return this.imput_06;
		}

		public String libelle_sous_famille;

		public String getLibelle_sous_famille() {
			return this.libelle_sous_famille;
		}

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idsous_fam == null) ? 0 : this.idsous_fam.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_0Struct other = (copyOfmain_0Struct) obj;

			if (this.idsous_fam == null) {
				if (other.idsous_fam != null)
					return false;

			} else if (!this.idsous_fam.equals(other.idsous_fam))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_0Struct other) {

			other.idsous_fam = this.idsous_fam;
			other.arrondi = this.arrondi;
			other.coef_achat = this.coef_achat;
			other.coef_marge = this.coef_marge;
			other.coef_vente = this.coef_vente;
			other.contr_marge = this.contr_marge;
			other.degressif = this.degressif;
			other.imput_01 = this.imput_01;
			other.imput_02 = this.imput_02;
			other.imput_03 = this.imput_03;
			other.imput_04 = this.imput_04;
			other.imput_05 = this.imput_05;
			other.imput_06 = this.imput_06;
			other.libelle_sous_famille = this.libelle_sous_famille;
			other.idfamille = this.idfamille;

		}

		public void copyKeysDataTo(copyOfmain_0Struct other) {

			other.idsous_fam = this.idsous_fam;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idsous_fam = readString(dis);

					this.arrondi = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coef_achat = null;
					} else {
						this.coef_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_marge = null;
					} else {
						this.coef_marge = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.coef_vente = null;
					} else {
						this.coef_vente = dis.readFloat();
					}

					this.contr_marge = readString(dis);

					this.degressif = readString(dis);

					this.imput_01 = readString(dis);

					this.imput_02 = readString(dis);

					this.imput_03 = readString(dis);

					this.imput_04 = readString(dis);

					this.imput_05 = readString(dis);

					this.imput_06 = readString(dis);

					this.libelle_sous_famille = readString(dis);

					this.idfamille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idsous_fam, dos);

				// String

				writeString(this.arrondi, dos);

				// Float

				if (this.coef_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_achat);
				}

				// Float

				if (this.coef_marge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_marge);
				}

				// Float

				if (this.coef_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coef_vente);
				}

				// String

				writeString(this.contr_marge, dos);

				// String

				writeString(this.degressif, dos);

				// String

				writeString(this.imput_01, dos);

				// String

				writeString(this.imput_02, dos);

				// String

				writeString(this.imput_03, dos);

				// String

				writeString(this.imput_04, dos);

				// String

				writeString(this.imput_05, dos);

				// String

				writeString(this.imput_06, dos);

				// String

				writeString(this.libelle_sous_famille, dos);

				// String

				writeString(this.idfamille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idsous_fam=" + idsous_fam);
			sb.append(",arrondi=" + arrondi);
			sb.append(",coef_achat=" + String.valueOf(coef_achat));
			sb.append(",coef_marge=" + String.valueOf(coef_marge));
			sb.append(",coef_vente=" + String.valueOf(coef_vente));
			sb.append(",contr_marge=" + contr_marge);
			sb.append(",degressif=" + degressif);
			sb.append(",imput_01=" + imput_01);
			sb.append(",imput_02=" + imput_02);
			sb.append(",imput_03=" + imput_03);
			sb.append(",imput_04=" + imput_04);
			sb.append(",imput_05=" + imput_05);
			sb.append(",imput_06=" + imput_06);
			sb.append(",libelle_sous_famille=" + libelle_sous_famille);
			sb.append(",idfamille=" + idfamille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idsous_fam, other.idsous_fam);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				copyOfmain_0Struct copyOfmain_0 = new copyOfmain_0Struct();

				/**
				 * [tDBOutput_25 begin ] start
				 */

				ok_Hash.put("tDBOutput_25", false);
				start_Hash.put("tDBOutput_25", System.currentTimeMillis());

				currentComponent = "tDBOutput_25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_0");
				}

				int tos_count_tDBOutput_25 = 0;

				String dbschema_tDBOutput_25 = null;
				dbschema_tDBOutput_25 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_25 = null;
				if (dbschema_tDBOutput_25 == null || dbschema_tDBOutput_25.trim().length() == 0) {
					tableName_tDBOutput_25 = ("sous_famille");
				} else {
					tableName_tDBOutput_25 = dbschema_tDBOutput_25 + "\".\"" + ("sous_famille");
				}

				int nb_line_tDBOutput_25 = 0;
				int nb_line_update_tDBOutput_25 = 0;
				int nb_line_inserted_tDBOutput_25 = 0;
				int nb_line_deleted_tDBOutput_25 = 0;
				int nb_line_rejected_tDBOutput_25 = 0;

				int deletedCount_tDBOutput_25 = 0;
				int updatedCount_tDBOutput_25 = 0;
				int insertedCount_tDBOutput_25 = 0;
				int rejectedCount_tDBOutput_25 = 0;

				boolean whetherReject_tDBOutput_25 = false;

				java.sql.Connection conn_tDBOutput_25 = null;
				String dbUser_tDBOutput_25 = null;

				conn_tDBOutput_25 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_25 = 10000;
				int batchSizeCounter_tDBOutput_25 = 0;

				int count_tDBOutput_25 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_25 = conn_tDBOutput_25.createStatement()) {
					stmtClear_tDBOutput_25.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_25 + "\"");
				}
				String insert_tDBOutput_25 = "INSERT INTO \"" + tableName_tDBOutput_25
						+ "\" (\"idsous_fam\",\"arrondi\",\"coef_achat\",\"coef_marge\",\"coef_vente\",\"contr_marge\",\"degressif\",\"imput_01\",\"imput_02\",\"imput_03\",\"imput_04\",\"imput_05\",\"imput_06\",\"libelle_sous_famille\",\"idfamille\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_25 = conn_tDBOutput_25.prepareStatement(insert_tDBOutput_25);
				resourceMap.put("pstmt_tDBOutput_25", pstmt_tDBOutput_25);

				/**
				 * [tDBOutput_25 begin ] stop
				 */

				/**
				 * [tMap_25 begin ] start
				 */

				ok_Hash.put("tMap_25", false);
				start_Hash.put("tMap_25", System.currentTimeMillis());

				currentComponent = "tMap_25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tMap_25 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_25__Struct {
				}
				Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_0Struct copyOfmain_0_tmp = new copyOfmain_0Struct();
// ###############################

				/**
				 * [tMap_25 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_28 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_28", false);
				start_Hash.put("tFileInputDelimited_28", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_28";

				int tos_count_tFileInputDelimited_28 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_28 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_28 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_28 = null;
				int limit_tFileInputDelimited_28 = -1;
				try {

					Object filename_tFileInputDelimited_28 = "C:/DEV/Data/Base Montauban/sous_familles.csv";
					if (filename_tFileInputDelimited_28 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_28 = 0, random_value_tFileInputDelimited_28 = -1;
						if (footer_value_tFileInputDelimited_28 > 0 || random_value_tFileInputDelimited_28 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_28 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/sous_familles.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_28, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_28 != null && fid_tFileInputDelimited_28.nextRecord()) {
						rowstate_tFileInputDelimited_28.reset();

						row23 = null;

						boolean whetherReject_tFileInputDelimited_28 = false;
						row23 = new row23Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_28 = 0;

							columnIndexWithD_tFileInputDelimited_28 = 0;

							row23.PA3PAR0 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 1;

							row23.PA3PAR1 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 2;

							row23.PA3PAR2 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 3;

							row23.PA3PAR3 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 4;

							row23.PA3PAR4 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 5;

							row23.PA3PAR5 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 6;

							row23.PA3LIBEL = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 7;

							row23.PA3COEF1 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 8;

							row23.PA3COEFA = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 9;

							row23.PA3COEFM = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 10;

							row23.PA3MARGR = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 11;

							row23.PA3IMPUT1 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 12;

							row23.PA3IMPUT2 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 13;

							row23.PA3IMPUT3 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 14;

							row23.PA3IMPUT4 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 15;

							row23.PA3IMPUT5 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 16;

							row23.PA3IMPUT6 = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 17;

							row23.PA3DIFF = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 18;

							row23.PA3PAR0W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 19;

							row23.PA3PAR1W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 20;

							row23.PA3PAR2W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 21;

							row23.PA3PAR3W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 22;

							row23.PA3PAR4W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 23;

							row23.PA3PAR5W = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 24;

							row23.PA3COEFB = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 25;

							row23.PA3COEFC = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 26;

							row23.PA3RAYON = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 27;

							row23.PA3ARROND = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 28;

							row23.PA3EDNET = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 29;

							row23.PA3PROMDEB = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							columnIndexWithD_tFileInputDelimited_28 = 30;

							row23.PA3PROMFIN = fid_tFileInputDelimited_28.get(columnIndexWithD_tFileInputDelimited_28);

							if (rowstate_tFileInputDelimited_28.getException() != null) {
								throw rowstate_tFileInputDelimited_28.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_28 = true;

							System.err.println(e.getMessage());
							row23 = null;

						}

						/**
						 * [tFileInputDelimited_28 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_28 main ] start
						 */

						currentComponent = "tFileInputDelimited_28";

						tos_count_tFileInputDelimited_28++;

						/**
						 * [tFileInputDelimited_28 main ] stop
						 */

						/**
						 * [tFileInputDelimited_28 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_28";

						/**
						 * [tFileInputDelimited_28 process_data_begin ] stop
						 */
// Start of branch "row23"
						if (row23 != null) {

							/**
							 * [tMap_25 main ] start
							 */

							currentComponent = "tMap_25";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_25 = false;
							boolean mainRowRejected_tMap_25 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_0 = null;

// # Output table : 'copyOfmain_0'
								copyOfmain_0_tmp.idsous_fam = row23.PA3PAR1 + row23.PA3PAR2;
								copyOfmain_0_tmp.arrondi = row23.PA3ARROND;
								copyOfmain_0_tmp.coef_achat = Float.parseFloat(row23.PA3COEFA);
								copyOfmain_0_tmp.coef_marge = Float.parseFloat(row23.PA3COEFM);
								copyOfmain_0_tmp.coef_vente = Float.parseFloat(row23.PA3COEF1);
								copyOfmain_0_tmp.contr_marge = row23.PA3MARGR;
								copyOfmain_0_tmp.degressif = row23.PA3EDNET;
								copyOfmain_0_tmp.imput_01 = row23.PA3IMPUT1;
								copyOfmain_0_tmp.imput_02 = row23.PA3IMPUT2;
								copyOfmain_0_tmp.imput_03 = row23.PA3IMPUT3;
								copyOfmain_0_tmp.imput_04 = row23.PA3IMPUT4;
								copyOfmain_0_tmp.imput_05 = row23.PA3IMPUT5;
								copyOfmain_0_tmp.imput_06 = row23.PA3IMPUT6;
								copyOfmain_0_tmp.libelle_sous_famille = row23.PA3LIBEL;
								copyOfmain_0_tmp.idfamille = row23.PA3PAR1;
								copyOfmain_0 = copyOfmain_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_25 = false;

							tos_count_tMap_25++;

							/**
							 * [tMap_25 main ] stop
							 */

							/**
							 * [tMap_25 process_data_begin ] start
							 */

							currentComponent = "tMap_25";

							/**
							 * [tMap_25 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_0"
							if (copyOfmain_0 != null) {

								/**
								 * [tDBOutput_25 main ] start
								 */

								currentComponent = "tDBOutput_25";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_0");
								}

								whetherReject_tDBOutput_25 = false;
								if (copyOfmain_0.idsous_fam == null) {
									pstmt_tDBOutput_25.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(1, copyOfmain_0.idsous_fam);
								}

								if (copyOfmain_0.arrondi == null) {
									pstmt_tDBOutput_25.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(2, copyOfmain_0.arrondi);
								}

								if (copyOfmain_0.coef_achat == null) {
									pstmt_tDBOutput_25.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_25.setFloat(3, copyOfmain_0.coef_achat);
								}

								if (copyOfmain_0.coef_marge == null) {
									pstmt_tDBOutput_25.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_25.setFloat(4, copyOfmain_0.coef_marge);
								}

								if (copyOfmain_0.coef_vente == null) {
									pstmt_tDBOutput_25.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_25.setFloat(5, copyOfmain_0.coef_vente);
								}

								if (copyOfmain_0.contr_marge == null) {
									pstmt_tDBOutput_25.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(6, copyOfmain_0.contr_marge);
								}

								if (copyOfmain_0.degressif == null) {
									pstmt_tDBOutput_25.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(7, copyOfmain_0.degressif);
								}

								if (copyOfmain_0.imput_01 == null) {
									pstmt_tDBOutput_25.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(8, copyOfmain_0.imput_01);
								}

								if (copyOfmain_0.imput_02 == null) {
									pstmt_tDBOutput_25.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(9, copyOfmain_0.imput_02);
								}

								if (copyOfmain_0.imput_03 == null) {
									pstmt_tDBOutput_25.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(10, copyOfmain_0.imput_03);
								}

								if (copyOfmain_0.imput_04 == null) {
									pstmt_tDBOutput_25.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(11, copyOfmain_0.imput_04);
								}

								if (copyOfmain_0.imput_05 == null) {
									pstmt_tDBOutput_25.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(12, copyOfmain_0.imput_05);
								}

								if (copyOfmain_0.imput_06 == null) {
									pstmt_tDBOutput_25.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(13, copyOfmain_0.imput_06);
								}

								if (copyOfmain_0.libelle_sous_famille == null) {
									pstmt_tDBOutput_25.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(14, copyOfmain_0.libelle_sous_famille);
								}

								if (copyOfmain_0.idfamille == null) {
									pstmt_tDBOutput_25.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_25.setString(15, copyOfmain_0.idfamille);
								}

								pstmt_tDBOutput_25.addBatch();
								nb_line_tDBOutput_25++;

								batchSizeCounter_tDBOutput_25++;

								if ((batchSize_tDBOutput_25 > 0)
										&& (batchSize_tDBOutput_25 <= batchSizeCounter_tDBOutput_25)) {
									try {
										int countSum_tDBOutput_25 = 0;

										for (int countEach_tDBOutput_25 : pstmt_tDBOutput_25.executeBatch()) {
											countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0
													: countEach_tDBOutput_25);
										}

										insertedCount_tDBOutput_25 += countSum_tDBOutput_25;

										batchSizeCounter_tDBOutput_25 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_25) {
										java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(),
												sqle_tDBOutput_25 = null;
										String errormessage_tDBOutput_25;
										if (ne_tDBOutput_25 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_25 = new java.sql.SQLException(
													e_tDBOutput_25.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_25.getMessage(),
													ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(),
													ne_tDBOutput_25);
											errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
										} else {
											errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
										}

										int countSum_tDBOutput_25 = 0;
										for (int countEach_tDBOutput_25 : e_tDBOutput_25.getUpdateCounts()) {
											countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0
													: countEach_tDBOutput_25);
										}

										insertedCount_tDBOutput_25 += countSum_tDBOutput_25;

										System.err.println(errormessage_tDBOutput_25);

									}
								}

								tos_count_tDBOutput_25++;

								/**
								 * [tDBOutput_25 main ] stop
								 */

								/**
								 * [tDBOutput_25 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_25";

								/**
								 * [tDBOutput_25 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_25 process_data_end ] start
								 */

								currentComponent = "tDBOutput_25";

								/**
								 * [tDBOutput_25 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_0"

							/**
							 * [tMap_25 process_data_end ] start
							 */

							currentComponent = "tMap_25";

							/**
							 * [tMap_25 process_data_end ] stop
							 */

						} // End of branch "row23"

						/**
						 * [tFileInputDelimited_28 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_28";

						/**
						 * [tFileInputDelimited_28 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_28 end ] start
						 */

						currentComponent = "tFileInputDelimited_28";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/sous_familles.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_28 != null) {
							fid_tFileInputDelimited_28.close();
						}
					}
					if (fid_tFileInputDelimited_28 != null) {
						globalMap.put("tFileInputDelimited_28_NB_LINE", fid_tFileInputDelimited_28.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_28", true);
				end_Hash.put("tFileInputDelimited_28", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_28 end ] stop
				 */

				/**
				 * [tMap_25 end ] start
				 */

				currentComponent = "tMap_25";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tMap_25", true);
				end_Hash.put("tMap_25", System.currentTimeMillis());

				/**
				 * [tMap_25 end ] stop
				 */

				/**
				 * [tDBOutput_25 end ] start
				 */

				currentComponent = "tDBOutput_25";

				try {
					int countSum_tDBOutput_25 = 0;
					if (pstmt_tDBOutput_25 != null && batchSizeCounter_tDBOutput_25 > 0) {

						for (int countEach_tDBOutput_25 : pstmt_tDBOutput_25.executeBatch()) {
							countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
						}

					}

					insertedCount_tDBOutput_25 += countSum_tDBOutput_25;

				} catch (java.sql.BatchUpdateException e_tDBOutput_25) {
					java.sql.SQLException ne_tDBOutput_25 = e_tDBOutput_25.getNextException(), sqle_tDBOutput_25 = null;
					String errormessage_tDBOutput_25;
					if (ne_tDBOutput_25 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_25 = new java.sql.SQLException(
								e_tDBOutput_25.getMessage() + "\ncaused by: " + ne_tDBOutput_25.getMessage(),
								ne_tDBOutput_25.getSQLState(), ne_tDBOutput_25.getErrorCode(), ne_tDBOutput_25);
						errormessage_tDBOutput_25 = sqle_tDBOutput_25.getMessage();
					} else {
						errormessage_tDBOutput_25 = e_tDBOutput_25.getMessage();
					}

					int countSum_tDBOutput_25 = 0;
					for (int countEach_tDBOutput_25 : e_tDBOutput_25.getUpdateCounts()) {
						countSum_tDBOutput_25 += (countEach_tDBOutput_25 < 0 ? 0 : countEach_tDBOutput_25);
					}

					insertedCount_tDBOutput_25 += countSum_tDBOutput_25;

					System.err.println(errormessage_tDBOutput_25);

				}

				if (pstmt_tDBOutput_25 != null) {

					pstmt_tDBOutput_25.close();
					resourceMap.remove("pstmt_tDBOutput_25");
				}
				resourceMap.put("statementClosed_tDBOutput_25", true);

				nb_line_deleted_tDBOutput_25 = nb_line_deleted_tDBOutput_25 + deletedCount_tDBOutput_25;
				nb_line_update_tDBOutput_25 = nb_line_update_tDBOutput_25 + updatedCount_tDBOutput_25;
				nb_line_inserted_tDBOutput_25 = nb_line_inserted_tDBOutput_25 + insertedCount_tDBOutput_25;
				nb_line_rejected_tDBOutput_25 = nb_line_rejected_tDBOutput_25 + rejectedCount_tDBOutput_25;

				globalMap.put("tDBOutput_25_NB_LINE", nb_line_tDBOutput_25);
				globalMap.put("tDBOutput_25_NB_LINE_UPDATED", nb_line_update_tDBOutput_25);
				globalMap.put("tDBOutput_25_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_25);
				globalMap.put("tDBOutput_25_NB_LINE_DELETED", nb_line_deleted_tDBOutput_25);
				globalMap.put("tDBOutput_25_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_25);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_0");
				}

				ok_Hash.put("tDBOutput_25", true);
				end_Hash.put("tDBOutput_25", System.currentTimeMillis());

				/**
				 * [tDBOutput_25 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_28:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
			}

			tFileInputDelimited_29Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_28 finally ] start
				 */

				currentComponent = "tFileInputDelimited_28";

				/**
				 * [tFileInputDelimited_28 finally ] stop
				 */

				/**
				 * [tMap_25 finally ] start
				 */

				currentComponent = "tMap_25";

				/**
				 * [tMap_25 finally ] stop
				 */

				/**
				 * [tDBOutput_25 finally ] start
				 */

				currentComponent = "tDBOutput_25";

				if (resourceMap.get("statementClosed_tDBOutput_25") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_25 = null;
					if ((pstmtToClose_tDBOutput_25 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_25")) != null) {
						pstmtToClose_tDBOutput_25.close();
					}
				}

				/**
				 * [tDBOutput_25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_28_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_1_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_1_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idrayon;

		public String getIdrayon() {
			return this.idrayon;
		}

		public String libelle_rayon;

		public String getLibelle_rayon() {
			return this.libelle_rayon;
		}

		public String idsous_famille;

		public String getIdsous_famille() {
			return this.idsous_famille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idrayon == null) ? 0 : this.idrayon.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1_2Struct other = (copyOfcopyOfmain_1_2Struct) obj;

			if (this.idrayon == null) {
				if (other.idrayon != null)
					return false;

			} else if (!this.idrayon.equals(other.idrayon))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1_2Struct other) {

			other.idrayon = this.idrayon;
			other.libelle_rayon = this.libelle_rayon;
			other.idsous_famille = this.idsous_famille;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1_2Struct other) {

			other.idrayon = this.idrayon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idrayon = readString(dis);

					this.libelle_rayon = readString(dis);

					this.idsous_famille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idrayon, dos);

				// String

				writeString(this.libelle_rayon, dos);

				// String

				writeString(this.idsous_famille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrayon=" + idrayon);
			sb.append(",libelle_rayon=" + libelle_rayon);
			sb.append(",idsous_famille=" + idsous_famille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrayon, other.idrayon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PA3PAR0;

		public String getPA3PAR0() {
			return this.PA3PAR0;
		}

		public String PA3PAR1;

		public String getPA3PAR1() {
			return this.PA3PAR1;
		}

		public String PA3PAR2;

		public String getPA3PAR2() {
			return this.PA3PAR2;
		}

		public String PA3PAR3;

		public String getPA3PAR3() {
			return this.PA3PAR3;
		}

		public String PA3PAR4;

		public String getPA3PAR4() {
			return this.PA3PAR4;
		}

		public String PA3PAR5;

		public String getPA3PAR5() {
			return this.PA3PAR5;
		}

		public String PA3LIBEL;

		public String getPA3LIBEL() {
			return this.PA3LIBEL;
		}

		public String PA3COEF1;

		public String getPA3COEF1() {
			return this.PA3COEF1;
		}

		public String PA3COEFA;

		public String getPA3COEFA() {
			return this.PA3COEFA;
		}

		public String PA3COEFM;

		public String getPA3COEFM() {
			return this.PA3COEFM;
		}

		public String PA3MARGR;

		public String getPA3MARGR() {
			return this.PA3MARGR;
		}

		public String PA3IMPUT1;

		public String getPA3IMPUT1() {
			return this.PA3IMPUT1;
		}

		public String PA3IMPUT2;

		public String getPA3IMPUT2() {
			return this.PA3IMPUT2;
		}

		public String PA3IMPUT3;

		public String getPA3IMPUT3() {
			return this.PA3IMPUT3;
		}

		public String PA3IMPUT4;

		public String getPA3IMPUT4() {
			return this.PA3IMPUT4;
		}

		public String PA3IMPUT5;

		public String getPA3IMPUT5() {
			return this.PA3IMPUT5;
		}

		public String PA3IMPUT6;

		public String getPA3IMPUT6() {
			return this.PA3IMPUT6;
		}

		public String PA3DIFF;

		public String getPA3DIFF() {
			return this.PA3DIFF;
		}

		public String PA3PAR0W;

		public String getPA3PAR0W() {
			return this.PA3PAR0W;
		}

		public String PA3PAR1W;

		public String getPA3PAR1W() {
			return this.PA3PAR1W;
		}

		public String PA3PAR2W;

		public String getPA3PAR2W() {
			return this.PA3PAR2W;
		}

		public String PA3PAR3W;

		public String getPA3PAR3W() {
			return this.PA3PAR3W;
		}

		public String PA3PAR4W;

		public String getPA3PAR4W() {
			return this.PA3PAR4W;
		}

		public String PA3PAR5W;

		public String getPA3PAR5W() {
			return this.PA3PAR5W;
		}

		public String PA3COEFB;

		public String getPA3COEFB() {
			return this.PA3COEFB;
		}

		public String PA3COEFC;

		public String getPA3COEFC() {
			return this.PA3COEFC;
		}

		public String PA3RAYON;

		public String getPA3RAYON() {
			return this.PA3RAYON;
		}

		public String PA3ARROND;

		public String getPA3ARROND() {
			return this.PA3ARROND;
		}

		public String PA3EDNET;

		public String getPA3EDNET() {
			return this.PA3EDNET;
		}

		public String PA3PROMDEB;

		public String getPA3PROMDEB() {
			return this.PA3PROMDEB;
		}

		public String PA3PROMFIN;

		public String getPA3PROMFIN() {
			return this.PA3PROMFIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PA3PAR0 = readString(dis);

					this.PA3PAR1 = readString(dis);

					this.PA3PAR2 = readString(dis);

					this.PA3PAR3 = readString(dis);

					this.PA3PAR4 = readString(dis);

					this.PA3PAR5 = readString(dis);

					this.PA3LIBEL = readString(dis);

					this.PA3COEF1 = readString(dis);

					this.PA3COEFA = readString(dis);

					this.PA3COEFM = readString(dis);

					this.PA3MARGR = readString(dis);

					this.PA3IMPUT1 = readString(dis);

					this.PA3IMPUT2 = readString(dis);

					this.PA3IMPUT3 = readString(dis);

					this.PA3IMPUT4 = readString(dis);

					this.PA3IMPUT5 = readString(dis);

					this.PA3IMPUT6 = readString(dis);

					this.PA3DIFF = readString(dis);

					this.PA3PAR0W = readString(dis);

					this.PA3PAR1W = readString(dis);

					this.PA3PAR2W = readString(dis);

					this.PA3PAR3W = readString(dis);

					this.PA3PAR4W = readString(dis);

					this.PA3PAR5W = readString(dis);

					this.PA3COEFB = readString(dis);

					this.PA3COEFC = readString(dis);

					this.PA3RAYON = readString(dis);

					this.PA3ARROND = readString(dis);

					this.PA3EDNET = readString(dis);

					this.PA3PROMDEB = readString(dis);

					this.PA3PROMFIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PA3PAR0, dos);

				// String

				writeString(this.PA3PAR1, dos);

				// String

				writeString(this.PA3PAR2, dos);

				// String

				writeString(this.PA3PAR3, dos);

				// String

				writeString(this.PA3PAR4, dos);

				// String

				writeString(this.PA3PAR5, dos);

				// String

				writeString(this.PA3LIBEL, dos);

				// String

				writeString(this.PA3COEF1, dos);

				// String

				writeString(this.PA3COEFA, dos);

				// String

				writeString(this.PA3COEFM, dos);

				// String

				writeString(this.PA3MARGR, dos);

				// String

				writeString(this.PA3IMPUT1, dos);

				// String

				writeString(this.PA3IMPUT2, dos);

				// String

				writeString(this.PA3IMPUT3, dos);

				// String

				writeString(this.PA3IMPUT4, dos);

				// String

				writeString(this.PA3IMPUT5, dos);

				// String

				writeString(this.PA3IMPUT6, dos);

				// String

				writeString(this.PA3DIFF, dos);

				// String

				writeString(this.PA3PAR0W, dos);

				// String

				writeString(this.PA3PAR1W, dos);

				// String

				writeString(this.PA3PAR2W, dos);

				// String

				writeString(this.PA3PAR3W, dos);

				// String

				writeString(this.PA3PAR4W, dos);

				// String

				writeString(this.PA3PAR5W, dos);

				// String

				writeString(this.PA3COEFB, dos);

				// String

				writeString(this.PA3COEFC, dos);

				// String

				writeString(this.PA3RAYON, dos);

				// String

				writeString(this.PA3ARROND, dos);

				// String

				writeString(this.PA3EDNET, dos);

				// String

				writeString(this.PA3PROMDEB, dos);

				// String

				writeString(this.PA3PROMFIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PA3PAR0=" + PA3PAR0);
			sb.append(",PA3PAR1=" + PA3PAR1);
			sb.append(",PA3PAR2=" + PA3PAR2);
			sb.append(",PA3PAR3=" + PA3PAR3);
			sb.append(",PA3PAR4=" + PA3PAR4);
			sb.append(",PA3PAR5=" + PA3PAR5);
			sb.append(",PA3LIBEL=" + PA3LIBEL);
			sb.append(",PA3COEF1=" + PA3COEF1);
			sb.append(",PA3COEFA=" + PA3COEFA);
			sb.append(",PA3COEFM=" + PA3COEFM);
			sb.append(",PA3MARGR=" + PA3MARGR);
			sb.append(",PA3IMPUT1=" + PA3IMPUT1);
			sb.append(",PA3IMPUT2=" + PA3IMPUT2);
			sb.append(",PA3IMPUT3=" + PA3IMPUT3);
			sb.append(",PA3IMPUT4=" + PA3IMPUT4);
			sb.append(",PA3IMPUT5=" + PA3IMPUT5);
			sb.append(",PA3IMPUT6=" + PA3IMPUT6);
			sb.append(",PA3DIFF=" + PA3DIFF);
			sb.append(",PA3PAR0W=" + PA3PAR0W);
			sb.append(",PA3PAR1W=" + PA3PAR1W);
			sb.append(",PA3PAR2W=" + PA3PAR2W);
			sb.append(",PA3PAR3W=" + PA3PAR3W);
			sb.append(",PA3PAR4W=" + PA3PAR4W);
			sb.append(",PA3PAR5W=" + PA3PAR5W);
			sb.append(",PA3COEFB=" + PA3COEFB);
			sb.append(",PA3COEFC=" + PA3COEFC);
			sb.append(",PA3RAYON=" + PA3RAYON);
			sb.append(",PA3ARROND=" + PA3ARROND);
			sb.append(",PA3EDNET=" + PA3EDNET);
			sb.append(",PA3PROMDEB=" + PA3PROMDEB);
			sb.append(",PA3PROMFIN=" + PA3PROMFIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();
				copyOfcopyOfmain_1_2Struct copyOfcopyOfmain_1_2 = new copyOfcopyOfmain_1_2Struct();

				/**
				 * [tDBOutput_26 begin ] start
				 */

				ok_Hash.put("tDBOutput_26", false);
				start_Hash.put("tDBOutput_26", System.currentTimeMillis());

				currentComponent = "tDBOutput_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1_2");
				}

				int tos_count_tDBOutput_26 = 0;

				String dbschema_tDBOutput_26 = null;
				dbschema_tDBOutput_26 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_26 = null;
				if (dbschema_tDBOutput_26 == null || dbschema_tDBOutput_26.trim().length() == 0) {
					tableName_tDBOutput_26 = ("rayon");
				} else {
					tableName_tDBOutput_26 = dbschema_tDBOutput_26 + "\".\"" + ("rayon");
				}

				int nb_line_tDBOutput_26 = 0;
				int nb_line_update_tDBOutput_26 = 0;
				int nb_line_inserted_tDBOutput_26 = 0;
				int nb_line_deleted_tDBOutput_26 = 0;
				int nb_line_rejected_tDBOutput_26 = 0;

				int deletedCount_tDBOutput_26 = 0;
				int updatedCount_tDBOutput_26 = 0;
				int insertedCount_tDBOutput_26 = 0;
				int rejectedCount_tDBOutput_26 = 0;

				boolean whetherReject_tDBOutput_26 = false;

				java.sql.Connection conn_tDBOutput_26 = null;
				String dbUser_tDBOutput_26 = null;

				conn_tDBOutput_26 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_26 = 10000;
				int batchSizeCounter_tDBOutput_26 = 0;

				int count_tDBOutput_26 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_26 = conn_tDBOutput_26.createStatement()) {
					stmtClear_tDBOutput_26.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_26 + "\"");
				}
				String insert_tDBOutput_26 = "INSERT INTO \"" + tableName_tDBOutput_26
						+ "\" (\"idrayon\",\"libelle_rayon\",\"idsous_famille\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_26 = conn_tDBOutput_26.prepareStatement(insert_tDBOutput_26);
				resourceMap.put("pstmt_tDBOutput_26", pstmt_tDBOutput_26);

				/**
				 * [tDBOutput_26 begin ] stop
				 */

				/**
				 * [tMap_26 begin ] start
				 */

				ok_Hash.put("tMap_26", false);
				start_Hash.put("tMap_26", System.currentTimeMillis());

				currentComponent = "tMap_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tMap_26 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_26__Struct {
				}
				Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1_2Struct copyOfcopyOfmain_1_2_tmp = new copyOfcopyOfmain_1_2Struct();
// ###############################

				/**
				 * [tMap_26 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_29 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_29", false);
				start_Hash.put("tFileInputDelimited_29", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_29";

				int tos_count_tFileInputDelimited_29 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_29 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_29 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_29 = null;
				int limit_tFileInputDelimited_29 = -1;
				try {

					Object filename_tFileInputDelimited_29 = "C:/DEV/Data/Base Montauban/rayon.csv";
					if (filename_tFileInputDelimited_29 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_29 = 0, random_value_tFileInputDelimited_29 = -1;
						if (footer_value_tFileInputDelimited_29 > 0 || random_value_tFileInputDelimited_29 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_29 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/rayon.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_29, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_29 != null && fid_tFileInputDelimited_29.nextRecord()) {
						rowstate_tFileInputDelimited_29.reset();

						row24 = null;

						boolean whetherReject_tFileInputDelimited_29 = false;
						row24 = new row24Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_29 = 0;

							columnIndexWithD_tFileInputDelimited_29 = 0;

							row24.PA3PAR0 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 1;

							row24.PA3PAR1 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 2;

							row24.PA3PAR2 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 3;

							row24.PA3PAR3 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 4;

							row24.PA3PAR4 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 5;

							row24.PA3PAR5 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 6;

							row24.PA3LIBEL = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 7;

							row24.PA3COEF1 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 8;

							row24.PA3COEFA = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 9;

							row24.PA3COEFM = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 10;

							row24.PA3MARGR = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 11;

							row24.PA3IMPUT1 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 12;

							row24.PA3IMPUT2 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 13;

							row24.PA3IMPUT3 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 14;

							row24.PA3IMPUT4 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 15;

							row24.PA3IMPUT5 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 16;

							row24.PA3IMPUT6 = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 17;

							row24.PA3DIFF = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 18;

							row24.PA3PAR0W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 19;

							row24.PA3PAR1W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 20;

							row24.PA3PAR2W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 21;

							row24.PA3PAR3W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 22;

							row24.PA3PAR4W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 23;

							row24.PA3PAR5W = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 24;

							row24.PA3COEFB = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 25;

							row24.PA3COEFC = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 26;

							row24.PA3RAYON = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 27;

							row24.PA3ARROND = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 28;

							row24.PA3EDNET = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 29;

							row24.PA3PROMDEB = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							columnIndexWithD_tFileInputDelimited_29 = 30;

							row24.PA3PROMFIN = fid_tFileInputDelimited_29.get(columnIndexWithD_tFileInputDelimited_29);

							if (rowstate_tFileInputDelimited_29.getException() != null) {
								throw rowstate_tFileInputDelimited_29.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_29 = true;

							System.err.println(e.getMessage());
							row24 = null;

						}

						/**
						 * [tFileInputDelimited_29 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_29 main ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						tos_count_tFileInputDelimited_29++;

						/**
						 * [tFileInputDelimited_29 main ] stop
						 */

						/**
						 * [tFileInputDelimited_29 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						/**
						 * [tFileInputDelimited_29 process_data_begin ] stop
						 */
// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tMap_26 main ] start
							 */

							currentComponent = "tMap_26";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_26 = false;
							boolean mainRowRejected_tMap_26 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1_2 = null;

// # Output table : 'copyOfcopyOfmain_1_2'
								copyOfcopyOfmain_1_2_tmp.idrayon = row24.PA3RAYON;
								copyOfcopyOfmain_1_2_tmp.libelle_rayon = row24.PA3LIBEL;
								copyOfcopyOfmain_1_2_tmp.idsous_famille = row24.PA3PAR1 + row24.PA3PAR2;
								copyOfcopyOfmain_1_2 = copyOfcopyOfmain_1_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_26 = false;

							tos_count_tMap_26++;

							/**
							 * [tMap_26 main ] stop
							 */

							/**
							 * [tMap_26 process_data_begin ] start
							 */

							currentComponent = "tMap_26";

							/**
							 * [tMap_26 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1_2"
							if (copyOfcopyOfmain_1_2 != null) {

								/**
								 * [tDBOutput_26 main ] start
								 */

								currentComponent = "tDBOutput_26";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1_2");
								}

								whetherReject_tDBOutput_26 = false;
								if (copyOfcopyOfmain_1_2.idrayon == null) {
									pstmt_tDBOutput_26.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_26.setString(1, copyOfcopyOfmain_1_2.idrayon);
								}

								if (copyOfcopyOfmain_1_2.libelle_rayon == null) {
									pstmt_tDBOutput_26.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_26.setString(2, copyOfcopyOfmain_1_2.libelle_rayon);
								}

								if (copyOfcopyOfmain_1_2.idsous_famille == null) {
									pstmt_tDBOutput_26.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_26.setString(3, copyOfcopyOfmain_1_2.idsous_famille);
								}

								pstmt_tDBOutput_26.addBatch();
								nb_line_tDBOutput_26++;

								batchSizeCounter_tDBOutput_26++;

								if ((batchSize_tDBOutput_26 > 0)
										&& (batchSize_tDBOutput_26 <= batchSizeCounter_tDBOutput_26)) {
									try {
										int countSum_tDBOutput_26 = 0;

										for (int countEach_tDBOutput_26 : pstmt_tDBOutput_26.executeBatch()) {
											countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0
													: countEach_tDBOutput_26);
										}

										insertedCount_tDBOutput_26 += countSum_tDBOutput_26;

										batchSizeCounter_tDBOutput_26 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_26) {
										java.sql.SQLException ne_tDBOutput_26 = e_tDBOutput_26.getNextException(),
												sqle_tDBOutput_26 = null;
										String errormessage_tDBOutput_26;
										if (ne_tDBOutput_26 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_26 = new java.sql.SQLException(
													e_tDBOutput_26.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_26.getMessage(),
													ne_tDBOutput_26.getSQLState(), ne_tDBOutput_26.getErrorCode(),
													ne_tDBOutput_26);
											errormessage_tDBOutput_26 = sqle_tDBOutput_26.getMessage();
										} else {
											errormessage_tDBOutput_26 = e_tDBOutput_26.getMessage();
										}

										int countSum_tDBOutput_26 = 0;
										for (int countEach_tDBOutput_26 : e_tDBOutput_26.getUpdateCounts()) {
											countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0
													: countEach_tDBOutput_26);
										}

										insertedCount_tDBOutput_26 += countSum_tDBOutput_26;

										System.err.println(errormessage_tDBOutput_26);

									}
								}

								tos_count_tDBOutput_26++;

								/**
								 * [tDBOutput_26 main ] stop
								 */

								/**
								 * [tDBOutput_26 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_26";

								/**
								 * [tDBOutput_26 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_26 process_data_end ] start
								 */

								currentComponent = "tDBOutput_26";

								/**
								 * [tDBOutput_26 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1_2"

							/**
							 * [tMap_26 process_data_end ] start
							 */

							currentComponent = "tMap_26";

							/**
							 * [tMap_26 process_data_end ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputDelimited_29 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						/**
						 * [tFileInputDelimited_29 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_29 end ] start
						 */

						currentComponent = "tFileInputDelimited_29";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/rayon.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_29 != null) {
							fid_tFileInputDelimited_29.close();
						}
					}
					if (fid_tFileInputDelimited_29 != null) {
						globalMap.put("tFileInputDelimited_29_NB_LINE", fid_tFileInputDelimited_29.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_29", true);
				end_Hash.put("tFileInputDelimited_29", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_29 end ] stop
				 */

				/**
				 * [tMap_26 end ] start
				 */

				currentComponent = "tMap_26";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tMap_26", true);
				end_Hash.put("tMap_26", System.currentTimeMillis());

				/**
				 * [tMap_26 end ] stop
				 */

				/**
				 * [tDBOutput_26 end ] start
				 */

				currentComponent = "tDBOutput_26";

				try {
					int countSum_tDBOutput_26 = 0;
					if (pstmt_tDBOutput_26 != null && batchSizeCounter_tDBOutput_26 > 0) {

						for (int countEach_tDBOutput_26 : pstmt_tDBOutput_26.executeBatch()) {
							countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
						}

					}

					insertedCount_tDBOutput_26 += countSum_tDBOutput_26;

				} catch (java.sql.BatchUpdateException e_tDBOutput_26) {
					java.sql.SQLException ne_tDBOutput_26 = e_tDBOutput_26.getNextException(), sqle_tDBOutput_26 = null;
					String errormessage_tDBOutput_26;
					if (ne_tDBOutput_26 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_26 = new java.sql.SQLException(
								e_tDBOutput_26.getMessage() + "\ncaused by: " + ne_tDBOutput_26.getMessage(),
								ne_tDBOutput_26.getSQLState(), ne_tDBOutput_26.getErrorCode(), ne_tDBOutput_26);
						errormessage_tDBOutput_26 = sqle_tDBOutput_26.getMessage();
					} else {
						errormessage_tDBOutput_26 = e_tDBOutput_26.getMessage();
					}

					int countSum_tDBOutput_26 = 0;
					for (int countEach_tDBOutput_26 : e_tDBOutput_26.getUpdateCounts()) {
						countSum_tDBOutput_26 += (countEach_tDBOutput_26 < 0 ? 0 : countEach_tDBOutput_26);
					}

					insertedCount_tDBOutput_26 += countSum_tDBOutput_26;

					System.err.println(errormessage_tDBOutput_26);

				}

				if (pstmt_tDBOutput_26 != null) {

					pstmt_tDBOutput_26.close();
					resourceMap.remove("pstmt_tDBOutput_26");
				}
				resourceMap.put("statementClosed_tDBOutput_26", true);

				nb_line_deleted_tDBOutput_26 = nb_line_deleted_tDBOutput_26 + deletedCount_tDBOutput_26;
				nb_line_update_tDBOutput_26 = nb_line_update_tDBOutput_26 + updatedCount_tDBOutput_26;
				nb_line_inserted_tDBOutput_26 = nb_line_inserted_tDBOutput_26 + insertedCount_tDBOutput_26;
				nb_line_rejected_tDBOutput_26 = nb_line_rejected_tDBOutput_26 + rejectedCount_tDBOutput_26;

				globalMap.put("tDBOutput_26_NB_LINE", nb_line_tDBOutput_26);
				globalMap.put("tDBOutput_26_NB_LINE_UPDATED", nb_line_update_tDBOutput_26);
				globalMap.put("tDBOutput_26_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_26);
				globalMap.put("tDBOutput_26_NB_LINE_DELETED", nb_line_deleted_tDBOutput_26);
				globalMap.put("tDBOutput_26_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_26);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1_2");
				}

				ok_Hash.put("tDBOutput_26", true);
				end_Hash.put("tDBOutput_26", System.currentTimeMillis());

				/**
				 * [tDBOutput_26 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_29:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
			}

			tFileInputDelimited_30Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_29 finally ] start
				 */

				currentComponent = "tFileInputDelimited_29";

				/**
				 * [tFileInputDelimited_29 finally ] stop
				 */

				/**
				 * [tMap_26 finally ] start
				 */

				currentComponent = "tMap_26";

				/**
				 * [tMap_26 finally ] stop
				 */

				/**
				 * [tDBOutput_26 finally ] start
				 */

				currentComponent = "tDBOutput_26";

				if (resourceMap.get("statementClosed_tDBOutput_26") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_26 = null;
					if ((pstmtToClose_tDBOutput_26 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_26")) != null) {
						pstmtToClose_tDBOutput_26.close();
					}
				}

				/**
				 * [tDBOutput_26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_29_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_6Struct implements routines.system.IPersistableRow<copyOfmain_6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idremise;

		public String getIdremise() {
			return this.idremise;
		}

		public Integer numero_colonne_tarifaire;

		public Integer getNumero_colonne_tarifaire() {
			return this.numero_colonne_tarifaire;
		}

		public Float pourcentage_remise;

		public Float getPourcentage_remise() {
			return this.pourcentage_remise;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		public String idsous_famille;

		public String getIdsous_famille() {
			return this.idsous_famille;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idremise == null) ? 0 : this.idremise.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_6Struct other = (copyOfmain_6Struct) obj;

			if (this.idremise == null) {
				if (other.idremise != null)
					return false;

			} else if (!this.idremise.equals(other.idremise))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_6Struct other) {

			other.idremise = this.idremise;
			other.numero_colonne_tarifaire = this.numero_colonne_tarifaire;
			other.pourcentage_remise = this.pourcentage_remise;
			other.idcli = this.idcli;
			other.idfamille = this.idfamille;
			other.idsous_famille = this.idsous_famille;

		}

		public void copyKeysDataTo(copyOfmain_6Struct other) {

			other.idremise = this.idremise;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idremise = readString(dis);

					this.numero_colonne_tarifaire = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.pourcentage_remise = null;
					} else {
						this.pourcentage_remise = dis.readFloat();
					}

					this.idcli = readString(dis);

					this.idfamille = readString(dis);

					this.idsous_famille = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idremise, dos);

				// Integer

				writeInteger(this.numero_colonne_tarifaire, dos);

				// Float

				if (this.pourcentage_remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pourcentage_remise);
				}

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfamille, dos);

				// String

				writeString(this.idsous_famille, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idremise=" + idremise);
			sb.append(",numero_colonne_tarifaire=" + String.valueOf(numero_colonne_tarifaire));
			sb.append(",pourcentage_remise=" + String.valueOf(pourcentage_remise));
			sb.append(",idcli=" + idcli);
			sb.append(",idfamille=" + idfamille);
			sb.append(",idsous_famille=" + idsous_famille);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idremise, other.idremise);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String RCREF;

		public String getRCREF() {
			return this.RCREF;
		}

		public String RCTYP;

		public String getRCTYP() {
			return this.RCTYP;
		}

		public String RCFAM;

		public String getRCFAM() {
			return this.RCFAM;
		}

		public String RCSFAM;

		public String getRCSFAM() {
			return this.RCSFAM;
		}

		public String RCFIL;

		public String getRCFIL() {
			return this.RCFIL;
		}

		public String RCTAR;

		public String getRCTAR() {
			return this.RCTAR;
		}

		public String RCREM;

		public String getRCREM() {
			return this.RCREM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.RCREF = readString(dis);

					this.RCTYP = readString(dis);

					this.RCFAM = readString(dis);

					this.RCSFAM = readString(dis);

					this.RCFIL = readString(dis);

					this.RCTAR = readString(dis);

					this.RCREM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RCREF, dos);

				// String

				writeString(this.RCTYP, dos);

				// String

				writeString(this.RCFAM, dos);

				// String

				writeString(this.RCSFAM, dos);

				// String

				writeString(this.RCFIL, dos);

				// String

				writeString(this.RCTAR, dos);

				// String

				writeString(this.RCREM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RCREF=" + RCREF);
			sb.append(",RCTYP=" + RCTYP);
			sb.append(",RCFAM=" + RCFAM);
			sb.append(",RCSFAM=" + RCSFAM);
			sb.append(",RCFIL=" + RCFIL);
			sb.append(",RCTAR=" + RCTAR);
			sb.append(",RCREM=" + RCREM);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_30_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				copyOfmain_6Struct copyOfmain_6 = new copyOfmain_6Struct();

				/**
				 * [tDBOutput_27 begin ] start
				 */

				ok_Hash.put("tDBOutput_27", false);
				start_Hash.put("tDBOutput_27", System.currentTimeMillis());

				currentComponent = "tDBOutput_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_6");
				}

				int tos_count_tDBOutput_27 = 0;

				String dbschema_tDBOutput_27 = null;
				dbschema_tDBOutput_27 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_27 = null;
				if (dbschema_tDBOutput_27 == null || dbschema_tDBOutput_27.trim().length() == 0) {
					tableName_tDBOutput_27 = ("remise");
				} else {
					tableName_tDBOutput_27 = dbschema_tDBOutput_27 + "\".\"" + ("remise");
				}

				int nb_line_tDBOutput_27 = 0;
				int nb_line_update_tDBOutput_27 = 0;
				int nb_line_inserted_tDBOutput_27 = 0;
				int nb_line_deleted_tDBOutput_27 = 0;
				int nb_line_rejected_tDBOutput_27 = 0;

				int deletedCount_tDBOutput_27 = 0;
				int updatedCount_tDBOutput_27 = 0;
				int insertedCount_tDBOutput_27 = 0;
				int rejectedCount_tDBOutput_27 = 0;

				boolean whetherReject_tDBOutput_27 = false;

				java.sql.Connection conn_tDBOutput_27 = null;
				String dbUser_tDBOutput_27 = null;

				conn_tDBOutput_27 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_27 = 10000;
				int batchSizeCounter_tDBOutput_27 = 0;

				int count_tDBOutput_27 = 0;
				String insert_tDBOutput_27 = "INSERT INTO \"" + tableName_tDBOutput_27
						+ "\" (\"idremise\",\"numero_colonne_tarifaire\",\"pourcentage_remise\",\"idcli\",\"idfamille\",\"idsous_famille\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_27 = conn_tDBOutput_27.prepareStatement(insert_tDBOutput_27);
				resourceMap.put("pstmt_tDBOutput_27", pstmt_tDBOutput_27);

				/**
				 * [tDBOutput_27 begin ] stop
				 */

				/**
				 * [tMap_27 begin ] start
				 */

				ok_Hash.put("tMap_27", false);
				start_Hash.put("tMap_27", System.currentTimeMillis());

				currentComponent = "tMap_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tMap_27 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_27__Struct {
				}
				Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_6Struct copyOfmain_6_tmp = new copyOfmain_6Struct();
// ###############################

				/**
				 * [tMap_27 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_30 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_30", false);
				start_Hash.put("tFileInputDelimited_30", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_30";

				int tos_count_tFileInputDelimited_30 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_30 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_30 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_30 = null;
				int limit_tFileInputDelimited_30 = -1;
				try {

					Object filename_tFileInputDelimited_30 = "C:/DEV/Data/Base Montauban/remises_clients.csv";
					if (filename_tFileInputDelimited_30 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_30 = 0, random_value_tFileInputDelimited_30 = -1;
						if (footer_value_tFileInputDelimited_30 > 0 || random_value_tFileInputDelimited_30 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_30 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/remises_clients.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_30, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_30 != null && fid_tFileInputDelimited_30.nextRecord()) {
						rowstate_tFileInputDelimited_30.reset();

						row25 = null;

						boolean whetherReject_tFileInputDelimited_30 = false;
						row25 = new row25Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_30 = 0;

							columnIndexWithD_tFileInputDelimited_30 = 0;

							row25.RCREF = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 1;

							row25.RCTYP = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 2;

							row25.RCFAM = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 3;

							row25.RCSFAM = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 4;

							row25.RCFIL = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 5;

							row25.RCTAR = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							columnIndexWithD_tFileInputDelimited_30 = 6;

							row25.RCREM = fid_tFileInputDelimited_30.get(columnIndexWithD_tFileInputDelimited_30);

							if (rowstate_tFileInputDelimited_30.getException() != null) {
								throw rowstate_tFileInputDelimited_30.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_30 = true;

							System.err.println(e.getMessage());
							row25 = null;

						}

						/**
						 * [tFileInputDelimited_30 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_30 main ] start
						 */

						currentComponent = "tFileInputDelimited_30";

						tos_count_tFileInputDelimited_30++;

						/**
						 * [tFileInputDelimited_30 main ] stop
						 */

						/**
						 * [tFileInputDelimited_30 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_30";

						/**
						 * [tFileInputDelimited_30 process_data_begin ] stop
						 */
// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tMap_27 main ] start
							 */

							currentComponent = "tMap_27";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_27 = false;
							boolean mainRowRejected_tMap_27 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_6 = null;

// # Output table : 'copyOfmain_6'
								copyOfmain_6_tmp.idremise = row25.RCREF + row25.RCFAM + row25.RCSFAM;
								copyOfmain_6_tmp.numero_colonne_tarifaire = row25.RCTAR == null ? null
										: row25.RCTAR.isBlank() ? null : Integer.parseInt(row25.RCTAR);
								copyOfmain_6_tmp.pourcentage_remise = row25.RCREM == null ? null
										: Float.parseFloat(row25.RCREM);
								copyOfmain_6_tmp.idcli = row25.RCREF == null ? null : row25.RCREF;
								copyOfmain_6_tmp.idfamille = row25.RCFAM.equals("000") ? null :

										row25.RCFAM == null ? null :

												row25.RCFAM;
								copyOfmain_6_tmp.idsous_famille = row25.RCSFAM.substring(3, 6).equals("000") ? null :

										row25.RCSFAM;
								copyOfmain_6 = copyOfmain_6_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_27 = false;

							tos_count_tMap_27++;

							/**
							 * [tMap_27 main ] stop
							 */

							/**
							 * [tMap_27 process_data_begin ] start
							 */

							currentComponent = "tMap_27";

							/**
							 * [tMap_27 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_6"
							if (copyOfmain_6 != null) {

								/**
								 * [tDBOutput_27 main ] start
								 */

								currentComponent = "tDBOutput_27";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_6");
								}

								whetherReject_tDBOutput_27 = false;
								if (copyOfmain_6.idremise == null) {
									pstmt_tDBOutput_27.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_27.setString(1, copyOfmain_6.idremise);
								}

								if (copyOfmain_6.numero_colonne_tarifaire == null) {
									pstmt_tDBOutput_27.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_27.setInt(2, copyOfmain_6.numero_colonne_tarifaire);
								}

								if (copyOfmain_6.pourcentage_remise == null) {
									pstmt_tDBOutput_27.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_27.setFloat(3, copyOfmain_6.pourcentage_remise);
								}

								if (copyOfmain_6.idcli == null) {
									pstmt_tDBOutput_27.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_27.setString(4, copyOfmain_6.idcli);
								}

								if (copyOfmain_6.idfamille == null) {
									pstmt_tDBOutput_27.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_27.setString(5, copyOfmain_6.idfamille);
								}

								if (copyOfmain_6.idsous_famille == null) {
									pstmt_tDBOutput_27.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_27.setString(6, copyOfmain_6.idsous_famille);
								}

								pstmt_tDBOutput_27.addBatch();
								nb_line_tDBOutput_27++;

								batchSizeCounter_tDBOutput_27++;

								if ((batchSize_tDBOutput_27 > 0)
										&& (batchSize_tDBOutput_27 <= batchSizeCounter_tDBOutput_27)) {
									try {
										int countSum_tDBOutput_27 = 0;

										for (int countEach_tDBOutput_27 : pstmt_tDBOutput_27.executeBatch()) {
											countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0
													: countEach_tDBOutput_27);
										}

										insertedCount_tDBOutput_27 += countSum_tDBOutput_27;

										batchSizeCounter_tDBOutput_27 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_27) {
										java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(),
												sqle_tDBOutput_27 = null;
										String errormessage_tDBOutput_27;
										if (ne_tDBOutput_27 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_27 = new java.sql.SQLException(
													e_tDBOutput_27.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_27.getMessage(),
													ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(),
													ne_tDBOutput_27);
											errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
										} else {
											errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
										}

										int countSum_tDBOutput_27 = 0;
										for (int countEach_tDBOutput_27 : e_tDBOutput_27.getUpdateCounts()) {
											countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0
													: countEach_tDBOutput_27);
										}

										insertedCount_tDBOutput_27 += countSum_tDBOutput_27;

										System.err.println(errormessage_tDBOutput_27);

									}
								}

								tos_count_tDBOutput_27++;

								/**
								 * [tDBOutput_27 main ] stop
								 */

								/**
								 * [tDBOutput_27 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_27";

								/**
								 * [tDBOutput_27 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_27 process_data_end ] start
								 */

								currentComponent = "tDBOutput_27";

								/**
								 * [tDBOutput_27 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_6"

							/**
							 * [tMap_27 process_data_end ] start
							 */

							currentComponent = "tMap_27";

							/**
							 * [tMap_27 process_data_end ] stop
							 */

						} // End of branch "row25"

						/**
						 * [tFileInputDelimited_30 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_30";

						/**
						 * [tFileInputDelimited_30 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_30 end ] start
						 */

						currentComponent = "tFileInputDelimited_30";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/remises_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_30 != null) {
							fid_tFileInputDelimited_30.close();
						}
					}
					if (fid_tFileInputDelimited_30 != null) {
						globalMap.put("tFileInputDelimited_30_NB_LINE", fid_tFileInputDelimited_30.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_30", true);
				end_Hash.put("tFileInputDelimited_30", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_30 end ] stop
				 */

				/**
				 * [tMap_27 end ] start
				 */

				currentComponent = "tMap_27";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tMap_27", true);
				end_Hash.put("tMap_27", System.currentTimeMillis());

				/**
				 * [tMap_27 end ] stop
				 */

				/**
				 * [tDBOutput_27 end ] start
				 */

				currentComponent = "tDBOutput_27";

				try {
					int countSum_tDBOutput_27 = 0;
					if (pstmt_tDBOutput_27 != null && batchSizeCounter_tDBOutput_27 > 0) {

						for (int countEach_tDBOutput_27 : pstmt_tDBOutput_27.executeBatch()) {
							countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
						}

					}

					insertedCount_tDBOutput_27 += countSum_tDBOutput_27;

				} catch (java.sql.BatchUpdateException e_tDBOutput_27) {
					java.sql.SQLException ne_tDBOutput_27 = e_tDBOutput_27.getNextException(), sqle_tDBOutput_27 = null;
					String errormessage_tDBOutput_27;
					if (ne_tDBOutput_27 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_27 = new java.sql.SQLException(
								e_tDBOutput_27.getMessage() + "\ncaused by: " + ne_tDBOutput_27.getMessage(),
								ne_tDBOutput_27.getSQLState(), ne_tDBOutput_27.getErrorCode(), ne_tDBOutput_27);
						errormessage_tDBOutput_27 = sqle_tDBOutput_27.getMessage();
					} else {
						errormessage_tDBOutput_27 = e_tDBOutput_27.getMessage();
					}

					int countSum_tDBOutput_27 = 0;
					for (int countEach_tDBOutput_27 : e_tDBOutput_27.getUpdateCounts()) {
						countSum_tDBOutput_27 += (countEach_tDBOutput_27 < 0 ? 0 : countEach_tDBOutput_27);
					}

					insertedCount_tDBOutput_27 += countSum_tDBOutput_27;

					System.err.println(errormessage_tDBOutput_27);

				}

				if (pstmt_tDBOutput_27 != null) {

					pstmt_tDBOutput_27.close();
					resourceMap.remove("pstmt_tDBOutput_27");
				}
				resourceMap.put("statementClosed_tDBOutput_27", true);

				nb_line_deleted_tDBOutput_27 = nb_line_deleted_tDBOutput_27 + deletedCount_tDBOutput_27;
				nb_line_update_tDBOutput_27 = nb_line_update_tDBOutput_27 + updatedCount_tDBOutput_27;
				nb_line_inserted_tDBOutput_27 = nb_line_inserted_tDBOutput_27 + insertedCount_tDBOutput_27;
				nb_line_rejected_tDBOutput_27 = nb_line_rejected_tDBOutput_27 + rejectedCount_tDBOutput_27;

				globalMap.put("tDBOutput_27_NB_LINE", nb_line_tDBOutput_27);
				globalMap.put("tDBOutput_27_NB_LINE_UPDATED", nb_line_update_tDBOutput_27);
				globalMap.put("tDBOutput_27_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_27);
				globalMap.put("tDBOutput_27_NB_LINE_DELETED", nb_line_deleted_tDBOutput_27);
				globalMap.put("tDBOutput_27_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_27);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_6");
				}

				ok_Hash.put("tDBOutput_27", true);
				end_Hash.put("tDBOutput_27", System.currentTimeMillis());

				/**
				 * [tDBOutput_27 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_30:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk36", 0, "ok");
			}

			tFileInputDelimited_33Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_30 finally ] start
				 */

				currentComponent = "tFileInputDelimited_30";

				/**
				 * [tFileInputDelimited_30 finally ] stop
				 */

				/**
				 * [tMap_27 finally ] start
				 */

				currentComponent = "tMap_27";

				/**
				 * [tMap_27 finally ] stop
				 */

				/**
				 * [tDBOutput_27 finally ] start
				 */

				currentComponent = "tDBOutput_27";

				if (resourceMap.get("statementClosed_tDBOutput_27") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_27 = null;
					if ((pstmtToClose_tDBOutput_27 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_27")) != null) {
						pstmtToClose_tDBOutput_27.close();
					}
				}

				/**
				 * [tDBOutput_27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_30_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_7Struct implements routines.system.IPersistableRow<copyOfmain_7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		public String code_client_chez_frs;

		public String getCode_client_chez_frs() {
			return this.code_client_chez_frs;
		}

		public String scode_compta;

		public String getScode_compta() {
			return this.scode_compta;
		}

		public String code_livraison_par_default;

		public String getCode_livraison_par_default() {
			return this.code_livraison_par_default;
		}

		public String commentaire;

		public String getCommentaire() {
			return this.commentaire;
		}

		public String identifiant_internet;

		public String getIdentifiant_internet() {
			return this.identifiant_internet;
		}

		public String lien_site_internet;

		public String getLien_site_internet() {
			return this.lien_site_internet;
		}

		public String montant_franco_pour_port;

		public String getMontant_franco_pour_port() {
			return this.montant_franco_pour_port;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String numero_tva_cee;

		public String getNumero_tva_cee() {
			return this.numero_tva_cee;
		}

		public String password_internet;

		public String getPassword_internet() {
			return this.password_internet;
		}

		public Integer remise_fixe;

		public Integer getRemise_fixe() {
			return this.remise_fixe;
		}

		public Integer taux_frais_approche;

		public Integer getTaux_frais_approche() {
			return this.taux_frais_approche;
		}

		public String idmode_payement;

		public String getIdmode_payement() {
			return this.idmode_payement;
		}

		public String idqualite;

		public String getIdqualite() {
			return this.idqualite;
		}

		public String idsecteur;

		public String getIdsecteur() {
			return this.idsecteur;
		}

		public String idtransporteur;

		public String getIdtransporteur() {
			return this.idtransporteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idfournisseur == null) ? 0 : this.idfournisseur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_7Struct other = (copyOfmain_7Struct) obj;

			if (this.idfournisseur == null) {
				if (other.idfournisseur != null)
					return false;

			} else if (!this.idfournisseur.equals(other.idfournisseur))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_7Struct other) {

			other.idfournisseur = this.idfournisseur;
			other.code_client_chez_frs = this.code_client_chez_frs;
			other.scode_compta = this.scode_compta;
			other.code_livraison_par_default = this.code_livraison_par_default;
			other.commentaire = this.commentaire;
			other.identifiant_internet = this.identifiant_internet;
			other.lien_site_internet = this.lien_site_internet;
			other.montant_franco_pour_port = this.montant_franco_pour_port;
			other.nom = this.nom;
			other.numero_tva_cee = this.numero_tva_cee;
			other.password_internet = this.password_internet;
			other.remise_fixe = this.remise_fixe;
			other.taux_frais_approche = this.taux_frais_approche;
			other.idmode_payement = this.idmode_payement;
			other.idqualite = this.idqualite;
			other.idsecteur = this.idsecteur;
			other.idtransporteur = this.idtransporteur;

		}

		public void copyKeysDataTo(copyOfmain_7Struct other) {

			other.idfournisseur = this.idfournisseur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idfournisseur = readString(dis);

					this.code_client_chez_frs = readString(dis);

					this.scode_compta = readString(dis);

					this.code_livraison_par_default = readString(dis);

					this.commentaire = readString(dis);

					this.identifiant_internet = readString(dis);

					this.lien_site_internet = readString(dis);

					this.montant_franco_pour_port = readString(dis);

					this.nom = readString(dis);

					this.numero_tva_cee = readString(dis);

					this.password_internet = readString(dis);

					this.remise_fixe = readInteger(dis);

					this.taux_frais_approche = readInteger(dis);

					this.idmode_payement = readString(dis);

					this.idqualite = readString(dis);

					this.idsecteur = readString(dis);

					this.idtransporteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idfournisseur, dos);

				// String

				writeString(this.code_client_chez_frs, dos);

				// String

				writeString(this.scode_compta, dos);

				// String

				writeString(this.code_livraison_par_default, dos);

				// String

				writeString(this.commentaire, dos);

				// String

				writeString(this.identifiant_internet, dos);

				// String

				writeString(this.lien_site_internet, dos);

				// String

				writeString(this.montant_franco_pour_port, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.numero_tva_cee, dos);

				// String

				writeString(this.password_internet, dos);

				// Integer

				writeInteger(this.remise_fixe, dos);

				// Integer

				writeInteger(this.taux_frais_approche, dos);

				// String

				writeString(this.idmode_payement, dos);

				// String

				writeString(this.idqualite, dos);

				// String

				writeString(this.idsecteur, dos);

				// String

				writeString(this.idtransporteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseur=" + idfournisseur);
			sb.append(",code_client_chez_frs=" + code_client_chez_frs);
			sb.append(",scode_compta=" + scode_compta);
			sb.append(",code_livraison_par_default=" + code_livraison_par_default);
			sb.append(",commentaire=" + commentaire);
			sb.append(",identifiant_internet=" + identifiant_internet);
			sb.append(",lien_site_internet=" + lien_site_internet);
			sb.append(",montant_franco_pour_port=" + montant_franco_pour_port);
			sb.append(",nom=" + nom);
			sb.append(",numero_tva_cee=" + numero_tva_cee);
			sb.append(",password_internet=" + password_internet);
			sb.append(",remise_fixe=" + String.valueOf(remise_fixe));
			sb.append(",taux_frais_approche=" + String.valueOf(taux_frais_approche));
			sb.append(",idmode_payement=" + idmode_payement);
			sb.append(",idqualite=" + idqualite);
			sb.append(",idsecteur=" + idsecteur);
			sb.append(",idtransporteur=" + idtransporteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseur, other.idfournisseur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();
				copyOfmain_7Struct copyOfmain_7 = new copyOfmain_7Struct();

				/**
				 * [tDBOutput_33 begin ] start
				 */

				ok_Hash.put("tDBOutput_33", false);
				start_Hash.put("tDBOutput_33", System.currentTimeMillis());

				currentComponent = "tDBOutput_33";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_7");
				}

				int tos_count_tDBOutput_33 = 0;

				String dbschema_tDBOutput_33 = null;
				dbschema_tDBOutput_33 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_33 = null;
				if (dbschema_tDBOutput_33 == null || dbschema_tDBOutput_33.trim().length() == 0) {
					tableName_tDBOutput_33 = ("fournisseur");
				} else {
					tableName_tDBOutput_33 = dbschema_tDBOutput_33 + "\".\"" + ("fournisseur");
				}

				int nb_line_tDBOutput_33 = 0;
				int nb_line_update_tDBOutput_33 = 0;
				int nb_line_inserted_tDBOutput_33 = 0;
				int nb_line_deleted_tDBOutput_33 = 0;
				int nb_line_rejected_tDBOutput_33 = 0;

				int deletedCount_tDBOutput_33 = 0;
				int updatedCount_tDBOutput_33 = 0;
				int insertedCount_tDBOutput_33 = 0;
				int rejectedCount_tDBOutput_33 = 0;

				boolean whetherReject_tDBOutput_33 = false;

				java.sql.Connection conn_tDBOutput_33 = null;
				String dbUser_tDBOutput_33 = null;

				conn_tDBOutput_33 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_33 = 10000;
				int batchSizeCounter_tDBOutput_33 = 0;

				int count_tDBOutput_33 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_33 = conn_tDBOutput_33.createStatement()) {
					stmtClear_tDBOutput_33.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_33 + "\"");
				}
				String insert_tDBOutput_33 = "INSERT INTO \"" + tableName_tDBOutput_33
						+ "\" (\"idfournisseur\",\"code_client_chez_frs\",\"scode_compta\",\"code_livraison_par_default\",\"commentaire\",\"identifiant_internet\",\"lien_site_internet\",\"montant_franco_pour_port\",\"nom\",\"numero_tva_cee\",\"password_internet\",\"remise_fixe\",\"taux_frais_approche\",\"idmode_payement\",\"idqualite\",\"idsecteur\",\"idtransporteur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_33 = conn_tDBOutput_33.prepareStatement(insert_tDBOutput_33);
				resourceMap.put("pstmt_tDBOutput_33", pstmt_tDBOutput_33);

				/**
				 * [tDBOutput_33 begin ] stop
				 */

				/**
				 * [tMap_31 begin ] start
				 */

				ok_Hash.put("tMap_31", false);
				start_Hash.put("tMap_31", System.currentTimeMillis());

				currentComponent = "tMap_31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tMap_31 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_31__Struct {
				}
				Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_7Struct copyOfmain_7_tmp = new copyOfmain_7Struct();
// ###############################

				/**
				 * [tMap_31 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_33 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_33", false);
				start_Hash.put("tFileInputDelimited_33", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_33";

				int tos_count_tFileInputDelimited_33 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_33 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_33 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_33 = null;
				int limit_tFileInputDelimited_33 = -1;
				try {

					Object filename_tFileInputDelimited_33 = "C:/DEV/Data/Base Montauban/Fournisseur.csv";
					if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_33 = 0, random_value_tFileInputDelimited_33 = -1;
						if (footer_value_tFileInputDelimited_33 > 0 || random_value_tFileInputDelimited_33 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_33 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Fournisseur.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_33, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_33 != null && fid_tFileInputDelimited_33.nextRecord()) {
						rowstate_tFileInputDelimited_33.reset();

						row28 = null;

						boolean whetherReject_tFileInputDelimited_33 = false;
						row28 = new row28Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_33 = 0;

							columnIndexWithD_tFileInputDelimited_33 = 0;

							row28.FRREF = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 1;

							row28.FRNOM = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 2;

							row28.FRRUE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 3;

							row28.FRAUX = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 4;

							row28.FRCPTL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 5;

							row28.FRVIL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 6;

							row28.FRPLAN = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 7;

							row28.FRCODE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 8;

							row28.FRFIL1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 9;

							row28.FRQUAL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 10;

							row28.FRCOM1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 11;

							row28.FRDEL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 12;

							row28.FRREMFI = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 13;

							row28.FRECH = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 14;

							row28.FRECHJ = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 15;

							row28.FRPAI = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 16;

							row28.FRDAC = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 17;

							row28.FRECHJ2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 18;

							row28.FRMOD = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 19;

							row28.FRBQ1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 20;

							row28.FRBQ2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 21;

							row28.FRBQ3 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 22;

							row28.FRBQ4 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 23;

							row28.FRBQ5 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 24;

							row28.FRBQ6 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 25;

							row28.FRFACT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 26;

							row28.FRBL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 27;

							row28.FRESC = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 28;

							row28.FRFIL2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 29;

							row28.FRDAL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 30;

							row28.FRCAN1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 31;

							row28.FRCAN2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 32;

							row28.FRCAN3 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 33;

							row28.FRDATF = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 34;

							row28.FRRESP = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 35;

							row28.FRTEL1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 36;

							row28.FRTEL2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 37;

							row28.FRTEX1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 38;

							row28.FRTEX2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 39;

							row28.FRCDEFAX = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 40;

							row28.FRCDEMAIL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 41;

							row28.FRCDEINT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 42;

							row28.FRCDEDIL = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 43;

							row28.FREXPORT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 44;

							row28.FRGENCODE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 45;

							row28.FREXPEDIT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 46;

							row28.FRIDENT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 47;

							row28.FRPASSE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 48;

							row28.FRSITE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 49;

							row28.FRIBAN1 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 50;

							row28.FRIBAN72 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 51;

							row28.FRIBAN8 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 52;

							row28.FRIBAN9 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 53;

							row28.FRIBIC = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 54;

							row28.FRFIL3 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 55;

							row28.FRFRANC = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 56;

							row28.FRCODLIV = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 57;

							row28.FRCODCLI = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 58;

							row28.FRPAYS = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 59;

							row28.FRSECT = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 60;

							row28.FRTOUR = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 61;

							row28.FRNCEE = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 62;

							row28.FRFRAP = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 63;

							row28.FRPOID = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 64;

							row28.FRCUBA = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 65;

							row28.FRNTEL2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 66;

							row28.FRNTEX2 = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							columnIndexWithD_tFileInputDelimited_33 = 67;

							row28.FRCREP = fid_tFileInputDelimited_33.get(columnIndexWithD_tFileInputDelimited_33);

							if (rowstate_tFileInputDelimited_33.getException() != null) {
								throw rowstate_tFileInputDelimited_33.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_33 = true;

							System.err.println(e.getMessage());
							row28 = null;

						}

						/**
						 * [tFileInputDelimited_33 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_33 main ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						tos_count_tFileInputDelimited_33++;

						/**
						 * [tFileInputDelimited_33 main ] stop
						 */

						/**
						 * [tFileInputDelimited_33 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						/**
						 * [tFileInputDelimited_33 process_data_begin ] stop
						 */
// Start of branch "row28"
						if (row28 != null) {

							/**
							 * [tMap_31 main ] start
							 */

							currentComponent = "tMap_31";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row28");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_31 = false;
							boolean mainRowRejected_tMap_31 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_7 = null;

// # Output table : 'copyOfmain_7'
								copyOfmain_7_tmp.idfournisseur = row28.FRREF;
								copyOfmain_7_tmp.code_client_chez_frs = row28.FRCODCLI;
								copyOfmain_7_tmp.scode_compta = null;
								copyOfmain_7_tmp.code_livraison_par_default = row28.FRCODLIV;
								copyOfmain_7_tmp.commentaire = row28.FRCOM1;
								copyOfmain_7_tmp.identifiant_internet = row28.FRIDENT;
								copyOfmain_7_tmp.lien_site_internet = row28.FRSITE;
								copyOfmain_7_tmp.montant_franco_pour_port = row28.FRFRANC;
								copyOfmain_7_tmp.nom = row28.FRNOM;
								copyOfmain_7_tmp.numero_tva_cee = row28.FRNCEE;
								copyOfmain_7_tmp.password_internet = row28.FRPASSE;
								copyOfmain_7_tmp.remise_fixe = Integer.parseInt(row28.FRREMFI);
								copyOfmain_7_tmp.taux_frais_approche = Integer.parseInt(row28.FRFRAP);
								copyOfmain_7_tmp.idmode_payement = row28.FRPAI;
								copyOfmain_7_tmp.idqualite = row28.FRQUAL;
								copyOfmain_7_tmp.idsecteur = null;
								copyOfmain_7_tmp.idtransporteur = null;
								copyOfmain_7 = copyOfmain_7_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_31 = false;

							tos_count_tMap_31++;

							/**
							 * [tMap_31 main ] stop
							 */

							/**
							 * [tMap_31 process_data_begin ] start
							 */

							currentComponent = "tMap_31";

							/**
							 * [tMap_31 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_7"
							if (copyOfmain_7 != null) {

								/**
								 * [tDBOutput_33 main ] start
								 */

								currentComponent = "tDBOutput_33";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_7");
								}

								whetherReject_tDBOutput_33 = false;
								if (copyOfmain_7.idfournisseur == null) {
									pstmt_tDBOutput_33.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(1, copyOfmain_7.idfournisseur);
								}

								if (copyOfmain_7.code_client_chez_frs == null) {
									pstmt_tDBOutput_33.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(2, copyOfmain_7.code_client_chez_frs);
								}

								if (copyOfmain_7.scode_compta == null) {
									pstmt_tDBOutput_33.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(3, copyOfmain_7.scode_compta);
								}

								if (copyOfmain_7.code_livraison_par_default == null) {
									pstmt_tDBOutput_33.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(4, copyOfmain_7.code_livraison_par_default);
								}

								if (copyOfmain_7.commentaire == null) {
									pstmt_tDBOutput_33.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(5, copyOfmain_7.commentaire);
								}

								if (copyOfmain_7.identifiant_internet == null) {
									pstmt_tDBOutput_33.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(6, copyOfmain_7.identifiant_internet);
								}

								if (copyOfmain_7.lien_site_internet == null) {
									pstmt_tDBOutput_33.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(7, copyOfmain_7.lien_site_internet);
								}

								if (copyOfmain_7.montant_franco_pour_port == null) {
									pstmt_tDBOutput_33.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(8, copyOfmain_7.montant_franco_pour_port);
								}

								if (copyOfmain_7.nom == null) {
									pstmt_tDBOutput_33.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(9, copyOfmain_7.nom);
								}

								if (copyOfmain_7.numero_tva_cee == null) {
									pstmt_tDBOutput_33.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(10, copyOfmain_7.numero_tva_cee);
								}

								if (copyOfmain_7.password_internet == null) {
									pstmt_tDBOutput_33.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(11, copyOfmain_7.password_internet);
								}

								if (copyOfmain_7.remise_fixe == null) {
									pstmt_tDBOutput_33.setNull(12, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_33.setInt(12, copyOfmain_7.remise_fixe);
								}

								if (copyOfmain_7.taux_frais_approche == null) {
									pstmt_tDBOutput_33.setNull(13, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_33.setInt(13, copyOfmain_7.taux_frais_approche);
								}

								if (copyOfmain_7.idmode_payement == null) {
									pstmt_tDBOutput_33.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(14, copyOfmain_7.idmode_payement);
								}

								if (copyOfmain_7.idqualite == null) {
									pstmt_tDBOutput_33.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(15, copyOfmain_7.idqualite);
								}

								if (copyOfmain_7.idsecteur == null) {
									pstmt_tDBOutput_33.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(16, copyOfmain_7.idsecteur);
								}

								if (copyOfmain_7.idtransporteur == null) {
									pstmt_tDBOutput_33.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_33.setString(17, copyOfmain_7.idtransporteur);
								}

								pstmt_tDBOutput_33.addBatch();
								nb_line_tDBOutput_33++;

								batchSizeCounter_tDBOutput_33++;

								if ((batchSize_tDBOutput_33 > 0)
										&& (batchSize_tDBOutput_33 <= batchSizeCounter_tDBOutput_33)) {
									try {
										int countSum_tDBOutput_33 = 0;

										for (int countEach_tDBOutput_33 : pstmt_tDBOutput_33.executeBatch()) {
											countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0
													: countEach_tDBOutput_33);
										}

										insertedCount_tDBOutput_33 += countSum_tDBOutput_33;

										batchSizeCounter_tDBOutput_33 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_33) {
										java.sql.SQLException ne_tDBOutput_33 = e_tDBOutput_33.getNextException(),
												sqle_tDBOutput_33 = null;
										String errormessage_tDBOutput_33;
										if (ne_tDBOutput_33 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_33 = new java.sql.SQLException(
													e_tDBOutput_33.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_33.getMessage(),
													ne_tDBOutput_33.getSQLState(), ne_tDBOutput_33.getErrorCode(),
													ne_tDBOutput_33);
											errormessage_tDBOutput_33 = sqle_tDBOutput_33.getMessage();
										} else {
											errormessage_tDBOutput_33 = e_tDBOutput_33.getMessage();
										}

										int countSum_tDBOutput_33 = 0;
										for (int countEach_tDBOutput_33 : e_tDBOutput_33.getUpdateCounts()) {
											countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0
													: countEach_tDBOutput_33);
										}

										insertedCount_tDBOutput_33 += countSum_tDBOutput_33;

										System.err.println(errormessage_tDBOutput_33);

									}
								}

								tos_count_tDBOutput_33++;

								/**
								 * [tDBOutput_33 main ] stop
								 */

								/**
								 * [tDBOutput_33 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_33";

								/**
								 * [tDBOutput_33 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_33 process_data_end ] start
								 */

								currentComponent = "tDBOutput_33";

								/**
								 * [tDBOutput_33 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_7"

							/**
							 * [tMap_31 process_data_end ] start
							 */

							currentComponent = "tMap_31";

							/**
							 * [tMap_31 process_data_end ] stop
							 */

						} // End of branch "row28"

						/**
						 * [tFileInputDelimited_33 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						/**
						 * [tFileInputDelimited_33 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_33 end ] start
						 */

						currentComponent = "tFileInputDelimited_33";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Fournisseur.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_33 != null) {
							fid_tFileInputDelimited_33.close();
						}
					}
					if (fid_tFileInputDelimited_33 != null) {
						globalMap.put("tFileInputDelimited_33_NB_LINE", fid_tFileInputDelimited_33.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_33", true);
				end_Hash.put("tFileInputDelimited_33", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_33 end ] stop
				 */

				/**
				 * [tMap_31 end ] start
				 */

				currentComponent = "tMap_31";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tMap_31", true);
				end_Hash.put("tMap_31", System.currentTimeMillis());

				/**
				 * [tMap_31 end ] stop
				 */

				/**
				 * [tDBOutput_33 end ] start
				 */

				currentComponent = "tDBOutput_33";

				try {
					int countSum_tDBOutput_33 = 0;
					if (pstmt_tDBOutput_33 != null && batchSizeCounter_tDBOutput_33 > 0) {

						for (int countEach_tDBOutput_33 : pstmt_tDBOutput_33.executeBatch()) {
							countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
						}

					}

					insertedCount_tDBOutput_33 += countSum_tDBOutput_33;

				} catch (java.sql.BatchUpdateException e_tDBOutput_33) {
					java.sql.SQLException ne_tDBOutput_33 = e_tDBOutput_33.getNextException(), sqle_tDBOutput_33 = null;
					String errormessage_tDBOutput_33;
					if (ne_tDBOutput_33 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_33 = new java.sql.SQLException(
								e_tDBOutput_33.getMessage() + "\ncaused by: " + ne_tDBOutput_33.getMessage(),
								ne_tDBOutput_33.getSQLState(), ne_tDBOutput_33.getErrorCode(), ne_tDBOutput_33);
						errormessage_tDBOutput_33 = sqle_tDBOutput_33.getMessage();
					} else {
						errormessage_tDBOutput_33 = e_tDBOutput_33.getMessage();
					}

					int countSum_tDBOutput_33 = 0;
					for (int countEach_tDBOutput_33 : e_tDBOutput_33.getUpdateCounts()) {
						countSum_tDBOutput_33 += (countEach_tDBOutput_33 < 0 ? 0 : countEach_tDBOutput_33);
					}

					insertedCount_tDBOutput_33 += countSum_tDBOutput_33;

					System.err.println(errormessage_tDBOutput_33);

				}

				if (pstmt_tDBOutput_33 != null) {

					pstmt_tDBOutput_33.close();
					resourceMap.remove("pstmt_tDBOutput_33");
				}
				resourceMap.put("statementClosed_tDBOutput_33", true);

				nb_line_deleted_tDBOutput_33 = nb_line_deleted_tDBOutput_33 + deletedCount_tDBOutput_33;
				nb_line_update_tDBOutput_33 = nb_line_update_tDBOutput_33 + updatedCount_tDBOutput_33;
				nb_line_inserted_tDBOutput_33 = nb_line_inserted_tDBOutput_33 + insertedCount_tDBOutput_33;
				nb_line_rejected_tDBOutput_33 = nb_line_rejected_tDBOutput_33 + rejectedCount_tDBOutput_33;

				globalMap.put("tDBOutput_33_NB_LINE", nb_line_tDBOutput_33);
				globalMap.put("tDBOutput_33_NB_LINE_UPDATED", nb_line_update_tDBOutput_33);
				globalMap.put("tDBOutput_33_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_33);
				globalMap.put("tDBOutput_33_NB_LINE_DELETED", nb_line_deleted_tDBOutput_33);
				globalMap.put("tDBOutput_33_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_33);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_7");
				}

				ok_Hash.put("tDBOutput_33", true);
				end_Hash.put("tDBOutput_33", System.currentTimeMillis());

				/**
				 * [tDBOutput_33 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_33:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
			}

			tFileInputDelimited_34Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_33 finally ] start
				 */

				currentComponent = "tFileInputDelimited_33";

				/**
				 * [tFileInputDelimited_33 finally ] stop
				 */

				/**
				 * [tMap_31 finally ] start
				 */

				currentComponent = "tMap_31";

				/**
				 * [tMap_31 finally ] stop
				 */

				/**
				 * [tDBOutput_33 finally ] start
				 */

				currentComponent = "tDBOutput_33";

				if (resourceMap.get("statementClosed_tDBOutput_33") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_33 = null;
					if ((pstmtToClose_tDBOutput_33 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_33")) != null) {
						pstmtToClose_tDBOutput_33.close();
					}
				}

				/**
				 * [tDBOutput_33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmainStruct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idparam_fournisseur;

		public int getIdparam_fournisseur() {
			return this.idparam_fournisseur;
		}

		public String code_2;

		public String getCode_2() {
			return this.code_2;
		}

		public String code_gencode;

		public String getCode_gencode() {
			return this.code_gencode;
		}

		public String code_planning;

		public String getCode_planning() {
			return this.code_planning;
		}

		public Boolean envoie_cmd_dilicom;

		public Boolean getEnvoie_cmd_dilicom() {
			return this.envoie_cmd_dilicom;
		}

		public Boolean envoie_cmd_fax;

		public Boolean getEnvoie_cmd_fax() {
			return this.envoie_cmd_fax;
		}

		public Boolean envoie_cmd_internet;

		public Boolean getEnvoie_cmd_internet() {
			return this.envoie_cmd_internet;
		}

		public Boolean envoie_cmd_mail;

		public Boolean getEnvoie_cmd_mail() {
			return this.envoie_cmd_mail;
		}

		public String format_exportation;

		public String getFormat_exportation() {
			return this.format_exportation;
		}

		public Boolean fournisseur_en_sommeil;

		public Boolean getFournisseur_en_sommeil() {
			return this.fournisseur_en_sommeil;
		}

		public Boolean frs_exclu_cmd;

		public Boolean getFrs_exclu_cmd() {
			return this.frs_exclu_cmd;
		}

		public String mode_expedition;

		public String getMode_expedition() {
			return this.mode_expedition;
		}

		public Integer nombre_bon_livraison;

		public Integer getNombre_bon_livraison() {
			return this.nombre_bon_livraison;
		}

		public Integer nombre_facture;

		public Integer getNombre_facture() {
			return this.nombre_facture;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idparam_fournisseur;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmainStruct other = (copyOfcopyOfcopyOfmainStruct) obj;

			if (this.idparam_fournisseur != other.idparam_fournisseur)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmainStruct other) {

			other.idparam_fournisseur = this.idparam_fournisseur;
			other.code_2 = this.code_2;
			other.code_gencode = this.code_gencode;
			other.code_planning = this.code_planning;
			other.envoie_cmd_dilicom = this.envoie_cmd_dilicom;
			other.envoie_cmd_fax = this.envoie_cmd_fax;
			other.envoie_cmd_internet = this.envoie_cmd_internet;
			other.envoie_cmd_mail = this.envoie_cmd_mail;
			other.format_exportation = this.format_exportation;
			other.fournisseur_en_sommeil = this.fournisseur_en_sommeil;
			other.frs_exclu_cmd = this.frs_exclu_cmd;
			other.mode_expedition = this.mode_expedition;
			other.nombre_bon_livraison = this.nombre_bon_livraison;
			other.nombre_facture = this.nombre_facture;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmainStruct other) {

			other.idparam_fournisseur = this.idparam_fournisseur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idparam_fournisseur = dis.readInt();

					this.code_2 = readString(dis);

					this.code_gencode = readString(dis);

					this.code_planning = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.envoie_cmd_dilicom = null;
					} else {
						this.envoie_cmd_dilicom = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_cmd_fax = null;
					} else {
						this.envoie_cmd_fax = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_cmd_internet = null;
					} else {
						this.envoie_cmd_internet = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.envoie_cmd_mail = null;
					} else {
						this.envoie_cmd_mail = dis.readBoolean();
					}

					this.format_exportation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fournisseur_en_sommeil = null;
					} else {
						this.fournisseur_en_sommeil = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.frs_exclu_cmd = null;
					} else {
						this.frs_exclu_cmd = dis.readBoolean();
					}

					this.mode_expedition = readString(dis);

					this.nombre_bon_livraison = readInteger(dis);

					this.nombre_facture = readInteger(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idparam_fournisseur);

				// String

				writeString(this.code_2, dos);

				// String

				writeString(this.code_gencode, dos);

				// String

				writeString(this.code_planning, dos);

				// Boolean

				if (this.envoie_cmd_dilicom == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_cmd_dilicom);
				}

				// Boolean

				if (this.envoie_cmd_fax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_cmd_fax);
				}

				// Boolean

				if (this.envoie_cmd_internet == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_cmd_internet);
				}

				// Boolean

				if (this.envoie_cmd_mail == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.envoie_cmd_mail);
				}

				// String

				writeString(this.format_exportation, dos);

				// Boolean

				if (this.fournisseur_en_sommeil == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fournisseur_en_sommeil);
				}

				// Boolean

				if (this.frs_exclu_cmd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.frs_exclu_cmd);
				}

				// String

				writeString(this.mode_expedition, dos);

				// Integer

				writeInteger(this.nombre_bon_livraison, dos);

				// Integer

				writeInteger(this.nombre_facture, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idparam_fournisseur=" + String.valueOf(idparam_fournisseur));
			sb.append(",code_2=" + code_2);
			sb.append(",code_gencode=" + code_gencode);
			sb.append(",code_planning=" + code_planning);
			sb.append(",envoie_cmd_dilicom=" + String.valueOf(envoie_cmd_dilicom));
			sb.append(",envoie_cmd_fax=" + String.valueOf(envoie_cmd_fax));
			sb.append(",envoie_cmd_internet=" + String.valueOf(envoie_cmd_internet));
			sb.append(",envoie_cmd_mail=" + String.valueOf(envoie_cmd_mail));
			sb.append(",format_exportation=" + format_exportation);
			sb.append(",fournisseur_en_sommeil=" + String.valueOf(fournisseur_en_sommeil));
			sb.append(",frs_exclu_cmd=" + String.valueOf(frs_exclu_cmd));
			sb.append(",mode_expedition=" + mode_expedition);
			sb.append(",nombre_bon_livraison=" + String.valueOf(nombre_bon_livraison));
			sb.append(",nombre_facture=" + String.valueOf(nombre_facture));
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idparam_fournisseur, other.idparam_fournisseur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_34_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();
				copyOfcopyOfcopyOfmainStruct copyOfcopyOfcopyOfmain = new copyOfcopyOfcopyOfmainStruct();

				/**
				 * [tDBOutput_34 begin ] start
				 */

				ok_Hash.put("tDBOutput_34", false);
				start_Hash.put("tDBOutput_34", System.currentTimeMillis());

				currentComponent = "tDBOutput_34";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain");
				}

				int tos_count_tDBOutput_34 = 0;

				String dbschema_tDBOutput_34 = null;
				dbschema_tDBOutput_34 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_34 = null;
				if (dbschema_tDBOutput_34 == null || dbschema_tDBOutput_34.trim().length() == 0) {
					tableName_tDBOutput_34 = ("param_fournisseur");
				} else {
					tableName_tDBOutput_34 = dbschema_tDBOutput_34 + "\".\"" + ("param_fournisseur");
				}

				int nb_line_tDBOutput_34 = 0;
				int nb_line_update_tDBOutput_34 = 0;
				int nb_line_inserted_tDBOutput_34 = 0;
				int nb_line_deleted_tDBOutput_34 = 0;
				int nb_line_rejected_tDBOutput_34 = 0;

				int deletedCount_tDBOutput_34 = 0;
				int updatedCount_tDBOutput_34 = 0;
				int insertedCount_tDBOutput_34 = 0;
				int rejectedCount_tDBOutput_34 = 0;

				boolean whetherReject_tDBOutput_34 = false;

				java.sql.Connection conn_tDBOutput_34 = null;
				String dbUser_tDBOutput_34 = null;

				conn_tDBOutput_34 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_34 = 10000;
				int batchSizeCounter_tDBOutput_34 = 0;

				int count_tDBOutput_34 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_34 = conn_tDBOutput_34.createStatement()) {
					stmtClear_tDBOutput_34.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_34 + "\"");
				}
				String insert_tDBOutput_34 = "INSERT INTO \"" + tableName_tDBOutput_34
						+ "\" (\"idparam_fournisseur\",\"code_2\",\"code_gencode\",\"code_planning\",\"envoie_cmd_dilicom\",\"envoie_cmd_fax\",\"envoie_cmd_internet\",\"envoie_cmd_mail\",\"format_exportation\",\"fournisseur_en_sommeil\",\"frs_exclu_cmd\",\"mode_expedition\",\"nombre_bon_livraison\",\"nombre_facture\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_34 = conn_tDBOutput_34.prepareStatement(insert_tDBOutput_34);
				resourceMap.put("pstmt_tDBOutput_34", pstmt_tDBOutput_34);

				/**
				 * [tDBOutput_34 begin ] stop
				 */

				/**
				 * [tMap_32 begin ] start
				 */

				ok_Hash.put("tMap_32", false);
				start_Hash.put("tMap_32", System.currentTimeMillis());

				currentComponent = "tMap_32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tMap_32 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_32__Struct {
				}
				Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmainStruct copyOfcopyOfcopyOfmain_tmp = new copyOfcopyOfcopyOfmainStruct();
// ###############################

				/**
				 * [tMap_32 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_34 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_34", false);
				start_Hash.put("tFileInputDelimited_34", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_34";

				int tos_count_tFileInputDelimited_34 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_34 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_34 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_34 = null;
				int limit_tFileInputDelimited_34 = -1;
				try {

					Object filename_tFileInputDelimited_34 = "C:/DEV/Data/Base Montauban/Fournisseur.csv";
					if (filename_tFileInputDelimited_34 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_34 = 0, random_value_tFileInputDelimited_34 = -1;
						if (footer_value_tFileInputDelimited_34 > 0 || random_value_tFileInputDelimited_34 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_34 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Fournisseur.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_34, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_34 != null && fid_tFileInputDelimited_34.nextRecord()) {
						rowstate_tFileInputDelimited_34.reset();

						row29 = null;

						boolean whetherReject_tFileInputDelimited_34 = false;
						row29 = new row29Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_34 = 0;

							columnIndexWithD_tFileInputDelimited_34 = 0;

							row29.FRREF = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 1;

							row29.FRNOM = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 2;

							row29.FRRUE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 3;

							row29.FRAUX = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 4;

							row29.FRCPTL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 5;

							row29.FRVIL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 6;

							row29.FRPLAN = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 7;

							row29.FRCODE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 8;

							row29.FRFIL1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 9;

							row29.FRQUAL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 10;

							row29.FRCOM1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 11;

							row29.FRDEL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 12;

							row29.FRREMFI = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 13;

							row29.FRECH = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 14;

							row29.FRECHJ = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 15;

							row29.FRPAI = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 16;

							row29.FRDAC = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 17;

							row29.FRECHJ2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 18;

							row29.FRMOD = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 19;

							row29.FRBQ1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 20;

							row29.FRBQ2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 21;

							row29.FRBQ3 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 22;

							row29.FRBQ4 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 23;

							row29.FRBQ5 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 24;

							row29.FRBQ6 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 25;

							row29.FRFACT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 26;

							row29.FRBL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 27;

							row29.FRESC = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 28;

							row29.FRFIL2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 29;

							row29.FRDAL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 30;

							row29.FRCAN1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 31;

							row29.FRCAN2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 32;

							row29.FRCAN3 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 33;

							row29.FRDATF = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 34;

							row29.FRRESP = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 35;

							row29.FRTEL1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 36;

							row29.FRTEL2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 37;

							row29.FRTEX1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 38;

							row29.FRTEX2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 39;

							row29.FRCDEFAX = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 40;

							row29.FRCDEMAIL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 41;

							row29.FRCDEINT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 42;

							row29.FRCDEDIL = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 43;

							row29.FREXPORT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 44;

							row29.FRGENCODE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 45;

							row29.FREXPEDIT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 46;

							row29.FRIDENT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 47;

							row29.FRPASSE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 48;

							row29.FRSITE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 49;

							row29.FRIBAN1 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 50;

							row29.FRIBAN72 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 51;

							row29.FRIBAN8 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 52;

							row29.FRIBAN9 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 53;

							row29.FRIBIC = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 54;

							row29.FRFIL3 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 55;

							row29.FRFRANC = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 56;

							row29.FRCODLIV = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 57;

							row29.FRCODCLI = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 58;

							row29.FRPAYS = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 59;

							row29.FRSECT = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 60;

							row29.FRTOUR = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 61;

							row29.FRNCEE = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 62;

							row29.FRFRAP = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 63;

							row29.FRPOID = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 64;

							row29.FRCUBA = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 65;

							row29.FRNTEL2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 66;

							row29.FRNTEX2 = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							columnIndexWithD_tFileInputDelimited_34 = 67;

							row29.FRCREP = fid_tFileInputDelimited_34.get(columnIndexWithD_tFileInputDelimited_34);

							if (rowstate_tFileInputDelimited_34.getException() != null) {
								throw rowstate_tFileInputDelimited_34.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_34 = true;

							System.err.println(e.getMessage());
							row29 = null;

						}

						/**
						 * [tFileInputDelimited_34 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_34 main ] start
						 */

						currentComponent = "tFileInputDelimited_34";

						tos_count_tFileInputDelimited_34++;

						/**
						 * [tFileInputDelimited_34 main ] stop
						 */

						/**
						 * [tFileInputDelimited_34 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_34";

						/**
						 * [tFileInputDelimited_34 process_data_begin ] stop
						 */
// Start of branch "row29"
						if (row29 != null) {

							/**
							 * [tMap_32 main ] start
							 */

							currentComponent = "tMap_32";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row29");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_32 = false;
							boolean mainRowRejected_tMap_32 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain = null;

// # Output table : 'copyOfcopyOfcopyOfmain'
								copyOfcopyOfcopyOfmain_tmp.idparam_fournisseur = Numeric.sequence("s8", 1, 1);
								copyOfcopyOfcopyOfmain_tmp.code_2 = null;
								copyOfcopyOfcopyOfmain_tmp.code_gencode = row29.FRGENCODE;
								copyOfcopyOfcopyOfmain_tmp.code_planning = row29.FRPLAN;
								copyOfcopyOfcopyOfmain_tmp.envoie_cmd_dilicom = row29.FRCDEDIL.equals("N") ? false
										: true;
								copyOfcopyOfcopyOfmain_tmp.envoie_cmd_fax = row29.FRCDEFAX.equals("O") ? true : false;
								copyOfcopyOfcopyOfmain_tmp.envoie_cmd_internet = row29.FRCDEINT.equals("O") ? true
										: false;
								copyOfcopyOfcopyOfmain_tmp.envoie_cmd_mail = row29.FRCDEMAIL.equals("O") ? true : false;
								copyOfcopyOfcopyOfmain_tmp.format_exportation = row29.FREXPORT;
								copyOfcopyOfcopyOfmain_tmp.fournisseur_en_sommeil = null;
								copyOfcopyOfcopyOfmain_tmp.frs_exclu_cmd = null;
								copyOfcopyOfcopyOfmain_tmp.mode_expedition = row29.FREXPEDIT;
								copyOfcopyOfcopyOfmain_tmp.nombre_bon_livraison = Integer.parseInt(row29.FRBL);
								copyOfcopyOfcopyOfmain_tmp.nombre_facture = Integer.parseInt(row29.FRFACT);
								copyOfcopyOfcopyOfmain_tmp.idfournisseur = row29.FRREF;
								copyOfcopyOfcopyOfmain = copyOfcopyOfcopyOfmain_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_32 = false;

							tos_count_tMap_32++;

							/**
							 * [tMap_32 main ] stop
							 */

							/**
							 * [tMap_32 process_data_begin ] start
							 */

							currentComponent = "tMap_32";

							/**
							 * [tMap_32 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain"
							if (copyOfcopyOfcopyOfmain != null) {

								/**
								 * [tDBOutput_34 main ] start
								 */

								currentComponent = "tDBOutput_34";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain");
								}

								whetherReject_tDBOutput_34 = false;
								pstmt_tDBOutput_34.setInt(1, copyOfcopyOfcopyOfmain.idparam_fournisseur);

								if (copyOfcopyOfcopyOfmain.code_2 == null) {
									pstmt_tDBOutput_34.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(2, copyOfcopyOfcopyOfmain.code_2);
								}

								if (copyOfcopyOfcopyOfmain.code_gencode == null) {
									pstmt_tDBOutput_34.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(3, copyOfcopyOfcopyOfmain.code_gencode);
								}

								if (copyOfcopyOfcopyOfmain.code_planning == null) {
									pstmt_tDBOutput_34.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(4, copyOfcopyOfcopyOfmain.code_planning);
								}

								if (copyOfcopyOfcopyOfmain.envoie_cmd_dilicom == null) {
									pstmt_tDBOutput_34.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(5, copyOfcopyOfcopyOfmain.envoie_cmd_dilicom);
								}

								if (copyOfcopyOfcopyOfmain.envoie_cmd_fax == null) {
									pstmt_tDBOutput_34.setNull(6, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(6, copyOfcopyOfcopyOfmain.envoie_cmd_fax);
								}

								if (copyOfcopyOfcopyOfmain.envoie_cmd_internet == null) {
									pstmt_tDBOutput_34.setNull(7, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(7, copyOfcopyOfcopyOfmain.envoie_cmd_internet);
								}

								if (copyOfcopyOfcopyOfmain.envoie_cmd_mail == null) {
									pstmt_tDBOutput_34.setNull(8, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(8, copyOfcopyOfcopyOfmain.envoie_cmd_mail);
								}

								if (copyOfcopyOfcopyOfmain.format_exportation == null) {
									pstmt_tDBOutput_34.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(9, copyOfcopyOfcopyOfmain.format_exportation);
								}

								if (copyOfcopyOfcopyOfmain.fournisseur_en_sommeil == null) {
									pstmt_tDBOutput_34.setNull(10, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(10, copyOfcopyOfcopyOfmain.fournisseur_en_sommeil);
								}

								if (copyOfcopyOfcopyOfmain.frs_exclu_cmd == null) {
									pstmt_tDBOutput_34.setNull(11, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_34.setBoolean(11, copyOfcopyOfcopyOfmain.frs_exclu_cmd);
								}

								if (copyOfcopyOfcopyOfmain.mode_expedition == null) {
									pstmt_tDBOutput_34.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(12, copyOfcopyOfcopyOfmain.mode_expedition);
								}

								if (copyOfcopyOfcopyOfmain.nombre_bon_livraison == null) {
									pstmt_tDBOutput_34.setNull(13, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_34.setInt(13, copyOfcopyOfcopyOfmain.nombre_bon_livraison);
								}

								if (copyOfcopyOfcopyOfmain.nombre_facture == null) {
									pstmt_tDBOutput_34.setNull(14, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_34.setInt(14, copyOfcopyOfcopyOfmain.nombre_facture);
								}

								if (copyOfcopyOfcopyOfmain.idfournisseur == null) {
									pstmt_tDBOutput_34.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_34.setString(15, copyOfcopyOfcopyOfmain.idfournisseur);
								}

								pstmt_tDBOutput_34.addBatch();
								nb_line_tDBOutput_34++;

								batchSizeCounter_tDBOutput_34++;

								if ((batchSize_tDBOutput_34 > 0)
										&& (batchSize_tDBOutput_34 <= batchSizeCounter_tDBOutput_34)) {
									try {
										int countSum_tDBOutput_34 = 0;

										for (int countEach_tDBOutput_34 : pstmt_tDBOutput_34.executeBatch()) {
											countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0
													: countEach_tDBOutput_34);
										}

										insertedCount_tDBOutput_34 += countSum_tDBOutput_34;

										batchSizeCounter_tDBOutput_34 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_34) {
										java.sql.SQLException ne_tDBOutput_34 = e_tDBOutput_34.getNextException(),
												sqle_tDBOutput_34 = null;
										String errormessage_tDBOutput_34;
										if (ne_tDBOutput_34 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_34 = new java.sql.SQLException(
													e_tDBOutput_34.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_34.getMessage(),
													ne_tDBOutput_34.getSQLState(), ne_tDBOutput_34.getErrorCode(),
													ne_tDBOutput_34);
											errormessage_tDBOutput_34 = sqle_tDBOutput_34.getMessage();
										} else {
											errormessage_tDBOutput_34 = e_tDBOutput_34.getMessage();
										}

										int countSum_tDBOutput_34 = 0;
										for (int countEach_tDBOutput_34 : e_tDBOutput_34.getUpdateCounts()) {
											countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0
													: countEach_tDBOutput_34);
										}

										insertedCount_tDBOutput_34 += countSum_tDBOutput_34;

										System.err.println(errormessage_tDBOutput_34);

									}
								}

								tos_count_tDBOutput_34++;

								/**
								 * [tDBOutput_34 main ] stop
								 */

								/**
								 * [tDBOutput_34 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_34";

								/**
								 * [tDBOutput_34 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_34 process_data_end ] start
								 */

								currentComponent = "tDBOutput_34";

								/**
								 * [tDBOutput_34 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain"

							/**
							 * [tMap_32 process_data_end ] start
							 */

							currentComponent = "tMap_32";

							/**
							 * [tMap_32 process_data_end ] stop
							 */

						} // End of branch "row29"

						/**
						 * [tFileInputDelimited_34 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_34";

						/**
						 * [tFileInputDelimited_34 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_34 end ] start
						 */

						currentComponent = "tFileInputDelimited_34";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Fournisseur.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_34 != null) {
							fid_tFileInputDelimited_34.close();
						}
					}
					if (fid_tFileInputDelimited_34 != null) {
						globalMap.put("tFileInputDelimited_34_NB_LINE", fid_tFileInputDelimited_34.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_34", true);
				end_Hash.put("tFileInputDelimited_34", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_34 end ] stop
				 */

				/**
				 * [tMap_32 end ] start
				 */

				currentComponent = "tMap_32";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tMap_32", true);
				end_Hash.put("tMap_32", System.currentTimeMillis());

				/**
				 * [tMap_32 end ] stop
				 */

				/**
				 * [tDBOutput_34 end ] start
				 */

				currentComponent = "tDBOutput_34";

				try {
					int countSum_tDBOutput_34 = 0;
					if (pstmt_tDBOutput_34 != null && batchSizeCounter_tDBOutput_34 > 0) {

						for (int countEach_tDBOutput_34 : pstmt_tDBOutput_34.executeBatch()) {
							countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
						}

					}

					insertedCount_tDBOutput_34 += countSum_tDBOutput_34;

				} catch (java.sql.BatchUpdateException e_tDBOutput_34) {
					java.sql.SQLException ne_tDBOutput_34 = e_tDBOutput_34.getNextException(), sqle_tDBOutput_34 = null;
					String errormessage_tDBOutput_34;
					if (ne_tDBOutput_34 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_34 = new java.sql.SQLException(
								e_tDBOutput_34.getMessage() + "\ncaused by: " + ne_tDBOutput_34.getMessage(),
								ne_tDBOutput_34.getSQLState(), ne_tDBOutput_34.getErrorCode(), ne_tDBOutput_34);
						errormessage_tDBOutput_34 = sqle_tDBOutput_34.getMessage();
					} else {
						errormessage_tDBOutput_34 = e_tDBOutput_34.getMessage();
					}

					int countSum_tDBOutput_34 = 0;
					for (int countEach_tDBOutput_34 : e_tDBOutput_34.getUpdateCounts()) {
						countSum_tDBOutput_34 += (countEach_tDBOutput_34 < 0 ? 0 : countEach_tDBOutput_34);
					}

					insertedCount_tDBOutput_34 += countSum_tDBOutput_34;

					System.err.println(errormessage_tDBOutput_34);

				}

				if (pstmt_tDBOutput_34 != null) {

					pstmt_tDBOutput_34.close();
					resourceMap.remove("pstmt_tDBOutput_34");
				}
				resourceMap.put("statementClosed_tDBOutput_34", true);

				nb_line_deleted_tDBOutput_34 = nb_line_deleted_tDBOutput_34 + deletedCount_tDBOutput_34;
				nb_line_update_tDBOutput_34 = nb_line_update_tDBOutput_34 + updatedCount_tDBOutput_34;
				nb_line_inserted_tDBOutput_34 = nb_line_inserted_tDBOutput_34 + insertedCount_tDBOutput_34;
				nb_line_rejected_tDBOutput_34 = nb_line_rejected_tDBOutput_34 + rejectedCount_tDBOutput_34;

				globalMap.put("tDBOutput_34_NB_LINE", nb_line_tDBOutput_34);
				globalMap.put("tDBOutput_34_NB_LINE_UPDATED", nb_line_update_tDBOutput_34);
				globalMap.put("tDBOutput_34_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_34);
				globalMap.put("tDBOutput_34_NB_LINE_DELETED", nb_line_deleted_tDBOutput_34);
				globalMap.put("tDBOutput_34_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_34);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain");
				}

				ok_Hash.put("tDBOutput_34", true);
				end_Hash.put("tDBOutput_34", System.currentTimeMillis());

				/**
				 * [tDBOutput_34 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_34:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
			}

			tFileInputDelimited_35Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_34 finally ] start
				 */

				currentComponent = "tFileInputDelimited_34";

				/**
				 * [tFileInputDelimited_34 finally ] stop
				 */

				/**
				 * [tMap_32 finally ] start
				 */

				currentComponent = "tMap_32";

				/**
				 * [tMap_32 finally ] stop
				 */

				/**
				 * [tDBOutput_34 finally ] start
				 */

				currentComponent = "tDBOutput_34";

				if (resourceMap.get("statementClosed_tDBOutput_34") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_34 = null;
					if ((pstmtToClose_tDBOutput_34 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_34")) != null) {
						pstmtToClose_tDBOutput_34.close();
					}
				}

				/**
				 * [tDBOutput_34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_34_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_5Struct implements routines.system.IPersistableRow<copyOfmain_5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idfournisseur_bis;

		public String getIdfournisseur_bis() {
			return this.idfournisseur_bis;
		}

		public Float delai_appro;

		public Float getDelai_appro() {
			return this.delai_appro;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public Float mini_achat;

		public Float getMini_achat() {
			return this.mini_achat;
		}

		public Float prix_achat;

		public Float getPrix_achat() {
			return this.prix_achat;
		}

		public Float prix_achat_devise;

		public Float getPrix_achat_devise() {
			return this.prix_achat_devise;
		}

		public String ref_article;

		public String getRef_article() {
			return this.ref_article;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idfournisseur_bis == null) ? 0 : this.idfournisseur_bis.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_5Struct other = (copyOfmain_5Struct) obj;

			if (this.idfournisseur_bis == null) {
				if (other.idfournisseur_bis != null)
					return false;

			} else if (!this.idfournisseur_bis.equals(other.idfournisseur_bis))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_5Struct other) {

			other.idfournisseur_bis = this.idfournisseur_bis;
			other.delai_appro = this.delai_appro;
			other.libelle = this.libelle;
			other.mini_achat = this.mini_achat;
			other.prix_achat = this.prix_achat;
			other.prix_achat_devise = this.prix_achat_devise;
			other.ref_article = this.ref_article;

		}

		public void copyKeysDataTo(copyOfmain_5Struct other) {

			other.idfournisseur_bis = this.idfournisseur_bis;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idfournisseur_bis = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.delai_appro = null;
					} else {
						this.delai_appro = dis.readFloat();
					}

					this.libelle = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.mini_achat = null;
					} else {
						this.mini_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat = null;
					} else {
						this.prix_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_devise = null;
					} else {
						this.prix_achat_devise = dis.readFloat();
					}

					this.ref_article = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idfournisseur_bis, dos);

				// Float

				if (this.delai_appro == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.delai_appro);
				}

				// String

				writeString(this.libelle, dos);

				// Float

				if (this.mini_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mini_achat);
				}

				// Float

				if (this.prix_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_achat);
				}

				// Float

				if (this.prix_achat_devise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_achat_devise);
				}

				// String

				writeString(this.ref_article, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseur_bis=" + idfournisseur_bis);
			sb.append(",delai_appro=" + String.valueOf(delai_appro));
			sb.append(",libelle=" + libelle);
			sb.append(",mini_achat=" + String.valueOf(mini_achat));
			sb.append(",prix_achat=" + String.valueOf(prix_achat));
			sb.append(",prix_achat_devise=" + String.valueOf(prix_achat_devise));
			sb.append(",ref_article=" + ref_article);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseur_bis, other.idfournisseur_bis);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FFCOD;

		public String getFFCOD() {
			return this.FFCOD;
		}

		public String FFFRS;

		public String getFFFRS() {
			return this.FFFRS;
		}

		public String FFREF;

		public String getFFREF() {
			return this.FFREF;
		}

		public String FFDES;

		public String getFFDES() {
			return this.FFDES;
		}

		public String FFPA;

		public String getFFPA() {
			return this.FFPA;
		}

		public String FFDEL;

		public String getFFDEL() {
			return this.FFDEL;
		}

		public String FFDEV;

		public String getFFDEV() {
			return this.FFDEV;
		}

		public String FFTX;

		public String getFFTX() {
			return this.FFTX;
		}

		public String FFCOM;

		public String getFFCOM() {
			return this.FFCOM;
		}

		public String FFPV;

		public String getFFPV() {
			return this.FFPV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FFCOD = readString(dis);

					this.FFFRS = readString(dis);

					this.FFREF = readString(dis);

					this.FFDES = readString(dis);

					this.FFPA = readString(dis);

					this.FFDEL = readString(dis);

					this.FFDEV = readString(dis);

					this.FFTX = readString(dis);

					this.FFCOM = readString(dis);

					this.FFPV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FFCOD, dos);

				// String

				writeString(this.FFFRS, dos);

				// String

				writeString(this.FFREF, dos);

				// String

				writeString(this.FFDES, dos);

				// String

				writeString(this.FFPA, dos);

				// String

				writeString(this.FFDEL, dos);

				// String

				writeString(this.FFDEV, dos);

				// String

				writeString(this.FFTX, dos);

				// String

				writeString(this.FFCOM, dos);

				// String

				writeString(this.FFPV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FFCOD=" + FFCOD);
			sb.append(",FFFRS=" + FFFRS);
			sb.append(",FFREF=" + FFREF);
			sb.append(",FFDES=" + FFDES);
			sb.append(",FFPA=" + FFPA);
			sb.append(",FFDEL=" + FFDEL);
			sb.append(",FFDEV=" + FFDEV);
			sb.append(",FFTX=" + FFTX);
			sb.append(",FFCOM=" + FFCOM);
			sb.append(",FFPV=" + FFPV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();
				copyOfmain_5Struct copyOfmain_5 = new copyOfmain_5Struct();

				/**
				 * [tDBOutput_35 begin ] start
				 */

				ok_Hash.put("tDBOutput_35", false);
				start_Hash.put("tDBOutput_35", System.currentTimeMillis());

				currentComponent = "tDBOutput_35";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_5");
				}

				int tos_count_tDBOutput_35 = 0;

				String dbschema_tDBOutput_35 = null;
				dbschema_tDBOutput_35 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_35 = null;
				if (dbschema_tDBOutput_35 == null || dbschema_tDBOutput_35.trim().length() == 0) {
					tableName_tDBOutput_35 = ("fournisseur_secondaire");
				} else {
					tableName_tDBOutput_35 = dbschema_tDBOutput_35 + "\".\"" + ("fournisseur_secondaire");
				}

				int nb_line_tDBOutput_35 = 0;
				int nb_line_update_tDBOutput_35 = 0;
				int nb_line_inserted_tDBOutput_35 = 0;
				int nb_line_deleted_tDBOutput_35 = 0;
				int nb_line_rejected_tDBOutput_35 = 0;

				int deletedCount_tDBOutput_35 = 0;
				int updatedCount_tDBOutput_35 = 0;
				int insertedCount_tDBOutput_35 = 0;
				int rejectedCount_tDBOutput_35 = 0;

				boolean whetherReject_tDBOutput_35 = false;

				java.sql.Connection conn_tDBOutput_35 = null;
				String dbUser_tDBOutput_35 = null;

				conn_tDBOutput_35 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_35 = 10000;
				int batchSizeCounter_tDBOutput_35 = 0;

				int count_tDBOutput_35 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_35 = conn_tDBOutput_35.createStatement()) {
					stmtClear_tDBOutput_35.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_35 + "\"");
				}
				String insert_tDBOutput_35 = "INSERT INTO \"" + tableName_tDBOutput_35
						+ "\" (\"idfournisseur_bis\",\"delai_appro\",\"libelle\",\"mini_achat\",\"prix_achat\",\"prix_achat_devise\",\"ref_article\") VALUES (?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_35 = conn_tDBOutput_35.prepareStatement(insert_tDBOutput_35);
				resourceMap.put("pstmt_tDBOutput_35", pstmt_tDBOutput_35);

				/**
				 * [tDBOutput_35 begin ] stop
				 */

				/**
				 * [tMap_33 begin ] start
				 */

				ok_Hash.put("tMap_33", false);
				start_Hash.put("tMap_33", System.currentTimeMillis());

				currentComponent = "tMap_33";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tMap_33 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_33__Struct {
				}
				Var__tMap_33__Struct Var__tMap_33 = new Var__tMap_33__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_5Struct copyOfmain_5_tmp = new copyOfmain_5Struct();
// ###############################

				/**
				 * [tMap_33 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_35 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_35", false);
				start_Hash.put("tFileInputDelimited_35", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_35";

				int tos_count_tFileInputDelimited_35 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_35 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_35 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_35 = null;
				int limit_tFileInputDelimited_35 = -1;
				try {

					Object filename_tFileInputDelimited_35 = "C:/DEV/Data/Base Montauban/FournisseurBis.csv";
					if (filename_tFileInputDelimited_35 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_35 = 0, random_value_tFileInputDelimited_35 = -1;
						if (footer_value_tFileInputDelimited_35 > 0 || random_value_tFileInputDelimited_35 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_35 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/FournisseurBis.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_35, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_35 != null && fid_tFileInputDelimited_35.nextRecord()) {
						rowstate_tFileInputDelimited_35.reset();

						row30 = null;

						boolean whetherReject_tFileInputDelimited_35 = false;
						row30 = new row30Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_35 = 0;

							columnIndexWithD_tFileInputDelimited_35 = 0;

							row30.FFCOD = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 1;

							row30.FFFRS = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 2;

							row30.FFREF = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 3;

							row30.FFDES = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 4;

							row30.FFPA = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 5;

							row30.FFDEL = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 6;

							row30.FFDEV = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 7;

							row30.FFTX = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 8;

							row30.FFCOM = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							columnIndexWithD_tFileInputDelimited_35 = 9;

							row30.FFPV = fid_tFileInputDelimited_35.get(columnIndexWithD_tFileInputDelimited_35);

							if (rowstate_tFileInputDelimited_35.getException() != null) {
								throw rowstate_tFileInputDelimited_35.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_35 = true;

							System.err.println(e.getMessage());
							row30 = null;

						}

						/**
						 * [tFileInputDelimited_35 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_35 main ] start
						 */

						currentComponent = "tFileInputDelimited_35";

						tos_count_tFileInputDelimited_35++;

						/**
						 * [tFileInputDelimited_35 main ] stop
						 */

						/**
						 * [tFileInputDelimited_35 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_35";

						/**
						 * [tFileInputDelimited_35 process_data_begin ] stop
						 */
// Start of branch "row30"
						if (row30 != null) {

							/**
							 * [tMap_33 main ] start
							 */

							currentComponent = "tMap_33";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row30");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_33 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_33 = false;
							boolean mainRowRejected_tMap_33 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_33__Struct Var = Var__tMap_33;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_5 = null;

// # Output table : 'copyOfmain_5'
								copyOfmain_5_tmp.idfournisseur_bis = row30.FFCOD + row30.FFFRS;
								copyOfmain_5_tmp.delai_appro = Float.parseFloat(row30.FFDEL);
								copyOfmain_5_tmp.libelle = row30.FFDES;
								copyOfmain_5_tmp.mini_achat = null;
								copyOfmain_5_tmp.prix_achat = Float.parseFloat(row30.FFPA);
								copyOfmain_5_tmp.prix_achat_devise = Float.parseFloat(row30.FFPV);
								copyOfmain_5_tmp.ref_article = row30.FFREF;
								copyOfmain_5 = copyOfmain_5_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_33 = false;

							tos_count_tMap_33++;

							/**
							 * [tMap_33 main ] stop
							 */

							/**
							 * [tMap_33 process_data_begin ] start
							 */

							currentComponent = "tMap_33";

							/**
							 * [tMap_33 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_5"
							if (copyOfmain_5 != null) {

								/**
								 * [tDBOutput_35 main ] start
								 */

								currentComponent = "tDBOutput_35";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_5");
								}

								whetherReject_tDBOutput_35 = false;
								if (copyOfmain_5.idfournisseur_bis == null) {
									pstmt_tDBOutput_35.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_35.setString(1, copyOfmain_5.idfournisseur_bis);
								}

								if (copyOfmain_5.delai_appro == null) {
									pstmt_tDBOutput_35.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_35.setFloat(2, copyOfmain_5.delai_appro);
								}

								if (copyOfmain_5.libelle == null) {
									pstmt_tDBOutput_35.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_35.setString(3, copyOfmain_5.libelle);
								}

								if (copyOfmain_5.mini_achat == null) {
									pstmt_tDBOutput_35.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_35.setFloat(4, copyOfmain_5.mini_achat);
								}

								if (copyOfmain_5.prix_achat == null) {
									pstmt_tDBOutput_35.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_35.setFloat(5, copyOfmain_5.prix_achat);
								}

								if (copyOfmain_5.prix_achat_devise == null) {
									pstmt_tDBOutput_35.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_35.setFloat(6, copyOfmain_5.prix_achat_devise);
								}

								if (copyOfmain_5.ref_article == null) {
									pstmt_tDBOutput_35.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_35.setString(7, copyOfmain_5.ref_article);
								}

								pstmt_tDBOutput_35.addBatch();
								nb_line_tDBOutput_35++;

								batchSizeCounter_tDBOutput_35++;

								if ((batchSize_tDBOutput_35 > 0)
										&& (batchSize_tDBOutput_35 <= batchSizeCounter_tDBOutput_35)) {
									try {
										int countSum_tDBOutput_35 = 0;

										for (int countEach_tDBOutput_35 : pstmt_tDBOutput_35.executeBatch()) {
											countSum_tDBOutput_35 += (countEach_tDBOutput_35 < 0 ? 0
													: countEach_tDBOutput_35);
										}

										insertedCount_tDBOutput_35 += countSum_tDBOutput_35;

										batchSizeCounter_tDBOutput_35 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_35) {
										java.sql.SQLException ne_tDBOutput_35 = e_tDBOutput_35.getNextException(),
												sqle_tDBOutput_35 = null;
										String errormessage_tDBOutput_35;
										if (ne_tDBOutput_35 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_35 = new java.sql.SQLException(
													e_tDBOutput_35.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_35.getMessage(),
													ne_tDBOutput_35.getSQLState(), ne_tDBOutput_35.getErrorCode(),
													ne_tDBOutput_35);
											errormessage_tDBOutput_35 = sqle_tDBOutput_35.getMessage();
										} else {
											errormessage_tDBOutput_35 = e_tDBOutput_35.getMessage();
										}

										int countSum_tDBOutput_35 = 0;
										for (int countEach_tDBOutput_35 : e_tDBOutput_35.getUpdateCounts()) {
											countSum_tDBOutput_35 += (countEach_tDBOutput_35 < 0 ? 0
													: countEach_tDBOutput_35);
										}

										insertedCount_tDBOutput_35 += countSum_tDBOutput_35;

										System.err.println(errormessage_tDBOutput_35);

									}
								}

								tos_count_tDBOutput_35++;

								/**
								 * [tDBOutput_35 main ] stop
								 */

								/**
								 * [tDBOutput_35 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_35";

								/**
								 * [tDBOutput_35 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_35 process_data_end ] start
								 */

								currentComponent = "tDBOutput_35";

								/**
								 * [tDBOutput_35 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_5"

							/**
							 * [tMap_33 process_data_end ] start
							 */

							currentComponent = "tMap_33";

							/**
							 * [tMap_33 process_data_end ] stop
							 */

						} // End of branch "row30"

						/**
						 * [tFileInputDelimited_35 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_35";

						/**
						 * [tFileInputDelimited_35 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_35 end ] start
						 */

						currentComponent = "tFileInputDelimited_35";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/FournisseurBis.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_35 != null) {
							fid_tFileInputDelimited_35.close();
						}
					}
					if (fid_tFileInputDelimited_35 != null) {
						globalMap.put("tFileInputDelimited_35_NB_LINE", fid_tFileInputDelimited_35.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_35", true);
				end_Hash.put("tFileInputDelimited_35", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_35 end ] stop
				 */

				/**
				 * [tMap_33 end ] start
				 */

				currentComponent = "tMap_33";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tMap_33", true);
				end_Hash.put("tMap_33", System.currentTimeMillis());

				/**
				 * [tMap_33 end ] stop
				 */

				/**
				 * [tDBOutput_35 end ] start
				 */

				currentComponent = "tDBOutput_35";

				try {
					int countSum_tDBOutput_35 = 0;
					if (pstmt_tDBOutput_35 != null && batchSizeCounter_tDBOutput_35 > 0) {

						for (int countEach_tDBOutput_35 : pstmt_tDBOutput_35.executeBatch()) {
							countSum_tDBOutput_35 += (countEach_tDBOutput_35 < 0 ? 0 : countEach_tDBOutput_35);
						}

					}

					insertedCount_tDBOutput_35 += countSum_tDBOutput_35;

				} catch (java.sql.BatchUpdateException e_tDBOutput_35) {
					java.sql.SQLException ne_tDBOutput_35 = e_tDBOutput_35.getNextException(), sqle_tDBOutput_35 = null;
					String errormessage_tDBOutput_35;
					if (ne_tDBOutput_35 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_35 = new java.sql.SQLException(
								e_tDBOutput_35.getMessage() + "\ncaused by: " + ne_tDBOutput_35.getMessage(),
								ne_tDBOutput_35.getSQLState(), ne_tDBOutput_35.getErrorCode(), ne_tDBOutput_35);
						errormessage_tDBOutput_35 = sqle_tDBOutput_35.getMessage();
					} else {
						errormessage_tDBOutput_35 = e_tDBOutput_35.getMessage();
					}

					int countSum_tDBOutput_35 = 0;
					for (int countEach_tDBOutput_35 : e_tDBOutput_35.getUpdateCounts()) {
						countSum_tDBOutput_35 += (countEach_tDBOutput_35 < 0 ? 0 : countEach_tDBOutput_35);
					}

					insertedCount_tDBOutput_35 += countSum_tDBOutput_35;

					System.err.println(errormessage_tDBOutput_35);

				}

				if (pstmt_tDBOutput_35 != null) {

					pstmt_tDBOutput_35.close();
					resourceMap.remove("pstmt_tDBOutput_35");
				}
				resourceMap.put("statementClosed_tDBOutput_35", true);

				nb_line_deleted_tDBOutput_35 = nb_line_deleted_tDBOutput_35 + deletedCount_tDBOutput_35;
				nb_line_update_tDBOutput_35 = nb_line_update_tDBOutput_35 + updatedCount_tDBOutput_35;
				nb_line_inserted_tDBOutput_35 = nb_line_inserted_tDBOutput_35 + insertedCount_tDBOutput_35;
				nb_line_rejected_tDBOutput_35 = nb_line_rejected_tDBOutput_35 + rejectedCount_tDBOutput_35;

				globalMap.put("tDBOutput_35_NB_LINE", nb_line_tDBOutput_35);
				globalMap.put("tDBOutput_35_NB_LINE_UPDATED", nb_line_update_tDBOutput_35);
				globalMap.put("tDBOutput_35_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_35);
				globalMap.put("tDBOutput_35_NB_LINE_DELETED", nb_line_deleted_tDBOutput_35);
				globalMap.put("tDBOutput_35_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_35);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_5");
				}

				ok_Hash.put("tDBOutput_35", true);
				end_Hash.put("tDBOutput_35", System.currentTimeMillis());

				/**
				 * [tDBOutput_35 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_35:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk32", 0, "ok");
			}

			tFileInputDelimited_36Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_35 finally ] start
				 */

				currentComponent = "tFileInputDelimited_35";

				/**
				 * [tFileInputDelimited_35 finally ] stop
				 */

				/**
				 * [tMap_33 finally ] start
				 */

				currentComponent = "tMap_33";

				/**
				 * [tMap_33 finally ] stop
				 */

				/**
				 * [tDBOutput_35 finally ] start
				 */

				currentComponent = "tDBOutput_35";

				if (resourceMap.get("statementClosed_tDBOutput_35") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_35 = null;
					if ((pstmtToClose_tDBOutput_35 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_35")) != null) {
						pstmtToClose_tDBOutput_35.close();
					}
				}

				/**
				 * [tDBOutput_35 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_35_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_0Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idtitre;

		public String getIdtitre() {
			return this.idtitre;
		}

		public String libelle_titre;

		public String getLibelle_titre() {
			return this.libelle_titre;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idtitre == null) ? 0 : this.idtitre.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_0Struct other = (copyOfcopyOfmain_0Struct) obj;

			if (this.idtitre == null) {
				if (other.idtitre != null)
					return false;

			} else if (!this.idtitre.equals(other.idtitre))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_0Struct other) {

			other.idtitre = this.idtitre;
			other.libelle_titre = this.libelle_titre;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_0Struct other) {

			other.idtitre = this.idtitre;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idtitre = readString(dis);

					this.libelle_titre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idtitre, dos);

				// String

				writeString(this.libelle_titre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtitre=" + idtitre);
			sb.append(",libelle_titre=" + libelle_titre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtitre, other.idtitre);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String lib;

		public String getLib() {
			return this.lib;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.lib = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.lib, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",lib=" + lib);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_36_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();
				copyOfcopyOfmain_0Struct copyOfcopyOfmain_0 = new copyOfcopyOfmain_0Struct();

				/**
				 * [tDBOutput_36 begin ] start
				 */

				ok_Hash.put("tDBOutput_36", false);
				start_Hash.put("tDBOutput_36", System.currentTimeMillis());

				currentComponent = "tDBOutput_36";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_0");
				}

				int tos_count_tDBOutput_36 = 0;

				String dbschema_tDBOutput_36 = null;
				dbschema_tDBOutput_36 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_36 = null;
				if (dbschema_tDBOutput_36 == null || dbschema_tDBOutput_36.trim().length() == 0) {
					tableName_tDBOutput_36 = ("titre");
				} else {
					tableName_tDBOutput_36 = dbschema_tDBOutput_36 + "\".\"" + ("titre");
				}

				int nb_line_tDBOutput_36 = 0;
				int nb_line_update_tDBOutput_36 = 0;
				int nb_line_inserted_tDBOutput_36 = 0;
				int nb_line_deleted_tDBOutput_36 = 0;
				int nb_line_rejected_tDBOutput_36 = 0;

				int deletedCount_tDBOutput_36 = 0;
				int updatedCount_tDBOutput_36 = 0;
				int insertedCount_tDBOutput_36 = 0;
				int rejectedCount_tDBOutput_36 = 0;

				boolean whetherReject_tDBOutput_36 = false;

				java.sql.Connection conn_tDBOutput_36 = null;
				String dbUser_tDBOutput_36 = null;

				conn_tDBOutput_36 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_36 = 10000;
				int batchSizeCounter_tDBOutput_36 = 0;

				int count_tDBOutput_36 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_36 = conn_tDBOutput_36.createStatement()) {
					stmtClear_tDBOutput_36.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_36 + "\"");
				}
				String insert_tDBOutput_36 = "INSERT INTO \"" + tableName_tDBOutput_36
						+ "\" (\"idtitre\",\"libelle_titre\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_36 = conn_tDBOutput_36.prepareStatement(insert_tDBOutput_36);
				resourceMap.put("pstmt_tDBOutput_36", pstmt_tDBOutput_36);

				/**
				 * [tDBOutput_36 begin ] stop
				 */

				/**
				 * [tMap_34 begin ] start
				 */

				ok_Hash.put("tMap_34", false);
				start_Hash.put("tMap_34", System.currentTimeMillis());

				currentComponent = "tMap_34";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tMap_34 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_34__Struct {
				}
				Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_0Struct copyOfcopyOfmain_0_tmp = new copyOfcopyOfmain_0Struct();
// ###############################

				/**
				 * [tMap_34 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_36 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_36", false);
				start_Hash.put("tFileInputDelimited_36", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_36";

				int tos_count_tFileInputDelimited_36 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_36 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_36 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_36 = null;
				int limit_tFileInputDelimited_36 = -1;
				try {

					Object filename_tFileInputDelimited_36 = "C:/DEV/Data/Base Montauban/titres.csv";
					if (filename_tFileInputDelimited_36 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_36 = 0, random_value_tFileInputDelimited_36 = -1;
						if (footer_value_tFileInputDelimited_36 > 0 || random_value_tFileInputDelimited_36 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_36 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/titres.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_36, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_36 != null && fid_tFileInputDelimited_36.nextRecord()) {
						rowstate_tFileInputDelimited_36.reset();

						row31 = null;

						boolean whetherReject_tFileInputDelimited_36 = false;
						row31 = new row31Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_36 = 0;

							columnIndexWithD_tFileInputDelimited_36 = 0;

							row31.id = fid_tFileInputDelimited_36.get(columnIndexWithD_tFileInputDelimited_36);

							columnIndexWithD_tFileInputDelimited_36 = 1;

							row31.lib = fid_tFileInputDelimited_36.get(columnIndexWithD_tFileInputDelimited_36);

							if (rowstate_tFileInputDelimited_36.getException() != null) {
								throw rowstate_tFileInputDelimited_36.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_36 = true;

							System.err.println(e.getMessage());
							row31 = null;

						}

						/**
						 * [tFileInputDelimited_36 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_36 main ] start
						 */

						currentComponent = "tFileInputDelimited_36";

						tos_count_tFileInputDelimited_36++;

						/**
						 * [tFileInputDelimited_36 main ] stop
						 */

						/**
						 * [tFileInputDelimited_36 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_36";

						/**
						 * [tFileInputDelimited_36 process_data_begin ] stop
						 */
// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tMap_34 main ] start
							 */

							currentComponent = "tMap_34";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row31");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_34 = false;
							boolean mainRowRejected_tMap_34 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_0 = null;

// # Output table : 'copyOfcopyOfmain_0'
								copyOfcopyOfmain_0_tmp.idtitre = row31.id;
								copyOfcopyOfmain_0_tmp.libelle_titre = row31.lib;
								copyOfcopyOfmain_0 = copyOfcopyOfmain_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_34 = false;

							tos_count_tMap_34++;

							/**
							 * [tMap_34 main ] stop
							 */

							/**
							 * [tMap_34 process_data_begin ] start
							 */

							currentComponent = "tMap_34";

							/**
							 * [tMap_34 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_0"
							if (copyOfcopyOfmain_0 != null) {

								/**
								 * [tDBOutput_36 main ] start
								 */

								currentComponent = "tDBOutput_36";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_0");
								}

								whetherReject_tDBOutput_36 = false;
								if (copyOfcopyOfmain_0.idtitre == null) {
									pstmt_tDBOutput_36.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_36.setString(1, copyOfcopyOfmain_0.idtitre);
								}

								if (copyOfcopyOfmain_0.libelle_titre == null) {
									pstmt_tDBOutput_36.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_36.setString(2, copyOfcopyOfmain_0.libelle_titre);
								}

								pstmt_tDBOutput_36.addBatch();
								nb_line_tDBOutput_36++;

								batchSizeCounter_tDBOutput_36++;

								if ((batchSize_tDBOutput_36 > 0)
										&& (batchSize_tDBOutput_36 <= batchSizeCounter_tDBOutput_36)) {
									try {
										int countSum_tDBOutput_36 = 0;

										for (int countEach_tDBOutput_36 : pstmt_tDBOutput_36.executeBatch()) {
											countSum_tDBOutput_36 += (countEach_tDBOutput_36 < 0 ? 0
													: countEach_tDBOutput_36);
										}

										insertedCount_tDBOutput_36 += countSum_tDBOutput_36;

										batchSizeCounter_tDBOutput_36 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_36) {
										java.sql.SQLException ne_tDBOutput_36 = e_tDBOutput_36.getNextException(),
												sqle_tDBOutput_36 = null;
										String errormessage_tDBOutput_36;
										if (ne_tDBOutput_36 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_36 = new java.sql.SQLException(
													e_tDBOutput_36.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_36.getMessage(),
													ne_tDBOutput_36.getSQLState(), ne_tDBOutput_36.getErrorCode(),
													ne_tDBOutput_36);
											errormessage_tDBOutput_36 = sqle_tDBOutput_36.getMessage();
										} else {
											errormessage_tDBOutput_36 = e_tDBOutput_36.getMessage();
										}

										int countSum_tDBOutput_36 = 0;
										for (int countEach_tDBOutput_36 : e_tDBOutput_36.getUpdateCounts()) {
											countSum_tDBOutput_36 += (countEach_tDBOutput_36 < 0 ? 0
													: countEach_tDBOutput_36);
										}

										insertedCount_tDBOutput_36 += countSum_tDBOutput_36;

										System.err.println(errormessage_tDBOutput_36);

									}
								}

								tos_count_tDBOutput_36++;

								/**
								 * [tDBOutput_36 main ] stop
								 */

								/**
								 * [tDBOutput_36 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_36";

								/**
								 * [tDBOutput_36 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_36 process_data_end ] start
								 */

								currentComponent = "tDBOutput_36";

								/**
								 * [tDBOutput_36 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_0"

							/**
							 * [tMap_34 process_data_end ] start
							 */

							currentComponent = "tMap_34";

							/**
							 * [tMap_34 process_data_end ] stop
							 */

						} // End of branch "row31"

						/**
						 * [tFileInputDelimited_36 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_36";

						/**
						 * [tFileInputDelimited_36 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_36 end ] start
						 */

						currentComponent = "tFileInputDelimited_36";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/titres.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_36 != null) {
							fid_tFileInputDelimited_36.close();
						}
					}
					if (fid_tFileInputDelimited_36 != null) {
						globalMap.put("tFileInputDelimited_36_NB_LINE", fid_tFileInputDelimited_36.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_36", true);
				end_Hash.put("tFileInputDelimited_36", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_36 end ] stop
				 */

				/**
				 * [tMap_34 end ] start
				 */

				currentComponent = "tMap_34";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tMap_34", true);
				end_Hash.put("tMap_34", System.currentTimeMillis());

				/**
				 * [tMap_34 end ] stop
				 */

				/**
				 * [tDBOutput_36 end ] start
				 */

				currentComponent = "tDBOutput_36";

				try {
					int countSum_tDBOutput_36 = 0;
					if (pstmt_tDBOutput_36 != null && batchSizeCounter_tDBOutput_36 > 0) {

						for (int countEach_tDBOutput_36 : pstmt_tDBOutput_36.executeBatch()) {
							countSum_tDBOutput_36 += (countEach_tDBOutput_36 < 0 ? 0 : countEach_tDBOutput_36);
						}

					}

					insertedCount_tDBOutput_36 += countSum_tDBOutput_36;

				} catch (java.sql.BatchUpdateException e_tDBOutput_36) {
					java.sql.SQLException ne_tDBOutput_36 = e_tDBOutput_36.getNextException(), sqle_tDBOutput_36 = null;
					String errormessage_tDBOutput_36;
					if (ne_tDBOutput_36 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_36 = new java.sql.SQLException(
								e_tDBOutput_36.getMessage() + "\ncaused by: " + ne_tDBOutput_36.getMessage(),
								ne_tDBOutput_36.getSQLState(), ne_tDBOutput_36.getErrorCode(), ne_tDBOutput_36);
						errormessage_tDBOutput_36 = sqle_tDBOutput_36.getMessage();
					} else {
						errormessage_tDBOutput_36 = e_tDBOutput_36.getMessage();
					}

					int countSum_tDBOutput_36 = 0;
					for (int countEach_tDBOutput_36 : e_tDBOutput_36.getUpdateCounts()) {
						countSum_tDBOutput_36 += (countEach_tDBOutput_36 < 0 ? 0 : countEach_tDBOutput_36);
					}

					insertedCount_tDBOutput_36 += countSum_tDBOutput_36;

					System.err.println(errormessage_tDBOutput_36);

				}

				if (pstmt_tDBOutput_36 != null) {

					pstmt_tDBOutput_36.close();
					resourceMap.remove("pstmt_tDBOutput_36");
				}
				resourceMap.put("statementClosed_tDBOutput_36", true);

				nb_line_deleted_tDBOutput_36 = nb_line_deleted_tDBOutput_36 + deletedCount_tDBOutput_36;
				nb_line_update_tDBOutput_36 = nb_line_update_tDBOutput_36 + updatedCount_tDBOutput_36;
				nb_line_inserted_tDBOutput_36 = nb_line_inserted_tDBOutput_36 + insertedCount_tDBOutput_36;
				nb_line_rejected_tDBOutput_36 = nb_line_rejected_tDBOutput_36 + rejectedCount_tDBOutput_36;

				globalMap.put("tDBOutput_36_NB_LINE", nb_line_tDBOutput_36);
				globalMap.put("tDBOutput_36_NB_LINE_UPDATED", nb_line_update_tDBOutput_36);
				globalMap.put("tDBOutput_36_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_36);
				globalMap.put("tDBOutput_36_NB_LINE_DELETED", nb_line_deleted_tDBOutput_36);
				globalMap.put("tDBOutput_36_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_36);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_0");
				}

				ok_Hash.put("tDBOutput_36", true);
				end_Hash.put("tDBOutput_36", System.currentTimeMillis());

				/**
				 * [tDBOutput_36 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_36:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
			}

			tFileInputDelimited_31Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_36 finally ] start
				 */

				currentComponent = "tFileInputDelimited_36";

				/**
				 * [tFileInputDelimited_36 finally ] stop
				 */

				/**
				 * [tMap_34 finally ] start
				 */

				currentComponent = "tMap_34";

				/**
				 * [tMap_34 finally ] stop
				 */

				/**
				 * [tDBOutput_36 finally ] start
				 */

				currentComponent = "tDBOutput_36";

				if (resourceMap.get("statementClosed_tDBOutput_36") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_36 = null;
					if ((pstmtToClose_tDBOutput_36 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_36")) != null) {
						pstmtToClose_tDBOutput_36.close();
					}
				}

				/**
				 * [tDBOutput_36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_36_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idparagraphe;

		public String getIdparagraphe() {
			return this.idparagraphe;
		}

		public String libelle_paragraphe;

		public String getLibelle_paragraphe() {
			return this.libelle_paragraphe;
		}

		public String idtitre;

		public String getIdtitre() {
			return this.idtitre;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idparagraphe == null) ? 0 : this.idparagraphe.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_0Struct other = (copyOfcopyOfcopyOfmain_0Struct) obj;

			if (this.idparagraphe == null) {
				if (other.idparagraphe != null)
					return false;

			} else if (!this.idparagraphe.equals(other.idparagraphe))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_0Struct other) {

			other.idparagraphe = this.idparagraphe;
			other.libelle_paragraphe = this.libelle_paragraphe;
			other.idtitre = this.idtitre;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_0Struct other) {

			other.idparagraphe = this.idparagraphe;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idparagraphe = readString(dis);

					this.libelle_paragraphe = readString(dis);

					this.idtitre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idparagraphe, dos);

				// String

				writeString(this.libelle_paragraphe, dos);

				// String

				writeString(this.idtitre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idparagraphe=" + idparagraphe);
			sb.append(",libelle_paragraphe=" + libelle_paragraphe);
			sb.append(",idtitre=" + idtitre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idparagraphe, other.idparagraphe);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String idtitre;

		public String getIdtitre() {
			return this.idtitre;
		}

		public String idparagraphe;

		public String getIdparagraphe() {
			return this.idparagraphe;
		}

		public String lib;

		public String getLib() {
			return this.lib;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idtitre = readString(dis);

					this.idparagraphe = readString(dis);

					this.lib = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idtitre, dos);

				// String

				writeString(this.idparagraphe, dos);

				// String

				writeString(this.lib, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtitre=" + idtitre);
			sb.append(",idparagraphe=" + idparagraphe);
			sb.append(",lib=" + lib);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();
				copyOfcopyOfcopyOfmain_0Struct copyOfcopyOfcopyOfmain_0 = new copyOfcopyOfcopyOfmain_0Struct();

				/**
				 * [tDBOutput_28 begin ] start
				 */

				ok_Hash.put("tDBOutput_28", false);
				start_Hash.put("tDBOutput_28", System.currentTimeMillis());

				currentComponent = "tDBOutput_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_0");
				}

				int tos_count_tDBOutput_28 = 0;

				String dbschema_tDBOutput_28 = null;
				dbschema_tDBOutput_28 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_28 = null;
				if (dbschema_tDBOutput_28 == null || dbschema_tDBOutput_28.trim().length() == 0) {
					tableName_tDBOutput_28 = ("paragraphe");
				} else {
					tableName_tDBOutput_28 = dbschema_tDBOutput_28 + "\".\"" + ("paragraphe");
				}

				int nb_line_tDBOutput_28 = 0;
				int nb_line_update_tDBOutput_28 = 0;
				int nb_line_inserted_tDBOutput_28 = 0;
				int nb_line_deleted_tDBOutput_28 = 0;
				int nb_line_rejected_tDBOutput_28 = 0;

				int deletedCount_tDBOutput_28 = 0;
				int updatedCount_tDBOutput_28 = 0;
				int insertedCount_tDBOutput_28 = 0;
				int rejectedCount_tDBOutput_28 = 0;

				boolean whetherReject_tDBOutput_28 = false;

				java.sql.Connection conn_tDBOutput_28 = null;
				String dbUser_tDBOutput_28 = null;

				conn_tDBOutput_28 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_28 = 10000;
				int batchSizeCounter_tDBOutput_28 = 0;

				int count_tDBOutput_28 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_28 = conn_tDBOutput_28.createStatement()) {
					stmtClear_tDBOutput_28.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_28 + "\"");
				}
				String insert_tDBOutput_28 = "INSERT INTO \"" + tableName_tDBOutput_28
						+ "\" (\"idparagraphe\",\"libelle_paragraphe\",\"idtitre\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_28 = conn_tDBOutput_28.prepareStatement(insert_tDBOutput_28);
				resourceMap.put("pstmt_tDBOutput_28", pstmt_tDBOutput_28);

				/**
				 * [tDBOutput_28 begin ] stop
				 */

				/**
				 * [tMap_28 begin ] start
				 */

				ok_Hash.put("tMap_28", false);
				start_Hash.put("tMap_28", System.currentTimeMillis());

				currentComponent = "tMap_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tMap_28 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_28__Struct {
				}
				Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_0Struct copyOfcopyOfcopyOfmain_0_tmp = new copyOfcopyOfcopyOfmain_0Struct();
// ###############################

				/**
				 * [tMap_28 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_31 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_31", false);
				start_Hash.put("tFileInputDelimited_31", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_31";

				int tos_count_tFileInputDelimited_31 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_31 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_31 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_31 = null;
				int limit_tFileInputDelimited_31 = -1;
				try {

					Object filename_tFileInputDelimited_31 = "C:/DEV/Data/Base Montauban/paragraphes.csv";
					if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_31 = 0, random_value_tFileInputDelimited_31 = -1;
						if (footer_value_tFileInputDelimited_31 > 0 || random_value_tFileInputDelimited_31 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_31 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/paragraphes.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_31, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_31 != null && fid_tFileInputDelimited_31.nextRecord()) {
						rowstate_tFileInputDelimited_31.reset();

						row26 = null;

						boolean whetherReject_tFileInputDelimited_31 = false;
						row26 = new row26Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_31 = 0;

							columnIndexWithD_tFileInputDelimited_31 = 0;

							row26.idtitre = fid_tFileInputDelimited_31.get(columnIndexWithD_tFileInputDelimited_31);

							columnIndexWithD_tFileInputDelimited_31 = 1;

							row26.idparagraphe = fid_tFileInputDelimited_31
									.get(columnIndexWithD_tFileInputDelimited_31);

							columnIndexWithD_tFileInputDelimited_31 = 2;

							row26.lib = fid_tFileInputDelimited_31.get(columnIndexWithD_tFileInputDelimited_31);

							if (rowstate_tFileInputDelimited_31.getException() != null) {
								throw rowstate_tFileInputDelimited_31.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_31 = true;

							System.err.println(e.getMessage());
							row26 = null;

						}

						/**
						 * [tFileInputDelimited_31 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_31 main ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						tos_count_tFileInputDelimited_31++;

						/**
						 * [tFileInputDelimited_31 main ] stop
						 */

						/**
						 * [tFileInputDelimited_31 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						/**
						 * [tFileInputDelimited_31 process_data_begin ] stop
						 */
// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tMap_28 main ] start
							 */

							currentComponent = "tMap_28";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_28 = false;
							boolean mainRowRejected_tMap_28 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_0 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_0'
								copyOfcopyOfcopyOfmain_0_tmp.idparagraphe = row26.idparagraphe;
								copyOfcopyOfcopyOfmain_0_tmp.libelle_paragraphe = row26.lib;
								copyOfcopyOfcopyOfmain_0_tmp.idtitre = row26.idtitre;
								copyOfcopyOfcopyOfmain_0 = copyOfcopyOfcopyOfmain_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_28 = false;

							tos_count_tMap_28++;

							/**
							 * [tMap_28 main ] stop
							 */

							/**
							 * [tMap_28 process_data_begin ] start
							 */

							currentComponent = "tMap_28";

							/**
							 * [tMap_28 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_0"
							if (copyOfcopyOfcopyOfmain_0 != null) {

								/**
								 * [tDBOutput_28 main ] start
								 */

								currentComponent = "tDBOutput_28";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_0");
								}

								whetherReject_tDBOutput_28 = false;
								if (copyOfcopyOfcopyOfmain_0.idparagraphe == null) {
									pstmt_tDBOutput_28.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_28.setString(1, copyOfcopyOfcopyOfmain_0.idparagraphe);
								}

								if (copyOfcopyOfcopyOfmain_0.libelle_paragraphe == null) {
									pstmt_tDBOutput_28.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_28.setString(2, copyOfcopyOfcopyOfmain_0.libelle_paragraphe);
								}

								if (copyOfcopyOfcopyOfmain_0.idtitre == null) {
									pstmt_tDBOutput_28.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_28.setString(3, copyOfcopyOfcopyOfmain_0.idtitre);
								}

								pstmt_tDBOutput_28.addBatch();
								nb_line_tDBOutput_28++;

								batchSizeCounter_tDBOutput_28++;

								if ((batchSize_tDBOutput_28 > 0)
										&& (batchSize_tDBOutput_28 <= batchSizeCounter_tDBOutput_28)) {
									try {
										int countSum_tDBOutput_28 = 0;

										for (int countEach_tDBOutput_28 : pstmt_tDBOutput_28.executeBatch()) {
											countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0
													: countEach_tDBOutput_28);
										}

										insertedCount_tDBOutput_28 += countSum_tDBOutput_28;

										batchSizeCounter_tDBOutput_28 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_28) {
										java.sql.SQLException ne_tDBOutput_28 = e_tDBOutput_28.getNextException(),
												sqle_tDBOutput_28 = null;
										String errormessage_tDBOutput_28;
										if (ne_tDBOutput_28 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_28 = new java.sql.SQLException(
													e_tDBOutput_28.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_28.getMessage(),
													ne_tDBOutput_28.getSQLState(), ne_tDBOutput_28.getErrorCode(),
													ne_tDBOutput_28);
											errormessage_tDBOutput_28 = sqle_tDBOutput_28.getMessage();
										} else {
											errormessage_tDBOutput_28 = e_tDBOutput_28.getMessage();
										}

										int countSum_tDBOutput_28 = 0;
										for (int countEach_tDBOutput_28 : e_tDBOutput_28.getUpdateCounts()) {
											countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0
													: countEach_tDBOutput_28);
										}

										insertedCount_tDBOutput_28 += countSum_tDBOutput_28;

										System.err.println(errormessage_tDBOutput_28);

									}
								}

								tos_count_tDBOutput_28++;

								/**
								 * [tDBOutput_28 main ] stop
								 */

								/**
								 * [tDBOutput_28 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_28";

								/**
								 * [tDBOutput_28 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_28 process_data_end ] start
								 */

								currentComponent = "tDBOutput_28";

								/**
								 * [tDBOutput_28 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_0"

							/**
							 * [tMap_28 process_data_end ] start
							 */

							currentComponent = "tMap_28";

							/**
							 * [tMap_28 process_data_end ] stop
							 */

						} // End of branch "row26"

						/**
						 * [tFileInputDelimited_31 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						/**
						 * [tFileInputDelimited_31 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_31 end ] start
						 */

						currentComponent = "tFileInputDelimited_31";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/paragraphes.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_31 != null) {
							fid_tFileInputDelimited_31.close();
						}
					}
					if (fid_tFileInputDelimited_31 != null) {
						globalMap.put("tFileInputDelimited_31_NB_LINE", fid_tFileInputDelimited_31.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_31", true);
				end_Hash.put("tFileInputDelimited_31", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_31 end ] stop
				 */

				/**
				 * [tMap_28 end ] start
				 */

				currentComponent = "tMap_28";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tMap_28", true);
				end_Hash.put("tMap_28", System.currentTimeMillis());

				/**
				 * [tMap_28 end ] stop
				 */

				/**
				 * [tDBOutput_28 end ] start
				 */

				currentComponent = "tDBOutput_28";

				try {
					int countSum_tDBOutput_28 = 0;
					if (pstmt_tDBOutput_28 != null && batchSizeCounter_tDBOutput_28 > 0) {

						for (int countEach_tDBOutput_28 : pstmt_tDBOutput_28.executeBatch()) {
							countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
						}

					}

					insertedCount_tDBOutput_28 += countSum_tDBOutput_28;

				} catch (java.sql.BatchUpdateException e_tDBOutput_28) {
					java.sql.SQLException ne_tDBOutput_28 = e_tDBOutput_28.getNextException(), sqle_tDBOutput_28 = null;
					String errormessage_tDBOutput_28;
					if (ne_tDBOutput_28 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_28 = new java.sql.SQLException(
								e_tDBOutput_28.getMessage() + "\ncaused by: " + ne_tDBOutput_28.getMessage(),
								ne_tDBOutput_28.getSQLState(), ne_tDBOutput_28.getErrorCode(), ne_tDBOutput_28);
						errormessage_tDBOutput_28 = sqle_tDBOutput_28.getMessage();
					} else {
						errormessage_tDBOutput_28 = e_tDBOutput_28.getMessage();
					}

					int countSum_tDBOutput_28 = 0;
					for (int countEach_tDBOutput_28 : e_tDBOutput_28.getUpdateCounts()) {
						countSum_tDBOutput_28 += (countEach_tDBOutput_28 < 0 ? 0 : countEach_tDBOutput_28);
					}

					insertedCount_tDBOutput_28 += countSum_tDBOutput_28;

					System.err.println(errormessage_tDBOutput_28);

				}

				if (pstmt_tDBOutput_28 != null) {

					pstmt_tDBOutput_28.close();
					resourceMap.remove("pstmt_tDBOutput_28");
				}
				resourceMap.put("statementClosed_tDBOutput_28", true);

				nb_line_deleted_tDBOutput_28 = nb_line_deleted_tDBOutput_28 + deletedCount_tDBOutput_28;
				nb_line_update_tDBOutput_28 = nb_line_update_tDBOutput_28 + updatedCount_tDBOutput_28;
				nb_line_inserted_tDBOutput_28 = nb_line_inserted_tDBOutput_28 + insertedCount_tDBOutput_28;
				nb_line_rejected_tDBOutput_28 = nb_line_rejected_tDBOutput_28 + rejectedCount_tDBOutput_28;

				globalMap.put("tDBOutput_28_NB_LINE", nb_line_tDBOutput_28);
				globalMap.put("tDBOutput_28_NB_LINE_UPDATED", nb_line_update_tDBOutput_28);
				globalMap.put("tDBOutput_28_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_28);
				globalMap.put("tDBOutput_28_NB_LINE_DELETED", nb_line_deleted_tDBOutput_28);
				globalMap.put("tDBOutput_28_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_28);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_0");
				}

				ok_Hash.put("tDBOutput_28", true);
				end_Hash.put("tDBOutput_28", System.currentTimeMillis());

				/**
				 * [tDBOutput_28 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_31:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
			}

			tFileInputDelimited_32Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_31 finally ] start
				 */

				currentComponent = "tFileInputDelimited_31";

				/**
				 * [tFileInputDelimited_31 finally ] stop
				 */

				/**
				 * [tMap_28 finally ] start
				 */

				currentComponent = "tMap_28";

				/**
				 * [tMap_28 finally ] stop
				 */

				/**
				 * [tDBOutput_28 finally ] start
				 */

				currentComponent = "tDBOutput_28";

				if (resourceMap.get("statementClosed_tDBOutput_28") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_28 = null;
					if ((pstmtToClose_tDBOutput_28 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_28")) != null) {
						pstmtToClose_tDBOutput_28.close();
					}
				}

				/**
				 * [tDBOutput_28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 1);
	}

	public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		public String code_lien_regroupement;

		public String getCode_lien_regroupement() {
			return this.code_lien_regroupement;
		}

		public String code_catalogue;

		public String getCode_catalogue() {
			return this.code_catalogue;
		}

		public String code_memo;

		public String getCode_memo() {
			return this.code_memo;
		}

		public String date_creation_article;

		public String getDate_creation_article() {
			return this.date_creation_article;
		}

		public String date_derniere_modif_prix;

		public String getDate_derniere_modif_prix() {
			return this.date_derniere_modif_prix;
		}

		public String date_dernier_prix_vente;

		public String getDate_dernier_prix_vente() {
			return this.date_dernier_prix_vente;
		}

		public Float delai_approvisionnement;

		public Float getDelai_approvisionnement() {
			return this.delai_approvisionnement;
		}

		public String designation1;

		public String getDesignation1() {
			return this.designation1;
		}

		public String designation2;

		public String getDesignation2() {
			return this.designation2;
		}

		public String designation3;

		public String getDesignation3() {
			return this.designation3;
		}

		public String emplacement_stock;

		public String getEmplacement_stock() {
			return this.emplacement_stock;
		}

		public Boolean flag_modif;

		public Boolean getFlag_modif() {
			return this.flag_modif;
		}

		public Boolean is_sold_off_enable;

		public Boolean getIs_sold_off_enable() {
			return this.is_sold_off_enable;
		}

		public String lieu_dans_stock;

		public String getLieu_dans_stock() {
			return this.lieu_dans_stock;
		}

		public String ligne_catalogue;

		public String getLigne_catalogue() {
			return this.ligne_catalogue;
		}

		public String mot_cle_article;

		public String getMot_cle_article() {
			return this.mot_cle_article;
		}

		public String numero_page_catalogue_grama;

		public String getNumero_page_catalogue_grama() {
			return this.numero_page_catalogue_grama;
		}

		public Float prix_vente_ht;

		public Float getPrix_vente_ht() {
			return this.prix_vente_ht;
		}

		public Float prix_vente_1;

		public Float getPrix_vente_1() {
			return this.prix_vente_1;
		}

		public String reference_dappel_1;

		public String getReference_dappel_1() {
			return this.reference_dappel_1;
		}

		public String reference_dappel_2;

		public String getReference_dappel_2() {
			return this.reference_dappel_2;
		}

		public String reference_dappel_3;

		public String getReference_dappel_3() {
			return this.reference_dappel_3;
		}

		public String retour_office;

		public String getRetour_office() {
			return this.retour_office;
		}

		public String idfamille;

		public String getIdfamille() {
			return this.idfamille;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		public String idfournisseur_bis;

		public String getIdfournisseur_bis() {
			return this.idfournisseur_bis;
		}

		public String idtitre;

		public String getIdtitre() {
			return this.idtitre;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idarticle == null) ? 0 : this.idarticle.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mainStruct other = (mainStruct) obj;

			if (this.idarticle == null) {
				if (other.idarticle != null)
					return false;

			} else if (!this.idarticle.equals(other.idarticle))

				return false;

			return true;
		}

		public void copyDataTo(mainStruct other) {

			other.idarticle = this.idarticle;
			other.code_lien_regroupement = this.code_lien_regroupement;
			other.code_catalogue = this.code_catalogue;
			other.code_memo = this.code_memo;
			other.date_creation_article = this.date_creation_article;
			other.date_derniere_modif_prix = this.date_derniere_modif_prix;
			other.date_dernier_prix_vente = this.date_dernier_prix_vente;
			other.delai_approvisionnement = this.delai_approvisionnement;
			other.designation1 = this.designation1;
			other.designation2 = this.designation2;
			other.designation3 = this.designation3;
			other.emplacement_stock = this.emplacement_stock;
			other.flag_modif = this.flag_modif;
			other.is_sold_off_enable = this.is_sold_off_enable;
			other.lieu_dans_stock = this.lieu_dans_stock;
			other.ligne_catalogue = this.ligne_catalogue;
			other.mot_cle_article = this.mot_cle_article;
			other.numero_page_catalogue_grama = this.numero_page_catalogue_grama;
			other.prix_vente_ht = this.prix_vente_ht;
			other.prix_vente_1 = this.prix_vente_1;
			other.reference_dappel_1 = this.reference_dappel_1;
			other.reference_dappel_2 = this.reference_dappel_2;
			other.reference_dappel_3 = this.reference_dappel_3;
			other.retour_office = this.retour_office;
			other.idfamille = this.idfamille;
			other.idfournisseur = this.idfournisseur;
			other.idfournisseur_bis = this.idfournisseur_bis;
			other.idtitre = this.idtitre;

		}

		public void copyKeysDataTo(mainStruct other) {

			other.idarticle = this.idarticle;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idarticle = readString(dis);

					this.code_lien_regroupement = readString(dis);

					this.code_catalogue = readString(dis);

					this.code_memo = readString(dis);

					this.date_creation_article = readString(dis);

					this.date_derniere_modif_prix = readString(dis);

					this.date_dernier_prix_vente = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.delai_approvisionnement = null;
					} else {
						this.delai_approvisionnement = dis.readFloat();
					}

					this.designation1 = readString(dis);

					this.designation2 = readString(dis);

					this.designation3 = readString(dis);

					this.emplacement_stock = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.flag_modif = null;
					} else {
						this.flag_modif = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_sold_off_enable = null;
					} else {
						this.is_sold_off_enable = dis.readBoolean();
					}

					this.lieu_dans_stock = readString(dis);

					this.ligne_catalogue = readString(dis);

					this.mot_cle_article = readString(dis);

					this.numero_page_catalogue_grama = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_vente_ht = null;
					} else {
						this.prix_vente_ht = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_vente_1 = null;
					} else {
						this.prix_vente_1 = dis.readFloat();
					}

					this.reference_dappel_1 = readString(dis);

					this.reference_dappel_2 = readString(dis);

					this.reference_dappel_3 = readString(dis);

					this.retour_office = readString(dis);

					this.idfamille = readString(dis);

					this.idfournisseur = readString(dis);

					this.idfournisseur_bis = readString(dis);

					this.idtitre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idarticle, dos);

				// String

				writeString(this.code_lien_regroupement, dos);

				// String

				writeString(this.code_catalogue, dos);

				// String

				writeString(this.code_memo, dos);

				// String

				writeString(this.date_creation_article, dos);

				// String

				writeString(this.date_derniere_modif_prix, dos);

				// String

				writeString(this.date_dernier_prix_vente, dos);

				// Float

				if (this.delai_approvisionnement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.delai_approvisionnement);
				}

				// String

				writeString(this.designation1, dos);

				// String

				writeString(this.designation2, dos);

				// String

				writeString(this.designation3, dos);

				// String

				writeString(this.emplacement_stock, dos);

				// Boolean

				if (this.flag_modif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.flag_modif);
				}

				// Boolean

				if (this.is_sold_off_enable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_sold_off_enable);
				}

				// String

				writeString(this.lieu_dans_stock, dos);

				// String

				writeString(this.ligne_catalogue, dos);

				// String

				writeString(this.mot_cle_article, dos);

				// String

				writeString(this.numero_page_catalogue_grama, dos);

				// Float

				if (this.prix_vente_ht == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_vente_ht);
				}

				// Float

				if (this.prix_vente_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_vente_1);
				}

				// String

				writeString(this.reference_dappel_1, dos);

				// String

				writeString(this.reference_dappel_2, dos);

				// String

				writeString(this.reference_dappel_3, dos);

				// String

				writeString(this.retour_office, dos);

				// String

				writeString(this.idfamille, dos);

				// String

				writeString(this.idfournisseur, dos);

				// String

				writeString(this.idfournisseur_bis, dos);

				// String

				writeString(this.idtitre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idarticle=" + idarticle);
			sb.append(",code_lien_regroupement=" + code_lien_regroupement);
			sb.append(",code_catalogue=" + code_catalogue);
			sb.append(",code_memo=" + code_memo);
			sb.append(",date_creation_article=" + date_creation_article);
			sb.append(",date_derniere_modif_prix=" + date_derniere_modif_prix);
			sb.append(",date_dernier_prix_vente=" + date_dernier_prix_vente);
			sb.append(",delai_approvisionnement=" + String.valueOf(delai_approvisionnement));
			sb.append(",designation1=" + designation1);
			sb.append(",designation2=" + designation2);
			sb.append(",designation3=" + designation3);
			sb.append(",emplacement_stock=" + emplacement_stock);
			sb.append(",flag_modif=" + String.valueOf(flag_modif));
			sb.append(",is_sold_off_enable=" + String.valueOf(is_sold_off_enable));
			sb.append(",lieu_dans_stock=" + lieu_dans_stock);
			sb.append(",ligne_catalogue=" + ligne_catalogue);
			sb.append(",mot_cle_article=" + mot_cle_article);
			sb.append(",numero_page_catalogue_grama=" + numero_page_catalogue_grama);
			sb.append(",prix_vente_ht=" + String.valueOf(prix_vente_ht));
			sb.append(",prix_vente_1=" + String.valueOf(prix_vente_1));
			sb.append(",reference_dappel_1=" + reference_dappel_1);
			sb.append(",reference_dappel_2=" + reference_dappel_2);
			sb.append(",reference_dappel_3=" + reference_dappel_3);
			sb.append(",retour_office=" + retour_office);
			sb.append(",idfamille=" + idfamille);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append(",idfournisseur_bis=" + idfournisseur_bis);
			sb.append(",idtitre=" + idtitre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idarticle, other.idarticle);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDES1;

		public String getPDES1() {
			return this.PDES1;
		}

		public String PDES2;

		public String getPDES2() {
			return this.PDES2;
		}

		public String PDES3;

		public String getPDES3() {
			return this.PDES3;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDES1 = readString(dis);

					this.PDES2 = readString(dis);

					this.PDES3 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDES1, dos);

				// String

				writeString(this.PDES2, dos);

				// String

				writeString(this.PDES3, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDES1=" + PDES1);
			sb.append(",PDES2=" + PDES2);
			sb.append(",PDES3=" + PDES3);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_32Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_32Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDES1;

		public String getPDES1() {
			return this.PDES1;
		}

		public String PDES2;

		public String getPDES2() {
			return this.PDES2;
		}

		public String PDES3;

		public String getPDES3() {
			return this.PDES3;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.PREF == null) ? 0 : this.PREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_32Struct other = (after_tFileInputDelimited_32Struct) obj;

			if (this.PREF == null) {
				if (other.PREF != null)
					return false;

			} else if (!this.PREF.equals(other.PREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_32Struct other) {

			other.PREF = this.PREF;
			other.PDES1 = this.PDES1;
			other.PDES2 = this.PDES2;
			other.PDES3 = this.PDES3;
			other.PPRIX = this.PPRIX;
			other.PCTVA = this.PCTVA;
			other.PCTYV = this.PCTYV;
			other.PCPN = this.PCPN;
			other.PPA = this.PPA;
			other.PQTE = this.PQTE;
			other.PFORM01 = this.PFORM01;
			other.PFORM02 = this.PFORM02;
			other.PNBCAR = this.PNBCAR;
			other.PVERT = this.PVERT;
			other.PEMP2 = this.PEMP2;
			other.PLIEU2 = this.PLIEU2;
			other.PREMIMAX = this.PREMIMAX;
			other.FILLER2 = this.FILLER2;
			other.PMOUV = this.PMOUV;
			other.PTENU = this.PTENU;
			other.PINCRE = this.PINCRE;
			other.PPROMPA = this.PPROMPA;
			other.PACHAT = this.PACHAT;
			other.PARRCDT1 = this.PARRCDT1;
			other.PARRCDT2 = this.PARRCDT2;
			other.PECOTAXE = this.PECOTAXE;
			other.PPAQUET = this.PPAQUET;
			other.PEMBAL = this.PEMBAL;
			other.PGRAMA = this.PGRAMA;
			other.PDATCRE = this.PDATCRE;
			other.PDATPRIX = this.PDATPRIX;
			other.PDATPA1 = this.PDATPA1;
			other.PPA1 = this.PPA1;
			other.PPV1 = this.PPV1;
			other.PPRIXR = this.PPRIXR;
			other.PPRIXRV1 = this.PPRIXRV1;
			other.PPRIXRV2 = this.PPRIXRV2;
			other.PPRIXRV3 = this.PPRIXRV3;
			other.PPRIREV1 = this.PPRIREV1;
			other.PPRIREV2 = this.PPRIREV2;
			other.PPRIREV3 = this.PPRIREV3;
			other.PDATPV1 = this.PDATPV1;
			other.PMPA = this.PMPA;
			other.PETIQ = this.PETIQ;
			other.PFOUR = this.PFOUR;
			other.PPRITTC = this.PPRITTC;
			other.PIMOD = this.PIMOD;
			other.PPROMREM = this.PPROMREM;
			other.PUV = this.PUV;
			other.PUA = this.PUA;
			other.PDELAI = this.PDELAI;
			other.PMINI = this.PMINI;
			other.PMAXI = this.PMAXI;
			other.PCDE = this.PCDE;
			other.PEMP = this.PEMP;
			other.PPRI1 = this.PPRI1;
			other.PPRI2 = this.PPRI2;
			other.PPRI3 = this.PPRI3;
			other.PPRI4 = this.PPRI4;
			other.PPRI5 = this.PPRI5;
			other.PPRI6 = this.PPRI6;
			other.PREMI1 = this.PREMI1;
			other.PREMI2 = this.PREMI2;
			other.PREMI3 = this.PREMI3;
			other.PREMI4 = this.PREMI4;
			other.PREMI5 = this.PREMI5;
			other.PREMI6 = this.PREMI6;
			other.PQUANT1 = this.PQUANT1;
			other.PQUANT2 = this.PQUANT2;
			other.PQUANT3 = this.PQUANT3;
			other.PQUANT4 = this.PQUANT4;
			other.PQUANT5 = this.PQUANT5;
			other.PQUANT6 = this.PQUANT6;
			other.PEDAT = this.PEDAT;
			other.PSDAT = this.PSDAT;
			other.PRESV = this.PRESV;
			other.PREFOU = this.PREFOU;
			other.PGAMEC = this.PGAMEC;
			other.PGAMER = this.PGAMER;
			other.PGAMEN = this.PGAMEN;
			other.PTPF = this.PTPF;
			other.PSOMMEIL = this.PSOMMEIL;
			other.PINV = this.PINV;
			other.PMAC = this.PMAC;
			other.PREJ = this.PREJ;
			other.PMOI = this.PMOI;
			other.P1 = this.P1;
			other.P2 = this.P2;
			other.P3 = this.P3;
			other.P4 = this.P4;
			other.P5 = this.P5;
			other.P6 = this.P6;
			other.P7 = this.P7;
			other.P8 = this.P8;
			other.P9 = this.P9;
			other.P10 = this.P10;
			other.P11 = this.P11;
			other.P12 = this.P12;
			other.PAN = this.PAN;
			other.PAN1 = this.PAN1;
			other.PAN2 = this.PAN2;
			other.PPROM = this.PPROM;
			other.PPROMD = this.PPROMD;
			other.PCONDI = this.PCONDI;
			other.PRESTE = this.PRESTE;
			other.PTITR = this.PTITR;
			other.PPARAG = this.PPARAG;
			other.PPOID = this.PPOID;
			other.PKLE = this.PKLE;
			other.PLIEN = this.PLIEN;
			other.PSFAM = this.PSFAM;
			other.PREF01 = this.PREF01;
			other.PREF02 = this.PREF02;
			other.PREF03 = this.PREF03;
			other.PTYPE = this.PTYPE;
			other.PLIEU = this.PLIEU;
			other.PCATAL = this.PCATAL;
			other.PUV01 = this.PUV01;
			other.PCONDI01 = this.PCONDI01;
			other.PUV02 = this.PUV02;
			other.PCONDI02 = this.PCONDI02;
			other.PPROMDEB = this.PPROMDEB;
			other.PREMFOU = this.PREMFOU;
			other.PQTE01 = this.PQTE01;
			other.PQTE02 = this.PQTE02;
			other.PRX01 = this.PRX01;
			other.PRX02 = this.PRX02;
			other.PCUBAG = this.PCUBAG;
			other.PREVPOI = this.PREVPOI;
			other.PREVCUB = this.PREVCUB;
			other.PREVFAP = this.PREVFAP;
			other.PINTERNET = this.PINTERNET;
			other.PFIDEL = this.PFIDEL;
			other.PCOMMANDE = this.PCOMMANDE;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_32Struct other) {

			other.PREF = this.PREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDES1 = readString(dis);

					this.PDES2 = readString(dis);

					this.PDES3 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDES1, dos);

				// String

				writeString(this.PDES2, dos);

				// String

				writeString(this.PDES3, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDES1=" + PDES1);
			sb.append(",PDES2=" + PDES2);
			sb.append(",PDES3=" + PDES3);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PREF, other.PREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_32_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_38Process(globalMap);

				row27Struct row27 = new row27Struct();
				mainStruct main = new mainStruct();

				/**
				 * [tDBOutput_29 begin ] start
				 */

				ok_Hash.put("tDBOutput_29", false);
				start_Hash.put("tDBOutput_29", System.currentTimeMillis());

				currentComponent = "tDBOutput_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "main");
				}

				int tos_count_tDBOutput_29 = 0;

				String dbschema_tDBOutput_29 = null;
				dbschema_tDBOutput_29 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_29 = null;
				if (dbschema_tDBOutput_29 == null || dbschema_tDBOutput_29.trim().length() == 0) {
					tableName_tDBOutput_29 = ("article");
				} else {
					tableName_tDBOutput_29 = dbschema_tDBOutput_29 + "\".\"" + ("article");
				}

				int nb_line_tDBOutput_29 = 0;
				int nb_line_update_tDBOutput_29 = 0;
				int nb_line_inserted_tDBOutput_29 = 0;
				int nb_line_deleted_tDBOutput_29 = 0;
				int nb_line_rejected_tDBOutput_29 = 0;

				int deletedCount_tDBOutput_29 = 0;
				int updatedCount_tDBOutput_29 = 0;
				int insertedCount_tDBOutput_29 = 0;
				int rejectedCount_tDBOutput_29 = 0;

				boolean whetherReject_tDBOutput_29 = false;

				java.sql.Connection conn_tDBOutput_29 = null;
				String dbUser_tDBOutput_29 = null;

				conn_tDBOutput_29 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_29 = 100000;
				int batchSizeCounter_tDBOutput_29 = 0;

				int count_tDBOutput_29 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_29 = conn_tDBOutput_29.createStatement()) {
					stmtClear_tDBOutput_29.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_29 + "\"");
				}
				String insert_tDBOutput_29 = "INSERT INTO \"" + tableName_tDBOutput_29
						+ "\" (\"idarticle\",\"code_lien_regroupement\",\"code_catalogue\",\"code_memo\",\"date_creation_article\",\"date_derniere_modif_prix\",\"date_dernier_prix_vente\",\"delai_approvisionnement\",\"designation1\",\"designation2\",\"designation3\",\"emplacement_stock\",\"flag_modif\",\"is_sold_off_enable\",\"lieu_dans_stock\",\"ligne_catalogue\",\"mot_cle_article\",\"numero_page_catalogue_grama\",\"prix_vente_ht\",\"prix_vente_1\",\"reference_dappel_1\",\"reference_dappel_2\",\"reference_dappel_3\",\"retour_office\",\"idfamille\",\"idfournisseur\",\"idfournisseur_bis\",\"idtitre\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_29 = conn_tDBOutput_29.prepareStatement(insert_tDBOutput_29);
				resourceMap.put("pstmt_tDBOutput_29", pstmt_tDBOutput_29);

				/**
				 * [tDBOutput_29 begin ] stop
				 */

				/**
				 * [tMap_29 begin ] start
				 */

				ok_Hash.put("tMap_29", false);
				start_Hash.put("tMap_29", System.currentTimeMillis());

				currentComponent = "tMap_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tMap_29 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) globalMap
						.get("tHash_Lookup_row33"));

				row33Struct row33HashKey = new row33Struct();
				row33Struct row33Default = new row33Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_29__Struct {
				}
				Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
				mainStruct main_tmp = new mainStruct();
// ###############################

				/**
				 * [tMap_29 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_32 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_32", false);
				start_Hash.put("tFileInputDelimited_32", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_32";

				int tos_count_tFileInputDelimited_32 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_32 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_32 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_32,
							row27Struct row27) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_32 = 0;

						columnIndexWithD_tFileInputDelimited_32 = 0;

						row27.PREF = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 1;

						row27.PDES1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 2;

						row27.PDES2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 3;

						row27.PDES3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 4;

						row27.PPRIX = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 5;

						row27.PCTVA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 6;

						row27.PCTYV = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 7;

						row27.PCPN = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 8;

						row27.PPA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 9;

						row27.PQTE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 10;

						row27.PFORM01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 11;

						row27.PFORM02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 12;

						row27.PNBCAR = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 13;

						row27.PVERT = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 14;

						row27.PEMP2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 15;

						row27.PLIEU2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 16;

						row27.PREMIMAX = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 17;

						row27.FILLER2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 18;

						row27.PMOUV = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 19;

						row27.PTENU = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 20;

						row27.PINCRE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 21;

						row27.PPROMPA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 22;

						row27.PACHAT = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 23;

						row27.PARRCDT1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 24;

						row27.PARRCDT2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 25;

						row27.PECOTAXE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 26;

						row27.PPAQUET = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 27;

						row27.PEMBAL = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 28;

						row27.PGRAMA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 29;

						row27.PDATCRE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 30;

						row27.PDATPRIX = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 31;

						row27.PDATPA1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 32;

						row27.PPA1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 33;

						row27.PPV1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 34;

						row27.PPRIXR = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 35;

						row27.PPRIXRV1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 36;

						row27.PPRIXRV2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 37;

						row27.PPRIXRV3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 38;

						row27.PPRIREV1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 39;

						row27.PPRIREV2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 40;

						row27.PPRIREV3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 41;

						row27.PDATPV1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 42;

						row27.PMPA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 43;

						row27.PETIQ = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 44;

						row27.PFOUR = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 45;

						row27.PPRITTC = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 46;

						row27.PIMOD = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 47;

						row27.PPROMREM = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 48;

						row27.PUV = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 49;

						row27.PUA = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 50;

						row27.PDELAI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 51;

						row27.PMINI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 52;

						row27.PMAXI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 53;

						row27.PCDE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 54;

						row27.PEMP = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 55;

						row27.PPRI1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 56;

						row27.PPRI2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 57;

						row27.PPRI3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 58;

						row27.PPRI4 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 59;

						row27.PPRI5 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 60;

						row27.PPRI6 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 61;

						row27.PREMI1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 62;

						row27.PREMI2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 63;

						row27.PREMI3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 64;

						row27.PREMI4 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 65;

						row27.PREMI5 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 66;

						row27.PREMI6 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 67;

						row27.PQUANT1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 68;

						row27.PQUANT2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 69;

						row27.PQUANT3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 70;

						row27.PQUANT4 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 71;

						row27.PQUANT5 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 72;

						row27.PQUANT6 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 73;

						row27.PEDAT = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 74;

						row27.PSDAT = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 75;

						row27.PRESV = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 76;

						row27.PREFOU = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 77;

						row27.PGAMEC = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 78;

						row27.PGAMER = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 79;

						row27.PGAMEN = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 80;

						row27.PTPF = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 81;

						row27.PSOMMEIL = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 82;

						row27.PINV = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 83;

						row27.PMAC = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 84;

						row27.PREJ = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 85;

						row27.PMOI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 86;

						row27.P1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 87;

						row27.P2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 88;

						row27.P3 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 89;

						row27.P4 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 90;

						row27.P5 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 91;

						row27.P6 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 92;

						row27.P7 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 93;

						row27.P8 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 94;

						row27.P9 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 95;

						row27.P10 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 96;

						row27.P11 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 97;

						row27.P12 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 98;

						row27.PAN = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 99;

						row27.PAN1 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_32,
							row27Struct row27) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_32 = 0;

						columnIndexWithD_tFileInputDelimited_32 = 100;

						row27.PAN2 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 101;

						row27.PPROM = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 102;

						row27.PPROMD = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 103;

						row27.PCONDI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 104;

						row27.PRESTE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 105;

						row27.PTITR = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 106;

						row27.PPARAG = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 107;

						row27.PPOID = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 108;

						row27.PKLE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 109;

						row27.PLIEN = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 110;

						row27.PSFAM = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 111;

						row27.PREF01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 112;

						row27.PREF02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 113;

						row27.PREF03 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 114;

						row27.PTYPE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 115;

						row27.PLIEU = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 116;

						row27.PCATAL = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 117;

						row27.PUV01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 118;

						row27.PCONDI01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 119;

						row27.PUV02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 120;

						row27.PCONDI02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 121;

						row27.PPROMDEB = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 122;

						row27.PREMFOU = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 123;

						row27.PQTE01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 124;

						row27.PQTE02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 125;

						row27.PRX01 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 126;

						row27.PRX02 = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 127;

						row27.PCUBAG = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 128;

						row27.PREVPOI = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 129;

						row27.PREVCUB = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 130;

						row27.PREVFAP = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 131;

						row27.PINTERNET = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 132;

						row27.PFIDEL = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

						columnIndexWithD_tFileInputDelimited_32 = 133;

						row27.PCOMMANDE = fid_tFileInputDelimited_32.get(columnIndexWithD_tFileInputDelimited_32);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_32,
							row27Struct row27) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_32, row27);

						valueToConn_1(fid_tFileInputDelimited_32, row27);

					}

				}
				RowHelper_tFileInputDelimited_32 rowHelper_tFileInputDelimited_32 = new RowHelper_tFileInputDelimited_32();

				int nb_line_tFileInputDelimited_32 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_32 = null;
				int limit_tFileInputDelimited_32 = -1;
				try {

					Object filename_tFileInputDelimited_32 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_32 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_32 = 0, random_value_tFileInputDelimited_32 = -1;
						if (footer_value_tFileInputDelimited_32 > 0 || random_value_tFileInputDelimited_32 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_32 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_32, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_32 != null && fid_tFileInputDelimited_32.nextRecord()) {
						rowstate_tFileInputDelimited_32.reset();

						row27 = null;

						boolean whetherReject_tFileInputDelimited_32 = false;
						row27 = new row27Struct();
						try {

							rowHelper_tFileInputDelimited_32.valueToConn(fid_tFileInputDelimited_32, row27);

							if (rowstate_tFileInputDelimited_32.getException() != null) {
								throw rowstate_tFileInputDelimited_32.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_32 = true;

							System.err.println(e.getMessage());
							row27 = null;

						}

						/**
						 * [tFileInputDelimited_32 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_32 main ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						tos_count_tFileInputDelimited_32++;

						/**
						 * [tFileInputDelimited_32 main ] stop
						 */

						/**
						 * [tFileInputDelimited_32 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						/**
						 * [tFileInputDelimited_32 process_data_begin ] stop
						 */
// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tMap_29 main ] start
							 */

							currentComponent = "tMap_29";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_29 = false;
							boolean mainRowRejected_tMap_29 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row33"
							///////////////////////////////////////////////

							boolean forceLooprow33 = false;

							row33Struct row33ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_29) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_29 = false;

								row33HashKey.FFCOD = row27.PREF;

								row33HashKey.hashCodeDirty = true;

								tHash_Lookup_row33.lookup(row33HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row33 != null && tHash_Lookup_row33.getCount(row33HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row33' and it contains more one result from keys : row33.FFCOD = '" +
								// row33HashKey.FFCOD + "'");
							} // G 071

							row33Struct row33 = null;

							row33Struct fromLookup_row33 = null;
							row33 = row33Default;

							if (tHash_Lookup_row33 != null && tHash_Lookup_row33.hasNext()) { // G 099

								fromLookup_row33 = tHash_Lookup_row33.next();

							} // G 099

							if (fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
								// ###############################
								// # Output tables

								main = null;

// # Output table : 'main'
								main_tmp.idarticle = row27.PREF;
								main_tmp.code_lien_regroupement = row27.PLIEN;
								main_tmp.code_catalogue = row27.PMOUV;
								main_tmp.code_memo = null;
								main_tmp.date_creation_article = row27.PDATCRE;
								main_tmp.date_derniere_modif_prix = row27.PDATPRIX;
								main_tmp.date_dernier_prix_vente = row27.PDATPV1;
								main_tmp.delai_approvisionnement = Float.parseFloat(row27.PDELAI);
								main_tmp.designation1 = row27.PDES1.trim();
								main_tmp.designation2 = row27.PDES2.trim();
								main_tmp.designation3 = row27.PDES3.trim();
								main_tmp.emplacement_stock = row27.PEMP;
								main_tmp.flag_modif = row27.PIMOD.equals("*") ? true : false;
								main_tmp.is_sold_off_enable = null;
								main_tmp.lieu_dans_stock = row27.PLIEU;
								main_tmp.ligne_catalogue = row27.PCATAL;
								main_tmp.mot_cle_article = null;
								main_tmp.numero_page_catalogue_grama = row27.PGRAMA;
								main_tmp.prix_vente_ht = Float.parseFloat(row27.PPRIXR);
								main_tmp.prix_vente_1 = Float.parseFloat(row27.PPV1);
								main_tmp.reference_dappel_1 = row27.PREF01;
								main_tmp.reference_dappel_2 = row27.PREF02;
								main_tmp.reference_dappel_3 = row27.PREF02;
								main_tmp.retour_office = null;
								main_tmp.idfamille = row27.PSFAM != "001" ? new String("001")
										: row27.PSFAM != "002" ? new String("002")
												: row27.PSFAM != "003" ? new String("003")
														: row27.PSFAM != "004" ? new String("004")
																: row27.PSFAM != "005" ? new String("005")
																		: row27.PSFAM != "006" ? new String("006")
																				: row27.PSFAM != "007"
																						? new String("007")
																						: row27.PSFAM != "008"
																								? new String("008")
																								: row27.PSFAM != "009"
																										? new String(
																												"009")
																										: row27.PSFAM != "010"
																												? new String(
																														"010")
																												: row27.PSFAM != "021"
																														? new String(
																																"021")
																														: row27.PSFAM != "022"
																																? new String(
																																		"022")
																																: row27.PSFAM != "023"
																																		? new String(
																																				"023")
																																		: row27.PSFAM != "070"
																																				? new String(
																																						"070")
																																				: row27.PSFAM != "078"
																																						? new String(
																																								"078")
																																						: row27.PSFAM != "080"
																																								? new String(
																																										"080")
																																								: row27.PSFAM != "081"
																																										? new String(
																																												"081")
																																										: row27.PSFAM != "082"
																																												? new String(
																																														"082")
																																												: row27.PSFAM != "083"
																																														? new String(
																																																"083")
																																														: row27.PSFAM != "084"
																																																? new String(
																																																		"084")
																																																: row27.PSFAM != "085"
																																																		? new String(
																																																				"085")
																																																		: row27.PSFAM != "086"
																																																				? new String(
																																																						"086")
																																																				: row27.PSFAM != "087"
																																																						? new String(
																																																								"087")
																																																						: row27.PSFAM != "088"
																																																								? new String(
																																																										"088")
																																																								: row27.PSFAM != "089"
																																																										? new String(
																																																												"089")
																																																										: row27.PSFAM != "090"
																																																												? new String(
																																																														"090")
																																																												:

																																																												row27.PSFAM;
								main_tmp.idfournisseur = row27.PFOUR.equals("000026") ? null
										: row27.PFOUR.equals("029007") ? null
												: row27.PFOUR.equals("029015") ? null
														: row27.PFOUR.equals("000769") ? null
																: row27.PFOUR.equals("000895") ? null
																		: row27.PFOUR.equals("029011") ? null
																				: row27.PFOUR.equals("000892") ? null
																						: row27.PFOUR.equals("000450")
																								? null
																								: row27.PFOUR.equals(
																										"029005")
																												? null
																												: row27.PFOUR
																														.equals("029012")
																																? null
																																: row27.PFOUR
																																		.equals("029016")
																																				? null
																																				: row27.PFOUR
																																						.equals("029019")
																																								? null
																																								: row27.PFOUR
																																										.equals("029020")
																																												? null
																																												: row27.PFOUR
																																														.equals("029013")
																																																? null
																																																: row27.PFOUR
																																																		.equals("004500")
																																																				? null
																																																				: row27.PFOUR
																																																						.equals("029010")
																																																								? null
																																																								: row27.PFOUR
																																																										.equals("018210")
																																																												? null
																																																												: row27.PFOUR
																																																														.equals("026450")
																																																																? null
																																																																: row27.PFOUR
																																																																		.equals("023070")
																																																																				? null
																																																																				: row27.PFOUR
																																																																						.equals("029007")
																																																																								? null
																																																																								: row27.PFOUR
																																																																										.equals("029007")
																																																																												? null
																																																																												: row27.PFOUR
																																																																														.contains(
																																																																																"?") ? null
																																																																																		:

																																																																																		row27.PFOUR;
								main_tmp.idfournisseur_bis = row33.FFCOD == null ? null :

										row33.FFCOD + row33.FFFRS;
								main_tmp.idtitre = row27.PTITR.isBlank() ? null : row27.PTITR;
								main = main_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_29 = false;

							tos_count_tMap_29++;

							/**
							 * [tMap_29 main ] stop
							 */

							/**
							 * [tMap_29 process_data_begin ] start
							 */

							currentComponent = "tMap_29";

							/**
							 * [tMap_29 process_data_begin ] stop
							 */
// Start of branch "main"
							if (main != null) {

								/**
								 * [tDBOutput_29 main ] start
								 */

								currentComponent = "tDBOutput_29";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "main");
								}

								whetherReject_tDBOutput_29 = false;
								if (main.idarticle == null) {
									pstmt_tDBOutput_29.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(1, main.idarticle);
								}

								if (main.code_lien_regroupement == null) {
									pstmt_tDBOutput_29.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(2, main.code_lien_regroupement);
								}

								if (main.code_catalogue == null) {
									pstmt_tDBOutput_29.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(3, main.code_catalogue);
								}

								if (main.code_memo == null) {
									pstmt_tDBOutput_29.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(4, main.code_memo);
								}

								if (main.date_creation_article == null) {
									pstmt_tDBOutput_29.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(5, main.date_creation_article);
								}

								if (main.date_derniere_modif_prix == null) {
									pstmt_tDBOutput_29.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(6, main.date_derniere_modif_prix);
								}

								if (main.date_dernier_prix_vente == null) {
									pstmt_tDBOutput_29.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(7, main.date_dernier_prix_vente);
								}

								if (main.delai_approvisionnement == null) {
									pstmt_tDBOutput_29.setNull(8, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_29.setFloat(8, main.delai_approvisionnement);
								}

								if (main.designation1 == null) {
									pstmt_tDBOutput_29.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(9, main.designation1);
								}

								if (main.designation2 == null) {
									pstmt_tDBOutput_29.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(10, main.designation2);
								}

								if (main.designation3 == null) {
									pstmt_tDBOutput_29.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(11, main.designation3);
								}

								if (main.emplacement_stock == null) {
									pstmt_tDBOutput_29.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(12, main.emplacement_stock);
								}

								if (main.flag_modif == null) {
									pstmt_tDBOutput_29.setNull(13, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_29.setBoolean(13, main.flag_modif);
								}

								if (main.is_sold_off_enable == null) {
									pstmt_tDBOutput_29.setNull(14, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_29.setBoolean(14, main.is_sold_off_enable);
								}

								if (main.lieu_dans_stock == null) {
									pstmt_tDBOutput_29.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(15, main.lieu_dans_stock);
								}

								if (main.ligne_catalogue == null) {
									pstmt_tDBOutput_29.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(16, main.ligne_catalogue);
								}

								if (main.mot_cle_article == null) {
									pstmt_tDBOutput_29.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(17, main.mot_cle_article);
								}

								if (main.numero_page_catalogue_grama == null) {
									pstmt_tDBOutput_29.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(18, main.numero_page_catalogue_grama);
								}

								if (main.prix_vente_ht == null) {
									pstmt_tDBOutput_29.setNull(19, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_29.setFloat(19, main.prix_vente_ht);
								}

								if (main.prix_vente_1 == null) {
									pstmt_tDBOutput_29.setNull(20, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_29.setFloat(20, main.prix_vente_1);
								}

								if (main.reference_dappel_1 == null) {
									pstmt_tDBOutput_29.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(21, main.reference_dappel_1);
								}

								if (main.reference_dappel_2 == null) {
									pstmt_tDBOutput_29.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(22, main.reference_dappel_2);
								}

								if (main.reference_dappel_3 == null) {
									pstmt_tDBOutput_29.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(23, main.reference_dappel_3);
								}

								if (main.retour_office == null) {
									pstmt_tDBOutput_29.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(24, main.retour_office);
								}

								if (main.idfamille == null) {
									pstmt_tDBOutput_29.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(25, main.idfamille);
								}

								if (main.idfournisseur == null) {
									pstmt_tDBOutput_29.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(26, main.idfournisseur);
								}

								if (main.idfournisseur_bis == null) {
									pstmt_tDBOutput_29.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(27, main.idfournisseur_bis);
								}

								if (main.idtitre == null) {
									pstmt_tDBOutput_29.setNull(28, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_29.setString(28, main.idtitre);
								}

								pstmt_tDBOutput_29.addBatch();
								nb_line_tDBOutput_29++;

								batchSizeCounter_tDBOutput_29++;

								if ((batchSize_tDBOutput_29 > 0)
										&& (batchSize_tDBOutput_29 <= batchSizeCounter_tDBOutput_29)) {
									try {
										int countSum_tDBOutput_29 = 0;

										for (int countEach_tDBOutput_29 : pstmt_tDBOutput_29.executeBatch()) {
											countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0
													: countEach_tDBOutput_29);
										}

										insertedCount_tDBOutput_29 += countSum_tDBOutput_29;

										batchSizeCounter_tDBOutput_29 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_29) {
										java.sql.SQLException ne_tDBOutput_29 = e_tDBOutput_29.getNextException(),
												sqle_tDBOutput_29 = null;
										String errormessage_tDBOutput_29;
										if (ne_tDBOutput_29 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_29 = new java.sql.SQLException(
													e_tDBOutput_29.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_29.getMessage(),
													ne_tDBOutput_29.getSQLState(), ne_tDBOutput_29.getErrorCode(),
													ne_tDBOutput_29);
											errormessage_tDBOutput_29 = sqle_tDBOutput_29.getMessage();
										} else {
											errormessage_tDBOutput_29 = e_tDBOutput_29.getMessage();
										}

										int countSum_tDBOutput_29 = 0;
										for (int countEach_tDBOutput_29 : e_tDBOutput_29.getUpdateCounts()) {
											countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0
													: countEach_tDBOutput_29);
										}

										insertedCount_tDBOutput_29 += countSum_tDBOutput_29;

										System.err.println(errormessage_tDBOutput_29);

									}
								}

								tos_count_tDBOutput_29++;

								/**
								 * [tDBOutput_29 main ] stop
								 */

								/**
								 * [tDBOutput_29 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_29";

								/**
								 * [tDBOutput_29 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_29 process_data_end ] start
								 */

								currentComponent = "tDBOutput_29";

								/**
								 * [tDBOutput_29 process_data_end ] stop
								 */

							} // End of branch "main"

							/**
							 * [tMap_29 process_data_end ] start
							 */

							currentComponent = "tMap_29";

							/**
							 * [tMap_29 process_data_end ] stop
							 */

						} // End of branch "row27"

						/**
						 * [tFileInputDelimited_32 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						/**
						 * [tFileInputDelimited_32 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_32 end ] start
						 */

						currentComponent = "tFileInputDelimited_32";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_32 != null) {
							fid_tFileInputDelimited_32.close();
						}
					}
					if (fid_tFileInputDelimited_32 != null) {
						globalMap.put("tFileInputDelimited_32_NB_LINE", fid_tFileInputDelimited_32.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_32", true);
				end_Hash.put("tFileInputDelimited_32", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_32 end ] stop
				 */

				/**
				 * [tMap_29 end ] start
				 */

				currentComponent = "tMap_29";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row33 != null) {
					tHash_Lookup_row33.endGet();
				}
				globalMap.remove("tHash_Lookup_row33");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tMap_29", true);
				end_Hash.put("tMap_29", System.currentTimeMillis());

				/**
				 * [tMap_29 end ] stop
				 */

				/**
				 * [tDBOutput_29 end ] start
				 */

				currentComponent = "tDBOutput_29";

				try {
					int countSum_tDBOutput_29 = 0;
					if (pstmt_tDBOutput_29 != null && batchSizeCounter_tDBOutput_29 > 0) {

						for (int countEach_tDBOutput_29 : pstmt_tDBOutput_29.executeBatch()) {
							countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
						}

					}

					insertedCount_tDBOutput_29 += countSum_tDBOutput_29;

				} catch (java.sql.BatchUpdateException e_tDBOutput_29) {
					java.sql.SQLException ne_tDBOutput_29 = e_tDBOutput_29.getNextException(), sqle_tDBOutput_29 = null;
					String errormessage_tDBOutput_29;
					if (ne_tDBOutput_29 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_29 = new java.sql.SQLException(
								e_tDBOutput_29.getMessage() + "\ncaused by: " + ne_tDBOutput_29.getMessage(),
								ne_tDBOutput_29.getSQLState(), ne_tDBOutput_29.getErrorCode(), ne_tDBOutput_29);
						errormessage_tDBOutput_29 = sqle_tDBOutput_29.getMessage();
					} else {
						errormessage_tDBOutput_29 = e_tDBOutput_29.getMessage();
					}

					int countSum_tDBOutput_29 = 0;
					for (int countEach_tDBOutput_29 : e_tDBOutput_29.getUpdateCounts()) {
						countSum_tDBOutput_29 += (countEach_tDBOutput_29 < 0 ? 0 : countEach_tDBOutput_29);
					}

					insertedCount_tDBOutput_29 += countSum_tDBOutput_29;

					System.err.println(errormessage_tDBOutput_29);

				}

				if (pstmt_tDBOutput_29 != null) {

					pstmt_tDBOutput_29.close();
					resourceMap.remove("pstmt_tDBOutput_29");
				}
				resourceMap.put("statementClosed_tDBOutput_29", true);

				nb_line_deleted_tDBOutput_29 = nb_line_deleted_tDBOutput_29 + deletedCount_tDBOutput_29;
				nb_line_update_tDBOutput_29 = nb_line_update_tDBOutput_29 + updatedCount_tDBOutput_29;
				nb_line_inserted_tDBOutput_29 = nb_line_inserted_tDBOutput_29 + insertedCount_tDBOutput_29;
				nb_line_rejected_tDBOutput_29 = nb_line_rejected_tDBOutput_29 + rejectedCount_tDBOutput_29;

				globalMap.put("tDBOutput_29_NB_LINE", nb_line_tDBOutput_29);
				globalMap.put("tDBOutput_29_NB_LINE_UPDATED", nb_line_update_tDBOutput_29);
				globalMap.put("tDBOutput_29_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_29);
				globalMap.put("tDBOutput_29_NB_LINE_DELETED", nb_line_deleted_tDBOutput_29);
				globalMap.put("tDBOutput_29_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_29);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "main");
				}

				ok_Hash.put("tDBOutput_29", true);
				end_Hash.put("tDBOutput_29", System.currentTimeMillis());

				/**
				 * [tDBOutput_29 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_32:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
			}

			tFileInputDelimited_37Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_29"
			globalMap.remove("tHash_Lookup_row33");

			try {

				/**
				 * [tFileInputDelimited_32 finally ] start
				 */

				currentComponent = "tFileInputDelimited_32";

				/**
				 * [tFileInputDelimited_32 finally ] stop
				 */

				/**
				 * [tMap_29 finally ] start
				 */

				currentComponent = "tMap_29";

				/**
				 * [tMap_29 finally ] stop
				 */

				/**
				 * [tDBOutput_29 finally ] start
				 */

				currentComponent = "tDBOutput_29";

				if (resourceMap.get("statementClosed_tDBOutput_29") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_29 = null;
					if ((pstmtToClose_tDBOutput_29 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_29")) != null) {
						pstmtToClose_tDBOutput_29.close();
					}
				}

				/**
				 * [tDBOutput_29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_32_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_3Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idprix_net;

		public int getIdprix_net() {
			return this.idprix_net;
		}

		public String date_maj;

		public String getDate_maj() {
			return this.date_maj;
		}

		public String date_debut;

		public String getDate_debut() {
			return this.date_debut;
		}

		public String date_fin;

		public String getDate_fin() {
			return this.date_fin;
		}

		public Boolean ismodifie;

		public Boolean getIsmodifie() {
			return this.ismodifie;
		}

		public Float remise_pourcentage;

		public Float getRemise_pourcentage() {
			return this.remise_pourcentage;
		}

		public Float prix;

		public Float getPrix() {
			return this.prix;
		}

		public Float prix_achat;

		public Float getPrix_achat() {
			return this.prix_achat;
		}

		public Float prix_variable;

		public Float getPrix_variable() {
			return this.prix_variable;
		}

		public Float tarif;

		public Float getTarif() {
			return this.tarif;
		}

		public String type_prix_net;

		public String getType_prix_net() {
			return this.type_prix_net;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idprix_net;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_3Struct other = (copyOfcopyOfcopyOfmain_3Struct) obj;

			if (this.idprix_net != other.idprix_net)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_3Struct other) {

			other.idprix_net = this.idprix_net;
			other.date_maj = this.date_maj;
			other.date_debut = this.date_debut;
			other.date_fin = this.date_fin;
			other.ismodifie = this.ismodifie;
			other.remise_pourcentage = this.remise_pourcentage;
			other.prix = this.prix;
			other.prix_achat = this.prix_achat;
			other.prix_variable = this.prix_variable;
			other.tarif = this.tarif;
			other.type_prix_net = this.type_prix_net;
			other.idarticle = this.idarticle;
			other.idcli = this.idcli;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_3Struct other) {

			other.idprix_net = this.idprix_net;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idprix_net = dis.readInt();

					this.date_maj = readString(dis);

					this.date_debut = readString(dis);

					this.date_fin = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ismodifie = null;
					} else {
						this.ismodifie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.remise_pourcentage = null;
					} else {
						this.remise_pourcentage = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix = null;
					} else {
						this.prix = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat = null;
					} else {
						this.prix_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_variable = null;
					} else {
						this.prix_variable = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tarif = null;
					} else {
						this.tarif = dis.readFloat();
					}

					this.type_prix_net = readString(dis);

					this.idarticle = readString(dis);

					this.idcli = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idprix_net);

				// String

				writeString(this.date_maj, dos);

				// String

				writeString(this.date_debut, dos);

				// String

				writeString(this.date_fin, dos);

				// Boolean

				if (this.ismodifie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ismodifie);
				}

				// Float

				if (this.remise_pourcentage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.remise_pourcentage);
				}

				// Float

				if (this.prix == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix);
				}

				// Float

				if (this.prix_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_achat);
				}

				// Float

				if (this.prix_variable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_variable);
				}

				// Float

				if (this.tarif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tarif);
				}

				// String

				writeString(this.type_prix_net, dos);

				// String

				writeString(this.idarticle, dos);

				// String

				writeString(this.idcli, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idprix_net=" + String.valueOf(idprix_net));
			sb.append(",date_maj=" + date_maj);
			sb.append(",date_debut=" + date_debut);
			sb.append(",date_fin=" + date_fin);
			sb.append(",ismodifie=" + String.valueOf(ismodifie));
			sb.append(",remise_pourcentage=" + String.valueOf(remise_pourcentage));
			sb.append(",prix=" + String.valueOf(prix));
			sb.append(",prix_achat=" + String.valueOf(prix_achat));
			sb.append(",prix_variable=" + String.valueOf(prix_variable));
			sb.append(",tarif=" + String.valueOf(tarif));
			sb.append(",type_prix_net=" + type_prix_net);
			sb.append(",idarticle=" + idarticle);
			sb.append(",idcli=" + idcli);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idprix_net, other.idprix_net);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PNCLIE;

		public String getPNCLIE() {
			return this.PNCLIE;
		}

		public String PNPIECE;

		public String getPNPIECE() {
			return this.PNPIECE;
		}

		public String PNREM;

		public String getPNREM() {
			return this.PNREM;
		}

		public String PNPRIX;

		public String getPNPRIX() {
			return this.PNPRIX;
		}

		public String PNMOD;

		public String getPNMOD() {
			return this.PNMOD;
		}

		public String PNDAT;

		public String getPNDAT() {
			return this.PNDAT;
		}

		public String PNDATDEB;

		public String getPNDATDEB() {
			return this.PNDATDEB;
		}

		public String PNDATFIN;

		public String getPNDATFIN() {
			return this.PNDATFIN;
		}

		public String PNPPA;

		public String getPNPPA() {
			return this.PNPPA;
		}

		public String PNFIL1;

		public String getPNFIL1() {
			return this.PNFIL1;
		}

		public String PNTYP;

		public String getPNTYP() {
			return this.PNTYP;
		}

		public String PNTAR;

		public String getPNTAR() {
			return this.PNTAR;
		}

		public String PNCODREM;

		public String getPNCODREM() {
			return this.PNCODREM;
		}

		public String PNTYPVAR;

		public String getPNTYPVAR() {
			return this.PNTYPVAR;
		}

		public String PNNETPORT;

		public String getPNNETPORT() {
			return this.PNNETPORT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PNCLIE = readString(dis);

					this.PNPIECE = readString(dis);

					this.PNREM = readString(dis);

					this.PNPRIX = readString(dis);

					this.PNMOD = readString(dis);

					this.PNDAT = readString(dis);

					this.PNDATDEB = readString(dis);

					this.PNDATFIN = readString(dis);

					this.PNPPA = readString(dis);

					this.PNFIL1 = readString(dis);

					this.PNTYP = readString(dis);

					this.PNTAR = readString(dis);

					this.PNCODREM = readString(dis);

					this.PNTYPVAR = readString(dis);

					this.PNNETPORT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PNCLIE, dos);

				// String

				writeString(this.PNPIECE, dos);

				// String

				writeString(this.PNREM, dos);

				// String

				writeString(this.PNPRIX, dos);

				// String

				writeString(this.PNMOD, dos);

				// String

				writeString(this.PNDAT, dos);

				// String

				writeString(this.PNDATDEB, dos);

				// String

				writeString(this.PNDATFIN, dos);

				// String

				writeString(this.PNPPA, dos);

				// String

				writeString(this.PNFIL1, dos);

				// String

				writeString(this.PNTYP, dos);

				// String

				writeString(this.PNTAR, dos);

				// String

				writeString(this.PNCODREM, dos);

				// String

				writeString(this.PNTYPVAR, dos);

				// String

				writeString(this.PNNETPORT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PNCLIE=" + PNCLIE);
			sb.append(",PNPIECE=" + PNPIECE);
			sb.append(",PNREM=" + PNREM);
			sb.append(",PNPRIX=" + PNPRIX);
			sb.append(",PNMOD=" + PNMOD);
			sb.append(",PNDAT=" + PNDAT);
			sb.append(",PNDATDEB=" + PNDATDEB);
			sb.append(",PNDATFIN=" + PNDATFIN);
			sb.append(",PNPPA=" + PNPPA);
			sb.append(",PNFIL1=" + PNFIL1);
			sb.append(",PNTYP=" + PNTYP);
			sb.append(",PNTAR=" + PNTAR);
			sb.append(",PNCODREM=" + PNCODREM);
			sb.append(",PNTYPVAR=" + PNTYPVAR);
			sb.append(",PNNETPORT=" + PNNETPORT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_37_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();
				copyOfcopyOfcopyOfmain_3Struct copyOfcopyOfcopyOfmain_3 = new copyOfcopyOfcopyOfmain_3Struct();

				/**
				 * [tDBOutput_30 begin ] start
				 */

				ok_Hash.put("tDBOutput_30", false);
				start_Hash.put("tDBOutput_30", System.currentTimeMillis());

				currentComponent = "tDBOutput_30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_3");
				}

				int tos_count_tDBOutput_30 = 0;

				String dbschema_tDBOutput_30 = null;
				dbschema_tDBOutput_30 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_30 = null;
				if (dbschema_tDBOutput_30 == null || dbschema_tDBOutput_30.trim().length() == 0) {
					tableName_tDBOutput_30 = ("prix_net");
				} else {
					tableName_tDBOutput_30 = dbschema_tDBOutput_30 + "\".\"" + ("prix_net");
				}

				int nb_line_tDBOutput_30 = 0;
				int nb_line_update_tDBOutput_30 = 0;
				int nb_line_inserted_tDBOutput_30 = 0;
				int nb_line_deleted_tDBOutput_30 = 0;
				int nb_line_rejected_tDBOutput_30 = 0;

				int deletedCount_tDBOutput_30 = 0;
				int updatedCount_tDBOutput_30 = 0;
				int insertedCount_tDBOutput_30 = 0;
				int rejectedCount_tDBOutput_30 = 0;

				boolean whetherReject_tDBOutput_30 = false;

				java.sql.Connection conn_tDBOutput_30 = null;
				String dbUser_tDBOutput_30 = null;

				conn_tDBOutput_30 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_30 = 10000;
				int batchSizeCounter_tDBOutput_30 = 0;

				int count_tDBOutput_30 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_30 = conn_tDBOutput_30.createStatement()) {
					stmtClear_tDBOutput_30.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_30 + "\"");
				}
				String insert_tDBOutput_30 = "INSERT INTO \"" + tableName_tDBOutput_30
						+ "\" (\"idprix_net\",\"date_maj\",\"date_debut\",\"date_fin\",\"ismodifie\",\"remise_pourcentage\",\"prix\",\"prix_achat\",\"prix_variable\",\"tarif\",\"type_prix_net\",\"idarticle\",\"idcli\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_30 = conn_tDBOutput_30.prepareStatement(insert_tDBOutput_30);
				resourceMap.put("pstmt_tDBOutput_30", pstmt_tDBOutput_30);

				/**
				 * [tDBOutput_30 begin ] stop
				 */

				/**
				 * [tMap_30 begin ] start
				 */

				ok_Hash.put("tMap_30", false);
				start_Hash.put("tMap_30", System.currentTimeMillis());

				currentComponent = "tMap_30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tMap_30 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_30__Struct {
				}
				Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_3Struct copyOfcopyOfcopyOfmain_3_tmp = new copyOfcopyOfcopyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_30 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_37 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_37", false);
				start_Hash.put("tFileInputDelimited_37", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_37";

				int tos_count_tFileInputDelimited_37 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_37 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_37 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_37 = null;
				int limit_tFileInputDelimited_37 = -1;
				try {

					Object filename_tFileInputDelimited_37 = "C:/DEV/Data/Base Montauban/PrixNet.csv";
					if (filename_tFileInputDelimited_37 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_37 = 0, random_value_tFileInputDelimited_37 = -1;
						if (footer_value_tFileInputDelimited_37 > 0 || random_value_tFileInputDelimited_37 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_37 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/PrixNet.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_37, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_37 != null && fid_tFileInputDelimited_37.nextRecord()) {
						rowstate_tFileInputDelimited_37.reset();

						row32 = null;

						boolean whetherReject_tFileInputDelimited_37 = false;
						row32 = new row32Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_37 = 0;

							columnIndexWithD_tFileInputDelimited_37 = 0;

							row32.PNCLIE = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 1;

							row32.PNPIECE = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 2;

							row32.PNREM = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 3;

							row32.PNPRIX = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 4;

							row32.PNMOD = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 5;

							row32.PNDAT = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 6;

							row32.PNDATDEB = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 7;

							row32.PNDATFIN = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 8;

							row32.PNPPA = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 9;

							row32.PNFIL1 = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 10;

							row32.PNTYP = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 11;

							row32.PNTAR = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 12;

							row32.PNCODREM = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 13;

							row32.PNTYPVAR = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							columnIndexWithD_tFileInputDelimited_37 = 14;

							row32.PNNETPORT = fid_tFileInputDelimited_37.get(columnIndexWithD_tFileInputDelimited_37);

							if (rowstate_tFileInputDelimited_37.getException() != null) {
								throw rowstate_tFileInputDelimited_37.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_37 = true;

							System.err.println(e.getMessage());
							row32 = null;

						}

						/**
						 * [tFileInputDelimited_37 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_37 main ] start
						 */

						currentComponent = "tFileInputDelimited_37";

						tos_count_tFileInputDelimited_37++;

						/**
						 * [tFileInputDelimited_37 main ] stop
						 */

						/**
						 * [tFileInputDelimited_37 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_37";

						/**
						 * [tFileInputDelimited_37 process_data_begin ] stop
						 */
// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tMap_30 main ] start
							 */

							currentComponent = "tMap_30";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row32");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_30 = false;
							boolean mainRowRejected_tMap_30 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_3 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_3'
								copyOfcopyOfcopyOfmain_3_tmp.idprix_net = Numeric.sequence("prixnet", 1, 1);
								copyOfcopyOfcopyOfmain_3_tmp.date_maj = row32.PNDAT;
								copyOfcopyOfcopyOfmain_3_tmp.date_debut = row32.PNDATDEB;
								copyOfcopyOfcopyOfmain_3_tmp.date_fin = row32.PNDATFIN;
								copyOfcopyOfcopyOfmain_3_tmp.ismodifie = row32.PNMOD.equals("*") ? true : false;
								copyOfcopyOfcopyOfmain_3_tmp.remise_pourcentage = Float.parseFloat(row32.PNREM);
								copyOfcopyOfcopyOfmain_3_tmp.prix = Float.parseFloat(row32.PNPRIX);
								copyOfcopyOfcopyOfmain_3_tmp.prix_achat = Float.parseFloat(row32.PNPPA);
								copyOfcopyOfcopyOfmain_3_tmp.prix_variable = Float.parseFloat(row32.PNTYPVAR);
								copyOfcopyOfcopyOfmain_3_tmp.tarif = Float.parseFloat(row32.PNTAR);
								copyOfcopyOfcopyOfmain_3_tmp.type_prix_net = row32.PNTYP;
								copyOfcopyOfcopyOfmain_3_tmp.idarticle = row32.PNPIECE.equals("602397") ? null
										: row32.PNPIECE;
								copyOfcopyOfcopyOfmain_3_tmp.idcli = row32.PNCLIE;
								copyOfcopyOfcopyOfmain_3 = copyOfcopyOfcopyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_30 = false;

							tos_count_tMap_30++;

							/**
							 * [tMap_30 main ] stop
							 */

							/**
							 * [tMap_30 process_data_begin ] start
							 */

							currentComponent = "tMap_30";

							/**
							 * [tMap_30 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_3"
							if (copyOfcopyOfcopyOfmain_3 != null) {

								/**
								 * [tDBOutput_30 main ] start
								 */

								currentComponent = "tDBOutput_30";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_3");
								}

								whetherReject_tDBOutput_30 = false;
								pstmt_tDBOutput_30.setInt(1, copyOfcopyOfcopyOfmain_3.idprix_net);

								if (copyOfcopyOfcopyOfmain_3.date_maj == null) {
									pstmt_tDBOutput_30.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(2, copyOfcopyOfcopyOfmain_3.date_maj);
								}

								if (copyOfcopyOfcopyOfmain_3.date_debut == null) {
									pstmt_tDBOutput_30.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(3, copyOfcopyOfcopyOfmain_3.date_debut);
								}

								if (copyOfcopyOfcopyOfmain_3.date_fin == null) {
									pstmt_tDBOutput_30.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(4, copyOfcopyOfcopyOfmain_3.date_fin);
								}

								if (copyOfcopyOfcopyOfmain_3.ismodifie == null) {
									pstmt_tDBOutput_30.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_30.setBoolean(5, copyOfcopyOfcopyOfmain_3.ismodifie);
								}

								if (copyOfcopyOfcopyOfmain_3.remise_pourcentage == null) {
									pstmt_tDBOutput_30.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_30.setFloat(6, copyOfcopyOfcopyOfmain_3.remise_pourcentage);
								}

								if (copyOfcopyOfcopyOfmain_3.prix == null) {
									pstmt_tDBOutput_30.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_30.setFloat(7, copyOfcopyOfcopyOfmain_3.prix);
								}

								if (copyOfcopyOfcopyOfmain_3.prix_achat == null) {
									pstmt_tDBOutput_30.setNull(8, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_30.setFloat(8, copyOfcopyOfcopyOfmain_3.prix_achat);
								}

								if (copyOfcopyOfcopyOfmain_3.prix_variable == null) {
									pstmt_tDBOutput_30.setNull(9, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_30.setFloat(9, copyOfcopyOfcopyOfmain_3.prix_variable);
								}

								if (copyOfcopyOfcopyOfmain_3.tarif == null) {
									pstmt_tDBOutput_30.setNull(10, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_30.setFloat(10, copyOfcopyOfcopyOfmain_3.tarif);
								}

								if (copyOfcopyOfcopyOfmain_3.type_prix_net == null) {
									pstmt_tDBOutput_30.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(11, copyOfcopyOfcopyOfmain_3.type_prix_net);
								}

								if (copyOfcopyOfcopyOfmain_3.idarticle == null) {
									pstmt_tDBOutput_30.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(12, copyOfcopyOfcopyOfmain_3.idarticle);
								}

								if (copyOfcopyOfcopyOfmain_3.idcli == null) {
									pstmt_tDBOutput_30.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_30.setString(13, copyOfcopyOfcopyOfmain_3.idcli);
								}

								pstmt_tDBOutput_30.addBatch();
								nb_line_tDBOutput_30++;

								batchSizeCounter_tDBOutput_30++;

								if ((batchSize_tDBOutput_30 > 0)
										&& (batchSize_tDBOutput_30 <= batchSizeCounter_tDBOutput_30)) {
									try {
										int countSum_tDBOutput_30 = 0;

										for (int countEach_tDBOutput_30 : pstmt_tDBOutput_30.executeBatch()) {
											countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0
													: countEach_tDBOutput_30);
										}

										insertedCount_tDBOutput_30 += countSum_tDBOutput_30;

										batchSizeCounter_tDBOutput_30 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_30) {
										java.sql.SQLException ne_tDBOutput_30 = e_tDBOutput_30.getNextException(),
												sqle_tDBOutput_30 = null;
										String errormessage_tDBOutput_30;
										if (ne_tDBOutput_30 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_30 = new java.sql.SQLException(
													e_tDBOutput_30.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_30.getMessage(),
													ne_tDBOutput_30.getSQLState(), ne_tDBOutput_30.getErrorCode(),
													ne_tDBOutput_30);
											errormessage_tDBOutput_30 = sqle_tDBOutput_30.getMessage();
										} else {
											errormessage_tDBOutput_30 = e_tDBOutput_30.getMessage();
										}

										int countSum_tDBOutput_30 = 0;
										for (int countEach_tDBOutput_30 : e_tDBOutput_30.getUpdateCounts()) {
											countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0
													: countEach_tDBOutput_30);
										}

										insertedCount_tDBOutput_30 += countSum_tDBOutput_30;

										System.err.println(errormessage_tDBOutput_30);

									}
								}

								tos_count_tDBOutput_30++;

								/**
								 * [tDBOutput_30 main ] stop
								 */

								/**
								 * [tDBOutput_30 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_30";

								/**
								 * [tDBOutput_30 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_30 process_data_end ] start
								 */

								currentComponent = "tDBOutput_30";

								/**
								 * [tDBOutput_30 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_3"

							/**
							 * [tMap_30 process_data_end ] start
							 */

							currentComponent = "tMap_30";

							/**
							 * [tMap_30 process_data_end ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputDelimited_37 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_37";

						/**
						 * [tFileInputDelimited_37 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_37 end ] start
						 */

						currentComponent = "tFileInputDelimited_37";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/PrixNet.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_37 != null) {
							fid_tFileInputDelimited_37.close();
						}
					}
					if (fid_tFileInputDelimited_37 != null) {
						globalMap.put("tFileInputDelimited_37_NB_LINE", fid_tFileInputDelimited_37.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_37", true);
				end_Hash.put("tFileInputDelimited_37", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_37 end ] stop
				 */

				/**
				 * [tMap_30 end ] start
				 */

				currentComponent = "tMap_30";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tMap_30", true);
				end_Hash.put("tMap_30", System.currentTimeMillis());

				/**
				 * [tMap_30 end ] stop
				 */

				/**
				 * [tDBOutput_30 end ] start
				 */

				currentComponent = "tDBOutput_30";

				try {
					int countSum_tDBOutput_30 = 0;
					if (pstmt_tDBOutput_30 != null && batchSizeCounter_tDBOutput_30 > 0) {

						for (int countEach_tDBOutput_30 : pstmt_tDBOutput_30.executeBatch()) {
							countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
						}

					}

					insertedCount_tDBOutput_30 += countSum_tDBOutput_30;

				} catch (java.sql.BatchUpdateException e_tDBOutput_30) {
					java.sql.SQLException ne_tDBOutput_30 = e_tDBOutput_30.getNextException(), sqle_tDBOutput_30 = null;
					String errormessage_tDBOutput_30;
					if (ne_tDBOutput_30 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_30 = new java.sql.SQLException(
								e_tDBOutput_30.getMessage() + "\ncaused by: " + ne_tDBOutput_30.getMessage(),
								ne_tDBOutput_30.getSQLState(), ne_tDBOutput_30.getErrorCode(), ne_tDBOutput_30);
						errormessage_tDBOutput_30 = sqle_tDBOutput_30.getMessage();
					} else {
						errormessage_tDBOutput_30 = e_tDBOutput_30.getMessage();
					}

					int countSum_tDBOutput_30 = 0;
					for (int countEach_tDBOutput_30 : e_tDBOutput_30.getUpdateCounts()) {
						countSum_tDBOutput_30 += (countEach_tDBOutput_30 < 0 ? 0 : countEach_tDBOutput_30);
					}

					insertedCount_tDBOutput_30 += countSum_tDBOutput_30;

					System.err.println(errormessage_tDBOutput_30);

				}

				if (pstmt_tDBOutput_30 != null) {

					pstmt_tDBOutput_30.close();
					resourceMap.remove("pstmt_tDBOutput_30");
				}
				resourceMap.put("statementClosed_tDBOutput_30", true);

				nb_line_deleted_tDBOutput_30 = nb_line_deleted_tDBOutput_30 + deletedCount_tDBOutput_30;
				nb_line_update_tDBOutput_30 = nb_line_update_tDBOutput_30 + updatedCount_tDBOutput_30;
				nb_line_inserted_tDBOutput_30 = nb_line_inserted_tDBOutput_30 + insertedCount_tDBOutput_30;
				nb_line_rejected_tDBOutput_30 = nb_line_rejected_tDBOutput_30 + rejectedCount_tDBOutput_30;

				globalMap.put("tDBOutput_30_NB_LINE", nb_line_tDBOutput_30);
				globalMap.put("tDBOutput_30_NB_LINE_UPDATED", nb_line_update_tDBOutput_30);
				globalMap.put("tDBOutput_30_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_30);
				globalMap.put("tDBOutput_30_NB_LINE_DELETED", nb_line_deleted_tDBOutput_30);
				globalMap.put("tDBOutput_30_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_30);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_3");
				}

				ok_Hash.put("tDBOutput_30", true);
				end_Hash.put("tDBOutput_30", System.currentTimeMillis());

				/**
				 * [tDBOutput_30 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_37:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk34", 0, "ok");
			}

			tFileInputDelimited_39Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_37 finally ] start
				 */

				currentComponent = "tFileInputDelimited_37";

				/**
				 * [tFileInputDelimited_37 finally ] stop
				 */

				/**
				 * [tMap_30 finally ] start
				 */

				currentComponent = "tMap_30";

				/**
				 * [tMap_30 finally ] stop
				 */

				/**
				 * [tDBOutput_30 finally ] start
				 */

				currentComponent = "tDBOutput_30";

				if (resourceMap.get("statementClosed_tDBOutput_30") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_30 = null;
					if ((pstmtToClose_tDBOutput_30 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_30")) != null) {
						pstmtToClose_tDBOutput_30.close();
					}
				}

				/**
				 * [tDBOutput_30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_37_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_3_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_3_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idconsommation;

		public int getIdconsommation() {
			return this.idconsommation;
		}

		public Float annee_n;

		public Float getAnnee_n() {
			return this.annee_n;
		}

		public Float annee_n_1;

		public Float getAnnee_n_1() {
			return this.annee_n_1;
		}

		public Float annee_n_2;

		public Float getAnnee_n_2() {
			return this.annee_n_2;
		}

		public Float mois;

		public Float getMois() {
			return this.mois;
		}

		public Float mois__1;

		public Float getMois__1() {
			return this.mois__1;
		}

		public Float mois__10;

		public Float getMois__10() {
			return this.mois__10;
		}

		public Float mois__11;

		public Float getMois__11() {
			return this.mois__11;
		}

		public Float mois__12;

		public Float getMois__12() {
			return this.mois__12;
		}

		public Float mois__2;

		public Float getMois__2() {
			return this.mois__2;
		}

		public Float mois__3;

		public Float getMois__3() {
			return this.mois__3;
		}

		public Float mois__4;

		public Float getMois__4() {
			return this.mois__4;
		}

		public Float mois__5;

		public Float getMois__5() {
			return this.mois__5;
		}

		public Float mois__6;

		public Float getMois__6() {
			return this.mois__6;
		}

		public Float mois__7;

		public Float getMois__7() {
			return this.mois__7;
		}

		public Float mois__8;

		public Float getMois__8() {
			return this.mois__8;
		}

		public Float mois__9;

		public Float getMois__9() {
			return this.mois__9;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idconsommation;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_3_2Struct other = (copyOfcopyOfmain_3_2Struct) obj;

			if (this.idconsommation != other.idconsommation)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_3_2Struct other) {

			other.idconsommation = this.idconsommation;
			other.annee_n = this.annee_n;
			other.annee_n_1 = this.annee_n_1;
			other.annee_n_2 = this.annee_n_2;
			other.mois = this.mois;
			other.mois__1 = this.mois__1;
			other.mois__10 = this.mois__10;
			other.mois__11 = this.mois__11;
			other.mois__12 = this.mois__12;
			other.mois__2 = this.mois__2;
			other.mois__3 = this.mois__3;
			other.mois__4 = this.mois__4;
			other.mois__5 = this.mois__5;
			other.mois__6 = this.mois__6;
			other.mois__7 = this.mois__7;
			other.mois__8 = this.mois__8;
			other.mois__9 = this.mois__9;
			other.idarticle = this.idarticle;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_3_2Struct other) {

			other.idconsommation = this.idconsommation;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idconsommation = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.annee_n = null;
					} else {
						this.annee_n = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annee_n_1 = null;
					} else {
						this.annee_n_1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annee_n_2 = null;
					} else {
						this.annee_n_2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois = null;
					} else {
						this.mois = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__1 = null;
					} else {
						this.mois__1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__10 = null;
					} else {
						this.mois__10 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__11 = null;
					} else {
						this.mois__11 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__12 = null;
					} else {
						this.mois__12 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__2 = null;
					} else {
						this.mois__2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__3 = null;
					} else {
						this.mois__3 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__4 = null;
					} else {
						this.mois__4 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__5 = null;
					} else {
						this.mois__5 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__6 = null;
					} else {
						this.mois__6 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__7 = null;
					} else {
						this.mois__7 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__8 = null;
					} else {
						this.mois__8 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mois__9 = null;
					} else {
						this.mois__9 = dis.readFloat();
					}

					this.idarticle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idconsommation);

				// Float

				if (this.annee_n == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annee_n);
				}

				// Float

				if (this.annee_n_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annee_n_1);
				}

				// Float

				if (this.annee_n_2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annee_n_2);
				}

				// Float

				if (this.mois == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois);
				}

				// Float

				if (this.mois__1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__1);
				}

				// Float

				if (this.mois__10 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__10);
				}

				// Float

				if (this.mois__11 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__11);
				}

				// Float

				if (this.mois__12 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__12);
				}

				// Float

				if (this.mois__2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__2);
				}

				// Float

				if (this.mois__3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__3);
				}

				// Float

				if (this.mois__4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__4);
				}

				// Float

				if (this.mois__5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__5);
				}

				// Float

				if (this.mois__6 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__6);
				}

				// Float

				if (this.mois__7 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__7);
				}

				// Float

				if (this.mois__8 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__8);
				}

				// Float

				if (this.mois__9 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.mois__9);
				}

				// String

				writeString(this.idarticle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idconsommation=" + String.valueOf(idconsommation));
			sb.append(",annee_n=" + String.valueOf(annee_n));
			sb.append(",annee_n_1=" + String.valueOf(annee_n_1));
			sb.append(",annee_n_2=" + String.valueOf(annee_n_2));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",mois__1=" + String.valueOf(mois__1));
			sb.append(",mois__10=" + String.valueOf(mois__10));
			sb.append(",mois__11=" + String.valueOf(mois__11));
			sb.append(",mois__12=" + String.valueOf(mois__12));
			sb.append(",mois__2=" + String.valueOf(mois__2));
			sb.append(",mois__3=" + String.valueOf(mois__3));
			sb.append(",mois__4=" + String.valueOf(mois__4));
			sb.append(",mois__5=" + String.valueOf(mois__5));
			sb.append(",mois__6=" + String.valueOf(mois__6));
			sb.append(",mois__7=" + String.valueOf(mois__7));
			sb.append(",mois__8=" + String.valueOf(mois__8));
			sb.append(",mois__9=" + String.valueOf(mois__9));
			sb.append(",idarticle=" + idarticle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_3_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idconsommation, other.idconsommation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDES1;

		public String getPDES1() {
			return this.PDES1;
		}

		public String PDES2;

		public String getPDES2() {
			return this.PDES2;
		}

		public String PDES3;

		public String getPDES3() {
			return this.PDES3;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDES1 = readString(dis);

					this.PDES2 = readString(dis);

					this.PDES3 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDES1, dos);

				// String

				writeString(this.PDES2, dos);

				// String

				writeString(this.PDES3, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDES1=" + PDES1);
			sb.append(",PDES2=" + PDES2);
			sb.append(",PDES3=" + PDES3);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_39_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();
				copyOfcopyOfmain_3_2Struct copyOfcopyOfmain_3_2 = new copyOfcopyOfmain_3_2Struct();

				/**
				 * [tDBOutput_31 begin ] start
				 */

				ok_Hash.put("tDBOutput_31", false);
				start_Hash.put("tDBOutput_31", System.currentTimeMillis());

				currentComponent = "tDBOutput_31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_3_2");
				}

				int tos_count_tDBOutput_31 = 0;

				String dbschema_tDBOutput_31 = null;
				dbschema_tDBOutput_31 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_31 = null;
				if (dbschema_tDBOutput_31 == null || dbschema_tDBOutput_31.trim().length() == 0) {
					tableName_tDBOutput_31 = ("consommation");
				} else {
					tableName_tDBOutput_31 = dbschema_tDBOutput_31 + "\".\"" + ("consommation");
				}

				int nb_line_tDBOutput_31 = 0;
				int nb_line_update_tDBOutput_31 = 0;
				int nb_line_inserted_tDBOutput_31 = 0;
				int nb_line_deleted_tDBOutput_31 = 0;
				int nb_line_rejected_tDBOutput_31 = 0;

				int deletedCount_tDBOutput_31 = 0;
				int updatedCount_tDBOutput_31 = 0;
				int insertedCount_tDBOutput_31 = 0;
				int rejectedCount_tDBOutput_31 = 0;

				boolean whetherReject_tDBOutput_31 = false;

				java.sql.Connection conn_tDBOutput_31 = null;
				String dbUser_tDBOutput_31 = null;

				conn_tDBOutput_31 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_31 = 100000;
				int batchSizeCounter_tDBOutput_31 = 0;

				int count_tDBOutput_31 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_31 = conn_tDBOutput_31.createStatement()) {
					stmtClear_tDBOutput_31.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_31 + "\"");
				}
				String insert_tDBOutput_31 = "INSERT INTO \"" + tableName_tDBOutput_31
						+ "\" (\"idconsommation\",\"annee_n\",\"annee_n_1\",\"annee_n_2\",\"mois\",\"mois__1\",\"mois__10\",\"mois__11\",\"mois__12\",\"mois__2\",\"mois__3\",\"mois__4\",\"mois__5\",\"mois__6\",\"mois__7\",\"mois__8\",\"mois__9\",\"idarticle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_31 = conn_tDBOutput_31.prepareStatement(insert_tDBOutput_31);
				resourceMap.put("pstmt_tDBOutput_31", pstmt_tDBOutput_31);

				/**
				 * [tDBOutput_31 begin ] stop
				 */

				/**
				 * [tMap_35 begin ] start
				 */

				ok_Hash.put("tMap_35", false);
				start_Hash.put("tMap_35", System.currentTimeMillis());

				currentComponent = "tMap_35";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row34");
				}

				int tos_count_tMap_35 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_35__Struct {
				}
				Var__tMap_35__Struct Var__tMap_35 = new Var__tMap_35__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_3_2Struct copyOfcopyOfmain_3_2_tmp = new copyOfcopyOfmain_3_2Struct();
// ###############################

				/**
				 * [tMap_35 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_39 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_39", false);
				start_Hash.put("tFileInputDelimited_39", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_39";

				int tos_count_tFileInputDelimited_39 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_39 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_39 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_39,
							row34Struct row34) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_39 = 0;

						columnIndexWithD_tFileInputDelimited_39 = 0;

						row34.PREF = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 1;

						row34.PDES1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 2;

						row34.PDES2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 3;

						row34.PDES3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 4;

						row34.PPRIX = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 5;

						row34.PCTVA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 6;

						row34.PCTYV = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 7;

						row34.PCPN = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 8;

						row34.PPA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 9;

						row34.PQTE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 10;

						row34.PFORM01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 11;

						row34.PFORM02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 12;

						row34.PNBCAR = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 13;

						row34.PVERT = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 14;

						row34.PEMP2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 15;

						row34.PLIEU2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 16;

						row34.PREMIMAX = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 17;

						row34.FILLER2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 18;

						row34.PMOUV = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 19;

						row34.PTENU = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 20;

						row34.PINCRE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 21;

						row34.PPROMPA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 22;

						row34.PACHAT = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 23;

						row34.PARRCDT1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 24;

						row34.PARRCDT2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 25;

						row34.PECOTAXE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 26;

						row34.PPAQUET = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 27;

						row34.PEMBAL = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 28;

						row34.PGRAMA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 29;

						row34.PDATCRE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 30;

						row34.PDATPRIX = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 31;

						row34.PDATPA1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 32;

						row34.PPA1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 33;

						row34.PPV1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 34;

						row34.PPRIXR = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 35;

						row34.PPRIXRV1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 36;

						row34.PPRIXRV2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 37;

						row34.PPRIXRV3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 38;

						row34.PPRIREV1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 39;

						row34.PPRIREV2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 40;

						row34.PPRIREV3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 41;

						row34.PDATPV1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 42;

						row34.PMPA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 43;

						row34.PETIQ = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 44;

						row34.PFOUR = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 45;

						row34.PPRITTC = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 46;

						row34.PIMOD = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 47;

						row34.PPROMREM = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 48;

						row34.PUV = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 49;

						row34.PUA = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 50;

						row34.PDELAI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 51;

						row34.PMINI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 52;

						row34.PMAXI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 53;

						row34.PCDE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 54;

						row34.PEMP = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 55;

						row34.PPRI1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 56;

						row34.PPRI2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 57;

						row34.PPRI3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 58;

						row34.PPRI4 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 59;

						row34.PPRI5 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 60;

						row34.PPRI6 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 61;

						row34.PREMI1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 62;

						row34.PREMI2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 63;

						row34.PREMI3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 64;

						row34.PREMI4 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 65;

						row34.PREMI5 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 66;

						row34.PREMI6 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 67;

						row34.PQUANT1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 68;

						row34.PQUANT2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 69;

						row34.PQUANT3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 70;

						row34.PQUANT4 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 71;

						row34.PQUANT5 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 72;

						row34.PQUANT6 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 73;

						row34.PEDAT = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 74;

						row34.PSDAT = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 75;

						row34.PRESV = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 76;

						row34.PREFOU = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 77;

						row34.PGAMEC = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 78;

						row34.PGAMER = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 79;

						row34.PGAMEN = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 80;

						row34.PTPF = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 81;

						row34.PSOMMEIL = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 82;

						row34.PINV = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 83;

						row34.PMAC = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 84;

						row34.PREJ = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 85;

						row34.PMOI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 86;

						row34.P1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 87;

						row34.P2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 88;

						row34.P3 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 89;

						row34.P4 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 90;

						row34.P5 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 91;

						row34.P6 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 92;

						row34.P7 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 93;

						row34.P8 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 94;

						row34.P9 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 95;

						row34.P10 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 96;

						row34.P11 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 97;

						row34.P12 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 98;

						row34.PAN = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 99;

						row34.PAN1 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_39,
							row34Struct row34) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_39 = 0;

						columnIndexWithD_tFileInputDelimited_39 = 100;

						row34.PAN2 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 101;

						row34.PPROM = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 102;

						row34.PPROMD = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 103;

						row34.PCONDI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 104;

						row34.PRESTE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 105;

						row34.PTITR = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 106;

						row34.PPARAG = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 107;

						row34.PPOID = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 108;

						row34.PKLE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 109;

						row34.PLIEN = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 110;

						row34.PSFAM = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 111;

						row34.PREF01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 112;

						row34.PREF02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 113;

						row34.PREF03 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 114;

						row34.PTYPE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 115;

						row34.PLIEU = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 116;

						row34.PCATAL = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 117;

						row34.PUV01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 118;

						row34.PCONDI01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 119;

						row34.PUV02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 120;

						row34.PCONDI02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 121;

						row34.PPROMDEB = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 122;

						row34.PREMFOU = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 123;

						row34.PQTE01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 124;

						row34.PQTE02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 125;

						row34.PRX01 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 126;

						row34.PRX02 = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 127;

						row34.PCUBAG = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 128;

						row34.PREVPOI = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 129;

						row34.PREVCUB = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 130;

						row34.PREVFAP = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 131;

						row34.PINTERNET = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 132;

						row34.PFIDEL = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

						columnIndexWithD_tFileInputDelimited_39 = 133;

						row34.PCOMMANDE = fid_tFileInputDelimited_39.get(columnIndexWithD_tFileInputDelimited_39);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_39,
							row34Struct row34) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_39, row34);

						valueToConn_1(fid_tFileInputDelimited_39, row34);

					}

				}
				RowHelper_tFileInputDelimited_39 rowHelper_tFileInputDelimited_39 = new RowHelper_tFileInputDelimited_39();

				int nb_line_tFileInputDelimited_39 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_39 = null;
				int limit_tFileInputDelimited_39 = -1;
				try {

					Object filename_tFileInputDelimited_39 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_39 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_39 = 0, random_value_tFileInputDelimited_39 = -1;
						if (footer_value_tFileInputDelimited_39 > 0 || random_value_tFileInputDelimited_39 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_39 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 2, 0,
								limit_tFileInputDelimited_39, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_39 != null && fid_tFileInputDelimited_39.nextRecord()) {
						rowstate_tFileInputDelimited_39.reset();

						row34 = null;

						boolean whetherReject_tFileInputDelimited_39 = false;
						row34 = new row34Struct();
						try {

							rowHelper_tFileInputDelimited_39.valueToConn(fid_tFileInputDelimited_39, row34);

							if (rowstate_tFileInputDelimited_39.getException() != null) {
								throw rowstate_tFileInputDelimited_39.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_39 = true;

							System.err.println(e.getMessage());
							row34 = null;

						}

						/**
						 * [tFileInputDelimited_39 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_39 main ] start
						 */

						currentComponent = "tFileInputDelimited_39";

						tos_count_tFileInputDelimited_39++;

						/**
						 * [tFileInputDelimited_39 main ] stop
						 */

						/**
						 * [tFileInputDelimited_39 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_39";

						/**
						 * [tFileInputDelimited_39 process_data_begin ] stop
						 */
// Start of branch "row34"
						if (row34 != null) {

							/**
							 * [tMap_35 main ] start
							 */

							currentComponent = "tMap_35";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row34");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_35 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_35 = false;
							boolean mainRowRejected_tMap_35 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_35__Struct Var = Var__tMap_35;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_3_2 = null;

// # Output table : 'copyOfcopyOfmain_3_2'
								copyOfcopyOfmain_3_2_tmp.idconsommation = Numeric.sequence("consoArt", 1, 1);
								copyOfcopyOfmain_3_2_tmp.annee_n = Float.parseFloat(row34.PAN);
								copyOfcopyOfmain_3_2_tmp.annee_n_1 = Float.parseFloat(row34.PAN1);
								copyOfcopyOfmain_3_2_tmp.annee_n_2 = Float.parseFloat(row34.PAN2);
								copyOfcopyOfmain_3_2_tmp.mois = Float.parseFloat(row34.PMOI);
								copyOfcopyOfmain_3_2_tmp.mois__1 = Float.parseFloat(row34.P1);
								copyOfcopyOfmain_3_2_tmp.mois__10 = Float.parseFloat(row34.P10);
								copyOfcopyOfmain_3_2_tmp.mois__11 = Float.parseFloat(row34.P11);
								copyOfcopyOfmain_3_2_tmp.mois__12 = Float.parseFloat(row34.P12);
								copyOfcopyOfmain_3_2_tmp.mois__2 = Float.parseFloat(row34.P2);
								copyOfcopyOfmain_3_2_tmp.mois__3 = Float.parseFloat(row34.P3);
								copyOfcopyOfmain_3_2_tmp.mois__4 = Float.parseFloat(row34.P4);
								copyOfcopyOfmain_3_2_tmp.mois__5 = Float.parseFloat(row34.P5);
								copyOfcopyOfmain_3_2_tmp.mois__6 = Float.parseFloat(row34.P6);
								copyOfcopyOfmain_3_2_tmp.mois__7 = Float.parseFloat(row34.P7);
								copyOfcopyOfmain_3_2_tmp.mois__8 = Float.parseFloat(row34.P8);
								copyOfcopyOfmain_3_2_tmp.mois__9 = Float.parseFloat(row34.P9);
								copyOfcopyOfmain_3_2_tmp.idarticle = row34.PREF;
								copyOfcopyOfmain_3_2 = copyOfcopyOfmain_3_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_35 = false;

							tos_count_tMap_35++;

							/**
							 * [tMap_35 main ] stop
							 */

							/**
							 * [tMap_35 process_data_begin ] start
							 */

							currentComponent = "tMap_35";

							/**
							 * [tMap_35 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_3_2"
							if (copyOfcopyOfmain_3_2 != null) {

								/**
								 * [tDBOutput_31 main ] start
								 */

								currentComponent = "tDBOutput_31";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_3_2");
								}

								whetherReject_tDBOutput_31 = false;
								pstmt_tDBOutput_31.setInt(1, copyOfcopyOfmain_3_2.idconsommation);

								if (copyOfcopyOfmain_3_2.annee_n == null) {
									pstmt_tDBOutput_31.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(2, copyOfcopyOfmain_3_2.annee_n);
								}

								if (copyOfcopyOfmain_3_2.annee_n_1 == null) {
									pstmt_tDBOutput_31.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(3, copyOfcopyOfmain_3_2.annee_n_1);
								}

								if (copyOfcopyOfmain_3_2.annee_n_2 == null) {
									pstmt_tDBOutput_31.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(4, copyOfcopyOfmain_3_2.annee_n_2);
								}

								if (copyOfcopyOfmain_3_2.mois == null) {
									pstmt_tDBOutput_31.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(5, copyOfcopyOfmain_3_2.mois);
								}

								if (copyOfcopyOfmain_3_2.mois__1 == null) {
									pstmt_tDBOutput_31.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(6, copyOfcopyOfmain_3_2.mois__1);
								}

								if (copyOfcopyOfmain_3_2.mois__10 == null) {
									pstmt_tDBOutput_31.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(7, copyOfcopyOfmain_3_2.mois__10);
								}

								if (copyOfcopyOfmain_3_2.mois__11 == null) {
									pstmt_tDBOutput_31.setNull(8, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(8, copyOfcopyOfmain_3_2.mois__11);
								}

								if (copyOfcopyOfmain_3_2.mois__12 == null) {
									pstmt_tDBOutput_31.setNull(9, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(9, copyOfcopyOfmain_3_2.mois__12);
								}

								if (copyOfcopyOfmain_3_2.mois__2 == null) {
									pstmt_tDBOutput_31.setNull(10, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(10, copyOfcopyOfmain_3_2.mois__2);
								}

								if (copyOfcopyOfmain_3_2.mois__3 == null) {
									pstmt_tDBOutput_31.setNull(11, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(11, copyOfcopyOfmain_3_2.mois__3);
								}

								if (copyOfcopyOfmain_3_2.mois__4 == null) {
									pstmt_tDBOutput_31.setNull(12, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(12, copyOfcopyOfmain_3_2.mois__4);
								}

								if (copyOfcopyOfmain_3_2.mois__5 == null) {
									pstmt_tDBOutput_31.setNull(13, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(13, copyOfcopyOfmain_3_2.mois__5);
								}

								if (copyOfcopyOfmain_3_2.mois__6 == null) {
									pstmt_tDBOutput_31.setNull(14, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(14, copyOfcopyOfmain_3_2.mois__6);
								}

								if (copyOfcopyOfmain_3_2.mois__7 == null) {
									pstmt_tDBOutput_31.setNull(15, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(15, copyOfcopyOfmain_3_2.mois__7);
								}

								if (copyOfcopyOfmain_3_2.mois__8 == null) {
									pstmt_tDBOutput_31.setNull(16, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(16, copyOfcopyOfmain_3_2.mois__8);
								}

								if (copyOfcopyOfmain_3_2.mois__9 == null) {
									pstmt_tDBOutput_31.setNull(17, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_31.setFloat(17, copyOfcopyOfmain_3_2.mois__9);
								}

								if (copyOfcopyOfmain_3_2.idarticle == null) {
									pstmt_tDBOutput_31.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_31.setString(18, copyOfcopyOfmain_3_2.idarticle);
								}

								pstmt_tDBOutput_31.addBatch();
								nb_line_tDBOutput_31++;

								batchSizeCounter_tDBOutput_31++;

								if ((batchSize_tDBOutput_31 > 0)
										&& (batchSize_tDBOutput_31 <= batchSizeCounter_tDBOutput_31)) {
									try {
										int countSum_tDBOutput_31 = 0;

										for (int countEach_tDBOutput_31 : pstmt_tDBOutput_31.executeBatch()) {
											countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0
													: countEach_tDBOutput_31);
										}

										insertedCount_tDBOutput_31 += countSum_tDBOutput_31;

										batchSizeCounter_tDBOutput_31 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_31) {
										java.sql.SQLException ne_tDBOutput_31 = e_tDBOutput_31.getNextException(),
												sqle_tDBOutput_31 = null;
										String errormessage_tDBOutput_31;
										if (ne_tDBOutput_31 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_31 = new java.sql.SQLException(
													e_tDBOutput_31.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_31.getMessage(),
													ne_tDBOutput_31.getSQLState(), ne_tDBOutput_31.getErrorCode(),
													ne_tDBOutput_31);
											errormessage_tDBOutput_31 = sqle_tDBOutput_31.getMessage();
										} else {
											errormessage_tDBOutput_31 = e_tDBOutput_31.getMessage();
										}

										int countSum_tDBOutput_31 = 0;
										for (int countEach_tDBOutput_31 : e_tDBOutput_31.getUpdateCounts()) {
											countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0
													: countEach_tDBOutput_31);
										}

										insertedCount_tDBOutput_31 += countSum_tDBOutput_31;

										System.err.println(errormessage_tDBOutput_31);

									}
								}

								tos_count_tDBOutput_31++;

								/**
								 * [tDBOutput_31 main ] stop
								 */

								/**
								 * [tDBOutput_31 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_31";

								/**
								 * [tDBOutput_31 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_31 process_data_end ] start
								 */

								currentComponent = "tDBOutput_31";

								/**
								 * [tDBOutput_31 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_3_2"

							/**
							 * [tMap_35 process_data_end ] start
							 */

							currentComponent = "tMap_35";

							/**
							 * [tMap_35 process_data_end ] stop
							 */

						} // End of branch "row34"

						/**
						 * [tFileInputDelimited_39 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_39";

						/**
						 * [tFileInputDelimited_39 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_39 end ] start
						 */

						currentComponent = "tFileInputDelimited_39";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_39 != null) {
							fid_tFileInputDelimited_39.close();
						}
					}
					if (fid_tFileInputDelimited_39 != null) {
						globalMap.put("tFileInputDelimited_39_NB_LINE", fid_tFileInputDelimited_39.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_39", true);
				end_Hash.put("tFileInputDelimited_39", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_39 end ] stop
				 */

				/**
				 * [tMap_35 end ] start
				 */

				currentComponent = "tMap_35";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row34");
				}

				ok_Hash.put("tMap_35", true);
				end_Hash.put("tMap_35", System.currentTimeMillis());

				/**
				 * [tMap_35 end ] stop
				 */

				/**
				 * [tDBOutput_31 end ] start
				 */

				currentComponent = "tDBOutput_31";

				try {
					int countSum_tDBOutput_31 = 0;
					if (pstmt_tDBOutput_31 != null && batchSizeCounter_tDBOutput_31 > 0) {

						for (int countEach_tDBOutput_31 : pstmt_tDBOutput_31.executeBatch()) {
							countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
						}

					}

					insertedCount_tDBOutput_31 += countSum_tDBOutput_31;

				} catch (java.sql.BatchUpdateException e_tDBOutput_31) {
					java.sql.SQLException ne_tDBOutput_31 = e_tDBOutput_31.getNextException(), sqle_tDBOutput_31 = null;
					String errormessage_tDBOutput_31;
					if (ne_tDBOutput_31 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_31 = new java.sql.SQLException(
								e_tDBOutput_31.getMessage() + "\ncaused by: " + ne_tDBOutput_31.getMessage(),
								ne_tDBOutput_31.getSQLState(), ne_tDBOutput_31.getErrorCode(), ne_tDBOutput_31);
						errormessage_tDBOutput_31 = sqle_tDBOutput_31.getMessage();
					} else {
						errormessage_tDBOutput_31 = e_tDBOutput_31.getMessage();
					}

					int countSum_tDBOutput_31 = 0;
					for (int countEach_tDBOutput_31 : e_tDBOutput_31.getUpdateCounts()) {
						countSum_tDBOutput_31 += (countEach_tDBOutput_31 < 0 ? 0 : countEach_tDBOutput_31);
					}

					insertedCount_tDBOutput_31 += countSum_tDBOutput_31;

					System.err.println(errormessage_tDBOutput_31);

				}

				if (pstmt_tDBOutput_31 != null) {

					pstmt_tDBOutput_31.close();
					resourceMap.remove("pstmt_tDBOutput_31");
				}
				resourceMap.put("statementClosed_tDBOutput_31", true);

				nb_line_deleted_tDBOutput_31 = nb_line_deleted_tDBOutput_31 + deletedCount_tDBOutput_31;
				nb_line_update_tDBOutput_31 = nb_line_update_tDBOutput_31 + updatedCount_tDBOutput_31;
				nb_line_inserted_tDBOutput_31 = nb_line_inserted_tDBOutput_31 + insertedCount_tDBOutput_31;
				nb_line_rejected_tDBOutput_31 = nb_line_rejected_tDBOutput_31 + rejectedCount_tDBOutput_31;

				globalMap.put("tDBOutput_31_NB_LINE", nb_line_tDBOutput_31);
				globalMap.put("tDBOutput_31_NB_LINE_UPDATED", nb_line_update_tDBOutput_31);
				globalMap.put("tDBOutput_31_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_31);
				globalMap.put("tDBOutput_31_NB_LINE_DELETED", nb_line_deleted_tDBOutput_31);
				globalMap.put("tDBOutput_31_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_31);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_3_2");
				}

				ok_Hash.put("tDBOutput_31", true);
				end_Hash.put("tDBOutput_31", System.currentTimeMillis());

				/**
				 * [tDBOutput_31 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_39:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
			}

			tFileInputDelimited_40Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_39 finally ] start
				 */

				currentComponent = "tFileInputDelimited_39";

				/**
				 * [tFileInputDelimited_39 finally ] stop
				 */

				/**
				 * [tMap_35 finally ] start
				 */

				currentComponent = "tMap_35";

				/**
				 * [tMap_35 finally ] stop
				 */

				/**
				 * [tDBOutput_31 finally ] start
				 */

				currentComponent = "tDBOutput_31";

				if (resourceMap.get("statementClosed_tDBOutput_31") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_31 = null;
					if ((pstmtToClose_tDBOutput_31 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_31")) != null) {
						pstmtToClose_tDBOutput_31.close();
					}
				}

				/**
				 * [tDBOutput_31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_39_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_4Struct implements routines.system.IPersistableRow<copyOfmain_4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idparamarticle;

		public int getIdparamarticle() {
			return this.idparamarticle;
		}

		public Boolean article_commandable;

		public Boolean getArticle_commandable() {
			return this.article_commandable;
		}

		public Boolean article_en_sommeil;

		public Boolean getArticle_en_sommeil() {
			return this.article_en_sommeil;
		}

		public String carte_fidelite;

		public String getCarte_fidelite() {
			return this.carte_fidelite;
		}

		public Boolean code_rejet;

		public Boolean getCode_rejet() {
			return this.code_rejet;
		}

		public Boolean edition_etiquette;

		public Boolean getEdition_etiquette() {
			return this.edition_etiquette;
		}

		public Boolean edition_qte_1_en_qte;

		public Boolean getEdition_qte_1_en_qte() {
			return this.edition_qte_1_en_qte;
		}

		public Boolean art_edition_quantite_2_en_prix;

		public Boolean getArt_edition_quantite_2_en_prix() {
			return this.art_edition_quantite_2_en_prix;
		}

		public Boolean art_edition_qte_2_en_qte;

		public Boolean getArt_edition_qte_2_en_qte() {
			return this.art_edition_qte_2_en_qte;
		}

		public Boolean art_edition_quantite_1_en_prix;

		public Boolean getArt_edition_quantite_1_en_prix() {
			return this.art_edition_quantite_1_en_prix;
		}

		public Boolean game_complementaire;

		public Boolean getGame_complementaire() {
			return this.game_complementaire;
		}

		public Boolean game_nomenclature;

		public Boolean getGame_nomenclature() {
			return this.game_nomenclature;
		}

		public Boolean game_remplacement;

		public Boolean getGame_remplacement() {
			return this.game_remplacement;
		}

		public String gestion_parc_machine;

		public String getGestion_parc_machine() {
			return this.gestion_parc_machine;
		}

		public String presence_internet;

		public String getPresence_internet() {
			return this.presence_internet;
		}

		public String soumis_eco_taxe;

		public String getSoumis_eco_taxe() {
			return this.soumis_eco_taxe;
		}

		public Boolean taxe_para_fiscale;

		public Boolean getTaxe_para_fiscale() {
			return this.taxe_para_fiscale;
		}

		public Boolean tenue_en_stock;

		public Boolean getTenue_en_stock() {
			return this.tenue_en_stock;
		}

		public String type_article;

		public String getType_article() {
			return this.type_article;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idparamarticle;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_4Struct other = (copyOfmain_4Struct) obj;

			if (this.idparamarticle != other.idparamarticle)
				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_4Struct other) {

			other.idparamarticle = this.idparamarticle;
			other.article_commandable = this.article_commandable;
			other.article_en_sommeil = this.article_en_sommeil;
			other.carte_fidelite = this.carte_fidelite;
			other.code_rejet = this.code_rejet;
			other.edition_etiquette = this.edition_etiquette;
			other.edition_qte_1_en_qte = this.edition_qte_1_en_qte;
			other.art_edition_quantite_2_en_prix = this.art_edition_quantite_2_en_prix;
			other.art_edition_qte_2_en_qte = this.art_edition_qte_2_en_qte;
			other.art_edition_quantite_1_en_prix = this.art_edition_quantite_1_en_prix;
			other.game_complementaire = this.game_complementaire;
			other.game_nomenclature = this.game_nomenclature;
			other.game_remplacement = this.game_remplacement;
			other.gestion_parc_machine = this.gestion_parc_machine;
			other.presence_internet = this.presence_internet;
			other.soumis_eco_taxe = this.soumis_eco_taxe;
			other.taxe_para_fiscale = this.taxe_para_fiscale;
			other.tenue_en_stock = this.tenue_en_stock;
			other.type_article = this.type_article;
			other.idarticle = this.idarticle;

		}

		public void copyKeysDataTo(copyOfmain_4Struct other) {

			other.idparamarticle = this.idparamarticle;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idparamarticle = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.article_commandable = null;
					} else {
						this.article_commandable = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.article_en_sommeil = null;
					} else {
						this.article_en_sommeil = dis.readBoolean();
					}

					this.carte_fidelite = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.code_rejet = null;
					} else {
						this.code_rejet = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.edition_etiquette = null;
					} else {
						this.edition_etiquette = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.edition_qte_1_en_qte = null;
					} else {
						this.edition_qte_1_en_qte = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.art_edition_quantite_2_en_prix = null;
					} else {
						this.art_edition_quantite_2_en_prix = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.art_edition_qte_2_en_qte = null;
					} else {
						this.art_edition_qte_2_en_qte = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.art_edition_quantite_1_en_prix = null;
					} else {
						this.art_edition_quantite_1_en_prix = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.game_complementaire = null;
					} else {
						this.game_complementaire = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.game_nomenclature = null;
					} else {
						this.game_nomenclature = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.game_remplacement = null;
					} else {
						this.game_remplacement = dis.readBoolean();
					}

					this.gestion_parc_machine = readString(dis);

					this.presence_internet = readString(dis);

					this.soumis_eco_taxe = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.taxe_para_fiscale = null;
					} else {
						this.taxe_para_fiscale = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tenue_en_stock = null;
					} else {
						this.tenue_en_stock = dis.readBoolean();
					}

					this.type_article = readString(dis);

					this.idarticle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idparamarticle);

				// Boolean

				if (this.article_commandable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.article_commandable);
				}

				// Boolean

				if (this.article_en_sommeil == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.article_en_sommeil);
				}

				// String

				writeString(this.carte_fidelite, dos);

				// Boolean

				if (this.code_rejet == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.code_rejet);
				}

				// Boolean

				if (this.edition_etiquette == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.edition_etiquette);
				}

				// Boolean

				if (this.edition_qte_1_en_qte == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.edition_qte_1_en_qte);
				}

				// Boolean

				if (this.art_edition_quantite_2_en_prix == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.art_edition_quantite_2_en_prix);
				}

				// Boolean

				if (this.art_edition_qte_2_en_qte == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.art_edition_qte_2_en_qte);
				}

				// Boolean

				if (this.art_edition_quantite_1_en_prix == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.art_edition_quantite_1_en_prix);
				}

				// Boolean

				if (this.game_complementaire == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.game_complementaire);
				}

				// Boolean

				if (this.game_nomenclature == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.game_nomenclature);
				}

				// Boolean

				if (this.game_remplacement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.game_remplacement);
				}

				// String

				writeString(this.gestion_parc_machine, dos);

				// String

				writeString(this.presence_internet, dos);

				// String

				writeString(this.soumis_eco_taxe, dos);

				// Boolean

				if (this.taxe_para_fiscale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.taxe_para_fiscale);
				}

				// Boolean

				if (this.tenue_en_stock == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.tenue_en_stock);
				}

				// String

				writeString(this.type_article, dos);

				// String

				writeString(this.idarticle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idparamarticle=" + String.valueOf(idparamarticle));
			sb.append(",article_commandable=" + String.valueOf(article_commandable));
			sb.append(",article_en_sommeil=" + String.valueOf(article_en_sommeil));
			sb.append(",carte_fidelite=" + carte_fidelite);
			sb.append(",code_rejet=" + String.valueOf(code_rejet));
			sb.append(",edition_etiquette=" + String.valueOf(edition_etiquette));
			sb.append(",edition_qte_1_en_qte=" + String.valueOf(edition_qte_1_en_qte));
			sb.append(",art_edition_quantite_2_en_prix=" + String.valueOf(art_edition_quantite_2_en_prix));
			sb.append(",art_edition_qte_2_en_qte=" + String.valueOf(art_edition_qte_2_en_qte));
			sb.append(",art_edition_quantite_1_en_prix=" + String.valueOf(art_edition_quantite_1_en_prix));
			sb.append(",game_complementaire=" + String.valueOf(game_complementaire));
			sb.append(",game_nomenclature=" + String.valueOf(game_nomenclature));
			sb.append(",game_remplacement=" + String.valueOf(game_remplacement));
			sb.append(",gestion_parc_machine=" + gestion_parc_machine);
			sb.append(",presence_internet=" + presence_internet);
			sb.append(",soumis_eco_taxe=" + soumis_eco_taxe);
			sb.append(",taxe_para_fiscale=" + String.valueOf(taxe_para_fiscale));
			sb.append(",tenue_en_stock=" + String.valueOf(tenue_en_stock));
			sb.append(",type_article=" + type_article);
			sb.append(",idarticle=" + idarticle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idparamarticle, other.idparamarticle);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDESIG;

		public String getPDESIG() {
			return this.PDESIG;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDESIG = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDESIG, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDESIG=" + PDESIG);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_40_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();
				copyOfmain_4Struct copyOfmain_4 = new copyOfmain_4Struct();

				/**
				 * [tDBOutput_32 begin ] start
				 */

				ok_Hash.put("tDBOutput_32", false);
				start_Hash.put("tDBOutput_32", System.currentTimeMillis());

				currentComponent = "tDBOutput_32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_4");
				}

				int tos_count_tDBOutput_32 = 0;

				String dbschema_tDBOutput_32 = null;
				dbschema_tDBOutput_32 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_32 = null;
				if (dbschema_tDBOutput_32 == null || dbschema_tDBOutput_32.trim().length() == 0) {
					tableName_tDBOutput_32 = ("paramarticle");
				} else {
					tableName_tDBOutput_32 = dbschema_tDBOutput_32 + "\".\"" + ("paramarticle");
				}

				int nb_line_tDBOutput_32 = 0;
				int nb_line_update_tDBOutput_32 = 0;
				int nb_line_inserted_tDBOutput_32 = 0;
				int nb_line_deleted_tDBOutput_32 = 0;
				int nb_line_rejected_tDBOutput_32 = 0;

				int deletedCount_tDBOutput_32 = 0;
				int updatedCount_tDBOutput_32 = 0;
				int insertedCount_tDBOutput_32 = 0;
				int rejectedCount_tDBOutput_32 = 0;

				boolean whetherReject_tDBOutput_32 = false;

				java.sql.Connection conn_tDBOutput_32 = null;
				String dbUser_tDBOutput_32 = null;

				conn_tDBOutput_32 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_32 = 10000;
				int batchSizeCounter_tDBOutput_32 = 0;

				int count_tDBOutput_32 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_32 = conn_tDBOutput_32.createStatement()) {
					stmtClear_tDBOutput_32.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_32 + "\"");
				}
				String insert_tDBOutput_32 = "INSERT INTO \"" + tableName_tDBOutput_32
						+ "\" (\"idparamarticle\",\"article_commandable\",\"article_en_sommeil\",\"carte_fidelite\",\"code_rejet\",\"edition_etiquette\",\"edition_qte_1_en_qte\",\"art_edition_quantite_2_en_prix\",\"art_edition_qte_2_en_qte\",\"art_edition_quantite_1_en_prix\",\"game_complementaire\",\"game_nomenclature\",\"game_remplacement\",\"gestion_parc_machine\",\"presence_internet\",\"soumis_eco_taxe\",\"taxe_para_fiscale\",\"tenue_en_stock\",\"type_article\",\"idarticle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_32 = conn_tDBOutput_32.prepareStatement(insert_tDBOutput_32);
				resourceMap.put("pstmt_tDBOutput_32", pstmt_tDBOutput_32);

				/**
				 * [tDBOutput_32 begin ] stop
				 */

				/**
				 * [tMap_36 begin ] start
				 */

				ok_Hash.put("tMap_36", false);
				start_Hash.put("tMap_36", System.currentTimeMillis());

				currentComponent = "tMap_36";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row35");
				}

				int tos_count_tMap_36 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_36__Struct {
				}
				Var__tMap_36__Struct Var__tMap_36 = new Var__tMap_36__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_4Struct copyOfmain_4_tmp = new copyOfmain_4Struct();
// ###############################

				/**
				 * [tMap_36 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_40 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_40", false);
				start_Hash.put("tFileInputDelimited_40", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_40";

				int tos_count_tFileInputDelimited_40 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_40 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_40 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_40,
							row35Struct row35) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_40 = 0;

						columnIndexWithD_tFileInputDelimited_40 = 0;

						row35.PREF = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 1;

						row35.PDESIG = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 2;

						row35.PPRIX = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 3;

						row35.PCTVA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 4;

						row35.PCTYV = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 5;

						row35.PCPN = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 6;

						row35.PPA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 7;

						row35.PQTE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 8;

						row35.PFORM01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 9;

						row35.PFORM02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 10;

						row35.PNBCAR = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 11;

						row35.PVERT = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 12;

						row35.PEMP2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 13;

						row35.PLIEU2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 14;

						row35.PREMIMAX = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 15;

						row35.FILLER2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 16;

						row35.PMOUV = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 17;

						row35.PTENU = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 18;

						row35.PINCRE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 19;

						row35.PPROMPA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 20;

						row35.PACHAT = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 21;

						row35.PARRCDT1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 22;

						row35.PARRCDT2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 23;

						row35.PECOTAXE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 24;

						row35.PPAQUET = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 25;

						row35.PEMBAL = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 26;

						row35.PGRAMA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 27;

						row35.PDATCRE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 28;

						row35.PDATPRIX = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 29;

						row35.PDATPA1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 30;

						row35.PPA1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 31;

						row35.PPV1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 32;

						row35.PPRIXR = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 33;

						row35.PPRIXRV1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 34;

						row35.PPRIXRV2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 35;

						row35.PPRIXRV3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 36;

						row35.PPRIREV1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 37;

						row35.PPRIREV2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 38;

						row35.PPRIREV3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 39;

						row35.PDATPV1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 40;

						row35.PMPA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 41;

						row35.PETIQ = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 42;

						row35.PFOUR = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 43;

						row35.PPRITTC = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 44;

						row35.PIMOD = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 45;

						row35.PPROMREM = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 46;

						row35.PUV = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 47;

						row35.PUA = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 48;

						row35.PDELAI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 49;

						row35.PMINI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 50;

						row35.PMAXI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 51;

						row35.PCDE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 52;

						row35.PEMP = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 53;

						row35.PPRI1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 54;

						row35.PPRI2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 55;

						row35.PPRI3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 56;

						row35.PPRI4 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 57;

						row35.PPRI5 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 58;

						row35.PPRI6 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 59;

						row35.PREMI1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 60;

						row35.PREMI2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 61;

						row35.PREMI3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 62;

						row35.PREMI4 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 63;

						row35.PREMI5 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 64;

						row35.PREMI6 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 65;

						row35.PQUANT1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 66;

						row35.PQUANT2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 67;

						row35.PQUANT3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 68;

						row35.PQUANT4 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 69;

						row35.PQUANT5 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 70;

						row35.PQUANT6 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 71;

						row35.PEDAT = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 72;

						row35.PSDAT = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 73;

						row35.PRESV = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 74;

						row35.PREFOU = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 75;

						row35.PGAMEC = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 76;

						row35.PGAMER = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 77;

						row35.PGAMEN = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 78;

						row35.PTPF = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 79;

						row35.PSOMMEIL = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 80;

						row35.PINV = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 81;

						row35.PMAC = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 82;

						row35.PREJ = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 83;

						row35.PMOI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 84;

						row35.P1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 85;

						row35.P2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 86;

						row35.P3 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 87;

						row35.P4 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 88;

						row35.P5 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 89;

						row35.P6 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 90;

						row35.P7 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 91;

						row35.P8 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 92;

						row35.P9 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 93;

						row35.P10 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 94;

						row35.P11 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 95;

						row35.P12 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 96;

						row35.PAN = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 97;

						row35.PAN1 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 98;

						row35.PAN2 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 99;

						row35.PPROM = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_40,
							row35Struct row35) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_40 = 0;

						columnIndexWithD_tFileInputDelimited_40 = 100;

						row35.PPROMD = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 101;

						row35.PCONDI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 102;

						row35.PRESTE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 103;

						row35.PTITR = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 104;

						row35.PPARAG = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 105;

						row35.PPOID = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 106;

						row35.PKLE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 107;

						row35.PLIEN = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 108;

						row35.PSFAM = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 109;

						row35.PREF01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 110;

						row35.PREF02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 111;

						row35.PREF03 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 112;

						row35.PTYPE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 113;

						row35.PLIEU = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 114;

						row35.PCATAL = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 115;

						row35.PUV01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 116;

						row35.PCONDI01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 117;

						row35.PUV02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 118;

						row35.PCONDI02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 119;

						row35.PPROMDEB = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 120;

						row35.PREMFOU = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 121;

						row35.PQTE01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 122;

						row35.PQTE02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 123;

						row35.PRX01 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 124;

						row35.PRX02 = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 125;

						row35.PCUBAG = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 126;

						row35.PREVPOI = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 127;

						row35.PREVCUB = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 128;

						row35.PREVFAP = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 129;

						row35.PINTERNET = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 130;

						row35.PFIDEL = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

						columnIndexWithD_tFileInputDelimited_40 = 131;

						row35.PCOMMANDE = fid_tFileInputDelimited_40.get(columnIndexWithD_tFileInputDelimited_40);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_40,
							row35Struct row35) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_40, row35);

						valueToConn_1(fid_tFileInputDelimited_40, row35);

					}

				}
				RowHelper_tFileInputDelimited_40 rowHelper_tFileInputDelimited_40 = new RowHelper_tFileInputDelimited_40();

				int nb_line_tFileInputDelimited_40 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_40 = null;
				int limit_tFileInputDelimited_40 = -1;
				try {

					Object filename_tFileInputDelimited_40 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_40 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_40 = 0, random_value_tFileInputDelimited_40 = -1;
						if (footer_value_tFileInputDelimited_40 > 0 || random_value_tFileInputDelimited_40 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_40 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_40, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_40 != null && fid_tFileInputDelimited_40.nextRecord()) {
						rowstate_tFileInputDelimited_40.reset();

						row35 = null;

						boolean whetherReject_tFileInputDelimited_40 = false;
						row35 = new row35Struct();
						try {

							rowHelper_tFileInputDelimited_40.valueToConn(fid_tFileInputDelimited_40, row35);

							if (rowstate_tFileInputDelimited_40.getException() != null) {
								throw rowstate_tFileInputDelimited_40.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_40 = true;

							System.err.println(e.getMessage());
							row35 = null;

						}

						/**
						 * [tFileInputDelimited_40 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_40 main ] start
						 */

						currentComponent = "tFileInputDelimited_40";

						tos_count_tFileInputDelimited_40++;

						/**
						 * [tFileInputDelimited_40 main ] stop
						 */

						/**
						 * [tFileInputDelimited_40 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_40";

						/**
						 * [tFileInputDelimited_40 process_data_begin ] stop
						 */
// Start of branch "row35"
						if (row35 != null) {

							/**
							 * [tMap_36 main ] start
							 */

							currentComponent = "tMap_36";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row35");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_36 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_36 = false;
							boolean mainRowRejected_tMap_36 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_36__Struct Var = Var__tMap_36;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_4 = null;

// # Output table : 'copyOfmain_4'
								copyOfmain_4_tmp.idparamarticle = Numeric.sequence("paramarticle", 1, 1);
								copyOfmain_4_tmp.article_commandable = row35.PCOMMANDE.equals("O") ? true : false;
								copyOfmain_4_tmp.article_en_sommeil = row35.PSOMMEIL.equals("N") ? false : true;
								copyOfmain_4_tmp.carte_fidelite = row35.PFIDEL;
								copyOfmain_4_tmp.code_rejet = row35.PREJ.equals("N") ? false : true;
								copyOfmain_4_tmp.edition_etiquette = row35.PETIQ.equals("O") ? true : false;
								copyOfmain_4_tmp.edition_qte_1_en_qte = row35.PQTE01.equals("O") ? true : false;
								copyOfmain_4_tmp.art_edition_quantite_2_en_prix = row35.PRX01.equals("N") ? false
										: true;
								copyOfmain_4_tmp.art_edition_qte_2_en_qte = row35.PQTE02.equals("N") ? false : true;
								copyOfmain_4_tmp.art_edition_quantite_1_en_prix = row35.PRX02.equals("N") ? false
										: true;
								copyOfmain_4_tmp.game_complementaire = row35.PGAMEC.equals("O") ? true : false;
								copyOfmain_4_tmp.game_nomenclature = row35.PGAMEN.equals("N") ? false : true;
								copyOfmain_4_tmp.game_remplacement = row35.PGAMER.equals("O") ? true : false;
								copyOfmain_4_tmp.gestion_parc_machine = row35.PMAC;
								copyOfmain_4_tmp.presence_internet = row35.PINTERNET;
								copyOfmain_4_tmp.soumis_eco_taxe = row35.PECOTAXE;
								copyOfmain_4_tmp.taxe_para_fiscale = row35.PTPF.equals("N") ? false : true;
								copyOfmain_4_tmp.tenue_en_stock = row35.PTENU.equals("O") ? true : false;
								copyOfmain_4_tmp.type_article = row35.PTYPE.length() > 9 ? null : row35.PTYPE;
								copyOfmain_4_tmp.idarticle = row35.PREF.equals("602397") ? null : row35.PREF;
								copyOfmain_4 = copyOfmain_4_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_36 = false;

							tos_count_tMap_36++;

							/**
							 * [tMap_36 main ] stop
							 */

							/**
							 * [tMap_36 process_data_begin ] start
							 */

							currentComponent = "tMap_36";

							/**
							 * [tMap_36 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_4"
							if (copyOfmain_4 != null) {

								/**
								 * [tDBOutput_32 main ] start
								 */

								currentComponent = "tDBOutput_32";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_4");
								}

								whetherReject_tDBOutput_32 = false;
								pstmt_tDBOutput_32.setInt(1, copyOfmain_4.idparamarticle);

								if (copyOfmain_4.article_commandable == null) {
									pstmt_tDBOutput_32.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(2, copyOfmain_4.article_commandable);
								}

								if (copyOfmain_4.article_en_sommeil == null) {
									pstmt_tDBOutput_32.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(3, copyOfmain_4.article_en_sommeil);
								}

								if (copyOfmain_4.carte_fidelite == null) {
									pstmt_tDBOutput_32.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(4, copyOfmain_4.carte_fidelite);
								}

								if (copyOfmain_4.code_rejet == null) {
									pstmt_tDBOutput_32.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(5, copyOfmain_4.code_rejet);
								}

								if (copyOfmain_4.edition_etiquette == null) {
									pstmt_tDBOutput_32.setNull(6, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(6, copyOfmain_4.edition_etiquette);
								}

								if (copyOfmain_4.edition_qte_1_en_qte == null) {
									pstmt_tDBOutput_32.setNull(7, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(7, copyOfmain_4.edition_qte_1_en_qte);
								}

								if (copyOfmain_4.art_edition_quantite_2_en_prix == null) {
									pstmt_tDBOutput_32.setNull(8, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(8, copyOfmain_4.art_edition_quantite_2_en_prix);
								}

								if (copyOfmain_4.art_edition_qte_2_en_qte == null) {
									pstmt_tDBOutput_32.setNull(9, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(9, copyOfmain_4.art_edition_qte_2_en_qte);
								}

								if (copyOfmain_4.art_edition_quantite_1_en_prix == null) {
									pstmt_tDBOutput_32.setNull(10, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(10, copyOfmain_4.art_edition_quantite_1_en_prix);
								}

								if (copyOfmain_4.game_complementaire == null) {
									pstmt_tDBOutput_32.setNull(11, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(11, copyOfmain_4.game_complementaire);
								}

								if (copyOfmain_4.game_nomenclature == null) {
									pstmt_tDBOutput_32.setNull(12, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(12, copyOfmain_4.game_nomenclature);
								}

								if (copyOfmain_4.game_remplacement == null) {
									pstmt_tDBOutput_32.setNull(13, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(13, copyOfmain_4.game_remplacement);
								}

								if (copyOfmain_4.gestion_parc_machine == null) {
									pstmt_tDBOutput_32.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(14, copyOfmain_4.gestion_parc_machine);
								}

								if (copyOfmain_4.presence_internet == null) {
									pstmt_tDBOutput_32.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(15, copyOfmain_4.presence_internet);
								}

								if (copyOfmain_4.soumis_eco_taxe == null) {
									pstmt_tDBOutput_32.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(16, copyOfmain_4.soumis_eco_taxe);
								}

								if (copyOfmain_4.taxe_para_fiscale == null) {
									pstmt_tDBOutput_32.setNull(17, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(17, copyOfmain_4.taxe_para_fiscale);
								}

								if (copyOfmain_4.tenue_en_stock == null) {
									pstmt_tDBOutput_32.setNull(18, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_32.setBoolean(18, copyOfmain_4.tenue_en_stock);
								}

								if (copyOfmain_4.type_article == null) {
									pstmt_tDBOutput_32.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(19, copyOfmain_4.type_article);
								}

								if (copyOfmain_4.idarticle == null) {
									pstmt_tDBOutput_32.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_32.setString(20, copyOfmain_4.idarticle);
								}

								pstmt_tDBOutput_32.addBatch();
								nb_line_tDBOutput_32++;

								batchSizeCounter_tDBOutput_32++;

								if ((batchSize_tDBOutput_32 > 0)
										&& (batchSize_tDBOutput_32 <= batchSizeCounter_tDBOutput_32)) {
									try {
										int countSum_tDBOutput_32 = 0;

										for (int countEach_tDBOutput_32 : pstmt_tDBOutput_32.executeBatch()) {
											countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0
													: countEach_tDBOutput_32);
										}

										insertedCount_tDBOutput_32 += countSum_tDBOutput_32;

										batchSizeCounter_tDBOutput_32 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_32) {
										java.sql.SQLException ne_tDBOutput_32 = e_tDBOutput_32.getNextException(),
												sqle_tDBOutput_32 = null;
										String errormessage_tDBOutput_32;
										if (ne_tDBOutput_32 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_32 = new java.sql.SQLException(
													e_tDBOutput_32.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_32.getMessage(),
													ne_tDBOutput_32.getSQLState(), ne_tDBOutput_32.getErrorCode(),
													ne_tDBOutput_32);
											errormessage_tDBOutput_32 = sqle_tDBOutput_32.getMessage();
										} else {
											errormessage_tDBOutput_32 = e_tDBOutput_32.getMessage();
										}

										int countSum_tDBOutput_32 = 0;
										for (int countEach_tDBOutput_32 : e_tDBOutput_32.getUpdateCounts()) {
											countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0
													: countEach_tDBOutput_32);
										}

										insertedCount_tDBOutput_32 += countSum_tDBOutput_32;

										System.err.println(errormessage_tDBOutput_32);

									}
								}

								tos_count_tDBOutput_32++;

								/**
								 * [tDBOutput_32 main ] stop
								 */

								/**
								 * [tDBOutput_32 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_32";

								/**
								 * [tDBOutput_32 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_32 process_data_end ] start
								 */

								currentComponent = "tDBOutput_32";

								/**
								 * [tDBOutput_32 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_4"

							/**
							 * [tMap_36 process_data_end ] start
							 */

							currentComponent = "tMap_36";

							/**
							 * [tMap_36 process_data_end ] stop
							 */

						} // End of branch "row35"

						/**
						 * [tFileInputDelimited_40 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_40";

						/**
						 * [tFileInputDelimited_40 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_40 end ] start
						 */

						currentComponent = "tFileInputDelimited_40";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_40 != null) {
							fid_tFileInputDelimited_40.close();
						}
					}
					if (fid_tFileInputDelimited_40 != null) {
						globalMap.put("tFileInputDelimited_40_NB_LINE", fid_tFileInputDelimited_40.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_40", true);
				end_Hash.put("tFileInputDelimited_40", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_40 end ] stop
				 */

				/**
				 * [tMap_36 end ] start
				 */

				currentComponent = "tMap_36";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row35");
				}

				ok_Hash.put("tMap_36", true);
				end_Hash.put("tMap_36", System.currentTimeMillis());

				/**
				 * [tMap_36 end ] stop
				 */

				/**
				 * [tDBOutput_32 end ] start
				 */

				currentComponent = "tDBOutput_32";

				try {
					int countSum_tDBOutput_32 = 0;
					if (pstmt_tDBOutput_32 != null && batchSizeCounter_tDBOutput_32 > 0) {

						for (int countEach_tDBOutput_32 : pstmt_tDBOutput_32.executeBatch()) {
							countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
						}

					}

					insertedCount_tDBOutput_32 += countSum_tDBOutput_32;

				} catch (java.sql.BatchUpdateException e_tDBOutput_32) {
					java.sql.SQLException ne_tDBOutput_32 = e_tDBOutput_32.getNextException(), sqle_tDBOutput_32 = null;
					String errormessage_tDBOutput_32;
					if (ne_tDBOutput_32 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_32 = new java.sql.SQLException(
								e_tDBOutput_32.getMessage() + "\ncaused by: " + ne_tDBOutput_32.getMessage(),
								ne_tDBOutput_32.getSQLState(), ne_tDBOutput_32.getErrorCode(), ne_tDBOutput_32);
						errormessage_tDBOutput_32 = sqle_tDBOutput_32.getMessage();
					} else {
						errormessage_tDBOutput_32 = e_tDBOutput_32.getMessage();
					}

					int countSum_tDBOutput_32 = 0;
					for (int countEach_tDBOutput_32 : e_tDBOutput_32.getUpdateCounts()) {
						countSum_tDBOutput_32 += (countEach_tDBOutput_32 < 0 ? 0 : countEach_tDBOutput_32);
					}

					insertedCount_tDBOutput_32 += countSum_tDBOutput_32;

					System.err.println(errormessage_tDBOutput_32);

				}

				if (pstmt_tDBOutput_32 != null) {

					pstmt_tDBOutput_32.close();
					resourceMap.remove("pstmt_tDBOutput_32");
				}
				resourceMap.put("statementClosed_tDBOutput_32", true);

				nb_line_deleted_tDBOutput_32 = nb_line_deleted_tDBOutput_32 + deletedCount_tDBOutput_32;
				nb_line_update_tDBOutput_32 = nb_line_update_tDBOutput_32 + updatedCount_tDBOutput_32;
				nb_line_inserted_tDBOutput_32 = nb_line_inserted_tDBOutput_32 + insertedCount_tDBOutput_32;
				nb_line_rejected_tDBOutput_32 = nb_line_rejected_tDBOutput_32 + rejectedCount_tDBOutput_32;

				globalMap.put("tDBOutput_32_NB_LINE", nb_line_tDBOutput_32);
				globalMap.put("tDBOutput_32_NB_LINE_UPDATED", nb_line_update_tDBOutput_32);
				globalMap.put("tDBOutput_32_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_32);
				globalMap.put("tDBOutput_32_NB_LINE_DELETED", nb_line_deleted_tDBOutput_32);
				globalMap.put("tDBOutput_32_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_32);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_4");
				}

				ok_Hash.put("tDBOutput_32", true);
				end_Hash.put("tDBOutput_32", System.currentTimeMillis());

				/**
				 * [tDBOutput_32 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_40:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk38", 0, "ok");
			}

			tFileInputDelimited_41Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_40 finally ] start
				 */

				currentComponent = "tFileInputDelimited_40";

				/**
				 * [tFileInputDelimited_40 finally ] stop
				 */

				/**
				 * [tMap_36 finally ] start
				 */

				currentComponent = "tMap_36";

				/**
				 * [tMap_36 finally ] stop
				 */

				/**
				 * [tDBOutput_32 finally ] start
				 */

				currentComponent = "tDBOutput_32";

				if (resourceMap.get("statementClosed_tDBOutput_32") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_32 = null;
					if ((pstmtToClose_tDBOutput_32 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_32")) != null) {
						pstmtToClose_tDBOutput_32.close();
					}
				}

				/**
				 * [tDBOutput_32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_40_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idachat;

		public int getIdachat() {
			return this.idachat;
		}

		public Float cout_revient_cubage;

		public Float getCout_revient_cubage() {
			return this.cout_revient_cubage;
		}

		public Float cout_revient_frais_approche;

		public Float getCout_revient_frais_approche() {
			return this.cout_revient_frais_approche;
		}

		public Float cout_revient_poids;

		public Float getCout_revient_poids() {
			return this.cout_revient_poids;
		}

		public String date_dernier_prix_dachat;

		public String getDate_dernier_prix_dachat() {
			return this.date_dernier_prix_dachat;
		}

		public String mode_calcul_prix_revient;

		public String getMode_calcul_prix_revient() {
			return this.mode_calcul_prix_revient;
		}

		public Float prix_achat_ht;

		public Float getPrix_achat_ht() {
			return this.prix_achat_ht;
		}

		public Float prix_achat_1;

		public Float getPrix_achat_1() {
			return this.prix_achat_1;
		}

		public Float prix_moyen_pondere_achat;

		public Float getPrix_moyen_pondere_achat() {
			return this.prix_moyen_pondere_achat;
		}

		public Float prix_revient;

		public Float getPrix_revient() {
			return this.prix_revient;
		}

		public Float remise_fournisseur;

		public Float getRemise_fournisseur() {
			return this.remise_fournisseur;
		}

		public Float somme_calcul_revient;

		public Float getSomme_calcul_revient() {
			return this.somme_calcul_revient;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idachat;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_2Struct other = (copyOfcopyOfcopyOfcopyOfmain_2Struct) obj;

			if (this.idachat != other.idachat)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_2Struct other) {

			other.idachat = this.idachat;
			other.cout_revient_cubage = this.cout_revient_cubage;
			other.cout_revient_frais_approche = this.cout_revient_frais_approche;
			other.cout_revient_poids = this.cout_revient_poids;
			other.date_dernier_prix_dachat = this.date_dernier_prix_dachat;
			other.mode_calcul_prix_revient = this.mode_calcul_prix_revient;
			other.prix_achat_ht = this.prix_achat_ht;
			other.prix_achat_1 = this.prix_achat_1;
			other.prix_moyen_pondere_achat = this.prix_moyen_pondere_achat;
			other.prix_revient = this.prix_revient;
			other.remise_fournisseur = this.remise_fournisseur;
			other.somme_calcul_revient = this.somme_calcul_revient;
			other.idarticle = this.idarticle;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_2Struct other) {

			other.idachat = this.idachat;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idachat = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.cout_revient_cubage = null;
					} else {
						this.cout_revient_cubage = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cout_revient_frais_approche = null;
					} else {
						this.cout_revient_frais_approche = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cout_revient_poids = null;
					} else {
						this.cout_revient_poids = dis.readFloat();
					}

					this.date_dernier_prix_dachat = readString(dis);

					this.mode_calcul_prix_revient = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_ht = null;
					} else {
						this.prix_achat_ht = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_achat_1 = null;
					} else {
						this.prix_achat_1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_moyen_pondere_achat = null;
					} else {
						this.prix_moyen_pondere_achat = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.prix_revient = null;
					} else {
						this.prix_revient = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.remise_fournisseur = null;
					} else {
						this.remise_fournisseur = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.somme_calcul_revient = null;
					} else {
						this.somme_calcul_revient = dis.readFloat();
					}

					this.idarticle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idachat);

				// Float

				if (this.cout_revient_cubage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cout_revient_cubage);
				}

				// Float

				if (this.cout_revient_frais_approche == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cout_revient_frais_approche);
				}

				// Float

				if (this.cout_revient_poids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cout_revient_poids);
				}

				// String

				writeString(this.date_dernier_prix_dachat, dos);

				// String

				writeString(this.mode_calcul_prix_revient, dos);

				// Float

				if (this.prix_achat_ht == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_achat_ht);
				}

				// Float

				if (this.prix_achat_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_achat_1);
				}

				// Float

				if (this.prix_moyen_pondere_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_moyen_pondere_achat);
				}

				// Float

				if (this.prix_revient == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_revient);
				}

				// Float

				if (this.remise_fournisseur == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.remise_fournisseur);
				}

				// Float

				if (this.somme_calcul_revient == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.somme_calcul_revient);
				}

				// String

				writeString(this.idarticle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idachat=" + String.valueOf(idachat));
			sb.append(",cout_revient_cubage=" + String.valueOf(cout_revient_cubage));
			sb.append(",cout_revient_frais_approche=" + String.valueOf(cout_revient_frais_approche));
			sb.append(",cout_revient_poids=" + String.valueOf(cout_revient_poids));
			sb.append(",date_dernier_prix_dachat=" + date_dernier_prix_dachat);
			sb.append(",mode_calcul_prix_revient=" + mode_calcul_prix_revient);
			sb.append(",prix_achat_ht=" + String.valueOf(prix_achat_ht));
			sb.append(",prix_achat_1=" + String.valueOf(prix_achat_1));
			sb.append(",prix_moyen_pondere_achat=" + String.valueOf(prix_moyen_pondere_achat));
			sb.append(",prix_revient=" + String.valueOf(prix_revient));
			sb.append(",remise_fournisseur=" + String.valueOf(remise_fournisseur));
			sb.append(",somme_calcul_revient=" + String.valueOf(somme_calcul_revient));
			sb.append(",idarticle=" + idarticle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idachat, other.idachat);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDESIG;

		public String getPDESIG() {
			return this.PDESIG;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDESIG = readString(dis);

					this.newColumn = readString(dis);

					this.newColumn1 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDESIG, dos);

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDESIG=" + PDESIG);
			sb.append(",newColumn=" + newColumn);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_41Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_41_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();
				copyOfcopyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfcopyOfmain_2 = new copyOfcopyOfcopyOfcopyOfmain_2Struct();

				/**
				 * [tDBOutput_37 begin ] start
				 */

				ok_Hash.put("tDBOutput_37", false);
				start_Hash.put("tDBOutput_37", System.currentTimeMillis());

				currentComponent = "tDBOutput_37";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_2");
				}

				int tos_count_tDBOutput_37 = 0;

				String dbschema_tDBOutput_37 = null;
				dbschema_tDBOutput_37 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_37 = null;
				if (dbschema_tDBOutput_37 == null || dbschema_tDBOutput_37.trim().length() == 0) {
					tableName_tDBOutput_37 = ("achat");
				} else {
					tableName_tDBOutput_37 = dbschema_tDBOutput_37 + "\".\"" + ("achat");
				}

				int nb_line_tDBOutput_37 = 0;
				int nb_line_update_tDBOutput_37 = 0;
				int nb_line_inserted_tDBOutput_37 = 0;
				int nb_line_deleted_tDBOutput_37 = 0;
				int nb_line_rejected_tDBOutput_37 = 0;

				int deletedCount_tDBOutput_37 = 0;
				int updatedCount_tDBOutput_37 = 0;
				int insertedCount_tDBOutput_37 = 0;
				int rejectedCount_tDBOutput_37 = 0;

				boolean whetherReject_tDBOutput_37 = false;

				java.sql.Connection conn_tDBOutput_37 = null;
				String dbUser_tDBOutput_37 = null;

				conn_tDBOutput_37 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_37 = 10000;
				int batchSizeCounter_tDBOutput_37 = 0;

				int count_tDBOutput_37 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_37 = conn_tDBOutput_37.createStatement()) {
					stmtClear_tDBOutput_37.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_37 + "\"");
				}
				String insert_tDBOutput_37 = "INSERT INTO \"" + tableName_tDBOutput_37
						+ "\" (\"idachat\",\"cout_revient_cubage\",\"cout_revient_frais_approche\",\"cout_revient_poids\",\"date_dernier_prix_dachat\",\"mode_calcul_prix_revient\",\"prix_achat_ht\",\"prix_achat_1\",\"prix_moyen_pondere_achat\",\"prix_revient\",\"remise_fournisseur\",\"somme_calcul_revient\",\"idarticle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_37 = conn_tDBOutput_37.prepareStatement(insert_tDBOutput_37);
				resourceMap.put("pstmt_tDBOutput_37", pstmt_tDBOutput_37);

				/**
				 * [tDBOutput_37 begin ] stop
				 */

				/**
				 * [tMap_37 begin ] start
				 */

				ok_Hash.put("tMap_37", false);
				start_Hash.put("tMap_37", System.currentTimeMillis());

				currentComponent = "tMap_37";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row36");
				}

				int tos_count_tMap_37 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_37__Struct {
				}
				Var__tMap_37__Struct Var__tMap_37 = new Var__tMap_37__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfcopyOfmain_2_tmp = new copyOfcopyOfcopyOfcopyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_37 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_41 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_41", false);
				start_Hash.put("tFileInputDelimited_41", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_41";

				int tos_count_tFileInputDelimited_41 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_41 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_41 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_41,
							row36Struct row36) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_41 = 0;

						columnIndexWithD_tFileInputDelimited_41 = 0;

						row36.PREF = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 1;

						row36.PDESIG = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 2;

						row36.newColumn = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 3;

						row36.newColumn1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 4;

						row36.PPRIX = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 5;

						row36.PCTVA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 6;

						row36.PCTYV = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 7;

						row36.PCPN = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 8;

						row36.PPA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 9;

						row36.PQTE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 10;

						row36.PFORM01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 11;

						row36.PFORM02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 12;

						row36.PNBCAR = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 13;

						row36.PVERT = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 14;

						row36.PEMP2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 15;

						row36.PLIEU2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 16;

						row36.PREMIMAX = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 17;

						row36.FILLER2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 18;

						row36.PMOUV = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 19;

						row36.PTENU = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 20;

						row36.PINCRE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 21;

						row36.PPROMPA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 22;

						row36.PACHAT = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 23;

						row36.PARRCDT1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 24;

						row36.PARRCDT2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 25;

						row36.PECOTAXE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 26;

						row36.PPAQUET = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 27;

						row36.PEMBAL = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 28;

						row36.PGRAMA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 29;

						row36.PDATCRE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 30;

						row36.PDATPRIX = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 31;

						row36.PDATPA1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 32;

						row36.PPA1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 33;

						row36.PPV1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 34;

						row36.PPRIXR = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 35;

						row36.PPRIXRV1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 36;

						row36.PPRIXRV2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 37;

						row36.PPRIXRV3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 38;

						row36.PPRIREV1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 39;

						row36.PPRIREV2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 40;

						row36.PPRIREV3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 41;

						row36.PDATPV1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 42;

						row36.PMPA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 43;

						row36.PETIQ = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 44;

						row36.PFOUR = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 45;

						row36.PPRITTC = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 46;

						row36.PIMOD = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 47;

						row36.PPROMREM = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 48;

						row36.PUV = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 49;

						row36.PUA = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 50;

						row36.PDELAI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 51;

						row36.PMINI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 52;

						row36.PMAXI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 53;

						row36.PCDE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 54;

						row36.PEMP = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 55;

						row36.PPRI1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 56;

						row36.PPRI2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 57;

						row36.PPRI3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 58;

						row36.PPRI4 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 59;

						row36.PPRI5 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 60;

						row36.PPRI6 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 61;

						row36.PREMI1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 62;

						row36.PREMI2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 63;

						row36.PREMI3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 64;

						row36.PREMI4 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 65;

						row36.PREMI5 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 66;

						row36.PREMI6 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 67;

						row36.PQUANT1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 68;

						row36.PQUANT2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 69;

						row36.PQUANT3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 70;

						row36.PQUANT4 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 71;

						row36.PQUANT5 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 72;

						row36.PQUANT6 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 73;

						row36.PEDAT = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 74;

						row36.PSDAT = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 75;

						row36.PRESV = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 76;

						row36.PREFOU = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 77;

						row36.PGAMEC = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 78;

						row36.PGAMER = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 79;

						row36.PGAMEN = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 80;

						row36.PTPF = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 81;

						row36.PSOMMEIL = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 82;

						row36.PINV = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 83;

						row36.PMAC = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 84;

						row36.PREJ = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 85;

						row36.PMOI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 86;

						row36.P1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 87;

						row36.P2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 88;

						row36.P3 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 89;

						row36.P4 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 90;

						row36.P5 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 91;

						row36.P6 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 92;

						row36.P7 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 93;

						row36.P8 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 94;

						row36.P9 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 95;

						row36.P10 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 96;

						row36.P11 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 97;

						row36.P12 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 98;

						row36.PAN = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 99;

						row36.PAN1 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_41,
							row36Struct row36) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_41 = 0;

						columnIndexWithD_tFileInputDelimited_41 = 100;

						row36.PAN2 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 101;

						row36.PPROM = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 102;

						row36.PPROMD = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 103;

						row36.PCONDI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 104;

						row36.PRESTE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 105;

						row36.PTITR = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 106;

						row36.PPARAG = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 107;

						row36.PPOID = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 108;

						row36.PKLE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 109;

						row36.PLIEN = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 110;

						row36.PSFAM = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 111;

						row36.PREF01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 112;

						row36.PREF02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 113;

						row36.PREF03 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 114;

						row36.PTYPE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 115;

						row36.PLIEU = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 116;

						row36.PCATAL = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 117;

						row36.PUV01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 118;

						row36.PCONDI01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 119;

						row36.PUV02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 120;

						row36.PCONDI02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 121;

						row36.PPROMDEB = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 122;

						row36.PREMFOU = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 123;

						row36.PQTE01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 124;

						row36.PQTE02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 125;

						row36.PRX01 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 126;

						row36.PRX02 = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 127;

						row36.PCUBAG = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 128;

						row36.PREVPOI = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 129;

						row36.PREVCUB = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 130;

						row36.PREVFAP = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 131;

						row36.PINTERNET = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 132;

						row36.PFIDEL = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

						columnIndexWithD_tFileInputDelimited_41 = 133;

						row36.PCOMMANDE = fid_tFileInputDelimited_41.get(columnIndexWithD_tFileInputDelimited_41);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_41,
							row36Struct row36) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_41, row36);

						valueToConn_1(fid_tFileInputDelimited_41, row36);

					}

				}
				RowHelper_tFileInputDelimited_41 rowHelper_tFileInputDelimited_41 = new RowHelper_tFileInputDelimited_41();

				int nb_line_tFileInputDelimited_41 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_41 = null;
				int limit_tFileInputDelimited_41 = -1;
				try {

					Object filename_tFileInputDelimited_41 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_41 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_41 = 0, random_value_tFileInputDelimited_41 = -1;
						if (footer_value_tFileInputDelimited_41 > 0 || random_value_tFileInputDelimited_41 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_41 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_41, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_41 != null && fid_tFileInputDelimited_41.nextRecord()) {
						rowstate_tFileInputDelimited_41.reset();

						row36 = null;

						boolean whetherReject_tFileInputDelimited_41 = false;
						row36 = new row36Struct();
						try {

							rowHelper_tFileInputDelimited_41.valueToConn(fid_tFileInputDelimited_41, row36);

							if (rowstate_tFileInputDelimited_41.getException() != null) {
								throw rowstate_tFileInputDelimited_41.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_41 = true;

							System.err.println(e.getMessage());
							row36 = null;

						}

						/**
						 * [tFileInputDelimited_41 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_41 main ] start
						 */

						currentComponent = "tFileInputDelimited_41";

						tos_count_tFileInputDelimited_41++;

						/**
						 * [tFileInputDelimited_41 main ] stop
						 */

						/**
						 * [tFileInputDelimited_41 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_41";

						/**
						 * [tFileInputDelimited_41 process_data_begin ] stop
						 */
// Start of branch "row36"
						if (row36 != null) {

							/**
							 * [tMap_37 main ] start
							 */

							currentComponent = "tMap_37";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row36");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_37 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_37 = false;
							boolean mainRowRejected_tMap_37 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_37__Struct Var = Var__tMap_37;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_2 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_2'
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.idachat = Numeric.sequence("achat", 1, 1);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.cout_revient_cubage = Float
										.parseFloat(row36.PREVCUB);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.cout_revient_frais_approche = Float
										.parseFloat(row36.PREVFAP);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.cout_revient_poids = Float.parseFloat(row36.PREVPOI);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.date_dernier_prix_dachat = row36.PDATPA1;
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.mode_calcul_prix_revient = null;
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.prix_achat_ht = Float.parseFloat(row36.PPA);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.prix_achat_1 = Float.parseFloat(row36.PPA1);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.prix_moyen_pondere_achat = Float
										.parseFloat(row36.PMPA);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.prix_revient = Float.parseFloat(row36.PPRIXR);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.remise_fournisseur = Float.parseFloat(row36.PREMFOU);
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.somme_calcul_revient = null;
								copyOfcopyOfcopyOfcopyOfmain_2_tmp.idarticle = row36.PREF;
								copyOfcopyOfcopyOfcopyOfmain_2 = copyOfcopyOfcopyOfcopyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_37 = false;

							tos_count_tMap_37++;

							/**
							 * [tMap_37 main ] stop
							 */

							/**
							 * [tMap_37 process_data_begin ] start
							 */

							currentComponent = "tMap_37";

							/**
							 * [tMap_37 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_2"
							if (copyOfcopyOfcopyOfcopyOfmain_2 != null) {

								/**
								 * [tDBOutput_37 main ] start
								 */

								currentComponent = "tDBOutput_37";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_2");
								}

								whetherReject_tDBOutput_37 = false;
								pstmt_tDBOutput_37.setInt(1, copyOfcopyOfcopyOfcopyOfmain_2.idachat);

								if (copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_cubage == null) {
									pstmt_tDBOutput_37.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(2, copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_cubage);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_frais_approche == null) {
									pstmt_tDBOutput_37.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(3,
											copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_frais_approche);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_poids == null) {
									pstmt_tDBOutput_37.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(4, copyOfcopyOfcopyOfcopyOfmain_2.cout_revient_poids);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.date_dernier_prix_dachat == null) {
									pstmt_tDBOutput_37.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_37.setString(5,
											copyOfcopyOfcopyOfcopyOfmain_2.date_dernier_prix_dachat);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.mode_calcul_prix_revient == null) {
									pstmt_tDBOutput_37.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_37.setString(6,
											copyOfcopyOfcopyOfcopyOfmain_2.mode_calcul_prix_revient);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.prix_achat_ht == null) {
									pstmt_tDBOutput_37.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(7, copyOfcopyOfcopyOfcopyOfmain_2.prix_achat_ht);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.prix_achat_1 == null) {
									pstmt_tDBOutput_37.setNull(8, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(8, copyOfcopyOfcopyOfcopyOfmain_2.prix_achat_1);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.prix_moyen_pondere_achat == null) {
									pstmt_tDBOutput_37.setNull(9, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(9,
											copyOfcopyOfcopyOfcopyOfmain_2.prix_moyen_pondere_achat);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.prix_revient == null) {
									pstmt_tDBOutput_37.setNull(10, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(10, copyOfcopyOfcopyOfcopyOfmain_2.prix_revient);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.remise_fournisseur == null) {
									pstmt_tDBOutput_37.setNull(11, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(11, copyOfcopyOfcopyOfcopyOfmain_2.remise_fournisseur);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.somme_calcul_revient == null) {
									pstmt_tDBOutput_37.setNull(12, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_37.setFloat(12,
											copyOfcopyOfcopyOfcopyOfmain_2.somme_calcul_revient);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2.idarticle == null) {
									pstmt_tDBOutput_37.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_37.setString(13, copyOfcopyOfcopyOfcopyOfmain_2.idarticle);
								}

								pstmt_tDBOutput_37.addBatch();
								nb_line_tDBOutput_37++;

								batchSizeCounter_tDBOutput_37++;

								if ((batchSize_tDBOutput_37 > 0)
										&& (batchSize_tDBOutput_37 <= batchSizeCounter_tDBOutput_37)) {
									try {
										int countSum_tDBOutput_37 = 0;

										for (int countEach_tDBOutput_37 : pstmt_tDBOutput_37.executeBatch()) {
											countSum_tDBOutput_37 += (countEach_tDBOutput_37 < 0 ? 0
													: countEach_tDBOutput_37);
										}

										insertedCount_tDBOutput_37 += countSum_tDBOutput_37;

										batchSizeCounter_tDBOutput_37 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_37) {
										java.sql.SQLException ne_tDBOutput_37 = e_tDBOutput_37.getNextException(),
												sqle_tDBOutput_37 = null;
										String errormessage_tDBOutput_37;
										if (ne_tDBOutput_37 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_37 = new java.sql.SQLException(
													e_tDBOutput_37.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_37.getMessage(),
													ne_tDBOutput_37.getSQLState(), ne_tDBOutput_37.getErrorCode(),
													ne_tDBOutput_37);
											errormessage_tDBOutput_37 = sqle_tDBOutput_37.getMessage();
										} else {
											errormessage_tDBOutput_37 = e_tDBOutput_37.getMessage();
										}

										int countSum_tDBOutput_37 = 0;
										for (int countEach_tDBOutput_37 : e_tDBOutput_37.getUpdateCounts()) {
											countSum_tDBOutput_37 += (countEach_tDBOutput_37 < 0 ? 0
													: countEach_tDBOutput_37);
										}

										insertedCount_tDBOutput_37 += countSum_tDBOutput_37;

										System.err.println(errormessage_tDBOutput_37);

									}
								}

								tos_count_tDBOutput_37++;

								/**
								 * [tDBOutput_37 main ] stop
								 */

								/**
								 * [tDBOutput_37 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_37";

								/**
								 * [tDBOutput_37 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_37 process_data_end ] start
								 */

								currentComponent = "tDBOutput_37";

								/**
								 * [tDBOutput_37 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_2"

							/**
							 * [tMap_37 process_data_end ] start
							 */

							currentComponent = "tMap_37";

							/**
							 * [tMap_37 process_data_end ] stop
							 */

						} // End of branch "row36"

						/**
						 * [tFileInputDelimited_41 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_41";

						/**
						 * [tFileInputDelimited_41 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_41 end ] start
						 */

						currentComponent = "tFileInputDelimited_41";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_41 != null) {
							fid_tFileInputDelimited_41.close();
						}
					}
					if (fid_tFileInputDelimited_41 != null) {
						globalMap.put("tFileInputDelimited_41_NB_LINE", fid_tFileInputDelimited_41.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_41", true);
				end_Hash.put("tFileInputDelimited_41", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_41 end ] stop
				 */

				/**
				 * [tMap_37 end ] start
				 */

				currentComponent = "tMap_37";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row36");
				}

				ok_Hash.put("tMap_37", true);
				end_Hash.put("tMap_37", System.currentTimeMillis());

				/**
				 * [tMap_37 end ] stop
				 */

				/**
				 * [tDBOutput_37 end ] start
				 */

				currentComponent = "tDBOutput_37";

				try {
					int countSum_tDBOutput_37 = 0;
					if (pstmt_tDBOutput_37 != null && batchSizeCounter_tDBOutput_37 > 0) {

						for (int countEach_tDBOutput_37 : pstmt_tDBOutput_37.executeBatch()) {
							countSum_tDBOutput_37 += (countEach_tDBOutput_37 < 0 ? 0 : countEach_tDBOutput_37);
						}

					}

					insertedCount_tDBOutput_37 += countSum_tDBOutput_37;

				} catch (java.sql.BatchUpdateException e_tDBOutput_37) {
					java.sql.SQLException ne_tDBOutput_37 = e_tDBOutput_37.getNextException(), sqle_tDBOutput_37 = null;
					String errormessage_tDBOutput_37;
					if (ne_tDBOutput_37 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_37 = new java.sql.SQLException(
								e_tDBOutput_37.getMessage() + "\ncaused by: " + ne_tDBOutput_37.getMessage(),
								ne_tDBOutput_37.getSQLState(), ne_tDBOutput_37.getErrorCode(), ne_tDBOutput_37);
						errormessage_tDBOutput_37 = sqle_tDBOutput_37.getMessage();
					} else {
						errormessage_tDBOutput_37 = e_tDBOutput_37.getMessage();
					}

					int countSum_tDBOutput_37 = 0;
					for (int countEach_tDBOutput_37 : e_tDBOutput_37.getUpdateCounts()) {
						countSum_tDBOutput_37 += (countEach_tDBOutput_37 < 0 ? 0 : countEach_tDBOutput_37);
					}

					insertedCount_tDBOutput_37 += countSum_tDBOutput_37;

					System.err.println(errormessage_tDBOutput_37);

				}

				if (pstmt_tDBOutput_37 != null) {

					pstmt_tDBOutput_37.close();
					resourceMap.remove("pstmt_tDBOutput_37");
				}
				resourceMap.put("statementClosed_tDBOutput_37", true);

				nb_line_deleted_tDBOutput_37 = nb_line_deleted_tDBOutput_37 + deletedCount_tDBOutput_37;
				nb_line_update_tDBOutput_37 = nb_line_update_tDBOutput_37 + updatedCount_tDBOutput_37;
				nb_line_inserted_tDBOutput_37 = nb_line_inserted_tDBOutput_37 + insertedCount_tDBOutput_37;
				nb_line_rejected_tDBOutput_37 = nb_line_rejected_tDBOutput_37 + rejectedCount_tDBOutput_37;

				globalMap.put("tDBOutput_37_NB_LINE", nb_line_tDBOutput_37);
				globalMap.put("tDBOutput_37_NB_LINE_UPDATED", nb_line_update_tDBOutput_37);
				globalMap.put("tDBOutput_37_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_37);
				globalMap.put("tDBOutput_37_NB_LINE_DELETED", nb_line_deleted_tDBOutput_37);
				globalMap.put("tDBOutput_37_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_37);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_2");
				}

				ok_Hash.put("tDBOutput_37", true);
				end_Hash.put("tDBOutput_37", System.currentTimeMillis());

				/**
				 * [tDBOutput_37 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_41:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk39", 0, "ok");
			}

			tFileInputDelimited_42Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_41 finally ] start
				 */

				currentComponent = "tFileInputDelimited_41";

				/**
				 * [tFileInputDelimited_41 finally ] stop
				 */

				/**
				 * [tMap_37 finally ] start
				 */

				currentComponent = "tMap_37";

				/**
				 * [tMap_37 finally ] stop
				 */

				/**
				 * [tDBOutput_37 finally ] start
				 */

				currentComponent = "tDBOutput_37";

				if (resourceMap.get("statementClosed_tDBOutput_37") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_37 = null;
					if ((pstmtToClose_tDBOutput_37 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_37")) != null) {
						pstmtToClose_tDBOutput_37.close();
					}
				}

				/**
				 * [tDBOutput_37 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_41_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_2_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_2_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddetail_article;

		public int getIddetail_article() {
			return this.iddetail_article;
		}

		public String arrondi_sur_cdt1;

		public String getArrondi_sur_cdt1() {
			return this.arrondi_sur_cdt1;
		}

		public String arrondi_sur_cdt2;

		public String getArrondi_sur_cdt2() {
			return this.arrondi_sur_cdt2;
		}

		public Float conditionnement_cdt_1;

		public Float getConditionnement_cdt_1() {
			return this.conditionnement_cdt_1;
		}

		public Float conditionnement_cdt_2;

		public Float getConditionnement_cdt_2() {
			return this.conditionnement_cdt_2;
		}

		public Float cubage_uv;

		public Float getCubage_uv() {
			return this.cubage_uv;
		}

		public Float format1;

		public Float getFormat1() {
			return this.format1;
		}

		public Float format2;

		public Float getFormat2() {
			return this.format2;
		}

		public String libelle_unit_cdt_1;

		public String getLibelle_unit_cdt_1() {
			return this.libelle_unit_cdt_1;
		}

		public String libelle_unit_cdt_2;

		public String getLibelle_unit_cdt_2() {
			return this.libelle_unit_cdt_2;
		}

		public String libelle_unite_achat;

		public String getLibelle_unite_achat() {
			return this.libelle_unite_achat;
		}

		public String libelle_unite_vente;

		public String getLibelle_unite_vente() {
			return this.libelle_unite_vente;
		}

		public Float minimum_achat;

		public Float getMinimum_achat() {
			return this.minimum_achat;
		}

		public Integer nombre_de_carreau;

		public Integer getNombre_de_carreau() {
			return this.nombre_de_carreau;
		}

		public Float paquetage;

		public Float getPaquetage() {
			return this.paquetage;
		}

		public Float poids_de_conditionnement;

		public Float getPoids_de_conditionnement() {
			return this.poids_de_conditionnement;
		}

		public Float suremballage;

		public Float getSuremballage() {
			return this.suremballage;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddetail_article;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_2_0Struct other = (copyOfcopyOfcopyOfcopyOfmain_2_0Struct) obj;

			if (this.iddetail_article != other.iddetail_article)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_2_0Struct other) {

			other.iddetail_article = this.iddetail_article;
			other.arrondi_sur_cdt1 = this.arrondi_sur_cdt1;
			other.arrondi_sur_cdt2 = this.arrondi_sur_cdt2;
			other.conditionnement_cdt_1 = this.conditionnement_cdt_1;
			other.conditionnement_cdt_2 = this.conditionnement_cdt_2;
			other.cubage_uv = this.cubage_uv;
			other.format1 = this.format1;
			other.format2 = this.format2;
			other.libelle_unit_cdt_1 = this.libelle_unit_cdt_1;
			other.libelle_unit_cdt_2 = this.libelle_unit_cdt_2;
			other.libelle_unite_achat = this.libelle_unite_achat;
			other.libelle_unite_vente = this.libelle_unite_vente;
			other.minimum_achat = this.minimum_achat;
			other.nombre_de_carreau = this.nombre_de_carreau;
			other.paquetage = this.paquetage;
			other.poids_de_conditionnement = this.poids_de_conditionnement;
			other.suremballage = this.suremballage;
			other.idarticle = this.idarticle;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_2_0Struct other) {

			other.iddetail_article = this.iddetail_article;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddetail_article = dis.readInt();

					this.arrondi_sur_cdt1 = readString(dis);

					this.arrondi_sur_cdt2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.conditionnement_cdt_1 = null;
					} else {
						this.conditionnement_cdt_1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conditionnement_cdt_2 = null;
					} else {
						this.conditionnement_cdt_2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cubage_uv = null;
					} else {
						this.cubage_uv = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.format1 = null;
					} else {
						this.format1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.format2 = null;
					} else {
						this.format2 = dis.readFloat();
					}

					this.libelle_unit_cdt_1 = readString(dis);

					this.libelle_unit_cdt_2 = readString(dis);

					this.libelle_unite_achat = readString(dis);

					this.libelle_unite_vente = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.minimum_achat = null;
					} else {
						this.minimum_achat = dis.readFloat();
					}

					this.nombre_de_carreau = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.paquetage = null;
					} else {
						this.paquetage = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.poids_de_conditionnement = null;
					} else {
						this.poids_de_conditionnement = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.suremballage = null;
					} else {
						this.suremballage = dis.readFloat();
					}

					this.idarticle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddetail_article);

				// String

				writeString(this.arrondi_sur_cdt1, dos);

				// String

				writeString(this.arrondi_sur_cdt2, dos);

				// Float

				if (this.conditionnement_cdt_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.conditionnement_cdt_1);
				}

				// Float

				if (this.conditionnement_cdt_2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.conditionnement_cdt_2);
				}

				// Float

				if (this.cubage_uv == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cubage_uv);
				}

				// Float

				if (this.format1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.format1);
				}

				// Float

				if (this.format2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.format2);
				}

				// String

				writeString(this.libelle_unit_cdt_1, dos);

				// String

				writeString(this.libelle_unit_cdt_2, dos);

				// String

				writeString(this.libelle_unite_achat, dos);

				// String

				writeString(this.libelle_unite_vente, dos);

				// Float

				if (this.minimum_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.minimum_achat);
				}

				// Integer

				writeInteger(this.nombre_de_carreau, dos);

				// Float

				if (this.paquetage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.paquetage);
				}

				// Float

				if (this.poids_de_conditionnement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.poids_de_conditionnement);
				}

				// Float

				if (this.suremballage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.suremballage);
				}

				// String

				writeString(this.idarticle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddetail_article=" + String.valueOf(iddetail_article));
			sb.append(",arrondi_sur_cdt1=" + arrondi_sur_cdt1);
			sb.append(",arrondi_sur_cdt2=" + arrondi_sur_cdt2);
			sb.append(",conditionnement_cdt_1=" + String.valueOf(conditionnement_cdt_1));
			sb.append(",conditionnement_cdt_2=" + String.valueOf(conditionnement_cdt_2));
			sb.append(",cubage_uv=" + String.valueOf(cubage_uv));
			sb.append(",format1=" + String.valueOf(format1));
			sb.append(",format2=" + String.valueOf(format2));
			sb.append(",libelle_unit_cdt_1=" + libelle_unit_cdt_1);
			sb.append(",libelle_unit_cdt_2=" + libelle_unit_cdt_2);
			sb.append(",libelle_unite_achat=" + libelle_unite_achat);
			sb.append(",libelle_unite_vente=" + libelle_unite_vente);
			sb.append(",minimum_achat=" + String.valueOf(minimum_achat));
			sb.append(",nombre_de_carreau=" + String.valueOf(nombre_de_carreau));
			sb.append(",paquetage=" + String.valueOf(paquetage));
			sb.append(",poids_de_conditionnement=" + String.valueOf(poids_de_conditionnement));
			sb.append(",suremballage=" + String.valueOf(suremballage));
			sb.append(",idarticle=" + idarticle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_2_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddetail_article, other.iddetail_article);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDESIG;

		public String getPDESIG() {
			return this.PDESIG;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDESIG = readString(dis);

					this.newColumn = readString(dis);

					this.newColumn1 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDESIG, dos);

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDESIG=" + PDESIG);
			sb.append(",newColumn=" + newColumn);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_42Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_42_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();
				copyOfcopyOfcopyOfcopyOfmain_2_0Struct copyOfcopyOfcopyOfcopyOfmain_2_0 = new copyOfcopyOfcopyOfcopyOfmain_2_0Struct();

				/**
				 * [tDBOutput_38 begin ] start
				 */

				ok_Hash.put("tDBOutput_38", false);
				start_Hash.put("tDBOutput_38", System.currentTimeMillis());

				currentComponent = "tDBOutput_38";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_2_0");
				}

				int tos_count_tDBOutput_38 = 0;

				String dbschema_tDBOutput_38 = null;
				dbschema_tDBOutput_38 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_38 = null;
				if (dbschema_tDBOutput_38 == null || dbschema_tDBOutput_38.trim().length() == 0) {
					tableName_tDBOutput_38 = ("details_article");
				} else {
					tableName_tDBOutput_38 = dbschema_tDBOutput_38 + "\".\"" + ("details_article");
				}

				int nb_line_tDBOutput_38 = 0;
				int nb_line_update_tDBOutput_38 = 0;
				int nb_line_inserted_tDBOutput_38 = 0;
				int nb_line_deleted_tDBOutput_38 = 0;
				int nb_line_rejected_tDBOutput_38 = 0;

				int deletedCount_tDBOutput_38 = 0;
				int updatedCount_tDBOutput_38 = 0;
				int insertedCount_tDBOutput_38 = 0;
				int rejectedCount_tDBOutput_38 = 0;

				boolean whetherReject_tDBOutput_38 = false;

				java.sql.Connection conn_tDBOutput_38 = null;
				String dbUser_tDBOutput_38 = null;

				conn_tDBOutput_38 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_38 = 10000;
				int batchSizeCounter_tDBOutput_38 = 0;

				int count_tDBOutput_38 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_38 = conn_tDBOutput_38.createStatement()) {
					stmtClear_tDBOutput_38.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_38 + "\"");
				}
				String insert_tDBOutput_38 = "INSERT INTO \"" + tableName_tDBOutput_38
						+ "\" (\"iddetail_article\",\"arrondi_sur_cdt1\",\"arrondi_sur_cdt2\",\"conditionnement_cdt_1\",\"conditionnement_cdt_2\",\"cubage_uv\",\"format1\",\"format2\",\"libelle_unit_cdt_1\",\"libelle_unit_cdt_2\",\"libelle_unite_achat\",\"libelle_unite_vente\",\"minimum_achat\",\"nombre_de_carreau\",\"paquetage\",\"poids_de_conditionnement\",\"suremballage\",\"idarticle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_38 = conn_tDBOutput_38.prepareStatement(insert_tDBOutput_38);
				resourceMap.put("pstmt_tDBOutput_38", pstmt_tDBOutput_38);

				/**
				 * [tDBOutput_38 begin ] stop
				 */

				/**
				 * [tMap_38 begin ] start
				 */

				ok_Hash.put("tMap_38", false);
				start_Hash.put("tMap_38", System.currentTimeMillis());

				currentComponent = "tMap_38";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row37");
				}

				int tos_count_tMap_38 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_38__Struct {
				}
				Var__tMap_38__Struct Var__tMap_38 = new Var__tMap_38__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_2_0Struct copyOfcopyOfcopyOfcopyOfmain_2_0_tmp = new copyOfcopyOfcopyOfcopyOfmain_2_0Struct();
// ###############################

				/**
				 * [tMap_38 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_42 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_42", false);
				start_Hash.put("tFileInputDelimited_42", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_42";

				int tos_count_tFileInputDelimited_42 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_42 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_42 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_42,
							row37Struct row37) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_42 = 0;

						columnIndexWithD_tFileInputDelimited_42 = 0;

						row37.PREF = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 1;

						row37.PDESIG = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 2;

						row37.newColumn = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 3;

						row37.newColumn1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 4;

						row37.PPRIX = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 5;

						row37.PCTVA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 6;

						row37.PCTYV = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 7;

						row37.PCPN = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 8;

						row37.PPA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 9;

						row37.PQTE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 10;

						row37.PFORM01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 11;

						row37.PFORM02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 12;

						row37.PNBCAR = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 13;

						row37.PVERT = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 14;

						row37.PEMP2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 15;

						row37.PLIEU2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 16;

						row37.PREMIMAX = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 17;

						row37.FILLER2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 18;

						row37.PMOUV = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 19;

						row37.PTENU = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 20;

						row37.PINCRE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 21;

						row37.PPROMPA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 22;

						row37.PACHAT = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 23;

						row37.PARRCDT1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 24;

						row37.PARRCDT2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 25;

						row37.PECOTAXE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 26;

						row37.PPAQUET = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 27;

						row37.PEMBAL = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 28;

						row37.PGRAMA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 29;

						row37.PDATCRE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 30;

						row37.PDATPRIX = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 31;

						row37.PDATPA1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 32;

						row37.PPA1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 33;

						row37.PPV1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 34;

						row37.PPRIXR = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 35;

						row37.PPRIXRV1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 36;

						row37.PPRIXRV2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 37;

						row37.PPRIXRV3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 38;

						row37.PPRIREV1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 39;

						row37.PPRIREV2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 40;

						row37.PPRIREV3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 41;

						row37.PDATPV1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 42;

						row37.PMPA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 43;

						row37.PETIQ = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 44;

						row37.PFOUR = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 45;

						row37.PPRITTC = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 46;

						row37.PIMOD = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 47;

						row37.PPROMREM = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 48;

						row37.PUV = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 49;

						row37.PUA = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 50;

						row37.PDELAI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 51;

						row37.PMINI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 52;

						row37.PMAXI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 53;

						row37.PCDE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 54;

						row37.PEMP = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 55;

						row37.PPRI1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 56;

						row37.PPRI2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 57;

						row37.PPRI3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 58;

						row37.PPRI4 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 59;

						row37.PPRI5 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 60;

						row37.PPRI6 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 61;

						row37.PREMI1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 62;

						row37.PREMI2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 63;

						row37.PREMI3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 64;

						row37.PREMI4 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 65;

						row37.PREMI5 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 66;

						row37.PREMI6 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 67;

						row37.PQUANT1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 68;

						row37.PQUANT2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 69;

						row37.PQUANT3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 70;

						row37.PQUANT4 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 71;

						row37.PQUANT5 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 72;

						row37.PQUANT6 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 73;

						row37.PEDAT = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 74;

						row37.PSDAT = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 75;

						row37.PRESV = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 76;

						row37.PREFOU = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 77;

						row37.PGAMEC = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 78;

						row37.PGAMER = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 79;

						row37.PGAMEN = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 80;

						row37.PTPF = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 81;

						row37.PSOMMEIL = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 82;

						row37.PINV = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 83;

						row37.PMAC = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 84;

						row37.PREJ = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 85;

						row37.PMOI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 86;

						row37.P1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 87;

						row37.P2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 88;

						row37.P3 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 89;

						row37.P4 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 90;

						row37.P5 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 91;

						row37.P6 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 92;

						row37.P7 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 93;

						row37.P8 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 94;

						row37.P9 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 95;

						row37.P10 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 96;

						row37.P11 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 97;

						row37.P12 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 98;

						row37.PAN = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 99;

						row37.PAN1 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_42,
							row37Struct row37) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_42 = 0;

						columnIndexWithD_tFileInputDelimited_42 = 100;

						row37.PAN2 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 101;

						row37.PPROM = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 102;

						row37.PPROMD = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 103;

						row37.PCONDI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 104;

						row37.PRESTE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 105;

						row37.PTITR = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 106;

						row37.PPARAG = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 107;

						row37.PPOID = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 108;

						row37.PKLE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 109;

						row37.PLIEN = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 110;

						row37.PSFAM = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 111;

						row37.PREF01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 112;

						row37.PREF02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 113;

						row37.PREF03 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 114;

						row37.PTYPE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 115;

						row37.PLIEU = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 116;

						row37.PCATAL = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 117;

						row37.PUV01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 118;

						row37.PCONDI01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 119;

						row37.PUV02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 120;

						row37.PCONDI02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 121;

						row37.PPROMDEB = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 122;

						row37.PREMFOU = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 123;

						row37.PQTE01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 124;

						row37.PQTE02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 125;

						row37.PRX01 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 126;

						row37.PRX02 = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 127;

						row37.PCUBAG = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 128;

						row37.PREVPOI = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 129;

						row37.PREVCUB = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 130;

						row37.PREVFAP = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 131;

						row37.PINTERNET = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 132;

						row37.PFIDEL = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

						columnIndexWithD_tFileInputDelimited_42 = 133;

						row37.PCOMMANDE = fid_tFileInputDelimited_42.get(columnIndexWithD_tFileInputDelimited_42);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_42,
							row37Struct row37) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_42, row37);

						valueToConn_1(fid_tFileInputDelimited_42, row37);

					}

				}
				RowHelper_tFileInputDelimited_42 rowHelper_tFileInputDelimited_42 = new RowHelper_tFileInputDelimited_42();

				int nb_line_tFileInputDelimited_42 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_42 = null;
				int limit_tFileInputDelimited_42 = -1;
				try {

					Object filename_tFileInputDelimited_42 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_42 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_42 = 0, random_value_tFileInputDelimited_42 = -1;
						if (footer_value_tFileInputDelimited_42 > 0 || random_value_tFileInputDelimited_42 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_42 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_42, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_42 != null && fid_tFileInputDelimited_42.nextRecord()) {
						rowstate_tFileInputDelimited_42.reset();

						row37 = null;

						boolean whetherReject_tFileInputDelimited_42 = false;
						row37 = new row37Struct();
						try {

							rowHelper_tFileInputDelimited_42.valueToConn(fid_tFileInputDelimited_42, row37);

							if (rowstate_tFileInputDelimited_42.getException() != null) {
								throw rowstate_tFileInputDelimited_42.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_42 = true;

							System.err.println(e.getMessage());
							row37 = null;

						}

						/**
						 * [tFileInputDelimited_42 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_42 main ] start
						 */

						currentComponent = "tFileInputDelimited_42";

						tos_count_tFileInputDelimited_42++;

						/**
						 * [tFileInputDelimited_42 main ] stop
						 */

						/**
						 * [tFileInputDelimited_42 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_42";

						/**
						 * [tFileInputDelimited_42 process_data_begin ] stop
						 */
// Start of branch "row37"
						if (row37 != null) {

							/**
							 * [tMap_38 main ] start
							 */

							currentComponent = "tMap_38";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row37");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_38 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_38 = false;
							boolean mainRowRejected_tMap_38 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_38__Struct Var = Var__tMap_38;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_2_0 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_2_0'
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.iddetail_article = Numeric.sequence("detailart", 1,
										1);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.arrondi_sur_cdt1 = row37.PARRCDT1;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.arrondi_sur_cdt2 = row37.PARRCDT2;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.conditionnement_cdt_1 = Float
										.parseFloat(row37.PCONDI01);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.conditionnement_cdt_2 = Float
										.parseFloat(row37.PCONDI02);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.cubage_uv = Float.parseFloat(row37.PCUBAG);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.format1 = Float.parseFloat(row37.PFORM01);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.format2 = Float.parseFloat(row37.PFORM02);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.libelle_unit_cdt_1 = row37.PUV01;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.libelle_unit_cdt_2 = row37.PUV02;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.libelle_unite_achat = row37.PUA;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.libelle_unite_vente = row37.PUV;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.minimum_achat = Float.parseFloat(row37.PACHAT);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.nombre_de_carreau = null;
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.paquetage = Float.parseFloat(row37.PPAQUET);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.poids_de_conditionnement = Float
										.parseFloat(row37.PPOID);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.suremballage = Float.parseFloat(row37.PEMBAL);
								copyOfcopyOfcopyOfcopyOfmain_2_0_tmp.idarticle = row37.PREF;
								copyOfcopyOfcopyOfcopyOfmain_2_0 = copyOfcopyOfcopyOfcopyOfmain_2_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_38 = false;

							tos_count_tMap_38++;

							/**
							 * [tMap_38 main ] stop
							 */

							/**
							 * [tMap_38 process_data_begin ] start
							 */

							currentComponent = "tMap_38";

							/**
							 * [tMap_38 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_2_0"
							if (copyOfcopyOfcopyOfcopyOfmain_2_0 != null) {

								/**
								 * [tDBOutput_38 main ] start
								 */

								currentComponent = "tDBOutput_38";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_2_0");
								}

								whetherReject_tDBOutput_38 = false;
								pstmt_tDBOutput_38.setInt(1, copyOfcopyOfcopyOfcopyOfmain_2_0.iddetail_article);

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.arrondi_sur_cdt1 == null) {
									pstmt_tDBOutput_38.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(2, copyOfcopyOfcopyOfcopyOfmain_2_0.arrondi_sur_cdt1);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.arrondi_sur_cdt2 == null) {
									pstmt_tDBOutput_38.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(3, copyOfcopyOfcopyOfcopyOfmain_2_0.arrondi_sur_cdt2);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.conditionnement_cdt_1 == null) {
									pstmt_tDBOutput_38.setNull(4, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(4,
											copyOfcopyOfcopyOfcopyOfmain_2_0.conditionnement_cdt_1);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.conditionnement_cdt_2 == null) {
									pstmt_tDBOutput_38.setNull(5, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(5,
											copyOfcopyOfcopyOfcopyOfmain_2_0.conditionnement_cdt_2);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.cubage_uv == null) {
									pstmt_tDBOutput_38.setNull(6, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(6, copyOfcopyOfcopyOfcopyOfmain_2_0.cubage_uv);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.format1 == null) {
									pstmt_tDBOutput_38.setNull(7, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(7, copyOfcopyOfcopyOfcopyOfmain_2_0.format1);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.format2 == null) {
									pstmt_tDBOutput_38.setNull(8, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(8, copyOfcopyOfcopyOfcopyOfmain_2_0.format2);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unit_cdt_1 == null) {
									pstmt_tDBOutput_38.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(9,
											copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unit_cdt_1);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unit_cdt_2 == null) {
									pstmt_tDBOutput_38.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(10,
											copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unit_cdt_2);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unite_achat == null) {
									pstmt_tDBOutput_38.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(11,
											copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unite_achat);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unite_vente == null) {
									pstmt_tDBOutput_38.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(12,
											copyOfcopyOfcopyOfcopyOfmain_2_0.libelle_unite_vente);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.minimum_achat == null) {
									pstmt_tDBOutput_38.setNull(13, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(13, copyOfcopyOfcopyOfcopyOfmain_2_0.minimum_achat);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.nombre_de_carreau == null) {
									pstmt_tDBOutput_38.setNull(14, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_38.setInt(14, copyOfcopyOfcopyOfcopyOfmain_2_0.nombre_de_carreau);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.paquetage == null) {
									pstmt_tDBOutput_38.setNull(15, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(15, copyOfcopyOfcopyOfcopyOfmain_2_0.paquetage);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.poids_de_conditionnement == null) {
									pstmt_tDBOutput_38.setNull(16, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(16,
											copyOfcopyOfcopyOfcopyOfmain_2_0.poids_de_conditionnement);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.suremballage == null) {
									pstmt_tDBOutput_38.setNull(17, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_38.setFloat(17, copyOfcopyOfcopyOfcopyOfmain_2_0.suremballage);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_0.idarticle == null) {
									pstmt_tDBOutput_38.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_38.setString(18, copyOfcopyOfcopyOfcopyOfmain_2_0.idarticle);
								}

								pstmt_tDBOutput_38.addBatch();
								nb_line_tDBOutput_38++;

								batchSizeCounter_tDBOutput_38++;

								if ((batchSize_tDBOutput_38 > 0)
										&& (batchSize_tDBOutput_38 <= batchSizeCounter_tDBOutput_38)) {
									try {
										int countSum_tDBOutput_38 = 0;

										for (int countEach_tDBOutput_38 : pstmt_tDBOutput_38.executeBatch()) {
											countSum_tDBOutput_38 += (countEach_tDBOutput_38 < 0 ? 0
													: countEach_tDBOutput_38);
										}

										insertedCount_tDBOutput_38 += countSum_tDBOutput_38;

										batchSizeCounter_tDBOutput_38 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_38) {
										java.sql.SQLException ne_tDBOutput_38 = e_tDBOutput_38.getNextException(),
												sqle_tDBOutput_38 = null;
										String errormessage_tDBOutput_38;
										if (ne_tDBOutput_38 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_38 = new java.sql.SQLException(
													e_tDBOutput_38.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_38.getMessage(),
													ne_tDBOutput_38.getSQLState(), ne_tDBOutput_38.getErrorCode(),
													ne_tDBOutput_38);
											errormessage_tDBOutput_38 = sqle_tDBOutput_38.getMessage();
										} else {
											errormessage_tDBOutput_38 = e_tDBOutput_38.getMessage();
										}

										int countSum_tDBOutput_38 = 0;
										for (int countEach_tDBOutput_38 : e_tDBOutput_38.getUpdateCounts()) {
											countSum_tDBOutput_38 += (countEach_tDBOutput_38 < 0 ? 0
													: countEach_tDBOutput_38);
										}

										insertedCount_tDBOutput_38 += countSum_tDBOutput_38;

										System.err.println(errormessage_tDBOutput_38);

									}
								}

								tos_count_tDBOutput_38++;

								/**
								 * [tDBOutput_38 main ] stop
								 */

								/**
								 * [tDBOutput_38 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_38";

								/**
								 * [tDBOutput_38 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_38 process_data_end ] start
								 */

								currentComponent = "tDBOutput_38";

								/**
								 * [tDBOutput_38 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_2_0"

							/**
							 * [tMap_38 process_data_end ] start
							 */

							currentComponent = "tMap_38";

							/**
							 * [tMap_38 process_data_end ] stop
							 */

						} // End of branch "row37"

						/**
						 * [tFileInputDelimited_42 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_42";

						/**
						 * [tFileInputDelimited_42 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_42 end ] start
						 */

						currentComponent = "tFileInputDelimited_42";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_42 != null) {
							fid_tFileInputDelimited_42.close();
						}
					}
					if (fid_tFileInputDelimited_42 != null) {
						globalMap.put("tFileInputDelimited_42_NB_LINE", fid_tFileInputDelimited_42.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_42", true);
				end_Hash.put("tFileInputDelimited_42", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_42 end ] stop
				 */

				/**
				 * [tMap_38 end ] start
				 */

				currentComponent = "tMap_38";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row37");
				}

				ok_Hash.put("tMap_38", true);
				end_Hash.put("tMap_38", System.currentTimeMillis());

				/**
				 * [tMap_38 end ] stop
				 */

				/**
				 * [tDBOutput_38 end ] start
				 */

				currentComponent = "tDBOutput_38";

				try {
					int countSum_tDBOutput_38 = 0;
					if (pstmt_tDBOutput_38 != null && batchSizeCounter_tDBOutput_38 > 0) {

						for (int countEach_tDBOutput_38 : pstmt_tDBOutput_38.executeBatch()) {
							countSum_tDBOutput_38 += (countEach_tDBOutput_38 < 0 ? 0 : countEach_tDBOutput_38);
						}

					}

					insertedCount_tDBOutput_38 += countSum_tDBOutput_38;

				} catch (java.sql.BatchUpdateException e_tDBOutput_38) {
					java.sql.SQLException ne_tDBOutput_38 = e_tDBOutput_38.getNextException(), sqle_tDBOutput_38 = null;
					String errormessage_tDBOutput_38;
					if (ne_tDBOutput_38 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_38 = new java.sql.SQLException(
								e_tDBOutput_38.getMessage() + "\ncaused by: " + ne_tDBOutput_38.getMessage(),
								ne_tDBOutput_38.getSQLState(), ne_tDBOutput_38.getErrorCode(), ne_tDBOutput_38);
						errormessage_tDBOutput_38 = sqle_tDBOutput_38.getMessage();
					} else {
						errormessage_tDBOutput_38 = e_tDBOutput_38.getMessage();
					}

					int countSum_tDBOutput_38 = 0;
					for (int countEach_tDBOutput_38 : e_tDBOutput_38.getUpdateCounts()) {
						countSum_tDBOutput_38 += (countEach_tDBOutput_38 < 0 ? 0 : countEach_tDBOutput_38);
					}

					insertedCount_tDBOutput_38 += countSum_tDBOutput_38;

					System.err.println(errormessage_tDBOutput_38);

				}

				if (pstmt_tDBOutput_38 != null) {

					pstmt_tDBOutput_38.close();
					resourceMap.remove("pstmt_tDBOutput_38");
				}
				resourceMap.put("statementClosed_tDBOutput_38", true);

				nb_line_deleted_tDBOutput_38 = nb_line_deleted_tDBOutput_38 + deletedCount_tDBOutput_38;
				nb_line_update_tDBOutput_38 = nb_line_update_tDBOutput_38 + updatedCount_tDBOutput_38;
				nb_line_inserted_tDBOutput_38 = nb_line_inserted_tDBOutput_38 + insertedCount_tDBOutput_38;
				nb_line_rejected_tDBOutput_38 = nb_line_rejected_tDBOutput_38 + rejectedCount_tDBOutput_38;

				globalMap.put("tDBOutput_38_NB_LINE", nb_line_tDBOutput_38);
				globalMap.put("tDBOutput_38_NB_LINE_UPDATED", nb_line_update_tDBOutput_38);
				globalMap.put("tDBOutput_38_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_38);
				globalMap.put("tDBOutput_38_NB_LINE_DELETED", nb_line_deleted_tDBOutput_38);
				globalMap.put("tDBOutput_38_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_38);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_2_0");
				}

				ok_Hash.put("tDBOutput_38", true);
				end_Hash.put("tDBOutput_38", System.currentTimeMillis());

				/**
				 * [tDBOutput_38 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_42:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk40", 0, "ok");
			}

			tFileInputDelimited_43Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_42 finally ] start
				 */

				currentComponent = "tFileInputDelimited_42";

				/**
				 * [tFileInputDelimited_42 finally ] stop
				 */

				/**
				 * [tMap_38 finally ] start
				 */

				currentComponent = "tMap_38";

				/**
				 * [tMap_38 finally ] stop
				 */

				/**
				 * [tDBOutput_38 finally ] start
				 */

				currentComponent = "tDBOutput_38";

				if (resourceMap.get("statementClosed_tDBOutput_38") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_38 = null;
					if ((pstmtToClose_tDBOutput_38 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_38")) != null) {
						pstmtToClose_tDBOutput_38.close();
					}
				}

				/**
				 * [tDBOutput_38 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_42_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_2_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_2_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idstock;

		public int getIdstock() {
			return this.idstock;
		}

		public Integer conditionnement_unite_vente;

		public Integer getConditionnement_unite_vente() {
			return this.conditionnement_unite_vente;
		}

		public String date_derniere_sortie;

		public String getDate_derniere_sortie() {
			return this.date_derniere_sortie;
		}

		public String date_derniere_entree;

		public String getDate_derniere_entree() {
			return this.date_derniere_entree;
		}

		public Integer encours_commande_client;

		public Integer getEncours_commande_client() {
			return this.encours_commande_client;
		}

		public Integer encours_fournisseur;

		public Integer getEncours_fournisseur() {
			return this.encours_fournisseur;
		}

		public Integer quantite_dinventaire;

		public Integer getQuantite_dinventaire() {
			return this.quantite_dinventaire;
		}

		public Integer quantite_stock;

		public Integer getQuantite_stock() {
			return this.quantite_stock;
		}

		public Integer quantite_stock_magasin;

		public Integer getQuantite_stock_magasin() {
			return this.quantite_stock_magasin;
		}

		public Integer quantite_stock_reserve;

		public Integer getQuantite_stock_reserve() {
			return this.quantite_stock_reserve;
		}

		public Integer reste_de_conditionnement;

		public Integer getReste_de_conditionnement() {
			return this.reste_de_conditionnement;
		}

		public Integer stock_maximum;

		public Integer getStock_maximum() {
			return this.stock_maximum;
		}

		public Integer stock_minimum;

		public Integer getStock_minimum() {
			return this.stock_minimum;
		}

		public String idarticle;

		public String getIdarticle() {
			return this.idarticle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idstock;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_2_1Struct other = (copyOfcopyOfcopyOfcopyOfmain_2_1Struct) obj;

			if (this.idstock != other.idstock)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_2_1Struct other) {

			other.idstock = this.idstock;
			other.conditionnement_unite_vente = this.conditionnement_unite_vente;
			other.date_derniere_sortie = this.date_derniere_sortie;
			other.date_derniere_entree = this.date_derniere_entree;
			other.encours_commande_client = this.encours_commande_client;
			other.encours_fournisseur = this.encours_fournisseur;
			other.quantite_dinventaire = this.quantite_dinventaire;
			other.quantite_stock = this.quantite_stock;
			other.quantite_stock_magasin = this.quantite_stock_magasin;
			other.quantite_stock_reserve = this.quantite_stock_reserve;
			other.reste_de_conditionnement = this.reste_de_conditionnement;
			other.stock_maximum = this.stock_maximum;
			other.stock_minimum = this.stock_minimum;
			other.idarticle = this.idarticle;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_2_1Struct other) {

			other.idstock = this.idstock;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idstock = dis.readInt();

					this.conditionnement_unite_vente = readInteger(dis);

					this.date_derniere_sortie = readString(dis);

					this.date_derniere_entree = readString(dis);

					this.encours_commande_client = readInteger(dis);

					this.encours_fournisseur = readInteger(dis);

					this.quantite_dinventaire = readInteger(dis);

					this.quantite_stock = readInteger(dis);

					this.quantite_stock_magasin = readInteger(dis);

					this.quantite_stock_reserve = readInteger(dis);

					this.reste_de_conditionnement = readInteger(dis);

					this.stock_maximum = readInteger(dis);

					this.stock_minimum = readInteger(dis);

					this.idarticle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idstock);

				// Integer

				writeInteger(this.conditionnement_unite_vente, dos);

				// String

				writeString(this.date_derniere_sortie, dos);

				// String

				writeString(this.date_derniere_entree, dos);

				// Integer

				writeInteger(this.encours_commande_client, dos);

				// Integer

				writeInteger(this.encours_fournisseur, dos);

				// Integer

				writeInteger(this.quantite_dinventaire, dos);

				// Integer

				writeInteger(this.quantite_stock, dos);

				// Integer

				writeInteger(this.quantite_stock_magasin, dos);

				// Integer

				writeInteger(this.quantite_stock_reserve, dos);

				// Integer

				writeInteger(this.reste_de_conditionnement, dos);

				// Integer

				writeInteger(this.stock_maximum, dos);

				// Integer

				writeInteger(this.stock_minimum, dos);

				// String

				writeString(this.idarticle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idstock=" + String.valueOf(idstock));
			sb.append(",conditionnement_unite_vente=" + String.valueOf(conditionnement_unite_vente));
			sb.append(",date_derniere_sortie=" + date_derniere_sortie);
			sb.append(",date_derniere_entree=" + date_derniere_entree);
			sb.append(",encours_commande_client=" + String.valueOf(encours_commande_client));
			sb.append(",encours_fournisseur=" + String.valueOf(encours_fournisseur));
			sb.append(",quantite_dinventaire=" + String.valueOf(quantite_dinventaire));
			sb.append(",quantite_stock=" + String.valueOf(quantite_stock));
			sb.append(",quantite_stock_magasin=" + String.valueOf(quantite_stock_magasin));
			sb.append(",quantite_stock_reserve=" + String.valueOf(quantite_stock_reserve));
			sb.append(",reste_de_conditionnement=" + String.valueOf(reste_de_conditionnement));
			sb.append(",stock_maximum=" + String.valueOf(stock_maximum));
			sb.append(",stock_minimum=" + String.valueOf(stock_minimum));
			sb.append(",idarticle=" + idarticle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_2_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idstock, other.idstock);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String PREF;

		public String getPREF() {
			return this.PREF;
		}

		public String PDESIG;

		public String getPDESIG() {
			return this.PDESIG;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String PPRIX;

		public String getPPRIX() {
			return this.PPRIX;
		}

		public String PCTVA;

		public String getPCTVA() {
			return this.PCTVA;
		}

		public String PCTYV;

		public String getPCTYV() {
			return this.PCTYV;
		}

		public String PCPN;

		public String getPCPN() {
			return this.PCPN;
		}

		public String PPA;

		public String getPPA() {
			return this.PPA;
		}

		public String PQTE;

		public String getPQTE() {
			return this.PQTE;
		}

		public String PFORM01;

		public String getPFORM01() {
			return this.PFORM01;
		}

		public String PFORM02;

		public String getPFORM02() {
			return this.PFORM02;
		}

		public String PNBCAR;

		public String getPNBCAR() {
			return this.PNBCAR;
		}

		public String PVERT;

		public String getPVERT() {
			return this.PVERT;
		}

		public String PEMP2;

		public String getPEMP2() {
			return this.PEMP2;
		}

		public String PLIEU2;

		public String getPLIEU2() {
			return this.PLIEU2;
		}

		public String PREMIMAX;

		public String getPREMIMAX() {
			return this.PREMIMAX;
		}

		public String FILLER2;

		public String getFILLER2() {
			return this.FILLER2;
		}

		public String PMOUV;

		public String getPMOUV() {
			return this.PMOUV;
		}

		public String PTENU;

		public String getPTENU() {
			return this.PTENU;
		}

		public String PINCRE;

		public String getPINCRE() {
			return this.PINCRE;
		}

		public String PPROMPA;

		public String getPPROMPA() {
			return this.PPROMPA;
		}

		public String PACHAT;

		public String getPACHAT() {
			return this.PACHAT;
		}

		public String PARRCDT1;

		public String getPARRCDT1() {
			return this.PARRCDT1;
		}

		public String PARRCDT2;

		public String getPARRCDT2() {
			return this.PARRCDT2;
		}

		public String PECOTAXE;

		public String getPECOTAXE() {
			return this.PECOTAXE;
		}

		public String PPAQUET;

		public String getPPAQUET() {
			return this.PPAQUET;
		}

		public String PEMBAL;

		public String getPEMBAL() {
			return this.PEMBAL;
		}

		public String PGRAMA;

		public String getPGRAMA() {
			return this.PGRAMA;
		}

		public String PDATCRE;

		public String getPDATCRE() {
			return this.PDATCRE;
		}

		public String PDATPRIX;

		public String getPDATPRIX() {
			return this.PDATPRIX;
		}

		public String PDATPA1;

		public String getPDATPA1() {
			return this.PDATPA1;
		}

		public String PPA1;

		public String getPPA1() {
			return this.PPA1;
		}

		public String PPV1;

		public String getPPV1() {
			return this.PPV1;
		}

		public String PPRIXR;

		public String getPPRIXR() {
			return this.PPRIXR;
		}

		public String PPRIXRV1;

		public String getPPRIXRV1() {
			return this.PPRIXRV1;
		}

		public String PPRIXRV2;

		public String getPPRIXRV2() {
			return this.PPRIXRV2;
		}

		public String PPRIXRV3;

		public String getPPRIXRV3() {
			return this.PPRIXRV3;
		}

		public String PPRIREV1;

		public String getPPRIREV1() {
			return this.PPRIREV1;
		}

		public String PPRIREV2;

		public String getPPRIREV2() {
			return this.PPRIREV2;
		}

		public String PPRIREV3;

		public String getPPRIREV3() {
			return this.PPRIREV3;
		}

		public String PDATPV1;

		public String getPDATPV1() {
			return this.PDATPV1;
		}

		public String PMPA;

		public String getPMPA() {
			return this.PMPA;
		}

		public String PETIQ;

		public String getPETIQ() {
			return this.PETIQ;
		}

		public String PFOUR;

		public String getPFOUR() {
			return this.PFOUR;
		}

		public String PPRITTC;

		public String getPPRITTC() {
			return this.PPRITTC;
		}

		public String PIMOD;

		public String getPIMOD() {
			return this.PIMOD;
		}

		public String PPROMREM;

		public String getPPROMREM() {
			return this.PPROMREM;
		}

		public String PUV;

		public String getPUV() {
			return this.PUV;
		}

		public String PUA;

		public String getPUA() {
			return this.PUA;
		}

		public String PDELAI;

		public String getPDELAI() {
			return this.PDELAI;
		}

		public String PMINI;

		public String getPMINI() {
			return this.PMINI;
		}

		public String PMAXI;

		public String getPMAXI() {
			return this.PMAXI;
		}

		public String PCDE;

		public String getPCDE() {
			return this.PCDE;
		}

		public String PEMP;

		public String getPEMP() {
			return this.PEMP;
		}

		public String PPRI1;

		public String getPPRI1() {
			return this.PPRI1;
		}

		public String PPRI2;

		public String getPPRI2() {
			return this.PPRI2;
		}

		public String PPRI3;

		public String getPPRI3() {
			return this.PPRI3;
		}

		public String PPRI4;

		public String getPPRI4() {
			return this.PPRI4;
		}

		public String PPRI5;

		public String getPPRI5() {
			return this.PPRI5;
		}

		public String PPRI6;

		public String getPPRI6() {
			return this.PPRI6;
		}

		public String PREMI1;

		public String getPREMI1() {
			return this.PREMI1;
		}

		public String PREMI2;

		public String getPREMI2() {
			return this.PREMI2;
		}

		public String PREMI3;

		public String getPREMI3() {
			return this.PREMI3;
		}

		public String PREMI4;

		public String getPREMI4() {
			return this.PREMI4;
		}

		public String PREMI5;

		public String getPREMI5() {
			return this.PREMI5;
		}

		public String PREMI6;

		public String getPREMI6() {
			return this.PREMI6;
		}

		public String PQUANT1;

		public String getPQUANT1() {
			return this.PQUANT1;
		}

		public String PQUANT2;

		public String getPQUANT2() {
			return this.PQUANT2;
		}

		public String PQUANT3;

		public String getPQUANT3() {
			return this.PQUANT3;
		}

		public String PQUANT4;

		public String getPQUANT4() {
			return this.PQUANT4;
		}

		public String PQUANT5;

		public String getPQUANT5() {
			return this.PQUANT5;
		}

		public String PQUANT6;

		public String getPQUANT6() {
			return this.PQUANT6;
		}

		public String PEDAT;

		public String getPEDAT() {
			return this.PEDAT;
		}

		public String PSDAT;

		public String getPSDAT() {
			return this.PSDAT;
		}

		public String PRESV;

		public String getPRESV() {
			return this.PRESV;
		}

		public String PREFOU;

		public String getPREFOU() {
			return this.PREFOU;
		}

		public String PGAMEC;

		public String getPGAMEC() {
			return this.PGAMEC;
		}

		public String PGAMER;

		public String getPGAMER() {
			return this.PGAMER;
		}

		public String PGAMEN;

		public String getPGAMEN() {
			return this.PGAMEN;
		}

		public String PTPF;

		public String getPTPF() {
			return this.PTPF;
		}

		public String PSOMMEIL;

		public String getPSOMMEIL() {
			return this.PSOMMEIL;
		}

		public String PINV;

		public String getPINV() {
			return this.PINV;
		}

		public String PMAC;

		public String getPMAC() {
			return this.PMAC;
		}

		public String PREJ;

		public String getPREJ() {
			return this.PREJ;
		}

		public String PMOI;

		public String getPMOI() {
			return this.PMOI;
		}

		public String P1;

		public String getP1() {
			return this.P1;
		}

		public String P2;

		public String getP2() {
			return this.P2;
		}

		public String P3;

		public String getP3() {
			return this.P3;
		}

		public String P4;

		public String getP4() {
			return this.P4;
		}

		public String P5;

		public String getP5() {
			return this.P5;
		}

		public String P6;

		public String getP6() {
			return this.P6;
		}

		public String P7;

		public String getP7() {
			return this.P7;
		}

		public String P8;

		public String getP8() {
			return this.P8;
		}

		public String P9;

		public String getP9() {
			return this.P9;
		}

		public String P10;

		public String getP10() {
			return this.P10;
		}

		public String P11;

		public String getP11() {
			return this.P11;
		}

		public String P12;

		public String getP12() {
			return this.P12;
		}

		public String PAN;

		public String getPAN() {
			return this.PAN;
		}

		public String PAN1;

		public String getPAN1() {
			return this.PAN1;
		}

		public String PAN2;

		public String getPAN2() {
			return this.PAN2;
		}

		public String PPROM;

		public String getPPROM() {
			return this.PPROM;
		}

		public String PPROMD;

		public String getPPROMD() {
			return this.PPROMD;
		}

		public String PCONDI;

		public String getPCONDI() {
			return this.PCONDI;
		}

		public String PRESTE;

		public String getPRESTE() {
			return this.PRESTE;
		}

		public String PTITR;

		public String getPTITR() {
			return this.PTITR;
		}

		public String PPARAG;

		public String getPPARAG() {
			return this.PPARAG;
		}

		public String PPOID;

		public String getPPOID() {
			return this.PPOID;
		}

		public String PKLE;

		public String getPKLE() {
			return this.PKLE;
		}

		public String PLIEN;

		public String getPLIEN() {
			return this.PLIEN;
		}

		public String PSFAM;

		public String getPSFAM() {
			return this.PSFAM;
		}

		public String PREF01;

		public String getPREF01() {
			return this.PREF01;
		}

		public String PREF02;

		public String getPREF02() {
			return this.PREF02;
		}

		public String PREF03;

		public String getPREF03() {
			return this.PREF03;
		}

		public String PTYPE;

		public String getPTYPE() {
			return this.PTYPE;
		}

		public String PLIEU;

		public String getPLIEU() {
			return this.PLIEU;
		}

		public String PCATAL;

		public String getPCATAL() {
			return this.PCATAL;
		}

		public String PUV01;

		public String getPUV01() {
			return this.PUV01;
		}

		public String PCONDI01;

		public String getPCONDI01() {
			return this.PCONDI01;
		}

		public String PUV02;

		public String getPUV02() {
			return this.PUV02;
		}

		public String PCONDI02;

		public String getPCONDI02() {
			return this.PCONDI02;
		}

		public String PPROMDEB;

		public String getPPROMDEB() {
			return this.PPROMDEB;
		}

		public String PREMFOU;

		public String getPREMFOU() {
			return this.PREMFOU;
		}

		public String PQTE01;

		public String getPQTE01() {
			return this.PQTE01;
		}

		public String PQTE02;

		public String getPQTE02() {
			return this.PQTE02;
		}

		public String PRX01;

		public String getPRX01() {
			return this.PRX01;
		}

		public String PRX02;

		public String getPRX02() {
			return this.PRX02;
		}

		public String PCUBAG;

		public String getPCUBAG() {
			return this.PCUBAG;
		}

		public String PREVPOI;

		public String getPREVPOI() {
			return this.PREVPOI;
		}

		public String PREVCUB;

		public String getPREVCUB() {
			return this.PREVCUB;
		}

		public String PREVFAP;

		public String getPREVFAP() {
			return this.PREVFAP;
		}

		public String PINTERNET;

		public String getPINTERNET() {
			return this.PINTERNET;
		}

		public String PFIDEL;

		public String getPFIDEL() {
			return this.PFIDEL;
		}

		public String PCOMMANDE;

		public String getPCOMMANDE() {
			return this.PCOMMANDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.PREF = readString(dis);

					this.PDESIG = readString(dis);

					this.newColumn = readString(dis);

					this.newColumn1 = readString(dis);

					this.PPRIX = readString(dis);

					this.PCTVA = readString(dis);

					this.PCTYV = readString(dis);

					this.PCPN = readString(dis);

					this.PPA = readString(dis);

					this.PQTE = readString(dis);

					this.PFORM01 = readString(dis);

					this.PFORM02 = readString(dis);

					this.PNBCAR = readString(dis);

					this.PVERT = readString(dis);

					this.PEMP2 = readString(dis);

					this.PLIEU2 = readString(dis);

					this.PREMIMAX = readString(dis);

					this.FILLER2 = readString(dis);

					this.PMOUV = readString(dis);

					this.PTENU = readString(dis);

					this.PINCRE = readString(dis);

					this.PPROMPA = readString(dis);

					this.PACHAT = readString(dis);

					this.PARRCDT1 = readString(dis);

					this.PARRCDT2 = readString(dis);

					this.PECOTAXE = readString(dis);

					this.PPAQUET = readString(dis);

					this.PEMBAL = readString(dis);

					this.PGRAMA = readString(dis);

					this.PDATCRE = readString(dis);

					this.PDATPRIX = readString(dis);

					this.PDATPA1 = readString(dis);

					this.PPA1 = readString(dis);

					this.PPV1 = readString(dis);

					this.PPRIXR = readString(dis);

					this.PPRIXRV1 = readString(dis);

					this.PPRIXRV2 = readString(dis);

					this.PPRIXRV3 = readString(dis);

					this.PPRIREV1 = readString(dis);

					this.PPRIREV2 = readString(dis);

					this.PPRIREV3 = readString(dis);

					this.PDATPV1 = readString(dis);

					this.PMPA = readString(dis);

					this.PETIQ = readString(dis);

					this.PFOUR = readString(dis);

					this.PPRITTC = readString(dis);

					this.PIMOD = readString(dis);

					this.PPROMREM = readString(dis);

					this.PUV = readString(dis);

					this.PUA = readString(dis);

					this.PDELAI = readString(dis);

					this.PMINI = readString(dis);

					this.PMAXI = readString(dis);

					this.PCDE = readString(dis);

					this.PEMP = readString(dis);

					this.PPRI1 = readString(dis);

					this.PPRI2 = readString(dis);

					this.PPRI3 = readString(dis);

					this.PPRI4 = readString(dis);

					this.PPRI5 = readString(dis);

					this.PPRI6 = readString(dis);

					this.PREMI1 = readString(dis);

					this.PREMI2 = readString(dis);

					this.PREMI3 = readString(dis);

					this.PREMI4 = readString(dis);

					this.PREMI5 = readString(dis);

					this.PREMI6 = readString(dis);

					this.PQUANT1 = readString(dis);

					this.PQUANT2 = readString(dis);

					this.PQUANT3 = readString(dis);

					this.PQUANT4 = readString(dis);

					this.PQUANT5 = readString(dis);

					this.PQUANT6 = readString(dis);

					this.PEDAT = readString(dis);

					this.PSDAT = readString(dis);

					this.PRESV = readString(dis);

					this.PREFOU = readString(dis);

					this.PGAMEC = readString(dis);

					this.PGAMER = readString(dis);

					this.PGAMEN = readString(dis);

					this.PTPF = readString(dis);

					this.PSOMMEIL = readString(dis);

					this.PINV = readString(dis);

					this.PMAC = readString(dis);

					this.PREJ = readString(dis);

					this.PMOI = readString(dis);

					this.P1 = readString(dis);

					this.P2 = readString(dis);

					this.P3 = readString(dis);

					this.P4 = readString(dis);

					this.P5 = readString(dis);

					this.P6 = readString(dis);

					this.P7 = readString(dis);

					this.P8 = readString(dis);

					this.P9 = readString(dis);

					this.P10 = readString(dis);

					this.P11 = readString(dis);

					this.P12 = readString(dis);

					this.PAN = readString(dis);

					this.PAN1 = readString(dis);

					this.PAN2 = readString(dis);

					this.PPROM = readString(dis);

					this.PPROMD = readString(dis);

					this.PCONDI = readString(dis);

					this.PRESTE = readString(dis);

					this.PTITR = readString(dis);

					this.PPARAG = readString(dis);

					this.PPOID = readString(dis);

					this.PKLE = readString(dis);

					this.PLIEN = readString(dis);

					this.PSFAM = readString(dis);

					this.PREF01 = readString(dis);

					this.PREF02 = readString(dis);

					this.PREF03 = readString(dis);

					this.PTYPE = readString(dis);

					this.PLIEU = readString(dis);

					this.PCATAL = readString(dis);

					this.PUV01 = readString(dis);

					this.PCONDI01 = readString(dis);

					this.PUV02 = readString(dis);

					this.PCONDI02 = readString(dis);

					this.PPROMDEB = readString(dis);

					this.PREMFOU = readString(dis);

					this.PQTE01 = readString(dis);

					this.PQTE02 = readString(dis);

					this.PRX01 = readString(dis);

					this.PRX02 = readString(dis);

					this.PCUBAG = readString(dis);

					this.PREVPOI = readString(dis);

					this.PREVCUB = readString(dis);

					this.PREVFAP = readString(dis);

					this.PINTERNET = readString(dis);

					this.PFIDEL = readString(dis);

					this.PCOMMANDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PREF, dos);

				// String

				writeString(this.PDESIG, dos);

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.PPRIX, dos);

				// String

				writeString(this.PCTVA, dos);

				// String

				writeString(this.PCTYV, dos);

				// String

				writeString(this.PCPN, dos);

				// String

				writeString(this.PPA, dos);

				// String

				writeString(this.PQTE, dos);

				// String

				writeString(this.PFORM01, dos);

				// String

				writeString(this.PFORM02, dos);

				// String

				writeString(this.PNBCAR, dos);

				// String

				writeString(this.PVERT, dos);

				// String

				writeString(this.PEMP2, dos);

				// String

				writeString(this.PLIEU2, dos);

				// String

				writeString(this.PREMIMAX, dos);

				// String

				writeString(this.FILLER2, dos);

				// String

				writeString(this.PMOUV, dos);

				// String

				writeString(this.PTENU, dos);

				// String

				writeString(this.PINCRE, dos);

				// String

				writeString(this.PPROMPA, dos);

				// String

				writeString(this.PACHAT, dos);

				// String

				writeString(this.PARRCDT1, dos);

				// String

				writeString(this.PARRCDT2, dos);

				// String

				writeString(this.PECOTAXE, dos);

				// String

				writeString(this.PPAQUET, dos);

				// String

				writeString(this.PEMBAL, dos);

				// String

				writeString(this.PGRAMA, dos);

				// String

				writeString(this.PDATCRE, dos);

				// String

				writeString(this.PDATPRIX, dos);

				// String

				writeString(this.PDATPA1, dos);

				// String

				writeString(this.PPA1, dos);

				// String

				writeString(this.PPV1, dos);

				// String

				writeString(this.PPRIXR, dos);

				// String

				writeString(this.PPRIXRV1, dos);

				// String

				writeString(this.PPRIXRV2, dos);

				// String

				writeString(this.PPRIXRV3, dos);

				// String

				writeString(this.PPRIREV1, dos);

				// String

				writeString(this.PPRIREV2, dos);

				// String

				writeString(this.PPRIREV3, dos);

				// String

				writeString(this.PDATPV1, dos);

				// String

				writeString(this.PMPA, dos);

				// String

				writeString(this.PETIQ, dos);

				// String

				writeString(this.PFOUR, dos);

				// String

				writeString(this.PPRITTC, dos);

				// String

				writeString(this.PIMOD, dos);

				// String

				writeString(this.PPROMREM, dos);

				// String

				writeString(this.PUV, dos);

				// String

				writeString(this.PUA, dos);

				// String

				writeString(this.PDELAI, dos);

				// String

				writeString(this.PMINI, dos);

				// String

				writeString(this.PMAXI, dos);

				// String

				writeString(this.PCDE, dos);

				// String

				writeString(this.PEMP, dos);

				// String

				writeString(this.PPRI1, dos);

				// String

				writeString(this.PPRI2, dos);

				// String

				writeString(this.PPRI3, dos);

				// String

				writeString(this.PPRI4, dos);

				// String

				writeString(this.PPRI5, dos);

				// String

				writeString(this.PPRI6, dos);

				// String

				writeString(this.PREMI1, dos);

				// String

				writeString(this.PREMI2, dos);

				// String

				writeString(this.PREMI3, dos);

				// String

				writeString(this.PREMI4, dos);

				// String

				writeString(this.PREMI5, dos);

				// String

				writeString(this.PREMI6, dos);

				// String

				writeString(this.PQUANT1, dos);

				// String

				writeString(this.PQUANT2, dos);

				// String

				writeString(this.PQUANT3, dos);

				// String

				writeString(this.PQUANT4, dos);

				// String

				writeString(this.PQUANT5, dos);

				// String

				writeString(this.PQUANT6, dos);

				// String

				writeString(this.PEDAT, dos);

				// String

				writeString(this.PSDAT, dos);

				// String

				writeString(this.PRESV, dos);

				// String

				writeString(this.PREFOU, dos);

				// String

				writeString(this.PGAMEC, dos);

				// String

				writeString(this.PGAMER, dos);

				// String

				writeString(this.PGAMEN, dos);

				// String

				writeString(this.PTPF, dos);

				// String

				writeString(this.PSOMMEIL, dos);

				// String

				writeString(this.PINV, dos);

				// String

				writeString(this.PMAC, dos);

				// String

				writeString(this.PREJ, dos);

				// String

				writeString(this.PMOI, dos);

				// String

				writeString(this.P1, dos);

				// String

				writeString(this.P2, dos);

				// String

				writeString(this.P3, dos);

				// String

				writeString(this.P4, dos);

				// String

				writeString(this.P5, dos);

				// String

				writeString(this.P6, dos);

				// String

				writeString(this.P7, dos);

				// String

				writeString(this.P8, dos);

				// String

				writeString(this.P9, dos);

				// String

				writeString(this.P10, dos);

				// String

				writeString(this.P11, dos);

				// String

				writeString(this.P12, dos);

				// String

				writeString(this.PAN, dos);

				// String

				writeString(this.PAN1, dos);

				// String

				writeString(this.PAN2, dos);

				// String

				writeString(this.PPROM, dos);

				// String

				writeString(this.PPROMD, dos);

				// String

				writeString(this.PCONDI, dos);

				// String

				writeString(this.PRESTE, dos);

				// String

				writeString(this.PTITR, dos);

				// String

				writeString(this.PPARAG, dos);

				// String

				writeString(this.PPOID, dos);

				// String

				writeString(this.PKLE, dos);

				// String

				writeString(this.PLIEN, dos);

				// String

				writeString(this.PSFAM, dos);

				// String

				writeString(this.PREF01, dos);

				// String

				writeString(this.PREF02, dos);

				// String

				writeString(this.PREF03, dos);

				// String

				writeString(this.PTYPE, dos);

				// String

				writeString(this.PLIEU, dos);

				// String

				writeString(this.PCATAL, dos);

				// String

				writeString(this.PUV01, dos);

				// String

				writeString(this.PCONDI01, dos);

				// String

				writeString(this.PUV02, dos);

				// String

				writeString(this.PCONDI02, dos);

				// String

				writeString(this.PPROMDEB, dos);

				// String

				writeString(this.PREMFOU, dos);

				// String

				writeString(this.PQTE01, dos);

				// String

				writeString(this.PQTE02, dos);

				// String

				writeString(this.PRX01, dos);

				// String

				writeString(this.PRX02, dos);

				// String

				writeString(this.PCUBAG, dos);

				// String

				writeString(this.PREVPOI, dos);

				// String

				writeString(this.PREVCUB, dos);

				// String

				writeString(this.PREVFAP, dos);

				// String

				writeString(this.PINTERNET, dos);

				// String

				writeString(this.PFIDEL, dos);

				// String

				writeString(this.PCOMMANDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PREF=" + PREF);
			sb.append(",PDESIG=" + PDESIG);
			sb.append(",newColumn=" + newColumn);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",PPRIX=" + PPRIX);
			sb.append(",PCTVA=" + PCTVA);
			sb.append(",PCTYV=" + PCTYV);
			sb.append(",PCPN=" + PCPN);
			sb.append(",PPA=" + PPA);
			sb.append(",PQTE=" + PQTE);
			sb.append(",PFORM01=" + PFORM01);
			sb.append(",PFORM02=" + PFORM02);
			sb.append(",PNBCAR=" + PNBCAR);
			sb.append(",PVERT=" + PVERT);
			sb.append(",PEMP2=" + PEMP2);
			sb.append(",PLIEU2=" + PLIEU2);
			sb.append(",PREMIMAX=" + PREMIMAX);
			sb.append(",FILLER2=" + FILLER2);
			sb.append(",PMOUV=" + PMOUV);
			sb.append(",PTENU=" + PTENU);
			sb.append(",PINCRE=" + PINCRE);
			sb.append(",PPROMPA=" + PPROMPA);
			sb.append(",PACHAT=" + PACHAT);
			sb.append(",PARRCDT1=" + PARRCDT1);
			sb.append(",PARRCDT2=" + PARRCDT2);
			sb.append(",PECOTAXE=" + PECOTAXE);
			sb.append(",PPAQUET=" + PPAQUET);
			sb.append(",PEMBAL=" + PEMBAL);
			sb.append(",PGRAMA=" + PGRAMA);
			sb.append(",PDATCRE=" + PDATCRE);
			sb.append(",PDATPRIX=" + PDATPRIX);
			sb.append(",PDATPA1=" + PDATPA1);
			sb.append(",PPA1=" + PPA1);
			sb.append(",PPV1=" + PPV1);
			sb.append(",PPRIXR=" + PPRIXR);
			sb.append(",PPRIXRV1=" + PPRIXRV1);
			sb.append(",PPRIXRV2=" + PPRIXRV2);
			sb.append(",PPRIXRV3=" + PPRIXRV3);
			sb.append(",PPRIREV1=" + PPRIREV1);
			sb.append(",PPRIREV2=" + PPRIREV2);
			sb.append(",PPRIREV3=" + PPRIREV3);
			sb.append(",PDATPV1=" + PDATPV1);
			sb.append(",PMPA=" + PMPA);
			sb.append(",PETIQ=" + PETIQ);
			sb.append(",PFOUR=" + PFOUR);
			sb.append(",PPRITTC=" + PPRITTC);
			sb.append(",PIMOD=" + PIMOD);
			sb.append(",PPROMREM=" + PPROMREM);
			sb.append(",PUV=" + PUV);
			sb.append(",PUA=" + PUA);
			sb.append(",PDELAI=" + PDELAI);
			sb.append(",PMINI=" + PMINI);
			sb.append(",PMAXI=" + PMAXI);
			sb.append(",PCDE=" + PCDE);
			sb.append(",PEMP=" + PEMP);
			sb.append(",PPRI1=" + PPRI1);
			sb.append(",PPRI2=" + PPRI2);
			sb.append(",PPRI3=" + PPRI3);
			sb.append(",PPRI4=" + PPRI4);
			sb.append(",PPRI5=" + PPRI5);
			sb.append(",PPRI6=" + PPRI6);
			sb.append(",PREMI1=" + PREMI1);
			sb.append(",PREMI2=" + PREMI2);
			sb.append(",PREMI3=" + PREMI3);
			sb.append(",PREMI4=" + PREMI4);
			sb.append(",PREMI5=" + PREMI5);
			sb.append(",PREMI6=" + PREMI6);
			sb.append(",PQUANT1=" + PQUANT1);
			sb.append(",PQUANT2=" + PQUANT2);
			sb.append(",PQUANT3=" + PQUANT3);
			sb.append(",PQUANT4=" + PQUANT4);
			sb.append(",PQUANT5=" + PQUANT5);
			sb.append(",PQUANT6=" + PQUANT6);
			sb.append(",PEDAT=" + PEDAT);
			sb.append(",PSDAT=" + PSDAT);
			sb.append(",PRESV=" + PRESV);
			sb.append(",PREFOU=" + PREFOU);
			sb.append(",PGAMEC=" + PGAMEC);
			sb.append(",PGAMER=" + PGAMER);
			sb.append(",PGAMEN=" + PGAMEN);
			sb.append(",PTPF=" + PTPF);
			sb.append(",PSOMMEIL=" + PSOMMEIL);
			sb.append(",PINV=" + PINV);
			sb.append(",PMAC=" + PMAC);
			sb.append(",PREJ=" + PREJ);
			sb.append(",PMOI=" + PMOI);
			sb.append(",P1=" + P1);
			sb.append(",P2=" + P2);
			sb.append(",P3=" + P3);
			sb.append(",P4=" + P4);
			sb.append(",P5=" + P5);
			sb.append(",P6=" + P6);
			sb.append(",P7=" + P7);
			sb.append(",P8=" + P8);
			sb.append(",P9=" + P9);
			sb.append(",P10=" + P10);
			sb.append(",P11=" + P11);
			sb.append(",P12=" + P12);
			sb.append(",PAN=" + PAN);
			sb.append(",PAN1=" + PAN1);
			sb.append(",PAN2=" + PAN2);
			sb.append(",PPROM=" + PPROM);
			sb.append(",PPROMD=" + PPROMD);
			sb.append(",PCONDI=" + PCONDI);
			sb.append(",PRESTE=" + PRESTE);
			sb.append(",PTITR=" + PTITR);
			sb.append(",PPARAG=" + PPARAG);
			sb.append(",PPOID=" + PPOID);
			sb.append(",PKLE=" + PKLE);
			sb.append(",PLIEN=" + PLIEN);
			sb.append(",PSFAM=" + PSFAM);
			sb.append(",PREF01=" + PREF01);
			sb.append(",PREF02=" + PREF02);
			sb.append(",PREF03=" + PREF03);
			sb.append(",PTYPE=" + PTYPE);
			sb.append(",PLIEU=" + PLIEU);
			sb.append(",PCATAL=" + PCATAL);
			sb.append(",PUV01=" + PUV01);
			sb.append(",PCONDI01=" + PCONDI01);
			sb.append(",PUV02=" + PUV02);
			sb.append(",PCONDI02=" + PCONDI02);
			sb.append(",PPROMDEB=" + PPROMDEB);
			sb.append(",PREMFOU=" + PREMFOU);
			sb.append(",PQTE01=" + PQTE01);
			sb.append(",PQTE02=" + PQTE02);
			sb.append(",PRX01=" + PRX01);
			sb.append(",PRX02=" + PRX02);
			sb.append(",PCUBAG=" + PCUBAG);
			sb.append(",PREVPOI=" + PREVPOI);
			sb.append(",PREVCUB=" + PREVCUB);
			sb.append(",PREVFAP=" + PREVFAP);
			sb.append(",PINTERNET=" + PINTERNET);
			sb.append(",PFIDEL=" + PFIDEL);
			sb.append(",PCOMMANDE=" + PCOMMANDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_43Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_43_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();
				copyOfcopyOfcopyOfcopyOfmain_2_1Struct copyOfcopyOfcopyOfcopyOfmain_2_1 = new copyOfcopyOfcopyOfcopyOfmain_2_1Struct();

				/**
				 * [tDBOutput_39 begin ] start
				 */

				ok_Hash.put("tDBOutput_39", false);
				start_Hash.put("tDBOutput_39", System.currentTimeMillis());

				currentComponent = "tDBOutput_39";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_2_1");
				}

				int tos_count_tDBOutput_39 = 0;

				String dbschema_tDBOutput_39 = null;
				dbschema_tDBOutput_39 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_39 = null;
				if (dbschema_tDBOutput_39 == null || dbschema_tDBOutput_39.trim().length() == 0) {
					tableName_tDBOutput_39 = ("stock");
				} else {
					tableName_tDBOutput_39 = dbschema_tDBOutput_39 + "\".\"" + ("stock");
				}

				int nb_line_tDBOutput_39 = 0;
				int nb_line_update_tDBOutput_39 = 0;
				int nb_line_inserted_tDBOutput_39 = 0;
				int nb_line_deleted_tDBOutput_39 = 0;
				int nb_line_rejected_tDBOutput_39 = 0;

				int deletedCount_tDBOutput_39 = 0;
				int updatedCount_tDBOutput_39 = 0;
				int insertedCount_tDBOutput_39 = 0;
				int rejectedCount_tDBOutput_39 = 0;

				boolean whetherReject_tDBOutput_39 = false;

				java.sql.Connection conn_tDBOutput_39 = null;
				String dbUser_tDBOutput_39 = null;

				conn_tDBOutput_39 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_39 = 10000;
				int batchSizeCounter_tDBOutput_39 = 0;

				int count_tDBOutput_39 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_39 = conn_tDBOutput_39.createStatement()) {
					stmtClear_tDBOutput_39.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_39 + "\"");
				}
				String insert_tDBOutput_39 = "INSERT INTO \"" + tableName_tDBOutput_39
						+ "\" (\"idstock\",\"conditionnement_unite_vente\",\"date_derniere_sortie\",\"date_derniere_entree\",\"encours_commande_client\",\"encours_fournisseur\",\"quantite_dinventaire\",\"quantite_stock\",\"quantite_stock_magasin\",\"quantite_stock_reserve\",\"reste_de_conditionnement\",\"stock_maximum\",\"stock_minimum\",\"idarticle\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_39 = conn_tDBOutput_39.prepareStatement(insert_tDBOutput_39);
				resourceMap.put("pstmt_tDBOutput_39", pstmt_tDBOutput_39);

				/**
				 * [tDBOutput_39 begin ] stop
				 */

				/**
				 * [tMap_39 begin ] start
				 */

				ok_Hash.put("tMap_39", false);
				start_Hash.put("tMap_39", System.currentTimeMillis());

				currentComponent = "tMap_39";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row38");
				}

				int tos_count_tMap_39 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_39__Struct {
				}
				Var__tMap_39__Struct Var__tMap_39 = new Var__tMap_39__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_2_1Struct copyOfcopyOfcopyOfcopyOfmain_2_1_tmp = new copyOfcopyOfcopyOfcopyOfmain_2_1Struct();
// ###############################

				/**
				 * [tMap_39 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_43 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_43", false);
				start_Hash.put("tFileInputDelimited_43", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_43";

				int tos_count_tFileInputDelimited_43 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_43 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_43 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_43,
							row38Struct row38) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_43 = 0;

						columnIndexWithD_tFileInputDelimited_43 = 0;

						row38.PREF = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 1;

						row38.PDESIG = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 2;

						row38.newColumn = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 3;

						row38.newColumn1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 4;

						row38.PPRIX = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 5;

						row38.PCTVA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 6;

						row38.PCTYV = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 7;

						row38.PCPN = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 8;

						row38.PPA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 9;

						row38.PQTE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 10;

						row38.PFORM01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 11;

						row38.PFORM02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 12;

						row38.PNBCAR = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 13;

						row38.PVERT = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 14;

						row38.PEMP2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 15;

						row38.PLIEU2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 16;

						row38.PREMIMAX = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 17;

						row38.FILLER2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 18;

						row38.PMOUV = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 19;

						row38.PTENU = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 20;

						row38.PINCRE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 21;

						row38.PPROMPA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 22;

						row38.PACHAT = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 23;

						row38.PARRCDT1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 24;

						row38.PARRCDT2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 25;

						row38.PECOTAXE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 26;

						row38.PPAQUET = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 27;

						row38.PEMBAL = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 28;

						row38.PGRAMA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 29;

						row38.PDATCRE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 30;

						row38.PDATPRIX = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 31;

						row38.PDATPA1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 32;

						row38.PPA1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 33;

						row38.PPV1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 34;

						row38.PPRIXR = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 35;

						row38.PPRIXRV1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 36;

						row38.PPRIXRV2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 37;

						row38.PPRIXRV3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 38;

						row38.PPRIREV1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 39;

						row38.PPRIREV2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 40;

						row38.PPRIREV3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 41;

						row38.PDATPV1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 42;

						row38.PMPA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 43;

						row38.PETIQ = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 44;

						row38.PFOUR = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 45;

						row38.PPRITTC = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 46;

						row38.PIMOD = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 47;

						row38.PPROMREM = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 48;

						row38.PUV = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 49;

						row38.PUA = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 50;

						row38.PDELAI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 51;

						row38.PMINI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 52;

						row38.PMAXI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 53;

						row38.PCDE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 54;

						row38.PEMP = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 55;

						row38.PPRI1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 56;

						row38.PPRI2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 57;

						row38.PPRI3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 58;

						row38.PPRI4 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 59;

						row38.PPRI5 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 60;

						row38.PPRI6 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 61;

						row38.PREMI1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 62;

						row38.PREMI2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 63;

						row38.PREMI3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 64;

						row38.PREMI4 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 65;

						row38.PREMI5 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 66;

						row38.PREMI6 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 67;

						row38.PQUANT1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 68;

						row38.PQUANT2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 69;

						row38.PQUANT3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 70;

						row38.PQUANT4 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 71;

						row38.PQUANT5 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 72;

						row38.PQUANT6 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 73;

						row38.PEDAT = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 74;

						row38.PSDAT = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 75;

						row38.PRESV = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 76;

						row38.PREFOU = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 77;

						row38.PGAMEC = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 78;

						row38.PGAMER = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 79;

						row38.PGAMEN = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 80;

						row38.PTPF = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 81;

						row38.PSOMMEIL = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 82;

						row38.PINV = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 83;

						row38.PMAC = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 84;

						row38.PREJ = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 85;

						row38.PMOI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 86;

						row38.P1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 87;

						row38.P2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 88;

						row38.P3 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 89;

						row38.P4 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 90;

						row38.P5 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 91;

						row38.P6 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 92;

						row38.P7 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 93;

						row38.P8 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 94;

						row38.P9 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 95;

						row38.P10 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 96;

						row38.P11 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 97;

						row38.P12 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 98;

						row38.PAN = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 99;

						row38.PAN1 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_43,
							row38Struct row38) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_43 = 0;

						columnIndexWithD_tFileInputDelimited_43 = 100;

						row38.PAN2 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 101;

						row38.PPROM = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 102;

						row38.PPROMD = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 103;

						row38.PCONDI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 104;

						row38.PRESTE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 105;

						row38.PTITR = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 106;

						row38.PPARAG = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 107;

						row38.PPOID = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 108;

						row38.PKLE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 109;

						row38.PLIEN = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 110;

						row38.PSFAM = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 111;

						row38.PREF01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 112;

						row38.PREF02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 113;

						row38.PREF03 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 114;

						row38.PTYPE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 115;

						row38.PLIEU = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 116;

						row38.PCATAL = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 117;

						row38.PUV01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 118;

						row38.PCONDI01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 119;

						row38.PUV02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 120;

						row38.PCONDI02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 121;

						row38.PPROMDEB = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 122;

						row38.PREMFOU = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 123;

						row38.PQTE01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 124;

						row38.PQTE02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 125;

						row38.PRX01 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 126;

						row38.PRX02 = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 127;

						row38.PCUBAG = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 128;

						row38.PREVPOI = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 129;

						row38.PREVCUB = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 130;

						row38.PREVFAP = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 131;

						row38.PINTERNET = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 132;

						row38.PFIDEL = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

						columnIndexWithD_tFileInputDelimited_43 = 133;

						row38.PCOMMANDE = fid_tFileInputDelimited_43.get(columnIndexWithD_tFileInputDelimited_43);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_43,
							row38Struct row38) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_43, row38);

						valueToConn_1(fid_tFileInputDelimited_43, row38);

					}

				}
				RowHelper_tFileInputDelimited_43 rowHelper_tFileInputDelimited_43 = new RowHelper_tFileInputDelimited_43();

				int nb_line_tFileInputDelimited_43 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_43 = null;
				int limit_tFileInputDelimited_43 = -1;
				try {

					Object filename_tFileInputDelimited_43 = "C:/DEV/Data/Base Montauban/Article.csv";
					if (filename_tFileInputDelimited_43 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_43 = 0, random_value_tFileInputDelimited_43 = -1;
						if (footer_value_tFileInputDelimited_43 > 0 || random_value_tFileInputDelimited_43 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_43 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Article.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_43, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_43 != null && fid_tFileInputDelimited_43.nextRecord()) {
						rowstate_tFileInputDelimited_43.reset();

						row38 = null;

						boolean whetherReject_tFileInputDelimited_43 = false;
						row38 = new row38Struct();
						try {

							rowHelper_tFileInputDelimited_43.valueToConn(fid_tFileInputDelimited_43, row38);

							if (rowstate_tFileInputDelimited_43.getException() != null) {
								throw rowstate_tFileInputDelimited_43.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_43 = true;

							System.err.println(e.getMessage());
							row38 = null;

						}

						/**
						 * [tFileInputDelimited_43 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_43 main ] start
						 */

						currentComponent = "tFileInputDelimited_43";

						tos_count_tFileInputDelimited_43++;

						/**
						 * [tFileInputDelimited_43 main ] stop
						 */

						/**
						 * [tFileInputDelimited_43 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_43";

						/**
						 * [tFileInputDelimited_43 process_data_begin ] stop
						 */
// Start of branch "row38"
						if (row38 != null) {

							/**
							 * [tMap_39 main ] start
							 */

							currentComponent = "tMap_39";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row38");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_39 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_39 = false;
							boolean mainRowRejected_tMap_39 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_39__Struct Var = Var__tMap_39;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_2_1 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_2_1'
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.idstock = Numeric.sequence("stock", 1, 1);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.conditionnement_unite_vente = row38.PCONDI
										.equals("0.9") ? new Integer(1) : Integer.parseInt(row38.PCONDI);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.date_derniere_sortie = row38.PEDAT;
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.date_derniere_entree = row38.PSDAT;
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.encours_commande_client = Integer
										.parseInt(row38.PRESV);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.encours_fournisseur = null;
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.quantite_dinventaire = Integer
										.parseInt(row38.PINV);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.quantite_stock = Integer.parseInt(row38.PQTE);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.quantite_stock_magasin = null;
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.quantite_stock_reserve = null;
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.reste_de_conditionnement = Integer
										.parseInt(row38.PRESTE);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.stock_maximum = Integer.parseInt(row38.PMINI);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.stock_minimum = Integer.parseInt(row38.PMAXI);
								copyOfcopyOfcopyOfcopyOfmain_2_1_tmp.idarticle = row38.PREF;
								copyOfcopyOfcopyOfcopyOfmain_2_1 = copyOfcopyOfcopyOfcopyOfmain_2_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_39 = false;

							tos_count_tMap_39++;

							/**
							 * [tMap_39 main ] stop
							 */

							/**
							 * [tMap_39 process_data_begin ] start
							 */

							currentComponent = "tMap_39";

							/**
							 * [tMap_39 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_2_1"
							if (copyOfcopyOfcopyOfcopyOfmain_2_1 != null) {

								/**
								 * [tDBOutput_39 main ] start
								 */

								currentComponent = "tDBOutput_39";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_2_1");
								}

								whetherReject_tDBOutput_39 = false;
								pstmt_tDBOutput_39.setInt(1, copyOfcopyOfcopyOfcopyOfmain_2_1.idstock);

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.conditionnement_unite_vente == null) {
									pstmt_tDBOutput_39.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(2,
											copyOfcopyOfcopyOfcopyOfmain_2_1.conditionnement_unite_vente);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.date_derniere_sortie == null) {
									pstmt_tDBOutput_39.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_39.setString(3,
											copyOfcopyOfcopyOfcopyOfmain_2_1.date_derniere_sortie);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.date_derniere_entree == null) {
									pstmt_tDBOutput_39.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_39.setString(4,
											copyOfcopyOfcopyOfcopyOfmain_2_1.date_derniere_entree);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.encours_commande_client == null) {
									pstmt_tDBOutput_39.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(5,
											copyOfcopyOfcopyOfcopyOfmain_2_1.encours_commande_client);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.encours_fournisseur == null) {
									pstmt_tDBOutput_39.setNull(6, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(6, copyOfcopyOfcopyOfcopyOfmain_2_1.encours_fournisseur);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_dinventaire == null) {
									pstmt_tDBOutput_39.setNull(7, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(7, copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_dinventaire);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock == null) {
									pstmt_tDBOutput_39.setNull(8, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(8, copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock_magasin == null) {
									pstmt_tDBOutput_39.setNull(9, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(9,
											copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock_magasin);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock_reserve == null) {
									pstmt_tDBOutput_39.setNull(10, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(10,
											copyOfcopyOfcopyOfcopyOfmain_2_1.quantite_stock_reserve);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.reste_de_conditionnement == null) {
									pstmt_tDBOutput_39.setNull(11, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(11,
											copyOfcopyOfcopyOfcopyOfmain_2_1.reste_de_conditionnement);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.stock_maximum == null) {
									pstmt_tDBOutput_39.setNull(12, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(12, copyOfcopyOfcopyOfcopyOfmain_2_1.stock_maximum);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.stock_minimum == null) {
									pstmt_tDBOutput_39.setNull(13, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_39.setInt(13, copyOfcopyOfcopyOfcopyOfmain_2_1.stock_minimum);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_1.idarticle == null) {
									pstmt_tDBOutput_39.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_39.setString(14, copyOfcopyOfcopyOfcopyOfmain_2_1.idarticle);
								}

								pstmt_tDBOutput_39.addBatch();
								nb_line_tDBOutput_39++;

								batchSizeCounter_tDBOutput_39++;

								if ((batchSize_tDBOutput_39 > 0)
										&& (batchSize_tDBOutput_39 <= batchSizeCounter_tDBOutput_39)) {
									try {
										int countSum_tDBOutput_39 = 0;

										for (int countEach_tDBOutput_39 : pstmt_tDBOutput_39.executeBatch()) {
											countSum_tDBOutput_39 += (countEach_tDBOutput_39 < 0 ? 0
													: countEach_tDBOutput_39);
										}

										insertedCount_tDBOutput_39 += countSum_tDBOutput_39;

										batchSizeCounter_tDBOutput_39 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_39) {
										java.sql.SQLException ne_tDBOutput_39 = e_tDBOutput_39.getNextException(),
												sqle_tDBOutput_39 = null;
										String errormessage_tDBOutput_39;
										if (ne_tDBOutput_39 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_39 = new java.sql.SQLException(
													e_tDBOutput_39.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_39.getMessage(),
													ne_tDBOutput_39.getSQLState(), ne_tDBOutput_39.getErrorCode(),
													ne_tDBOutput_39);
											errormessage_tDBOutput_39 = sqle_tDBOutput_39.getMessage();
										} else {
											errormessage_tDBOutput_39 = e_tDBOutput_39.getMessage();
										}

										int countSum_tDBOutput_39 = 0;
										for (int countEach_tDBOutput_39 : e_tDBOutput_39.getUpdateCounts()) {
											countSum_tDBOutput_39 += (countEach_tDBOutput_39 < 0 ? 0
													: countEach_tDBOutput_39);
										}

										insertedCount_tDBOutput_39 += countSum_tDBOutput_39;

										System.err.println(errormessage_tDBOutput_39);

									}
								}

								tos_count_tDBOutput_39++;

								/**
								 * [tDBOutput_39 main ] stop
								 */

								/**
								 * [tDBOutput_39 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_39";

								/**
								 * [tDBOutput_39 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_39 process_data_end ] start
								 */

								currentComponent = "tDBOutput_39";

								/**
								 * [tDBOutput_39 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_2_1"

							/**
							 * [tMap_39 process_data_end ] start
							 */

							currentComponent = "tMap_39";

							/**
							 * [tMap_39 process_data_end ] stop
							 */

						} // End of branch "row38"

						/**
						 * [tFileInputDelimited_43 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_43";

						/**
						 * [tFileInputDelimited_43 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_43 end ] start
						 */

						currentComponent = "tFileInputDelimited_43";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Article.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_43 != null) {
							fid_tFileInputDelimited_43.close();
						}
					}
					if (fid_tFileInputDelimited_43 != null) {
						globalMap.put("tFileInputDelimited_43_NB_LINE", fid_tFileInputDelimited_43.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_43", true);
				end_Hash.put("tFileInputDelimited_43", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_43 end ] stop
				 */

				/**
				 * [tMap_39 end ] start
				 */

				currentComponent = "tMap_39";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row38");
				}

				ok_Hash.put("tMap_39", true);
				end_Hash.put("tMap_39", System.currentTimeMillis());

				/**
				 * [tMap_39 end ] stop
				 */

				/**
				 * [tDBOutput_39 end ] start
				 */

				currentComponent = "tDBOutput_39";

				try {
					int countSum_tDBOutput_39 = 0;
					if (pstmt_tDBOutput_39 != null && batchSizeCounter_tDBOutput_39 > 0) {

						for (int countEach_tDBOutput_39 : pstmt_tDBOutput_39.executeBatch()) {
							countSum_tDBOutput_39 += (countEach_tDBOutput_39 < 0 ? 0 : countEach_tDBOutput_39);
						}

					}

					insertedCount_tDBOutput_39 += countSum_tDBOutput_39;

				} catch (java.sql.BatchUpdateException e_tDBOutput_39) {
					java.sql.SQLException ne_tDBOutput_39 = e_tDBOutput_39.getNextException(), sqle_tDBOutput_39 = null;
					String errormessage_tDBOutput_39;
					if (ne_tDBOutput_39 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_39 = new java.sql.SQLException(
								e_tDBOutput_39.getMessage() + "\ncaused by: " + ne_tDBOutput_39.getMessage(),
								ne_tDBOutput_39.getSQLState(), ne_tDBOutput_39.getErrorCode(), ne_tDBOutput_39);
						errormessage_tDBOutput_39 = sqle_tDBOutput_39.getMessage();
					} else {
						errormessage_tDBOutput_39 = e_tDBOutput_39.getMessage();
					}

					int countSum_tDBOutput_39 = 0;
					for (int countEach_tDBOutput_39 : e_tDBOutput_39.getUpdateCounts()) {
						countSum_tDBOutput_39 += (countEach_tDBOutput_39 < 0 ? 0 : countEach_tDBOutput_39);
					}

					insertedCount_tDBOutput_39 += countSum_tDBOutput_39;

					System.err.println(errormessage_tDBOutput_39);

				}

				if (pstmt_tDBOutput_39 != null) {

					pstmt_tDBOutput_39.close();
					resourceMap.remove("pstmt_tDBOutput_39");
				}
				resourceMap.put("statementClosed_tDBOutput_39", true);

				nb_line_deleted_tDBOutput_39 = nb_line_deleted_tDBOutput_39 + deletedCount_tDBOutput_39;
				nb_line_update_tDBOutput_39 = nb_line_update_tDBOutput_39 + updatedCount_tDBOutput_39;
				nb_line_inserted_tDBOutput_39 = nb_line_inserted_tDBOutput_39 + insertedCount_tDBOutput_39;
				nb_line_rejected_tDBOutput_39 = nb_line_rejected_tDBOutput_39 + rejectedCount_tDBOutput_39;

				globalMap.put("tDBOutput_39_NB_LINE", nb_line_tDBOutput_39);
				globalMap.put("tDBOutput_39_NB_LINE_UPDATED", nb_line_update_tDBOutput_39);
				globalMap.put("tDBOutput_39_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_39);
				globalMap.put("tDBOutput_39_NB_LINE_DELETED", nb_line_deleted_tDBOutput_39);
				globalMap.put("tDBOutput_39_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_39);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_2_1");
				}

				ok_Hash.put("tDBOutput_39", true);
				end_Hash.put("tDBOutput_39", System.currentTimeMillis());

				/**
				 * [tDBOutput_39 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_43:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk41", 0, "ok");
			}

			tFileInputDelimited_44Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_43 finally ] start
				 */

				currentComponent = "tFileInputDelimited_43";

				/**
				 * [tFileInputDelimited_43 finally ] stop
				 */

				/**
				 * [tMap_39 finally ] start
				 */

				currentComponent = "tMap_39";

				/**
				 * [tMap_39 finally ] stop
				 */

				/**
				 * [tDBOutput_39 finally ] start
				 */

				currentComponent = "tDBOutput_39";

				if (resourceMap.get("statementClosed_tDBOutput_39") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_39 = null;
					if ((pstmtToClose_tDBOutput_39 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_39")) != null) {
						pstmtToClose_tDBOutput_39.close();
					}
				}

				/**
				 * [tDBOutput_39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_43_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_2_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_2_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int iddetails_fournisseur;

		public int getIddetails_fournisseur() {
			return this.iddetails_fournisseur;
		}

		public String date_derniere_commande;

		public String getDate_derniere_commande() {
			return this.date_derniere_commande;
		}

		public String date_derniere_facture;

		public String getDate_derniere_facture() {
			return this.date_derniere_facture;
		}

		public String date_prochaine_livraison;

		public String getDate_prochaine_livraison() {
			return this.date_prochaine_livraison;
		}

		public Integer delai_approvisionnement;

		public Integer getDelai_approvisionnement() {
			return this.delai_approvisionnement;
		}

		public Integer echeance;

		public Integer getEcheance() {
			return this.echeance;
		}

		public Boolean flag_modif;

		public Boolean getFlag_modif() {
			return this.flag_modif;
		}

		public Integer jour_echeance_15;

		public Integer getJour_echeance_15() {
			return this.jour_echeance_15;
		}

		public Integer jour_echeance_si_fm;

		public Integer getJour_echeance_si_fm() {
			return this.jour_echeance_si_fm;
		}

		public Integer montant_transport_kg;

		public Integer getMontant_transport_kg() {
			return this.montant_transport_kg;
		}

		public Integer montant_transport_m3;

		public Integer getMontant_transport_m3() {
			return this.montant_transport_m3;
		}

		public Integer taux_escompte;

		public Integer getTaux_escompte() {
			return this.taux_escompte;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddetails_fournisseur;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_2_2Struct other = (copyOfcopyOfcopyOfcopyOfmain_2_2Struct) obj;

			if (this.iddetails_fournisseur != other.iddetails_fournisseur)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_2_2Struct other) {

			other.iddetails_fournisseur = this.iddetails_fournisseur;
			other.date_derniere_commande = this.date_derniere_commande;
			other.date_derniere_facture = this.date_derniere_facture;
			other.date_prochaine_livraison = this.date_prochaine_livraison;
			other.delai_approvisionnement = this.delai_approvisionnement;
			other.echeance = this.echeance;
			other.flag_modif = this.flag_modif;
			other.jour_echeance_15 = this.jour_echeance_15;
			other.jour_echeance_si_fm = this.jour_echeance_si_fm;
			other.montant_transport_kg = this.montant_transport_kg;
			other.montant_transport_m3 = this.montant_transport_m3;
			other.taux_escompte = this.taux_escompte;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_2_2Struct other) {

			other.iddetails_fournisseur = this.iddetails_fournisseur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.iddetails_fournisseur = dis.readInt();

					this.date_derniere_commande = readString(dis);

					this.date_derniere_facture = readString(dis);

					this.date_prochaine_livraison = readString(dis);

					this.delai_approvisionnement = readInteger(dis);

					this.echeance = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.flag_modif = null;
					} else {
						this.flag_modif = dis.readBoolean();
					}

					this.jour_echeance_15 = readInteger(dis);

					this.jour_echeance_si_fm = readInteger(dis);

					this.montant_transport_kg = readInteger(dis);

					this.montant_transport_m3 = readInteger(dis);

					this.taux_escompte = readInteger(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.iddetails_fournisseur);

				// String

				writeString(this.date_derniere_commande, dos);

				// String

				writeString(this.date_derniere_facture, dos);

				// String

				writeString(this.date_prochaine_livraison, dos);

				// Integer

				writeInteger(this.delai_approvisionnement, dos);

				// Integer

				writeInteger(this.echeance, dos);

				// Boolean

				if (this.flag_modif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.flag_modif);
				}

				// Integer

				writeInteger(this.jour_echeance_15, dos);

				// Integer

				writeInteger(this.jour_echeance_si_fm, dos);

				// Integer

				writeInteger(this.montant_transport_kg, dos);

				// Integer

				writeInteger(this.montant_transport_m3, dos);

				// Integer

				writeInteger(this.taux_escompte, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddetails_fournisseur=" + String.valueOf(iddetails_fournisseur));
			sb.append(",date_derniere_commande=" + date_derniere_commande);
			sb.append(",date_derniere_facture=" + date_derniere_facture);
			sb.append(",date_prochaine_livraison=" + date_prochaine_livraison);
			sb.append(",delai_approvisionnement=" + String.valueOf(delai_approvisionnement));
			sb.append(",echeance=" + String.valueOf(echeance));
			sb.append(",flag_modif=" + String.valueOf(flag_modif));
			sb.append(",jour_echeance_15=" + String.valueOf(jour_echeance_15));
			sb.append(",jour_echeance_si_fm=" + String.valueOf(jour_echeance_si_fm));
			sb.append(",montant_transport_kg=" + String.valueOf(montant_transport_kg));
			sb.append(",montant_transport_m3=" + String.valueOf(montant_transport_m3));
			sb.append(",taux_escompte=" + String.valueOf(taux_escompte));
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_2_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddetails_fournisseur, other.iddetails_fournisseur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_44Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_44_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();
				copyOfcopyOfcopyOfcopyOfmain_2_2Struct copyOfcopyOfcopyOfcopyOfmain_2_2 = new copyOfcopyOfcopyOfcopyOfmain_2_2Struct();

				/**
				 * [tDBOutput_40 begin ] start
				 */

				ok_Hash.put("tDBOutput_40", false);
				start_Hash.put("tDBOutput_40", System.currentTimeMillis());

				currentComponent = "tDBOutput_40";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_2_2");
				}

				int tos_count_tDBOutput_40 = 0;

				String dbschema_tDBOutput_40 = null;
				dbschema_tDBOutput_40 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_40 = null;
				if (dbschema_tDBOutput_40 == null || dbschema_tDBOutput_40.trim().length() == 0) {
					tableName_tDBOutput_40 = ("details_fournisseur");
				} else {
					tableName_tDBOutput_40 = dbschema_tDBOutput_40 + "\".\"" + ("details_fournisseur");
				}

				int nb_line_tDBOutput_40 = 0;
				int nb_line_update_tDBOutput_40 = 0;
				int nb_line_inserted_tDBOutput_40 = 0;
				int nb_line_deleted_tDBOutput_40 = 0;
				int nb_line_rejected_tDBOutput_40 = 0;

				int deletedCount_tDBOutput_40 = 0;
				int updatedCount_tDBOutput_40 = 0;
				int insertedCount_tDBOutput_40 = 0;
				int rejectedCount_tDBOutput_40 = 0;

				boolean whetherReject_tDBOutput_40 = false;

				java.sql.Connection conn_tDBOutput_40 = null;
				String dbUser_tDBOutput_40 = null;

				conn_tDBOutput_40 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_40 = 10000;
				int batchSizeCounter_tDBOutput_40 = 0;

				int count_tDBOutput_40 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_40 = conn_tDBOutput_40.createStatement()) {
					stmtClear_tDBOutput_40.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_40 + "\"");
				}
				String insert_tDBOutput_40 = "INSERT INTO \"" + tableName_tDBOutput_40
						+ "\" (\"iddetails_fournisseur\",\"date_derniere_commande\",\"date_derniere_facture\",\"date_prochaine_livraison\",\"delai_approvisionnement\",\"echeance\",\"flag_modif\",\"jour_echeance_15\",\"jour_echeance_si_fm\",\"montant_transport_kg\",\"montant_transport_m3\",\"taux_escompte\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_40 = conn_tDBOutput_40.prepareStatement(insert_tDBOutput_40);
				resourceMap.put("pstmt_tDBOutput_40", pstmt_tDBOutput_40);

				/**
				 * [tDBOutput_40 begin ] stop
				 */

				/**
				 * [tMap_40 begin ] start
				 */

				ok_Hash.put("tMap_40", false);
				start_Hash.put("tMap_40", System.currentTimeMillis());

				currentComponent = "tMap_40";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row39");
				}

				int tos_count_tMap_40 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_40__Struct {
				}
				Var__tMap_40__Struct Var__tMap_40 = new Var__tMap_40__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_2_2Struct copyOfcopyOfcopyOfcopyOfmain_2_2_tmp = new copyOfcopyOfcopyOfcopyOfmain_2_2Struct();
// ###############################

				/**
				 * [tMap_40 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_44 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_44", false);
				start_Hash.put("tFileInputDelimited_44", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_44";

				int tos_count_tFileInputDelimited_44 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_44 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_44 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_44 = null;
				int limit_tFileInputDelimited_44 = -1;
				try {

					Object filename_tFileInputDelimited_44 = "C:/DEV/Data/Base Montauban/Fournisseur.csv";
					if (filename_tFileInputDelimited_44 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_44 = 0, random_value_tFileInputDelimited_44 = -1;
						if (footer_value_tFileInputDelimited_44 > 0 || random_value_tFileInputDelimited_44 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_44 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Fournisseur.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_44, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_44 != null && fid_tFileInputDelimited_44.nextRecord()) {
						rowstate_tFileInputDelimited_44.reset();

						row39 = null;

						boolean whetherReject_tFileInputDelimited_44 = false;
						row39 = new row39Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_44 = 0;

							columnIndexWithD_tFileInputDelimited_44 = 0;

							row39.FRREF = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 1;

							row39.FRNOM = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 2;

							row39.FRRUE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 3;

							row39.FRAUX = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 4;

							row39.FRCPTL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 5;

							row39.FRVIL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 6;

							row39.FRPLAN = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 7;

							row39.FRCODE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 8;

							row39.FRFIL1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 9;

							row39.FRQUAL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 10;

							row39.FRCOM1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 11;

							row39.FRDEL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 12;

							row39.FRREMFI = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 13;

							row39.FRECH = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 14;

							row39.FRECHJ = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 15;

							row39.FRPAI = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 16;

							row39.FRDAC = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 17;

							row39.FRECHJ2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 18;

							row39.FRMOD = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 19;

							row39.FRBQ1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 20;

							row39.FRBQ2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 21;

							row39.FRBQ3 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 22;

							row39.FRBQ4 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 23;

							row39.FRBQ5 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 24;

							row39.FRBQ6 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 25;

							row39.FRFACT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 26;

							row39.FRBL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 27;

							row39.FRESC = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 28;

							row39.FRFIL2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 29;

							row39.FRDAL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 30;

							row39.FRCAN1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 31;

							row39.FRCAN2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 32;

							row39.FRCAN3 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 33;

							row39.FRDATF = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 34;

							row39.FRRESP = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 35;

							row39.FRTEL1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 36;

							row39.FRTEL2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 37;

							row39.FRTEX1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 38;

							row39.FRTEX2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 39;

							row39.FRCDEFAX = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 40;

							row39.FRCDEMAIL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 41;

							row39.FRCDEINT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 42;

							row39.FRCDEDIL = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 43;

							row39.FREXPORT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 44;

							row39.FRGENCODE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 45;

							row39.FREXPEDIT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 46;

							row39.FRIDENT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 47;

							row39.FRPASSE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 48;

							row39.FRSITE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 49;

							row39.FRIBAN1 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 50;

							row39.FRIBAN72 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 51;

							row39.FRIBAN8 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 52;

							row39.FRIBAN9 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 53;

							row39.FRIBIC = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 54;

							row39.FRFIL3 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 55;

							row39.FRFRANC = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 56;

							row39.FRCODLIV = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 57;

							row39.FRCODCLI = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 58;

							row39.FRPAYS = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 59;

							row39.FRSECT = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 60;

							row39.FRTOUR = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 61;

							row39.FRNCEE = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 62;

							row39.FRFRAP = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 63;

							row39.FRPOID = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 64;

							row39.FRCUBA = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 65;

							row39.FRNTEL2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 66;

							row39.FRNTEX2 = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							columnIndexWithD_tFileInputDelimited_44 = 67;

							row39.FRCREP = fid_tFileInputDelimited_44.get(columnIndexWithD_tFileInputDelimited_44);

							if (rowstate_tFileInputDelimited_44.getException() != null) {
								throw rowstate_tFileInputDelimited_44.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_44 = true;

							System.err.println(e.getMessage());
							row39 = null;

						}

						/**
						 * [tFileInputDelimited_44 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_44 main ] start
						 */

						currentComponent = "tFileInputDelimited_44";

						tos_count_tFileInputDelimited_44++;

						/**
						 * [tFileInputDelimited_44 main ] stop
						 */

						/**
						 * [tFileInputDelimited_44 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_44";

						/**
						 * [tFileInputDelimited_44 process_data_begin ] stop
						 */
// Start of branch "row39"
						if (row39 != null) {

							/**
							 * [tMap_40 main ] start
							 */

							currentComponent = "tMap_40";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row39");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_40 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_40 = false;
							boolean mainRowRejected_tMap_40 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_40__Struct Var = Var__tMap_40;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_2_2 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_2_2'
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.iddetails_fournisseur = Numeric
										.sequence("detailsfournisseur", 1, 1);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.date_derniere_commande = row39.FRDAC;
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.date_derniere_facture = row39.FRDATF;
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.date_prochaine_livraison = row39.FRDAL;
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.delai_approvisionnement = Integer
										.parseInt(row39.FRDEL);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.echeance = Integer.parseInt(row39.FRECH);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.flag_modif = row39.FRMOD.equals("*") ? true
										: false;
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.jour_echeance_15 = Integer.parseInt(row39.FRECHJ);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.jour_echeance_si_fm = Integer
										.parseInt(row39.FRECHJ2);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.montant_transport_kg = Integer
										.parseInt(row39.FRPOID);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.montant_transport_m3 = Integer
										.parseInt(row39.FRCUBA);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.taux_escompte = Integer.parseInt(row39.FRESC);
								copyOfcopyOfcopyOfcopyOfmain_2_2_tmp.idfournisseur = row39.FRREF;
								copyOfcopyOfcopyOfcopyOfmain_2_2 = copyOfcopyOfcopyOfcopyOfmain_2_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_40 = false;

							tos_count_tMap_40++;

							/**
							 * [tMap_40 main ] stop
							 */

							/**
							 * [tMap_40 process_data_begin ] start
							 */

							currentComponent = "tMap_40";

							/**
							 * [tMap_40 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_2_2"
							if (copyOfcopyOfcopyOfcopyOfmain_2_2 != null) {

								/**
								 * [tDBOutput_40 main ] start
								 */

								currentComponent = "tDBOutput_40";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfcopyOfmain_2_2");
								}

								whetherReject_tDBOutput_40 = false;
								pstmt_tDBOutput_40.setInt(1, copyOfcopyOfcopyOfcopyOfmain_2_2.iddetails_fournisseur);

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.date_derniere_commande == null) {
									pstmt_tDBOutput_40.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_40.setString(2,
											copyOfcopyOfcopyOfcopyOfmain_2_2.date_derniere_commande);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.date_derniere_facture == null) {
									pstmt_tDBOutput_40.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_40.setString(3,
											copyOfcopyOfcopyOfcopyOfmain_2_2.date_derniere_facture);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.date_prochaine_livraison == null) {
									pstmt_tDBOutput_40.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_40.setString(4,
											copyOfcopyOfcopyOfcopyOfmain_2_2.date_prochaine_livraison);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.delai_approvisionnement == null) {
									pstmt_tDBOutput_40.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(5,
											copyOfcopyOfcopyOfcopyOfmain_2_2.delai_approvisionnement);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.echeance == null) {
									pstmt_tDBOutput_40.setNull(6, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(6, copyOfcopyOfcopyOfcopyOfmain_2_2.echeance);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.flag_modif == null) {
									pstmt_tDBOutput_40.setNull(7, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_40.setBoolean(7, copyOfcopyOfcopyOfcopyOfmain_2_2.flag_modif);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.jour_echeance_15 == null) {
									pstmt_tDBOutput_40.setNull(8, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(8, copyOfcopyOfcopyOfcopyOfmain_2_2.jour_echeance_15);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.jour_echeance_si_fm == null) {
									pstmt_tDBOutput_40.setNull(9, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(9, copyOfcopyOfcopyOfcopyOfmain_2_2.jour_echeance_si_fm);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.montant_transport_kg == null) {
									pstmt_tDBOutput_40.setNull(10, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(10,
											copyOfcopyOfcopyOfcopyOfmain_2_2.montant_transport_kg);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.montant_transport_m3 == null) {
									pstmt_tDBOutput_40.setNull(11, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(11,
											copyOfcopyOfcopyOfcopyOfmain_2_2.montant_transport_m3);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.taux_escompte == null) {
									pstmt_tDBOutput_40.setNull(12, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_40.setInt(12, copyOfcopyOfcopyOfcopyOfmain_2_2.taux_escompte);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_2_2.idfournisseur == null) {
									pstmt_tDBOutput_40.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_40.setString(13, copyOfcopyOfcopyOfcopyOfmain_2_2.idfournisseur);
								}

								pstmt_tDBOutput_40.addBatch();
								nb_line_tDBOutput_40++;

								batchSizeCounter_tDBOutput_40++;

								if ((batchSize_tDBOutput_40 > 0)
										&& (batchSize_tDBOutput_40 <= batchSizeCounter_tDBOutput_40)) {
									try {
										int countSum_tDBOutput_40 = 0;

										for (int countEach_tDBOutput_40 : pstmt_tDBOutput_40.executeBatch()) {
											countSum_tDBOutput_40 += (countEach_tDBOutput_40 < 0 ? 0
													: countEach_tDBOutput_40);
										}

										insertedCount_tDBOutput_40 += countSum_tDBOutput_40;

										batchSizeCounter_tDBOutput_40 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_40) {
										java.sql.SQLException ne_tDBOutput_40 = e_tDBOutput_40.getNextException(),
												sqle_tDBOutput_40 = null;
										String errormessage_tDBOutput_40;
										if (ne_tDBOutput_40 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_40 = new java.sql.SQLException(
													e_tDBOutput_40.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_40.getMessage(),
													ne_tDBOutput_40.getSQLState(), ne_tDBOutput_40.getErrorCode(),
													ne_tDBOutput_40);
											errormessage_tDBOutput_40 = sqle_tDBOutput_40.getMessage();
										} else {
											errormessage_tDBOutput_40 = e_tDBOutput_40.getMessage();
										}

										int countSum_tDBOutput_40 = 0;
										for (int countEach_tDBOutput_40 : e_tDBOutput_40.getUpdateCounts()) {
											countSum_tDBOutput_40 += (countEach_tDBOutput_40 < 0 ? 0
													: countEach_tDBOutput_40);
										}

										insertedCount_tDBOutput_40 += countSum_tDBOutput_40;

										System.err.println(errormessage_tDBOutput_40);

									}
								}

								tos_count_tDBOutput_40++;

								/**
								 * [tDBOutput_40 main ] stop
								 */

								/**
								 * [tDBOutput_40 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_40";

								/**
								 * [tDBOutput_40 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_40 process_data_end ] start
								 */

								currentComponent = "tDBOutput_40";

								/**
								 * [tDBOutput_40 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_2_2"

							/**
							 * [tMap_40 process_data_end ] start
							 */

							currentComponent = "tMap_40";

							/**
							 * [tMap_40 process_data_end ] stop
							 */

						} // End of branch "row39"

						/**
						 * [tFileInputDelimited_44 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_44";

						/**
						 * [tFileInputDelimited_44 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_44 end ] start
						 */

						currentComponent = "tFileInputDelimited_44";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Fournisseur.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_44 != null) {
							fid_tFileInputDelimited_44.close();
						}
					}
					if (fid_tFileInputDelimited_44 != null) {
						globalMap.put("tFileInputDelimited_44_NB_LINE", fid_tFileInputDelimited_44.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_44", true);
				end_Hash.put("tFileInputDelimited_44", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_44 end ] stop
				 */

				/**
				 * [tMap_40 end ] start
				 */

				currentComponent = "tMap_40";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row39");
				}

				ok_Hash.put("tMap_40", true);
				end_Hash.put("tMap_40", System.currentTimeMillis());

				/**
				 * [tMap_40 end ] stop
				 */

				/**
				 * [tDBOutput_40 end ] start
				 */

				currentComponent = "tDBOutput_40";

				try {
					int countSum_tDBOutput_40 = 0;
					if (pstmt_tDBOutput_40 != null && batchSizeCounter_tDBOutput_40 > 0) {

						for (int countEach_tDBOutput_40 : pstmt_tDBOutput_40.executeBatch()) {
							countSum_tDBOutput_40 += (countEach_tDBOutput_40 < 0 ? 0 : countEach_tDBOutput_40);
						}

					}

					insertedCount_tDBOutput_40 += countSum_tDBOutput_40;

				} catch (java.sql.BatchUpdateException e_tDBOutput_40) {
					java.sql.SQLException ne_tDBOutput_40 = e_tDBOutput_40.getNextException(), sqle_tDBOutput_40 = null;
					String errormessage_tDBOutput_40;
					if (ne_tDBOutput_40 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_40 = new java.sql.SQLException(
								e_tDBOutput_40.getMessage() + "\ncaused by: " + ne_tDBOutput_40.getMessage(),
								ne_tDBOutput_40.getSQLState(), ne_tDBOutput_40.getErrorCode(), ne_tDBOutput_40);
						errormessage_tDBOutput_40 = sqle_tDBOutput_40.getMessage();
					} else {
						errormessage_tDBOutput_40 = e_tDBOutput_40.getMessage();
					}

					int countSum_tDBOutput_40 = 0;
					for (int countEach_tDBOutput_40 : e_tDBOutput_40.getUpdateCounts()) {
						countSum_tDBOutput_40 += (countEach_tDBOutput_40 < 0 ? 0 : countEach_tDBOutput_40);
					}

					insertedCount_tDBOutput_40 += countSum_tDBOutput_40;

					System.err.println(errormessage_tDBOutput_40);

				}

				if (pstmt_tDBOutput_40 != null) {

					pstmt_tDBOutput_40.close();
					resourceMap.remove("pstmt_tDBOutput_40");
				}
				resourceMap.put("statementClosed_tDBOutput_40", true);

				nb_line_deleted_tDBOutput_40 = nb_line_deleted_tDBOutput_40 + deletedCount_tDBOutput_40;
				nb_line_update_tDBOutput_40 = nb_line_update_tDBOutput_40 + updatedCount_tDBOutput_40;
				nb_line_inserted_tDBOutput_40 = nb_line_inserted_tDBOutput_40 + insertedCount_tDBOutput_40;
				nb_line_rejected_tDBOutput_40 = nb_line_rejected_tDBOutput_40 + rejectedCount_tDBOutput_40;

				globalMap.put("tDBOutput_40_NB_LINE", nb_line_tDBOutput_40);
				globalMap.put("tDBOutput_40_NB_LINE_UPDATED", nb_line_update_tDBOutput_40);
				globalMap.put("tDBOutput_40_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_40);
				globalMap.put("tDBOutput_40_NB_LINE_DELETED", nb_line_deleted_tDBOutput_40);
				globalMap.put("tDBOutput_40_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_40);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_2_2");
				}

				ok_Hash.put("tDBOutput_40", true);
				end_Hash.put("tDBOutput_40", System.currentTimeMillis());

				/**
				 * [tDBOutput_40 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_44:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk44", 0, "ok");
			}

			tFileInputDelimited_48Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_44 finally ] start
				 */

				currentComponent = "tFileInputDelimited_44";

				/**
				 * [tFileInputDelimited_44 finally ] stop
				 */

				/**
				 * [tMap_40 finally ] start
				 */

				currentComponent = "tMap_40";

				/**
				 * [tMap_40 finally ] stop
				 */

				/**
				 * [tDBOutput_40 finally ] start
				 */

				currentComponent = "tDBOutput_40";

				if (resourceMap.get("statementClosed_tDBOutput_40") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_40 = null;
					if ((pstmtToClose_tDBOutput_40 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_40")) != null) {
						pstmtToClose_tDBOutput_40.close();
					}
				}

				/**
				 * [tDBOutput_40 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_44_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom_contact;

		public String getNom_contact() {
			return this.nom_contact;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct other = (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom_contact = this.nom_contact;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom_contact = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom_contact, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom_contact=" + nom_contact);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_48Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_48_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row43Struct row43 = new row43Struct();
				copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1 = new copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct();

				/**
				 * [tDBOutput_43 begin ] start
				 */

				ok_Hash.put("tDBOutput_43", false);
				start_Hash.put("tDBOutput_43", System.currentTimeMillis());

				currentComponent = "tDBOutput_43";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0,
							"copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1");
				}

				int tos_count_tDBOutput_43 = 0;

				String dbschema_tDBOutput_43 = null;
				dbschema_tDBOutput_43 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_43 = null;
				if (dbschema_tDBOutput_43 == null || dbschema_tDBOutput_43.trim().length() == 0) {
					tableName_tDBOutput_43 = ("contact");
				} else {
					tableName_tDBOutput_43 = dbschema_tDBOutput_43 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_43 = 0;
				int nb_line_update_tDBOutput_43 = 0;
				int nb_line_inserted_tDBOutput_43 = 0;
				int nb_line_deleted_tDBOutput_43 = 0;
				int nb_line_rejected_tDBOutput_43 = 0;

				int deletedCount_tDBOutput_43 = 0;
				int updatedCount_tDBOutput_43 = 0;
				int insertedCount_tDBOutput_43 = 0;
				int rejectedCount_tDBOutput_43 = 0;

				boolean whetherReject_tDBOutput_43 = false;

				java.sql.Connection conn_tDBOutput_43 = null;
				String dbUser_tDBOutput_43 = null;

				conn_tDBOutput_43 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_43 = 10000;
				int batchSizeCounter_tDBOutput_43 = 0;

				int count_tDBOutput_43 = 0;
				String insert_tDBOutput_43 = "INSERT INTO \"" + tableName_tDBOutput_43
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom_contact\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_43 = conn_tDBOutput_43.prepareStatement(insert_tDBOutput_43);
				resourceMap.put("pstmt_tDBOutput_43", pstmt_tDBOutput_43);

				/**
				 * [tDBOutput_43 begin ] stop
				 */

				/**
				 * [tMap_43 begin ] start
				 */

				ok_Hash.put("tMap_43", false);
				start_Hash.put("tMap_43", System.currentTimeMillis());

				currentComponent = "tMap_43";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row43");
				}

				int tos_count_tMap_43 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_43__Struct {
				}
				Var__tMap_43__Struct Var__tMap_43 = new Var__tMap_43__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1Struct();
// ###############################

				/**
				 * [tMap_43 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_48 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_48", false);
				start_Hash.put("tFileInputDelimited_48", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_48";

				int tos_count_tFileInputDelimited_48 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_48 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_48 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_48 = null;
				int limit_tFileInputDelimited_48 = -1;
				try {

					Object filename_tFileInputDelimited_48 = "C:/DEV/Data/Base Montauban/Fournisseur.csv";
					if (filename_tFileInputDelimited_48 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_48 = 0, random_value_tFileInputDelimited_48 = -1;
						if (footer_value_tFileInputDelimited_48 > 0 || random_value_tFileInputDelimited_48 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_48 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Fournisseur.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_48, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_48 != null && fid_tFileInputDelimited_48.nextRecord()) {
						rowstate_tFileInputDelimited_48.reset();

						row43 = null;

						boolean whetherReject_tFileInputDelimited_48 = false;
						row43 = new row43Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_48 = 0;

							columnIndexWithD_tFileInputDelimited_48 = 0;

							row43.FRREF = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 1;

							row43.FRNOM = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 2;

							row43.FRRUE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 3;

							row43.FRAUX = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 4;

							row43.FRCPTL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 5;

							row43.FRVIL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 6;

							row43.FRPLAN = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 7;

							row43.FRCODE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 8;

							row43.FRFIL1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 9;

							row43.FRQUAL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 10;

							row43.FRCOM1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 11;

							row43.FRDEL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 12;

							row43.FRREMFI = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 13;

							row43.FRECH = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 14;

							row43.FRECHJ = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 15;

							row43.FRPAI = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 16;

							row43.FRDAC = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 17;

							row43.FRECHJ2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 18;

							row43.FRMOD = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 19;

							row43.FRBQ1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 20;

							row43.FRBQ2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 21;

							row43.FRBQ3 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 22;

							row43.FRBQ4 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 23;

							row43.FRBQ5 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 24;

							row43.FRBQ6 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 25;

							row43.FRFACT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 26;

							row43.FRBL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 27;

							row43.FRESC = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 28;

							row43.FRFIL2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 29;

							row43.FRDAL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 30;

							row43.FRCAN1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 31;

							row43.FRCAN2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 32;

							row43.FRCAN3 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 33;

							row43.FRDATF = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 34;

							row43.FRRESP = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 35;

							row43.FRTEL1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 36;

							row43.FRTEL2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 37;

							row43.FRTEX1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 38;

							row43.FRTEX2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 39;

							row43.FRCDEFAX = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 40;

							row43.FRCDEMAIL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 41;

							row43.FRCDEINT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 42;

							row43.FRCDEDIL = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 43;

							row43.FREXPORT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 44;

							row43.FRGENCODE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 45;

							row43.FREXPEDIT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 46;

							row43.FRIDENT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 47;

							row43.FRPASSE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 48;

							row43.FRSITE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 49;

							row43.FRIBAN1 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 50;

							row43.FRIBAN72 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 51;

							row43.FRIBAN8 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 52;

							row43.FRIBAN9 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 53;

							row43.FRIBIC = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 54;

							row43.FRFIL3 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 55;

							row43.FRFRANC = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 56;

							row43.FRCODLIV = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 57;

							row43.FRCODCLI = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 58;

							row43.FRPAYS = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 59;

							row43.FRSECT = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 60;

							row43.FRTOUR = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 61;

							row43.FRNCEE = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 62;

							row43.FRFRAP = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 63;

							row43.FRPOID = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 64;

							row43.FRCUBA = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 65;

							row43.FRNTEL2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 66;

							row43.FRNTEX2 = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							columnIndexWithD_tFileInputDelimited_48 = 67;

							row43.FRCREP = fid_tFileInputDelimited_48.get(columnIndexWithD_tFileInputDelimited_48);

							if (rowstate_tFileInputDelimited_48.getException() != null) {
								throw rowstate_tFileInputDelimited_48.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_48 = true;

							System.err.println(e.getMessage());
							row43 = null;

						}

						/**
						 * [tFileInputDelimited_48 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_48 main ] start
						 */

						currentComponent = "tFileInputDelimited_48";

						tos_count_tFileInputDelimited_48++;

						/**
						 * [tFileInputDelimited_48 main ] stop
						 */

						/**
						 * [tFileInputDelimited_48 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_48";

						/**
						 * [tFileInputDelimited_48 process_data_begin ] stop
						 */
// Start of branch "row43"
						if (row43 != null) {

							/**
							 * [tMap_43 main ] start
							 */

							currentComponent = "tMap_43";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row43");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_43 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_43 = false;
							boolean mainRowRejected_tMap_43 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_43__Struct Var = Var__tMap_43;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1'
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.idcontact = Numeric.sequence("contact", 1,
										1);
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.principal = true;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.fax = row43.FRTEX2;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.fonction = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.internet = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.login = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.mail = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.mail_validateur = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.niveau_validateur = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.nom_contact = row43.FRNOM;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.nom_responsable = row43.FRRESP;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_commerc = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.nom_respon_financier = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.password = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.portable = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.rang = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.service = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.telephone = row43.FRTEL1;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.telephonebis = row43.FRTEL2;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.idadresse_livraison = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.idcli = null;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp.idfournisseur = row43.FRREF;
								copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1 = copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_43 = false;

							tos_count_tMap_43++;

							/**
							 * [tMap_43 main ] stop
							 */

							/**
							 * [tMap_43 process_data_begin ] start
							 */

							currentComponent = "tMap_43";

							/**
							 * [tMap_43 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1"
							if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1 != null) {

								/**
								 * [tDBOutput_43 main ] start
								 */

								currentComponent = "tDBOutput_43";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1,
											"copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1");
								}

								whetherReject_tDBOutput_43 = false;
								pstmt_tDBOutput_43.setInt(1, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idcontact);

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.principal == null) {
									pstmt_tDBOutput_43.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_43.setBoolean(2, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.principal);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.fax == null) {
									pstmt_tDBOutput_43.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(3, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.fax);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.fonction == null) {
									pstmt_tDBOutput_43.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(4, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.fonction);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.internet == null) {
									pstmt_tDBOutput_43.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(5, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.internet);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.login == null) {
									pstmt_tDBOutput_43.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(6, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.login);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.mail == null) {
									pstmt_tDBOutput_43.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(7, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.mail);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.mail_validateur == null) {
									pstmt_tDBOutput_43.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(8,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.mail_validateur);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.niveau_validateur == null) {
									pstmt_tDBOutput_43.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(9,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.niveau_validateur);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_contact == null) {
									pstmt_tDBOutput_43.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(10,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_contact);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_responsable == null) {
									pstmt_tDBOutput_43.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(11,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_responsable);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_respon_commerc == null) {
									pstmt_tDBOutput_43.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(12,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_respon_commerc);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_respon_financier == null) {
									pstmt_tDBOutput_43.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(13,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.nom_respon_financier);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.password == null) {
									pstmt_tDBOutput_43.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(14, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.password);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.portable == null) {
									pstmt_tDBOutput_43.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(15, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.portable);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.rang == null) {
									pstmt_tDBOutput_43.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(16, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.rang);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.service == null) {
									pstmt_tDBOutput_43.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(17, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.service);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.telephone == null) {
									pstmt_tDBOutput_43.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(18, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.telephone);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.telephonebis == null) {
									pstmt_tDBOutput_43.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(19,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.telephonebis);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idadresse_livraison == null) {
									pstmt_tDBOutput_43.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(20,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idadresse_livraison);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idcli == null) {
									pstmt_tDBOutput_43.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(21, copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idcli);
								}

								if (copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idfournisseur == null) {
									pstmt_tDBOutput_43.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_43.setString(22,
											copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1.idfournisseur);
								}

								pstmt_tDBOutput_43.addBatch();
								nb_line_tDBOutput_43++;

								batchSizeCounter_tDBOutput_43++;

								if ((batchSize_tDBOutput_43 > 0)
										&& (batchSize_tDBOutput_43 <= batchSizeCounter_tDBOutput_43)) {
									try {
										int countSum_tDBOutput_43 = 0;

										for (int countEach_tDBOutput_43 : pstmt_tDBOutput_43.executeBatch()) {
											countSum_tDBOutput_43 += (countEach_tDBOutput_43 < 0 ? 0
													: countEach_tDBOutput_43);
										}

										insertedCount_tDBOutput_43 += countSum_tDBOutput_43;

										batchSizeCounter_tDBOutput_43 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_43) {
										java.sql.SQLException ne_tDBOutput_43 = e_tDBOutput_43.getNextException(),
												sqle_tDBOutput_43 = null;
										String errormessage_tDBOutput_43;
										if (ne_tDBOutput_43 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_43 = new java.sql.SQLException(
													e_tDBOutput_43.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_43.getMessage(),
													ne_tDBOutput_43.getSQLState(), ne_tDBOutput_43.getErrorCode(),
													ne_tDBOutput_43);
											errormessage_tDBOutput_43 = sqle_tDBOutput_43.getMessage();
										} else {
											errormessage_tDBOutput_43 = e_tDBOutput_43.getMessage();
										}

										int countSum_tDBOutput_43 = 0;
										for (int countEach_tDBOutput_43 : e_tDBOutput_43.getUpdateCounts()) {
											countSum_tDBOutput_43 += (countEach_tDBOutput_43 < 0 ? 0
													: countEach_tDBOutput_43);
										}

										insertedCount_tDBOutput_43 += countSum_tDBOutput_43;

										System.err.println(errormessage_tDBOutput_43);

									}
								}

								tos_count_tDBOutput_43++;

								/**
								 * [tDBOutput_43 main ] stop
								 */

								/**
								 * [tDBOutput_43 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_43";

								/**
								 * [tDBOutput_43 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_43 process_data_end ] start
								 */

								currentComponent = "tDBOutput_43";

								/**
								 * [tDBOutput_43 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1"

							/**
							 * [tMap_43 process_data_end ] start
							 */

							currentComponent = "tMap_43";

							/**
							 * [tMap_43 process_data_end ] stop
							 */

						} // End of branch "row43"

						/**
						 * [tFileInputDelimited_48 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_48";

						/**
						 * [tFileInputDelimited_48 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_48 end ] start
						 */

						currentComponent = "tFileInputDelimited_48";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Fournisseur.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_48 != null) {
							fid_tFileInputDelimited_48.close();
						}
					}
					if (fid_tFileInputDelimited_48 != null) {
						globalMap.put("tFileInputDelimited_48_NB_LINE", fid_tFileInputDelimited_48.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_48", true);
				end_Hash.put("tFileInputDelimited_48", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_48 end ] stop
				 */

				/**
				 * [tMap_43 end ] start
				 */

				currentComponent = "tMap_43";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row43");
				}

				ok_Hash.put("tMap_43", true);
				end_Hash.put("tMap_43", System.currentTimeMillis());

				/**
				 * [tMap_43 end ] stop
				 */

				/**
				 * [tDBOutput_43 end ] start
				 */

				currentComponent = "tDBOutput_43";

				try {
					int countSum_tDBOutput_43 = 0;
					if (pstmt_tDBOutput_43 != null && batchSizeCounter_tDBOutput_43 > 0) {

						for (int countEach_tDBOutput_43 : pstmt_tDBOutput_43.executeBatch()) {
							countSum_tDBOutput_43 += (countEach_tDBOutput_43 < 0 ? 0 : countEach_tDBOutput_43);
						}

					}

					insertedCount_tDBOutput_43 += countSum_tDBOutput_43;

				} catch (java.sql.BatchUpdateException e_tDBOutput_43) {
					java.sql.SQLException ne_tDBOutput_43 = e_tDBOutput_43.getNextException(), sqle_tDBOutput_43 = null;
					String errormessage_tDBOutput_43;
					if (ne_tDBOutput_43 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_43 = new java.sql.SQLException(
								e_tDBOutput_43.getMessage() + "\ncaused by: " + ne_tDBOutput_43.getMessage(),
								ne_tDBOutput_43.getSQLState(), ne_tDBOutput_43.getErrorCode(), ne_tDBOutput_43);
						errormessage_tDBOutput_43 = sqle_tDBOutput_43.getMessage();
					} else {
						errormessage_tDBOutput_43 = e_tDBOutput_43.getMessage();
					}

					int countSum_tDBOutput_43 = 0;
					for (int countEach_tDBOutput_43 : e_tDBOutput_43.getUpdateCounts()) {
						countSum_tDBOutput_43 += (countEach_tDBOutput_43 < 0 ? 0 : countEach_tDBOutput_43);
					}

					insertedCount_tDBOutput_43 += countSum_tDBOutput_43;

					System.err.println(errormessage_tDBOutput_43);

				}

				if (pstmt_tDBOutput_43 != null) {

					pstmt_tDBOutput_43.close();
					resourceMap.remove("pstmt_tDBOutput_43");
				}
				resourceMap.put("statementClosed_tDBOutput_43", true);

				nb_line_deleted_tDBOutput_43 = nb_line_deleted_tDBOutput_43 + deletedCount_tDBOutput_43;
				nb_line_update_tDBOutput_43 = nb_line_update_tDBOutput_43 + updatedCount_tDBOutput_43;
				nb_line_inserted_tDBOutput_43 = nb_line_inserted_tDBOutput_43 + insertedCount_tDBOutput_43;
				nb_line_rejected_tDBOutput_43 = nb_line_rejected_tDBOutput_43 + rejectedCount_tDBOutput_43;

				globalMap.put("tDBOutput_43_NB_LINE", nb_line_tDBOutput_43);
				globalMap.put("tDBOutput_43_NB_LINE_UPDATED", nb_line_update_tDBOutput_43);
				globalMap.put("tDBOutput_43_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_43);
				globalMap.put("tDBOutput_43_NB_LINE_DELETED", nb_line_deleted_tDBOutput_43);
				globalMap.put("tDBOutput_43_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_43);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfcopyOfmain_3_1");
				}

				ok_Hash.put("tDBOutput_43", true);
				end_Hash.put("tDBOutput_43", System.currentTimeMillis());

				/**
				 * [tDBOutput_43 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_48:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk43", 0, "ok");
			}

			tFileInputDelimited_49Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_48 finally ] start
				 */

				currentComponent = "tFileInputDelimited_48";

				/**
				 * [tFileInputDelimited_48 finally ] stop
				 */

				/**
				 * [tMap_43 finally ] start
				 */

				currentComponent = "tMap_43";

				/**
				 * [tMap_43 finally ] stop
				 */

				/**
				 * [tDBOutput_43 finally ] start
				 */

				currentComponent = "tDBOutput_43";

				if (resourceMap.get("statementClosed_tDBOutput_43") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_43 = null;
					if ((pstmtToClose_tDBOutput_43 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_43")) != null) {
						pstmtToClose_tDBOutput_43.close();
					}
				}

				/**
				 * [tDBOutput_43 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_48_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcontact;

		public int getIdcontact() {
			return this.idcontact;
		}

		public Boolean principal;

		public Boolean getPrincipal() {
			return this.principal;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String fonction;

		public String getFonction() {
			return this.fonction;
		}

		public String internet;

		public String getInternet() {
			return this.internet;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String mail_validateur;

		public String getMail_validateur() {
			return this.mail_validateur;
		}

		public String niveau_validateur;

		public String getNiveau_validateur() {
			return this.niveau_validateur;
		}

		public String nom_contact;

		public String getNom_contact() {
			return this.nom_contact;
		}

		public String nom_responsable;

		public String getNom_responsable() {
			return this.nom_responsable;
		}

		public String nom_respon_commerc;

		public String getNom_respon_commerc() {
			return this.nom_respon_commerc;
		}

		public String nom_respon_financier;

		public String getNom_respon_financier() {
			return this.nom_respon_financier;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String portable;

		public String getPortable() {
			return this.portable;
		}

		public String rang;

		public String getRang() {
			return this.rang;
		}

		public String service;

		public String getService() {
			return this.service;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephonebis;

		public String getTelephonebis() {
			return this.telephonebis;
		}

		public String idadresse_livraison;

		public String getIdadresse_livraison() {
			return this.idadresse_livraison;
		}

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String idfournisseur;

		public String getIdfournisseur() {
			return this.idfournisseur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcontact;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct other = (copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct) obj;

			if (this.idcontact != other.idcontact)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct other) {

			other.idcontact = this.idcontact;
			other.principal = this.principal;
			other.fax = this.fax;
			other.fonction = this.fonction;
			other.internet = this.internet;
			other.login = this.login;
			other.mail = this.mail;
			other.mail_validateur = this.mail_validateur;
			other.niveau_validateur = this.niveau_validateur;
			other.nom_contact = this.nom_contact;
			other.nom_responsable = this.nom_responsable;
			other.nom_respon_commerc = this.nom_respon_commerc;
			other.nom_respon_financier = this.nom_respon_financier;
			other.password = this.password;
			other.portable = this.portable;
			other.rang = this.rang;
			other.service = this.service;
			other.telephone = this.telephone;
			other.telephonebis = this.telephonebis;
			other.idadresse_livraison = this.idadresse_livraison;
			other.idcli = this.idcli;
			other.idfournisseur = this.idfournisseur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct other) {

			other.idcontact = this.idcontact;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.idcontact = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.principal = null;
					} else {
						this.principal = dis.readBoolean();
					}

					this.fax = readString(dis);

					this.fonction = readString(dis);

					this.internet = readString(dis);

					this.login = readString(dis);

					this.mail = readString(dis);

					this.mail_validateur = readString(dis);

					this.niveau_validateur = readString(dis);

					this.nom_contact = readString(dis);

					this.nom_responsable = readString(dis);

					this.nom_respon_commerc = readString(dis);

					this.nom_respon_financier = readString(dis);

					this.password = readString(dis);

					this.portable = readString(dis);

					this.rang = readString(dis);

					this.service = readString(dis);

					this.telephone = readString(dis);

					this.telephonebis = readString(dis);

					this.idadresse_livraison = readString(dis);

					this.idcli = readString(dis);

					this.idfournisseur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcontact);

				// Boolean

				if (this.principal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.principal);
				}

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.fonction, dos);

				// String

				writeString(this.internet, dos);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.mail_validateur, dos);

				// String

				writeString(this.niveau_validateur, dos);

				// String

				writeString(this.nom_contact, dos);

				// String

				writeString(this.nom_responsable, dos);

				// String

				writeString(this.nom_respon_commerc, dos);

				// String

				writeString(this.nom_respon_financier, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.portable, dos);

				// String

				writeString(this.rang, dos);

				// String

				writeString(this.service, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephonebis, dos);

				// String

				writeString(this.idadresse_livraison, dos);

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.idfournisseur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcontact=" + String.valueOf(idcontact));
			sb.append(",principal=" + String.valueOf(principal));
			sb.append(",fax=" + fax);
			sb.append(",fonction=" + fonction);
			sb.append(",internet=" + internet);
			sb.append(",login=" + login);
			sb.append(",mail=" + mail);
			sb.append(",mail_validateur=" + mail_validateur);
			sb.append(",niveau_validateur=" + niveau_validateur);
			sb.append(",nom_contact=" + nom_contact);
			sb.append(",nom_responsable=" + nom_responsable);
			sb.append(",nom_respon_commerc=" + nom_respon_commerc);
			sb.append(",nom_respon_financier=" + nom_respon_financier);
			sb.append(",password=" + password);
			sb.append(",portable=" + portable);
			sb.append(",rang=" + rang);
			sb.append(",service=" + service);
			sb.append(",telephone=" + telephone);
			sb.append(",telephonebis=" + telephonebis);
			sb.append(",idadresse_livraison=" + idadresse_livraison);
			sb.append(",idcli=" + idcli);
			sb.append(",idfournisseur=" + idfournisseur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcontact, other.idcontact);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_49Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_49Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FRREF;

		public String getFRREF() {
			return this.FRREF;
		}

		public String FRNOM;

		public String getFRNOM() {
			return this.FRNOM;
		}

		public String FRRUE;

		public String getFRRUE() {
			return this.FRRUE;
		}

		public String FRAUX;

		public String getFRAUX() {
			return this.FRAUX;
		}

		public String FRCPTL;

		public String getFRCPTL() {
			return this.FRCPTL;
		}

		public String FRVIL;

		public String getFRVIL() {
			return this.FRVIL;
		}

		public String FRPLAN;

		public String getFRPLAN() {
			return this.FRPLAN;
		}

		public String FRCODE;

		public String getFRCODE() {
			return this.FRCODE;
		}

		public String FRFIL1;

		public String getFRFIL1() {
			return this.FRFIL1;
		}

		public String FRQUAL;

		public String getFRQUAL() {
			return this.FRQUAL;
		}

		public String FRCOM1;

		public String getFRCOM1() {
			return this.FRCOM1;
		}

		public String FRDEL;

		public String getFRDEL() {
			return this.FRDEL;
		}

		public String FRREMFI;

		public String getFRREMFI() {
			return this.FRREMFI;
		}

		public String FRECH;

		public String getFRECH() {
			return this.FRECH;
		}

		public String FRECHJ;

		public String getFRECHJ() {
			return this.FRECHJ;
		}

		public String FRPAI;

		public String getFRPAI() {
			return this.FRPAI;
		}

		public String FRDAC;

		public String getFRDAC() {
			return this.FRDAC;
		}

		public String FRECHJ2;

		public String getFRECHJ2() {
			return this.FRECHJ2;
		}

		public String FRMOD;

		public String getFRMOD() {
			return this.FRMOD;
		}

		public String FRBQ1;

		public String getFRBQ1() {
			return this.FRBQ1;
		}

		public String FRBQ2;

		public String getFRBQ2() {
			return this.FRBQ2;
		}

		public String FRBQ3;

		public String getFRBQ3() {
			return this.FRBQ3;
		}

		public String FRBQ4;

		public String getFRBQ4() {
			return this.FRBQ4;
		}

		public String FRBQ5;

		public String getFRBQ5() {
			return this.FRBQ5;
		}

		public String FRBQ6;

		public String getFRBQ6() {
			return this.FRBQ6;
		}

		public String FRFACT;

		public String getFRFACT() {
			return this.FRFACT;
		}

		public String FRBL;

		public String getFRBL() {
			return this.FRBL;
		}

		public String FRESC;

		public String getFRESC() {
			return this.FRESC;
		}

		public String FRFIL2;

		public String getFRFIL2() {
			return this.FRFIL2;
		}

		public String FRDAL;

		public String getFRDAL() {
			return this.FRDAL;
		}

		public String FRCAN1;

		public String getFRCAN1() {
			return this.FRCAN1;
		}

		public String FRCAN2;

		public String getFRCAN2() {
			return this.FRCAN2;
		}

		public String FRCAN3;

		public String getFRCAN3() {
			return this.FRCAN3;
		}

		public String FRDATF;

		public String getFRDATF() {
			return this.FRDATF;
		}

		public String FRRESP;

		public String getFRRESP() {
			return this.FRRESP;
		}

		public String FRTEL1;

		public String getFRTEL1() {
			return this.FRTEL1;
		}

		public String FRTEL2;

		public String getFRTEL2() {
			return this.FRTEL2;
		}

		public String FRTEX1;

		public String getFRTEX1() {
			return this.FRTEX1;
		}

		public String FRTEX2;

		public String getFRTEX2() {
			return this.FRTEX2;
		}

		public String FRCDEFAX;

		public String getFRCDEFAX() {
			return this.FRCDEFAX;
		}

		public String FRCDEMAIL;

		public String getFRCDEMAIL() {
			return this.FRCDEMAIL;
		}

		public String FRCDEINT;

		public String getFRCDEINT() {
			return this.FRCDEINT;
		}

		public String FRCDEDIL;

		public String getFRCDEDIL() {
			return this.FRCDEDIL;
		}

		public String FREXPORT;

		public String getFREXPORT() {
			return this.FREXPORT;
		}

		public String FRGENCODE;

		public String getFRGENCODE() {
			return this.FRGENCODE;
		}

		public String FREXPEDIT;

		public String getFREXPEDIT() {
			return this.FREXPEDIT;
		}

		public String FRIDENT;

		public String getFRIDENT() {
			return this.FRIDENT;
		}

		public String FRPASSE;

		public String getFRPASSE() {
			return this.FRPASSE;
		}

		public String FRSITE;

		public String getFRSITE() {
			return this.FRSITE;
		}

		public String FRIBAN1;

		public String getFRIBAN1() {
			return this.FRIBAN1;
		}

		public String FRIBAN72;

		public String getFRIBAN72() {
			return this.FRIBAN72;
		}

		public String FRIBAN8;

		public String getFRIBAN8() {
			return this.FRIBAN8;
		}

		public String FRIBAN9;

		public String getFRIBAN9() {
			return this.FRIBAN9;
		}

		public String FRIBIC;

		public String getFRIBIC() {
			return this.FRIBIC;
		}

		public String FRFIL3;

		public String getFRFIL3() {
			return this.FRFIL3;
		}

		public String FRFRANC;

		public String getFRFRANC() {
			return this.FRFRANC;
		}

		public String FRCODLIV;

		public String getFRCODLIV() {
			return this.FRCODLIV;
		}

		public String FRCODCLI;

		public String getFRCODCLI() {
			return this.FRCODCLI;
		}

		public String FRPAYS;

		public String getFRPAYS() {
			return this.FRPAYS;
		}

		public String FRSECT;

		public String getFRSECT() {
			return this.FRSECT;
		}

		public String FRTOUR;

		public String getFRTOUR() {
			return this.FRTOUR;
		}

		public String FRNCEE;

		public String getFRNCEE() {
			return this.FRNCEE;
		}

		public String FRFRAP;

		public String getFRFRAP() {
			return this.FRFRAP;
		}

		public String FRPOID;

		public String getFRPOID() {
			return this.FRPOID;
		}

		public String FRCUBA;

		public String getFRCUBA() {
			return this.FRCUBA;
		}

		public String FRNTEL2;

		public String getFRNTEL2() {
			return this.FRNTEL2;
		}

		public String FRNTEX2;

		public String getFRNTEX2() {
			return this.FRNTEX2;
		}

		public String FRCREP;

		public String getFRCREP() {
			return this.FRCREP;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FRREF == null) ? 0 : this.FRREF.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_49Struct other = (after_tFileInputDelimited_49Struct) obj;

			if (this.FRREF == null) {
				if (other.FRREF != null)
					return false;

			} else if (!this.FRREF.equals(other.FRREF))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_49Struct other) {

			other.FRREF = this.FRREF;
			other.FRNOM = this.FRNOM;
			other.FRRUE = this.FRRUE;
			other.FRAUX = this.FRAUX;
			other.FRCPTL = this.FRCPTL;
			other.FRVIL = this.FRVIL;
			other.FRPLAN = this.FRPLAN;
			other.FRCODE = this.FRCODE;
			other.FRFIL1 = this.FRFIL1;
			other.FRQUAL = this.FRQUAL;
			other.FRCOM1 = this.FRCOM1;
			other.FRDEL = this.FRDEL;
			other.FRREMFI = this.FRREMFI;
			other.FRECH = this.FRECH;
			other.FRECHJ = this.FRECHJ;
			other.FRPAI = this.FRPAI;
			other.FRDAC = this.FRDAC;
			other.FRECHJ2 = this.FRECHJ2;
			other.FRMOD = this.FRMOD;
			other.FRBQ1 = this.FRBQ1;
			other.FRBQ2 = this.FRBQ2;
			other.FRBQ3 = this.FRBQ3;
			other.FRBQ4 = this.FRBQ4;
			other.FRBQ5 = this.FRBQ5;
			other.FRBQ6 = this.FRBQ6;
			other.FRFACT = this.FRFACT;
			other.FRBL = this.FRBL;
			other.FRESC = this.FRESC;
			other.FRFIL2 = this.FRFIL2;
			other.FRDAL = this.FRDAL;
			other.FRCAN1 = this.FRCAN1;
			other.FRCAN2 = this.FRCAN2;
			other.FRCAN3 = this.FRCAN3;
			other.FRDATF = this.FRDATF;
			other.FRRESP = this.FRRESP;
			other.FRTEL1 = this.FRTEL1;
			other.FRTEL2 = this.FRTEL2;
			other.FRTEX1 = this.FRTEX1;
			other.FRTEX2 = this.FRTEX2;
			other.FRCDEFAX = this.FRCDEFAX;
			other.FRCDEMAIL = this.FRCDEMAIL;
			other.FRCDEINT = this.FRCDEINT;
			other.FRCDEDIL = this.FRCDEDIL;
			other.FREXPORT = this.FREXPORT;
			other.FRGENCODE = this.FRGENCODE;
			other.FREXPEDIT = this.FREXPEDIT;
			other.FRIDENT = this.FRIDENT;
			other.FRPASSE = this.FRPASSE;
			other.FRSITE = this.FRSITE;
			other.FRIBAN1 = this.FRIBAN1;
			other.FRIBAN72 = this.FRIBAN72;
			other.FRIBAN8 = this.FRIBAN8;
			other.FRIBAN9 = this.FRIBAN9;
			other.FRIBIC = this.FRIBIC;
			other.FRFIL3 = this.FRFIL3;
			other.FRFRANC = this.FRFRANC;
			other.FRCODLIV = this.FRCODLIV;
			other.FRCODCLI = this.FRCODCLI;
			other.FRPAYS = this.FRPAYS;
			other.FRSECT = this.FRSECT;
			other.FRTOUR = this.FRTOUR;
			other.FRNCEE = this.FRNCEE;
			other.FRFRAP = this.FRFRAP;
			other.FRPOID = this.FRPOID;
			other.FRCUBA = this.FRCUBA;
			other.FRNTEL2 = this.FRNTEL2;
			other.FRNTEX2 = this.FRNTEX2;
			other.FRCREP = this.FRCREP;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_49Struct other) {

			other.FRREF = this.FRREF;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FRREF = readString(dis);

					this.FRNOM = readString(dis);

					this.FRRUE = readString(dis);

					this.FRAUX = readString(dis);

					this.FRCPTL = readString(dis);

					this.FRVIL = readString(dis);

					this.FRPLAN = readString(dis);

					this.FRCODE = readString(dis);

					this.FRFIL1 = readString(dis);

					this.FRQUAL = readString(dis);

					this.FRCOM1 = readString(dis);

					this.FRDEL = readString(dis);

					this.FRREMFI = readString(dis);

					this.FRECH = readString(dis);

					this.FRECHJ = readString(dis);

					this.FRPAI = readString(dis);

					this.FRDAC = readString(dis);

					this.FRECHJ2 = readString(dis);

					this.FRMOD = readString(dis);

					this.FRBQ1 = readString(dis);

					this.FRBQ2 = readString(dis);

					this.FRBQ3 = readString(dis);

					this.FRBQ4 = readString(dis);

					this.FRBQ5 = readString(dis);

					this.FRBQ6 = readString(dis);

					this.FRFACT = readString(dis);

					this.FRBL = readString(dis);

					this.FRESC = readString(dis);

					this.FRFIL2 = readString(dis);

					this.FRDAL = readString(dis);

					this.FRCAN1 = readString(dis);

					this.FRCAN2 = readString(dis);

					this.FRCAN3 = readString(dis);

					this.FRDATF = readString(dis);

					this.FRRESP = readString(dis);

					this.FRTEL1 = readString(dis);

					this.FRTEL2 = readString(dis);

					this.FRTEX1 = readString(dis);

					this.FRTEX2 = readString(dis);

					this.FRCDEFAX = readString(dis);

					this.FRCDEMAIL = readString(dis);

					this.FRCDEINT = readString(dis);

					this.FRCDEDIL = readString(dis);

					this.FREXPORT = readString(dis);

					this.FRGENCODE = readString(dis);

					this.FREXPEDIT = readString(dis);

					this.FRIDENT = readString(dis);

					this.FRPASSE = readString(dis);

					this.FRSITE = readString(dis);

					this.FRIBAN1 = readString(dis);

					this.FRIBAN72 = readString(dis);

					this.FRIBAN8 = readString(dis);

					this.FRIBAN9 = readString(dis);

					this.FRIBIC = readString(dis);

					this.FRFIL3 = readString(dis);

					this.FRFRANC = readString(dis);

					this.FRCODLIV = readString(dis);

					this.FRCODCLI = readString(dis);

					this.FRPAYS = readString(dis);

					this.FRSECT = readString(dis);

					this.FRTOUR = readString(dis);

					this.FRNCEE = readString(dis);

					this.FRFRAP = readString(dis);

					this.FRPOID = readString(dis);

					this.FRCUBA = readString(dis);

					this.FRNTEL2 = readString(dis);

					this.FRNTEX2 = readString(dis);

					this.FRCREP = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FRREF, dos);

				// String

				writeString(this.FRNOM, dos);

				// String

				writeString(this.FRRUE, dos);

				// String

				writeString(this.FRAUX, dos);

				// String

				writeString(this.FRCPTL, dos);

				// String

				writeString(this.FRVIL, dos);

				// String

				writeString(this.FRPLAN, dos);

				// String

				writeString(this.FRCODE, dos);

				// String

				writeString(this.FRFIL1, dos);

				// String

				writeString(this.FRQUAL, dos);

				// String

				writeString(this.FRCOM1, dos);

				// String

				writeString(this.FRDEL, dos);

				// String

				writeString(this.FRREMFI, dos);

				// String

				writeString(this.FRECH, dos);

				// String

				writeString(this.FRECHJ, dos);

				// String

				writeString(this.FRPAI, dos);

				// String

				writeString(this.FRDAC, dos);

				// String

				writeString(this.FRECHJ2, dos);

				// String

				writeString(this.FRMOD, dos);

				// String

				writeString(this.FRBQ1, dos);

				// String

				writeString(this.FRBQ2, dos);

				// String

				writeString(this.FRBQ3, dos);

				// String

				writeString(this.FRBQ4, dos);

				// String

				writeString(this.FRBQ5, dos);

				// String

				writeString(this.FRBQ6, dos);

				// String

				writeString(this.FRFACT, dos);

				// String

				writeString(this.FRBL, dos);

				// String

				writeString(this.FRESC, dos);

				// String

				writeString(this.FRFIL2, dos);

				// String

				writeString(this.FRDAL, dos);

				// String

				writeString(this.FRCAN1, dos);

				// String

				writeString(this.FRCAN2, dos);

				// String

				writeString(this.FRCAN3, dos);

				// String

				writeString(this.FRDATF, dos);

				// String

				writeString(this.FRRESP, dos);

				// String

				writeString(this.FRTEL1, dos);

				// String

				writeString(this.FRTEL2, dos);

				// String

				writeString(this.FRTEX1, dos);

				// String

				writeString(this.FRTEX2, dos);

				// String

				writeString(this.FRCDEFAX, dos);

				// String

				writeString(this.FRCDEMAIL, dos);

				// String

				writeString(this.FRCDEINT, dos);

				// String

				writeString(this.FRCDEDIL, dos);

				// String

				writeString(this.FREXPORT, dos);

				// String

				writeString(this.FRGENCODE, dos);

				// String

				writeString(this.FREXPEDIT, dos);

				// String

				writeString(this.FRIDENT, dos);

				// String

				writeString(this.FRPASSE, dos);

				// String

				writeString(this.FRSITE, dos);

				// String

				writeString(this.FRIBAN1, dos);

				// String

				writeString(this.FRIBAN72, dos);

				// String

				writeString(this.FRIBAN8, dos);

				// String

				writeString(this.FRIBAN9, dos);

				// String

				writeString(this.FRIBIC, dos);

				// String

				writeString(this.FRFIL3, dos);

				// String

				writeString(this.FRFRANC, dos);

				// String

				writeString(this.FRCODLIV, dos);

				// String

				writeString(this.FRCODCLI, dos);

				// String

				writeString(this.FRPAYS, dos);

				// String

				writeString(this.FRSECT, dos);

				// String

				writeString(this.FRTOUR, dos);

				// String

				writeString(this.FRNCEE, dos);

				// String

				writeString(this.FRFRAP, dos);

				// String

				writeString(this.FRPOID, dos);

				// String

				writeString(this.FRCUBA, dos);

				// String

				writeString(this.FRNTEL2, dos);

				// String

				writeString(this.FRNTEX2, dos);

				// String

				writeString(this.FRCREP, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FRREF=" + FRREF);
			sb.append(",FRNOM=" + FRNOM);
			sb.append(",FRRUE=" + FRRUE);
			sb.append(",FRAUX=" + FRAUX);
			sb.append(",FRCPTL=" + FRCPTL);
			sb.append(",FRVIL=" + FRVIL);
			sb.append(",FRPLAN=" + FRPLAN);
			sb.append(",FRCODE=" + FRCODE);
			sb.append(",FRFIL1=" + FRFIL1);
			sb.append(",FRQUAL=" + FRQUAL);
			sb.append(",FRCOM1=" + FRCOM1);
			sb.append(",FRDEL=" + FRDEL);
			sb.append(",FRREMFI=" + FRREMFI);
			sb.append(",FRECH=" + FRECH);
			sb.append(",FRECHJ=" + FRECHJ);
			sb.append(",FRPAI=" + FRPAI);
			sb.append(",FRDAC=" + FRDAC);
			sb.append(",FRECHJ2=" + FRECHJ2);
			sb.append(",FRMOD=" + FRMOD);
			sb.append(",FRBQ1=" + FRBQ1);
			sb.append(",FRBQ2=" + FRBQ2);
			sb.append(",FRBQ3=" + FRBQ3);
			sb.append(",FRBQ4=" + FRBQ4);
			sb.append(",FRBQ5=" + FRBQ5);
			sb.append(",FRBQ6=" + FRBQ6);
			sb.append(",FRFACT=" + FRFACT);
			sb.append(",FRBL=" + FRBL);
			sb.append(",FRESC=" + FRESC);
			sb.append(",FRFIL2=" + FRFIL2);
			sb.append(",FRDAL=" + FRDAL);
			sb.append(",FRCAN1=" + FRCAN1);
			sb.append(",FRCAN2=" + FRCAN2);
			sb.append(",FRCAN3=" + FRCAN3);
			sb.append(",FRDATF=" + FRDATF);
			sb.append(",FRRESP=" + FRRESP);
			sb.append(",FRTEL1=" + FRTEL1);
			sb.append(",FRTEL2=" + FRTEL2);
			sb.append(",FRTEX1=" + FRTEX1);
			sb.append(",FRTEX2=" + FRTEX2);
			sb.append(",FRCDEFAX=" + FRCDEFAX);
			sb.append(",FRCDEMAIL=" + FRCDEMAIL);
			sb.append(",FRCDEINT=" + FRCDEINT);
			sb.append(",FRCDEDIL=" + FRCDEDIL);
			sb.append(",FREXPORT=" + FREXPORT);
			sb.append(",FRGENCODE=" + FRGENCODE);
			sb.append(",FREXPEDIT=" + FREXPEDIT);
			sb.append(",FRIDENT=" + FRIDENT);
			sb.append(",FRPASSE=" + FRPASSE);
			sb.append(",FRSITE=" + FRSITE);
			sb.append(",FRIBAN1=" + FRIBAN1);
			sb.append(",FRIBAN72=" + FRIBAN72);
			sb.append(",FRIBAN8=" + FRIBAN8);
			sb.append(",FRIBAN9=" + FRIBAN9);
			sb.append(",FRIBIC=" + FRIBIC);
			sb.append(",FRFIL3=" + FRFIL3);
			sb.append(",FRFRANC=" + FRFRANC);
			sb.append(",FRCODLIV=" + FRCODLIV);
			sb.append(",FRCODCLI=" + FRCODCLI);
			sb.append(",FRPAYS=" + FRPAYS);
			sb.append(",FRSECT=" + FRSECT);
			sb.append(",FRTOUR=" + FRTOUR);
			sb.append(",FRNCEE=" + FRNCEE);
			sb.append(",FRFRAP=" + FRFRAP);
			sb.append(",FRPOID=" + FRPOID);
			sb.append(",FRCUBA=" + FRCUBA);
			sb.append(",FRNTEL2=" + FRNTEL2);
			sb.append(",FRNTEX2=" + FRNTEX2);
			sb.append(",FRCREP=" + FRCREP);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_49Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FRREF, other.FRREF);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_49Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_49_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_50Process(globalMap);

				row44Struct row44 = new row44Struct();
				copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct copyOfcopyOfcopyOfcopyOfmain_3_1_0 = new copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct();

				/**
				 * [tDBOutput_44 begin ] start
				 */

				ok_Hash.put("tDBOutput_44", false);
				start_Hash.put("tDBOutput_44", System.currentTimeMillis());

				currentComponent = "tDBOutput_44";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfcopyOfmain_3_1_0");
				}

				int tos_count_tDBOutput_44 = 0;

				String dbschema_tDBOutput_44 = null;
				dbschema_tDBOutput_44 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_44 = null;
				if (dbschema_tDBOutput_44 == null || dbschema_tDBOutput_44.trim().length() == 0) {
					tableName_tDBOutput_44 = ("contact");
				} else {
					tableName_tDBOutput_44 = dbschema_tDBOutput_44 + "\".\"" + ("contact");
				}

				int nb_line_tDBOutput_44 = 0;
				int nb_line_update_tDBOutput_44 = 0;
				int nb_line_inserted_tDBOutput_44 = 0;
				int nb_line_deleted_tDBOutput_44 = 0;
				int nb_line_rejected_tDBOutput_44 = 0;

				int deletedCount_tDBOutput_44 = 0;
				int updatedCount_tDBOutput_44 = 0;
				int insertedCount_tDBOutput_44 = 0;
				int rejectedCount_tDBOutput_44 = 0;

				boolean whetherReject_tDBOutput_44 = false;

				java.sql.Connection conn_tDBOutput_44 = null;
				String dbUser_tDBOutput_44 = null;

				conn_tDBOutput_44 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_44 = 10000;
				int batchSizeCounter_tDBOutput_44 = 0;

				int count_tDBOutput_44 = 0;
				String insert_tDBOutput_44 = "INSERT INTO \"" + tableName_tDBOutput_44
						+ "\" (\"idcontact\",\"principal\",\"fax\",\"fonction\",\"internet\",\"login\",\"mail\",\"mail_validateur\",\"niveau_validateur\",\"nom_contact\",\"nom_responsable\",\"nom_respon_commerc\",\"nom_respon_financier\",\"password\",\"portable\",\"rang\",\"service\",\"telephone\",\"telephonebis\",\"idadresse_livraison\",\"idcli\",\"idfournisseur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_44 = conn_tDBOutput_44.prepareStatement(insert_tDBOutput_44);
				resourceMap.put("pstmt_tDBOutput_44", pstmt_tDBOutput_44);

				/**
				 * [tDBOutput_44 begin ] stop
				 */

				/**
				 * [tMap_44 begin ] start
				 */

				ok_Hash.put("tMap_44", false);
				start_Hash.put("tMap_44", System.currentTimeMillis());

				currentComponent = "tMap_44";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row44");
				}

				int tos_count_tMap_44 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) globalMap
						.get("tHash_Lookup_row45"));

				row45Struct row45HashKey = new row45Struct();
				row45Struct row45Default = new row45Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_44__Struct {
				}
				Var__tMap_44__Struct Var__tMap_44 = new Var__tMap_44__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp = new copyOfcopyOfcopyOfcopyOfmain_3_1_0Struct();
// ###############################

				/**
				 * [tMap_44 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_49 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_49", false);
				start_Hash.put("tFileInputDelimited_49", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_49";

				int tos_count_tFileInputDelimited_49 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_49 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_49 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_49 = null;
				int limit_tFileInputDelimited_49 = -1;
				try {

					Object filename_tFileInputDelimited_49 = "C:/DEV/Data/Base Montauban/Fournisseur.csv";
					if (filename_tFileInputDelimited_49 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_49 = 0, random_value_tFileInputDelimited_49 = -1;
						if (footer_value_tFileInputDelimited_49 > 0 || random_value_tFileInputDelimited_49 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_49 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Fournisseur.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_49, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_49 != null && fid_tFileInputDelimited_49.nextRecord()) {
						rowstate_tFileInputDelimited_49.reset();

						row44 = null;

						boolean whetherReject_tFileInputDelimited_49 = false;
						row44 = new row44Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_49 = 0;

							columnIndexWithD_tFileInputDelimited_49 = 0;

							row44.FRREF = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 1;

							row44.FRNOM = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 2;

							row44.FRRUE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 3;

							row44.FRAUX = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 4;

							row44.FRCPTL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 5;

							row44.FRVIL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 6;

							row44.FRPLAN = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 7;

							row44.FRCODE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 8;

							row44.FRFIL1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 9;

							row44.FRQUAL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 10;

							row44.FRCOM1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 11;

							row44.FRDEL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 12;

							row44.FRREMFI = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 13;

							row44.FRECH = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 14;

							row44.FRECHJ = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 15;

							row44.FRPAI = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 16;

							row44.FRDAC = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 17;

							row44.FRECHJ2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 18;

							row44.FRMOD = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 19;

							row44.FRBQ1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 20;

							row44.FRBQ2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 21;

							row44.FRBQ3 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 22;

							row44.FRBQ4 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 23;

							row44.FRBQ5 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 24;

							row44.FRBQ6 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 25;

							row44.FRFACT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 26;

							row44.FRBL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 27;

							row44.FRESC = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 28;

							row44.FRFIL2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 29;

							row44.FRDAL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 30;

							row44.FRCAN1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 31;

							row44.FRCAN2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 32;

							row44.FRCAN3 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 33;

							row44.FRDATF = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 34;

							row44.FRRESP = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 35;

							row44.FRTEL1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 36;

							row44.FRTEL2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 37;

							row44.FRTEX1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 38;

							row44.FRTEX2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 39;

							row44.FRCDEFAX = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 40;

							row44.FRCDEMAIL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 41;

							row44.FRCDEINT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 42;

							row44.FRCDEDIL = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 43;

							row44.FREXPORT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 44;

							row44.FRGENCODE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 45;

							row44.FREXPEDIT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 46;

							row44.FRIDENT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 47;

							row44.FRPASSE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 48;

							row44.FRSITE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 49;

							row44.FRIBAN1 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 50;

							row44.FRIBAN72 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 51;

							row44.FRIBAN8 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 52;

							row44.FRIBAN9 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 53;

							row44.FRIBIC = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 54;

							row44.FRFIL3 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 55;

							row44.FRFRANC = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 56;

							row44.FRCODLIV = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 57;

							row44.FRCODCLI = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 58;

							row44.FRPAYS = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 59;

							row44.FRSECT = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 60;

							row44.FRTOUR = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 61;

							row44.FRNCEE = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 62;

							row44.FRFRAP = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 63;

							row44.FRPOID = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 64;

							row44.FRCUBA = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 65;

							row44.FRNTEL2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 66;

							row44.FRNTEX2 = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							columnIndexWithD_tFileInputDelimited_49 = 67;

							row44.FRCREP = fid_tFileInputDelimited_49.get(columnIndexWithD_tFileInputDelimited_49);

							if (rowstate_tFileInputDelimited_49.getException() != null) {
								throw rowstate_tFileInputDelimited_49.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_49 = true;

							System.err.println(e.getMessage());
							row44 = null;

						}

						/**
						 * [tFileInputDelimited_49 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_49 main ] start
						 */

						currentComponent = "tFileInputDelimited_49";

						tos_count_tFileInputDelimited_49++;

						/**
						 * [tFileInputDelimited_49 main ] stop
						 */

						/**
						 * [tFileInputDelimited_49 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_49";

						/**
						 * [tFileInputDelimited_49 process_data_begin ] stop
						 */
// Start of branch "row44"
						if (row44 != null) {

							/**
							 * [tMap_44 main ] start
							 */

							currentComponent = "tMap_44";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row44");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_44 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_44 = false;
							boolean mainRowRejected_tMap_44 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row45"
							///////////////////////////////////////////////

							boolean forceLooprow45 = false;

							row45Struct row45ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_44) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_44 = false;

								row45HashKey.CLIENT_KEY = row44.FRREF;

								row45HashKey.hashCodeDirty = true;

								tHash_Lookup_row45.lookup(row45HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row45 != null && tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row45' and it contains more one result from keys : row45.CLIENT_KEY = '" +
								// row45HashKey.CLIENT_KEY + "'");
							} // G 071

							row45Struct row45 = null;

							row45Struct fromLookup_row45 = null;
							row45 = row45Default;

							if (tHash_Lookup_row45 != null && tHash_Lookup_row45.hasNext()) { // G 099

								fromLookup_row45 = tHash_Lookup_row45.next();

							} // G 099

							if (fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_44__Struct Var = Var__tMap_44;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfcopyOfmain_3_1_0 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfmain_3_1_0'
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.idcontact = Numeric.sequence("contact", 1, 1);
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.principal = false;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.fax = row45.FAX;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.fonction = row45.FONCTION;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.internet = row45.CONT_INTERNET == null ? null
										: row45.CONT_INTERNET.isBlank() ? null : row45.CONT_INTERNET;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.login = row45.LOGIN;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.mail = row45.EMAIL;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.mail_validateur = row45.CONT_VALIDATEUR;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.niveau_validateur = row45.CONT_NIVEAU;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.nom_contact = row44.FRNOM;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.nom_responsable = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.nom_respon_commerc = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.nom_respon_financier = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.password = row45.PASSWORD;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.portable = row45.PORTABLE;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.rang = row45.RANG_KEY;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.service = row45.SERVICE;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.telephone = row45.TELEPHONE;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.telephonebis = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.idadresse_livraison = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.idcli = null;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp.idfournisseur = row45.CLIENT_KEY;
								copyOfcopyOfcopyOfcopyOfmain_3_1_0 = copyOfcopyOfcopyOfcopyOfmain_3_1_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_44 = false;

							tos_count_tMap_44++;

							/**
							 * [tMap_44 main ] stop
							 */

							/**
							 * [tMap_44 process_data_begin ] start
							 */

							currentComponent = "tMap_44";

							/**
							 * [tMap_44 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfcopyOfmain_3_1_0"
							if (copyOfcopyOfcopyOfcopyOfmain_3_1_0 != null) {

								/**
								 * [tDBOutput_44 main ] start
								 */

								currentComponent = "tDBOutput_44";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1,
											"copyOfcopyOfcopyOfcopyOfmain_3_1_0");
								}

								whetherReject_tDBOutput_44 = false;
								pstmt_tDBOutput_44.setInt(1, copyOfcopyOfcopyOfcopyOfmain_3_1_0.idcontact);

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.principal == null) {
									pstmt_tDBOutput_44.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmt_tDBOutput_44.setBoolean(2, copyOfcopyOfcopyOfcopyOfmain_3_1_0.principal);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.fax == null) {
									pstmt_tDBOutput_44.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(3, copyOfcopyOfcopyOfcopyOfmain_3_1_0.fax);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.fonction == null) {
									pstmt_tDBOutput_44.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(4, copyOfcopyOfcopyOfcopyOfmain_3_1_0.fonction);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.internet == null) {
									pstmt_tDBOutput_44.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(5, copyOfcopyOfcopyOfcopyOfmain_3_1_0.internet);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.login == null) {
									pstmt_tDBOutput_44.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(6, copyOfcopyOfcopyOfcopyOfmain_3_1_0.login);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.mail == null) {
									pstmt_tDBOutput_44.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(7, copyOfcopyOfcopyOfcopyOfmain_3_1_0.mail);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.mail_validateur == null) {
									pstmt_tDBOutput_44.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(8, copyOfcopyOfcopyOfcopyOfmain_3_1_0.mail_validateur);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.niveau_validateur == null) {
									pstmt_tDBOutput_44.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(9,
											copyOfcopyOfcopyOfcopyOfmain_3_1_0.niveau_validateur);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_contact == null) {
									pstmt_tDBOutput_44.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(10, copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_contact);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_responsable == null) {
									pstmt_tDBOutput_44.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(11,
											copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_responsable);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_respon_commerc == null) {
									pstmt_tDBOutput_44.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(12,
											copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_respon_commerc);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_respon_financier == null) {
									pstmt_tDBOutput_44.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(13,
											copyOfcopyOfcopyOfcopyOfmain_3_1_0.nom_respon_financier);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.password == null) {
									pstmt_tDBOutput_44.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(14, copyOfcopyOfcopyOfcopyOfmain_3_1_0.password);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.portable == null) {
									pstmt_tDBOutput_44.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(15, copyOfcopyOfcopyOfcopyOfmain_3_1_0.portable);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.rang == null) {
									pstmt_tDBOutput_44.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(16, copyOfcopyOfcopyOfcopyOfmain_3_1_0.rang);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.service == null) {
									pstmt_tDBOutput_44.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(17, copyOfcopyOfcopyOfcopyOfmain_3_1_0.service);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.telephone == null) {
									pstmt_tDBOutput_44.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(18, copyOfcopyOfcopyOfcopyOfmain_3_1_0.telephone);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.telephonebis == null) {
									pstmt_tDBOutput_44.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(19, copyOfcopyOfcopyOfcopyOfmain_3_1_0.telephonebis);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.idadresse_livraison == null) {
									pstmt_tDBOutput_44.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(20,
											copyOfcopyOfcopyOfcopyOfmain_3_1_0.idadresse_livraison);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.idcli == null) {
									pstmt_tDBOutput_44.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(21, copyOfcopyOfcopyOfcopyOfmain_3_1_0.idcli);
								}

								if (copyOfcopyOfcopyOfcopyOfmain_3_1_0.idfournisseur == null) {
									pstmt_tDBOutput_44.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_44.setString(22, copyOfcopyOfcopyOfcopyOfmain_3_1_0.idfournisseur);
								}

								pstmt_tDBOutput_44.addBatch();
								nb_line_tDBOutput_44++;

								batchSizeCounter_tDBOutput_44++;

								if (!whetherReject_tDBOutput_44) {
								}
								if ((batchSize_tDBOutput_44 > 0)
										&& (batchSize_tDBOutput_44 <= batchSizeCounter_tDBOutput_44)) {
									try {
										int countSum_tDBOutput_44 = 0;

										for (int countEach_tDBOutput_44 : pstmt_tDBOutput_44.executeBatch()) {
											countSum_tDBOutput_44 += (countEach_tDBOutput_44 < 0 ? 0
													: countEach_tDBOutput_44);
										}

										insertedCount_tDBOutput_44 += countSum_tDBOutput_44;

										batchSizeCounter_tDBOutput_44 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_44) {
										java.sql.SQLException ne_tDBOutput_44 = e_tDBOutput_44.getNextException(),
												sqle_tDBOutput_44 = null;
										String errormessage_tDBOutput_44;
										if (ne_tDBOutput_44 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_44 = new java.sql.SQLException(
													e_tDBOutput_44.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_44.getMessage(),
													ne_tDBOutput_44.getSQLState(), ne_tDBOutput_44.getErrorCode(),
													ne_tDBOutput_44);
											errormessage_tDBOutput_44 = sqle_tDBOutput_44.getMessage();
										} else {
											errormessage_tDBOutput_44 = e_tDBOutput_44.getMessage();
										}

										int countSum_tDBOutput_44 = 0;
										for (int countEach_tDBOutput_44 : e_tDBOutput_44.getUpdateCounts()) {
											countSum_tDBOutput_44 += (countEach_tDBOutput_44 < 0 ? 0
													: countEach_tDBOutput_44);
										}

										insertedCount_tDBOutput_44 += countSum_tDBOutput_44;

										System.err.println(errormessage_tDBOutput_44);

									}
								}

								tos_count_tDBOutput_44++;

								/**
								 * [tDBOutput_44 main ] stop
								 */

								/**
								 * [tDBOutput_44 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_44";

								/**
								 * [tDBOutput_44 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_44 process_data_end ] start
								 */

								currentComponent = "tDBOutput_44";

								/**
								 * [tDBOutput_44 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfcopyOfmain_3_1_0"

							/**
							 * [tMap_44 process_data_end ] start
							 */

							currentComponent = "tMap_44";

							/**
							 * [tMap_44 process_data_end ] stop
							 */

						} // End of branch "row44"

						/**
						 * [tFileInputDelimited_49 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_49";

						/**
						 * [tFileInputDelimited_49 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_49 end ] start
						 */

						currentComponent = "tFileInputDelimited_49";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Fournisseur.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_49 != null) {
							fid_tFileInputDelimited_49.close();
						}
					}
					if (fid_tFileInputDelimited_49 != null) {
						globalMap.put("tFileInputDelimited_49_NB_LINE", fid_tFileInputDelimited_49.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_49", true);
				end_Hash.put("tFileInputDelimited_49", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_49 end ] stop
				 */

				/**
				 * [tMap_44 end ] start
				 */

				currentComponent = "tMap_44";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row45 != null) {
					tHash_Lookup_row45.endGet();
				}
				globalMap.remove("tHash_Lookup_row45");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row44");
				}

				ok_Hash.put("tMap_44", true);
				end_Hash.put("tMap_44", System.currentTimeMillis());

				/**
				 * [tMap_44 end ] stop
				 */

				/**
				 * [tDBOutput_44 end ] start
				 */

				currentComponent = "tDBOutput_44";

				try {
					int countSum_tDBOutput_44 = 0;
					if (pstmt_tDBOutput_44 != null && batchSizeCounter_tDBOutput_44 > 0) {

						for (int countEach_tDBOutput_44 : pstmt_tDBOutput_44.executeBatch()) {
							countSum_tDBOutput_44 += (countEach_tDBOutput_44 < 0 ? 0 : countEach_tDBOutput_44);
						}

					}

					insertedCount_tDBOutput_44 += countSum_tDBOutput_44;

				} catch (java.sql.BatchUpdateException e_tDBOutput_44) {
					java.sql.SQLException ne_tDBOutput_44 = e_tDBOutput_44.getNextException(), sqle_tDBOutput_44 = null;
					String errormessage_tDBOutput_44;
					if (ne_tDBOutput_44 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_44 = new java.sql.SQLException(
								e_tDBOutput_44.getMessage() + "\ncaused by: " + ne_tDBOutput_44.getMessage(),
								ne_tDBOutput_44.getSQLState(), ne_tDBOutput_44.getErrorCode(), ne_tDBOutput_44);
						errormessage_tDBOutput_44 = sqle_tDBOutput_44.getMessage();
					} else {
						errormessage_tDBOutput_44 = e_tDBOutput_44.getMessage();
					}

					int countSum_tDBOutput_44 = 0;
					for (int countEach_tDBOutput_44 : e_tDBOutput_44.getUpdateCounts()) {
						countSum_tDBOutput_44 += (countEach_tDBOutput_44 < 0 ? 0 : countEach_tDBOutput_44);
					}

					insertedCount_tDBOutput_44 += countSum_tDBOutput_44;

					System.err.println(errormessage_tDBOutput_44);

				}

				if (pstmt_tDBOutput_44 != null) {

					pstmt_tDBOutput_44.close();
					resourceMap.remove("pstmt_tDBOutput_44");
				}
				resourceMap.put("statementClosed_tDBOutput_44", true);

				nb_line_deleted_tDBOutput_44 = nb_line_deleted_tDBOutput_44 + deletedCount_tDBOutput_44;
				nb_line_update_tDBOutput_44 = nb_line_update_tDBOutput_44 + updatedCount_tDBOutput_44;
				nb_line_inserted_tDBOutput_44 = nb_line_inserted_tDBOutput_44 + insertedCount_tDBOutput_44;
				nb_line_rejected_tDBOutput_44 = nb_line_rejected_tDBOutput_44 + rejectedCount_tDBOutput_44;

				globalMap.put("tDBOutput_44_NB_LINE", nb_line_tDBOutput_44);
				globalMap.put("tDBOutput_44_NB_LINE_UPDATED", nb_line_update_tDBOutput_44);
				globalMap.put("tDBOutput_44_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_44);
				globalMap.put("tDBOutput_44_NB_LINE_DELETED", nb_line_deleted_tDBOutput_44);
				globalMap.put("tDBOutput_44_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_44);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfcopyOfmain_3_1_0");
				}

				ok_Hash.put("tDBOutput_44", true);
				end_Hash.put("tDBOutput_44", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_44 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_44"
			globalMap.remove("tHash_Lookup_row45");

			try {

				/**
				 * [tFileInputDelimited_49 finally ] start
				 */

				currentComponent = "tFileInputDelimited_49";

				/**
				 * [tFileInputDelimited_49 finally ] stop
				 */

				/**
				 * [tMap_44 finally ] start
				 */

				currentComponent = "tMap_44";

				/**
				 * [tMap_44 finally ] stop
				 */

				/**
				 * [tDBOutput_44 finally ] start
				 */

				currentComponent = "tDBOutput_44";

				if (resourceMap.get("statementClosed_tDBOutput_44") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_44 = null;
					if ((pstmtToClose_tDBOutput_44 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_44")) != null) {
						pstmtToClose_tDBOutput_44.close();
					}
				}

				/**
				 * [tDBOutput_44 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_49_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HISKLE;

		public String getHISKLE() {
			return this.HISKLE;
		}

		public String HISCAN01;

		public String getHISCAN01() {
			return this.HISCAN01;
		}

		public String HISCAN02;

		public String getHISCAN02() {
			return this.HISCAN02;
		}

		public String HISCAN03;

		public String getHISCAN03() {
			return this.HISCAN03;
		}

		public String HISCAN04;

		public String getHISCAN04() {
			return this.HISCAN04;
		}

		public String HISCAN05;

		public String getHISCAN05() {
			return this.HISCAN05;
		}

		public String HISCAN06;

		public String getHISCAN06() {
			return this.HISCAN06;
		}

		public String HISCAN07;

		public String getHISCAN07() {
			return this.HISCAN07;
		}

		public String HISCAN08;

		public String getHISCAN08() {
			return this.HISCAN08;
		}

		public String HISCAN09;

		public String getHISCAN09() {
			return this.HISCAN09;
		}

		public String HISCAN10;

		public String getHISCAN10() {
			return this.HISCAN10;
		}

		public String HISCAN11;

		public String getHISCAN11() {
			return this.HISCAN11;
		}

		public String HISCAN12;

		public String getHISCAN12() {
			return this.HISCAN12;
		}

		public String HISPAN01;

		public String getHISPAN01() {
			return this.HISPAN01;
		}

		public String HISPAN02;

		public String getHISPAN02() {
			return this.HISPAN02;
		}

		public String HISPAN03;

		public String getHISPAN03() {
			return this.HISPAN03;
		}

		public String HISPAN04;

		public String getHISPAN04() {
			return this.HISPAN04;
		}

		public String HISPAN05;

		public String getHISPAN05() {
			return this.HISPAN05;
		}

		public String HISPAN06;

		public String getHISPAN06() {
			return this.HISPAN06;
		}

		public String HISPAN07;

		public String getHISPAN07() {
			return this.HISPAN07;
		}

		public String HISPAN08;

		public String getHISPAN08() {
			return this.HISPAN08;
		}

		public String HISPAN09;

		public String getHISPAN09() {
			return this.HISPAN09;
		}

		public String HISPAN10;

		public String getHISPAN10() {
			return this.HISPAN10;
		}

		public String HISPAN11;

		public String getHISPAN11() {
			return this.HISPAN11;
		}

		public String HISPAN12;

		public String getHISPAN12() {
			return this.HISPAN12;
		}

		public String HISCAN101;

		public String getHISCAN101() {
			return this.HISCAN101;
		}

		public String HISCAN102;

		public String getHISCAN102() {
			return this.HISCAN102;
		}

		public String HISCAN103;

		public String getHISCAN103() {
			return this.HISCAN103;
		}

		public String HISCAN104;

		public String getHISCAN104() {
			return this.HISCAN104;
		}

		public String HISCAN105;

		public String getHISCAN105() {
			return this.HISCAN105;
		}

		public String HISCAN106;

		public String getHISCAN106() {
			return this.HISCAN106;
		}

		public String HISCAN107;

		public String getHISCAN107() {
			return this.HISCAN107;
		}

		public String HISCAN108;

		public String getHISCAN108() {
			return this.HISCAN108;
		}

		public String HISCAN109;

		public String getHISCAN109() {
			return this.HISCAN109;
		}

		public String HISCAN110;

		public String getHISCAN110() {
			return this.HISCAN110;
		}

		public String HISCAN111;

		public String getHISCAN111() {
			return this.HISCAN111;
		}

		public String HISCAN112;

		public String getHISCAN112() {
			return this.HISCAN112;
		}

		public String HISPAN101;

		public String getHISPAN101() {
			return this.HISPAN101;
		}

		public String HISPAN102;

		public String getHISPAN102() {
			return this.HISPAN102;
		}

		public String HISPAN103;

		public String getHISPAN103() {
			return this.HISPAN103;
		}

		public String HISPAN104;

		public String getHISPAN104() {
			return this.HISPAN104;
		}

		public String HISPAN105;

		public String getHISPAN105() {
			return this.HISPAN105;
		}

		public String HISPAN106;

		public String getHISPAN106() {
			return this.HISPAN106;
		}

		public String HISPAN107;

		public String getHISPAN107() {
			return this.HISPAN107;
		}

		public String HISPAN108;

		public String getHISPAN108() {
			return this.HISPAN108;
		}

		public String HISPAN109;

		public String getHISPAN109() {
			return this.HISPAN109;
		}

		public String HISPAN110;

		public String getHISPAN110() {
			return this.HISPAN110;
		}

		public String HISPAN111;

		public String getHISPAN111() {
			return this.HISPAN111;
		}

		public String HISPAN112;

		public String getHISPAN112() {
			return this.HISPAN112;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.HISKLE == null) ? 0 : this.HISKLE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.HISKLE == null) {
				if (other.HISKLE != null)
					return false;

			} else if (!this.HISKLE.equals(other.HISKLE))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.HISKLE = this.HISKLE;
			other.HISCAN01 = this.HISCAN01;
			other.HISCAN02 = this.HISCAN02;
			other.HISCAN03 = this.HISCAN03;
			other.HISCAN04 = this.HISCAN04;
			other.HISCAN05 = this.HISCAN05;
			other.HISCAN06 = this.HISCAN06;
			other.HISCAN07 = this.HISCAN07;
			other.HISCAN08 = this.HISCAN08;
			other.HISCAN09 = this.HISCAN09;
			other.HISCAN10 = this.HISCAN10;
			other.HISCAN11 = this.HISCAN11;
			other.HISCAN12 = this.HISCAN12;
			other.HISPAN01 = this.HISPAN01;
			other.HISPAN02 = this.HISPAN02;
			other.HISPAN03 = this.HISPAN03;
			other.HISPAN04 = this.HISPAN04;
			other.HISPAN05 = this.HISPAN05;
			other.HISPAN06 = this.HISPAN06;
			other.HISPAN07 = this.HISPAN07;
			other.HISPAN08 = this.HISPAN08;
			other.HISPAN09 = this.HISPAN09;
			other.HISPAN10 = this.HISPAN10;
			other.HISPAN11 = this.HISPAN11;
			other.HISPAN12 = this.HISPAN12;
			other.HISCAN101 = this.HISCAN101;
			other.HISCAN102 = this.HISCAN102;
			other.HISCAN103 = this.HISCAN103;
			other.HISCAN104 = this.HISCAN104;
			other.HISCAN105 = this.HISCAN105;
			other.HISCAN106 = this.HISCAN106;
			other.HISCAN107 = this.HISCAN107;
			other.HISCAN108 = this.HISCAN108;
			other.HISCAN109 = this.HISCAN109;
			other.HISCAN110 = this.HISCAN110;
			other.HISCAN111 = this.HISCAN111;
			other.HISCAN112 = this.HISCAN112;
			other.HISPAN101 = this.HISPAN101;
			other.HISPAN102 = this.HISPAN102;
			other.HISPAN103 = this.HISPAN103;
			other.HISPAN104 = this.HISPAN104;
			other.HISPAN105 = this.HISPAN105;
			other.HISPAN106 = this.HISPAN106;
			other.HISPAN107 = this.HISPAN107;
			other.HISPAN108 = this.HISPAN108;
			other.HISPAN109 = this.HISPAN109;
			other.HISPAN110 = this.HISPAN110;
			other.HISPAN111 = this.HISPAN111;
			other.HISPAN112 = this.HISPAN112;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.HISKLE = this.HISKLE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.HISKLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HISKLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HISCAN01 = readString(dis, ois);

				this.HISCAN02 = readString(dis, ois);

				this.HISCAN03 = readString(dis, ois);

				this.HISCAN04 = readString(dis, ois);

				this.HISCAN05 = readString(dis, ois);

				this.HISCAN06 = readString(dis, ois);

				this.HISCAN07 = readString(dis, ois);

				this.HISCAN08 = readString(dis, ois);

				this.HISCAN09 = readString(dis, ois);

				this.HISCAN10 = readString(dis, ois);

				this.HISCAN11 = readString(dis, ois);

				this.HISCAN12 = readString(dis, ois);

				this.HISPAN01 = readString(dis, ois);

				this.HISPAN02 = readString(dis, ois);

				this.HISPAN03 = readString(dis, ois);

				this.HISPAN04 = readString(dis, ois);

				this.HISPAN05 = readString(dis, ois);

				this.HISPAN06 = readString(dis, ois);

				this.HISPAN07 = readString(dis, ois);

				this.HISPAN08 = readString(dis, ois);

				this.HISPAN09 = readString(dis, ois);

				this.HISPAN10 = readString(dis, ois);

				this.HISPAN11 = readString(dis, ois);

				this.HISPAN12 = readString(dis, ois);

				this.HISCAN101 = readString(dis, ois);

				this.HISCAN102 = readString(dis, ois);

				this.HISCAN103 = readString(dis, ois);

				this.HISCAN104 = readString(dis, ois);

				this.HISCAN105 = readString(dis, ois);

				this.HISCAN106 = readString(dis, ois);

				this.HISCAN107 = readString(dis, ois);

				this.HISCAN108 = readString(dis, ois);

				this.HISCAN109 = readString(dis, ois);

				this.HISCAN110 = readString(dis, ois);

				this.HISCAN111 = readString(dis, ois);

				this.HISCAN112 = readString(dis, ois);

				this.HISPAN101 = readString(dis, ois);

				this.HISPAN102 = readString(dis, ois);

				this.HISPAN103 = readString(dis, ois);

				this.HISPAN104 = readString(dis, ois);

				this.HISPAN105 = readString(dis, ois);

				this.HISPAN106 = readString(dis, ois);

				this.HISPAN107 = readString(dis, ois);

				this.HISPAN108 = readString(dis, ois);

				this.HISPAN109 = readString(dis, ois);

				this.HISPAN110 = readString(dis, ois);

				this.HISPAN111 = readString(dis, ois);

				this.HISPAN112 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.HISCAN01, dos, oos);

				writeString(this.HISCAN02, dos, oos);

				writeString(this.HISCAN03, dos, oos);

				writeString(this.HISCAN04, dos, oos);

				writeString(this.HISCAN05, dos, oos);

				writeString(this.HISCAN06, dos, oos);

				writeString(this.HISCAN07, dos, oos);

				writeString(this.HISCAN08, dos, oos);

				writeString(this.HISCAN09, dos, oos);

				writeString(this.HISCAN10, dos, oos);

				writeString(this.HISCAN11, dos, oos);

				writeString(this.HISCAN12, dos, oos);

				writeString(this.HISPAN01, dos, oos);

				writeString(this.HISPAN02, dos, oos);

				writeString(this.HISPAN03, dos, oos);

				writeString(this.HISPAN04, dos, oos);

				writeString(this.HISPAN05, dos, oos);

				writeString(this.HISPAN06, dos, oos);

				writeString(this.HISPAN07, dos, oos);

				writeString(this.HISPAN08, dos, oos);

				writeString(this.HISPAN09, dos, oos);

				writeString(this.HISPAN10, dos, oos);

				writeString(this.HISPAN11, dos, oos);

				writeString(this.HISPAN12, dos, oos);

				writeString(this.HISCAN101, dos, oos);

				writeString(this.HISCAN102, dos, oos);

				writeString(this.HISCAN103, dos, oos);

				writeString(this.HISCAN104, dos, oos);

				writeString(this.HISCAN105, dos, oos);

				writeString(this.HISCAN106, dos, oos);

				writeString(this.HISCAN107, dos, oos);

				writeString(this.HISCAN108, dos, oos);

				writeString(this.HISCAN109, dos, oos);

				writeString(this.HISCAN110, dos, oos);

				writeString(this.HISCAN111, dos, oos);

				writeString(this.HISCAN112, dos, oos);

				writeString(this.HISPAN101, dos, oos);

				writeString(this.HISPAN102, dos, oos);

				writeString(this.HISPAN103, dos, oos);

				writeString(this.HISPAN104, dos, oos);

				writeString(this.HISPAN105, dos, oos);

				writeString(this.HISPAN106, dos, oos);

				writeString(this.HISPAN107, dos, oos);

				writeString(this.HISPAN108, dos, oos);

				writeString(this.HISPAN109, dos, oos);

				writeString(this.HISPAN110, dos, oos);

				writeString(this.HISPAN111, dos, oos);

				writeString(this.HISPAN112, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HISKLE=" + HISKLE);
			sb.append(",HISCAN01=" + HISCAN01);
			sb.append(",HISCAN02=" + HISCAN02);
			sb.append(",HISCAN03=" + HISCAN03);
			sb.append(",HISCAN04=" + HISCAN04);
			sb.append(",HISCAN05=" + HISCAN05);
			sb.append(",HISCAN06=" + HISCAN06);
			sb.append(",HISCAN07=" + HISCAN07);
			sb.append(",HISCAN08=" + HISCAN08);
			sb.append(",HISCAN09=" + HISCAN09);
			sb.append(",HISCAN10=" + HISCAN10);
			sb.append(",HISCAN11=" + HISCAN11);
			sb.append(",HISCAN12=" + HISCAN12);
			sb.append(",HISPAN01=" + HISPAN01);
			sb.append(",HISPAN02=" + HISPAN02);
			sb.append(",HISPAN03=" + HISPAN03);
			sb.append(",HISPAN04=" + HISPAN04);
			sb.append(",HISPAN05=" + HISPAN05);
			sb.append(",HISPAN06=" + HISPAN06);
			sb.append(",HISPAN07=" + HISPAN07);
			sb.append(",HISPAN08=" + HISPAN08);
			sb.append(",HISPAN09=" + HISPAN09);
			sb.append(",HISPAN10=" + HISPAN10);
			sb.append(",HISPAN11=" + HISPAN11);
			sb.append(",HISPAN12=" + HISPAN12);
			sb.append(",HISCAN101=" + HISCAN101);
			sb.append(",HISCAN102=" + HISCAN102);
			sb.append(",HISCAN103=" + HISCAN103);
			sb.append(",HISCAN104=" + HISCAN104);
			sb.append(",HISCAN105=" + HISCAN105);
			sb.append(",HISCAN106=" + HISCAN106);
			sb.append(",HISCAN107=" + HISCAN107);
			sb.append(",HISCAN108=" + HISCAN108);
			sb.append(",HISCAN109=" + HISCAN109);
			sb.append(",HISCAN110=" + HISCAN110);
			sb.append(",HISCAN111=" + HISCAN111);
			sb.append(",HISCAN112=" + HISCAN112);
			sb.append(",HISPAN101=" + HISPAN101);
			sb.append(",HISPAN102=" + HISPAN102);
			sb.append(",HISPAN103=" + HISPAN103);
			sb.append(",HISPAN104=" + HISPAN104);
			sb.append(",HISPAN105=" + HISPAN105);
			sb.append(",HISPAN106=" + HISPAN106);
			sb.append(",HISPAN107=" + HISPAN107);
			sb.append(",HISPAN108=" + HISPAN108);
			sb.append(",HISPAN109=" + HISPAN109);
			sb.append(",HISPAN110=" + HISPAN110);
			sb.append(",HISPAN111=" + HISPAN111);
			sb.append(",HISPAN112=" + HISPAN112);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HISKLE, other.HISKLE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tFileInputDelimited_22 - inputs:(after_tFileInputDelimited_10)
				// outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20)
				// outputs:()
				// linked node: tMap_10 - inputs:(row12,row20) outputs:(copyOfcopyOfmain_0_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct>getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_22 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_22", false);
				start_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_22";

				int tos_count_tFileInputDelimited_22 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_22 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_22 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_22 = null;
				int limit_tFileInputDelimited_22 = -1;
				try {

					Object filename_tFileInputDelimited_22 = "C:/DEV/Data/Base Montauban/historique_clients.csv";
					if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_22 = 0, random_value_tFileInputDelimited_22 = -1;
						if (footer_value_tFileInputDelimited_22 > 0 || random_value_tFileInputDelimited_22 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_22 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/historique_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_22, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_22 != null && fid_tFileInputDelimited_22.nextRecord()) {
						rowstate_tFileInputDelimited_22.reset();

						row20 = null;

						row20 = null;

						boolean whetherReject_tFileInputDelimited_22 = false;
						row20 = new row20Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_22 = 0;

							columnIndexWithD_tFileInputDelimited_22 = 0;

							row20.HISKLE = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 1;

							row20.HISCAN01 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 2;

							row20.HISCAN02 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 3;

							row20.HISCAN03 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 4;

							row20.HISCAN04 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 5;

							row20.HISCAN05 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 6;

							row20.HISCAN06 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 7;

							row20.HISCAN07 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 8;

							row20.HISCAN08 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 9;

							row20.HISCAN09 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 10;

							row20.HISCAN10 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 11;

							row20.HISCAN11 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 12;

							row20.HISCAN12 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 13;

							row20.HISPAN01 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 14;

							row20.HISPAN02 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 15;

							row20.HISPAN03 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 16;

							row20.HISPAN04 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 17;

							row20.HISPAN05 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 18;

							row20.HISPAN06 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 19;

							row20.HISPAN07 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 20;

							row20.HISPAN08 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 21;

							row20.HISPAN09 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 22;

							row20.HISPAN10 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 23;

							row20.HISPAN11 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 24;

							row20.HISPAN12 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 25;

							row20.HISCAN101 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 26;

							row20.HISCAN102 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 27;

							row20.HISCAN103 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 28;

							row20.HISCAN104 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 29;

							row20.HISCAN105 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 30;

							row20.HISCAN106 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 31;

							row20.HISCAN107 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 32;

							row20.HISCAN108 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 33;

							row20.HISCAN109 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 34;

							row20.HISCAN110 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 35;

							row20.HISCAN111 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 36;

							row20.HISCAN112 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 37;

							row20.HISPAN101 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 38;

							row20.HISPAN102 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 39;

							row20.HISPAN103 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 40;

							row20.HISPAN104 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 41;

							row20.HISPAN105 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 42;

							row20.HISPAN106 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 43;

							row20.HISPAN107 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 44;

							row20.HISPAN108 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 45;

							row20.HISPAN109 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 46;

							row20.HISPAN110 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 47;

							row20.HISPAN111 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							columnIndexWithD_tFileInputDelimited_22 = 48;

							row20.HISPAN112 = fid_tFileInputDelimited_22.get(columnIndexWithD_tFileInputDelimited_22);

							if (rowstate_tFileInputDelimited_22.getException() != null) {
								throw rowstate_tFileInputDelimited_22.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_22 = true;

							System.err.println(e.getMessage());
							row20 = null;

						}

						/**
						 * [tFileInputDelimited_22 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_22 main ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						tos_count_tFileInputDelimited_22++;

						/**
						 * [tFileInputDelimited_22 main ] stop
						 */

						/**
						 * [tFileInputDelimited_22 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						/**
						 * [tFileInputDelimited_22 process_data_begin ] stop
						 */
// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tAdvancedHash_row20 main ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
							}

							row20Struct row20_HashRow = new row20Struct();

							row20_HashRow.HISKLE = row20.HISKLE;

							row20_HashRow.HISCAN01 = row20.HISCAN01;

							row20_HashRow.HISCAN02 = row20.HISCAN02;

							row20_HashRow.HISCAN03 = row20.HISCAN03;

							row20_HashRow.HISCAN04 = row20.HISCAN04;

							row20_HashRow.HISCAN05 = row20.HISCAN05;

							row20_HashRow.HISCAN06 = row20.HISCAN06;

							row20_HashRow.HISCAN07 = row20.HISCAN07;

							row20_HashRow.HISCAN08 = row20.HISCAN08;

							row20_HashRow.HISCAN09 = row20.HISCAN09;

							row20_HashRow.HISCAN10 = row20.HISCAN10;

							row20_HashRow.HISCAN11 = row20.HISCAN11;

							row20_HashRow.HISCAN12 = row20.HISCAN12;

							row20_HashRow.HISPAN01 = row20.HISPAN01;

							row20_HashRow.HISPAN02 = row20.HISPAN02;

							row20_HashRow.HISPAN03 = row20.HISPAN03;

							row20_HashRow.HISPAN04 = row20.HISPAN04;

							row20_HashRow.HISPAN05 = row20.HISPAN05;

							row20_HashRow.HISPAN06 = row20.HISPAN06;

							row20_HashRow.HISPAN07 = row20.HISPAN07;

							row20_HashRow.HISPAN08 = row20.HISPAN08;

							row20_HashRow.HISPAN09 = row20.HISPAN09;

							row20_HashRow.HISPAN10 = row20.HISPAN10;

							row20_HashRow.HISPAN11 = row20.HISPAN11;

							row20_HashRow.HISPAN12 = row20.HISPAN12;

							row20_HashRow.HISCAN101 = row20.HISCAN101;

							row20_HashRow.HISCAN102 = row20.HISCAN102;

							row20_HashRow.HISCAN103 = row20.HISCAN103;

							row20_HashRow.HISCAN104 = row20.HISCAN104;

							row20_HashRow.HISCAN105 = row20.HISCAN105;

							row20_HashRow.HISCAN106 = row20.HISCAN106;

							row20_HashRow.HISCAN107 = row20.HISCAN107;

							row20_HashRow.HISCAN108 = row20.HISCAN108;

							row20_HashRow.HISCAN109 = row20.HISCAN109;

							row20_HashRow.HISCAN110 = row20.HISCAN110;

							row20_HashRow.HISCAN111 = row20.HISCAN111;

							row20_HashRow.HISCAN112 = row20.HISCAN112;

							row20_HashRow.HISPAN101 = row20.HISPAN101;

							row20_HashRow.HISPAN102 = row20.HISPAN102;

							row20_HashRow.HISPAN103 = row20.HISPAN103;

							row20_HashRow.HISPAN104 = row20.HISPAN104;

							row20_HashRow.HISPAN105 = row20.HISPAN105;

							row20_HashRow.HISPAN106 = row20.HISPAN106;

							row20_HashRow.HISPAN107 = row20.HISPAN107;

							row20_HashRow.HISPAN108 = row20.HISPAN108;

							row20_HashRow.HISPAN109 = row20.HISPAN109;

							row20_HashRow.HISPAN110 = row20.HISPAN110;

							row20_HashRow.HISPAN111 = row20.HISPAN111;

							row20_HashRow.HISPAN112 = row20.HISPAN112;

							tHash_Lookup_row20.put(row20_HashRow);

							tos_count_tAdvancedHash_row20++;

							/**
							 * [tAdvancedHash_row20 main ] stop
							 */

							/**
							 * [tAdvancedHash_row20 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							/**
							 * [tAdvancedHash_row20 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row20 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							/**
							 * [tAdvancedHash_row20 process_data_end ] stop
							 */

						} // End of branch "row20"

						/**
						 * [tFileInputDelimited_22 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						/**
						 * [tFileInputDelimited_22 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_22 end ] start
						 */

						currentComponent = "tFileInputDelimited_22";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/historique_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_22 != null) {
							fid_tFileInputDelimited_22.close();
						}
					}
					if (fid_tFileInputDelimited_22 != null) {
						globalMap.put("tFileInputDelimited_22_NB_LINE", fid_tFileInputDelimited_22.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_22", true);
				end_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_22 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_22 finally ] start
				 */

				currentComponent = "tFileInputDelimited_22";

				/**
				 * [tFileInputDelimited_22 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 1);
	}

	public static class row14_0Struct implements routines.system.IPersistableComparableLookupRow<row14_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HISKLE;

		public String getHISKLE() {
			return this.HISKLE;
		}

		public String HISCAN01;

		public String getHISCAN01() {
			return this.HISCAN01;
		}

		public String HISCAN02;

		public String getHISCAN02() {
			return this.HISCAN02;
		}

		public String HISCAN03;

		public String getHISCAN03() {
			return this.HISCAN03;
		}

		public String HISCAN04;

		public String getHISCAN04() {
			return this.HISCAN04;
		}

		public String HISCAN05;

		public String getHISCAN05() {
			return this.HISCAN05;
		}

		public String HISCAN06;

		public String getHISCAN06() {
			return this.HISCAN06;
		}

		public String HISCAN07;

		public String getHISCAN07() {
			return this.HISCAN07;
		}

		public String HISCAN08;

		public String getHISCAN08() {
			return this.HISCAN08;
		}

		public String HISCAN09;

		public String getHISCAN09() {
			return this.HISCAN09;
		}

		public String HISCAN10;

		public String getHISCAN10() {
			return this.HISCAN10;
		}

		public String HISCAN11;

		public String getHISCAN11() {
			return this.HISCAN11;
		}

		public String HISCAN12;

		public String getHISCAN12() {
			return this.HISCAN12;
		}

		public String HISPAN01;

		public String getHISPAN01() {
			return this.HISPAN01;
		}

		public String HISPAN02;

		public String getHISPAN02() {
			return this.HISPAN02;
		}

		public String HISPAN03;

		public String getHISPAN03() {
			return this.HISPAN03;
		}

		public String HISPAN04;

		public String getHISPAN04() {
			return this.HISPAN04;
		}

		public String HISPAN05;

		public String getHISPAN05() {
			return this.HISPAN05;
		}

		public String HISPAN06;

		public String getHISPAN06() {
			return this.HISPAN06;
		}

		public String HISPAN07;

		public String getHISPAN07() {
			return this.HISPAN07;
		}

		public String HISPAN08;

		public String getHISPAN08() {
			return this.HISPAN08;
		}

		public String HISPAN09;

		public String getHISPAN09() {
			return this.HISPAN09;
		}

		public String HISPAN10;

		public String getHISPAN10() {
			return this.HISPAN10;
		}

		public String HISPAN11;

		public String getHISPAN11() {
			return this.HISPAN11;
		}

		public String HISPAN12;

		public String getHISPAN12() {
			return this.HISPAN12;
		}

		public String HISCAN101;

		public String getHISCAN101() {
			return this.HISCAN101;
		}

		public String HISCAN102;

		public String getHISCAN102() {
			return this.HISCAN102;
		}

		public String HISCAN103;

		public String getHISCAN103() {
			return this.HISCAN103;
		}

		public String HISCAN104;

		public String getHISCAN104() {
			return this.HISCAN104;
		}

		public String HISCAN105;

		public String getHISCAN105() {
			return this.HISCAN105;
		}

		public String HISCAN106;

		public String getHISCAN106() {
			return this.HISCAN106;
		}

		public String HISCAN107;

		public String getHISCAN107() {
			return this.HISCAN107;
		}

		public String HISCAN108;

		public String getHISCAN108() {
			return this.HISCAN108;
		}

		public String HISCAN109;

		public String getHISCAN109() {
			return this.HISCAN109;
		}

		public String HISCAN110;

		public String getHISCAN110() {
			return this.HISCAN110;
		}

		public String HISCAN111;

		public String getHISCAN111() {
			return this.HISCAN111;
		}

		public String HISCAN112;

		public String getHISCAN112() {
			return this.HISCAN112;
		}

		public String HISPAN101;

		public String getHISPAN101() {
			return this.HISPAN101;
		}

		public String HISPAN102;

		public String getHISPAN102() {
			return this.HISPAN102;
		}

		public String HISPAN103;

		public String getHISPAN103() {
			return this.HISPAN103;
		}

		public String HISPAN104;

		public String getHISPAN104() {
			return this.HISPAN104;
		}

		public String HISPAN105;

		public String getHISPAN105() {
			return this.HISPAN105;
		}

		public String HISPAN106;

		public String getHISPAN106() {
			return this.HISPAN106;
		}

		public String HISPAN107;

		public String getHISPAN107() {
			return this.HISPAN107;
		}

		public String HISPAN108;

		public String getHISPAN108() {
			return this.HISPAN108;
		}

		public String HISPAN109;

		public String getHISPAN109() {
			return this.HISPAN109;
		}

		public String HISPAN110;

		public String getHISPAN110() {
			return this.HISPAN110;
		}

		public String HISPAN111;

		public String getHISPAN111() {
			return this.HISPAN111;
		}

		public String HISPAN112;

		public String getHISPAN112() {
			return this.HISPAN112;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.HISKLE == null) ? 0 : this.HISKLE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14_0Struct other = (row14_0Struct) obj;

			if (this.HISKLE == null) {
				if (other.HISKLE != null)
					return false;

			} else if (!this.HISKLE.equals(other.HISKLE))

				return false;

			return true;
		}

		public void copyDataTo(row14_0Struct other) {

			other.HISKLE = this.HISKLE;
			other.HISCAN01 = this.HISCAN01;
			other.HISCAN02 = this.HISCAN02;
			other.HISCAN03 = this.HISCAN03;
			other.HISCAN04 = this.HISCAN04;
			other.HISCAN05 = this.HISCAN05;
			other.HISCAN06 = this.HISCAN06;
			other.HISCAN07 = this.HISCAN07;
			other.HISCAN08 = this.HISCAN08;
			other.HISCAN09 = this.HISCAN09;
			other.HISCAN10 = this.HISCAN10;
			other.HISCAN11 = this.HISCAN11;
			other.HISCAN12 = this.HISCAN12;
			other.HISPAN01 = this.HISPAN01;
			other.HISPAN02 = this.HISPAN02;
			other.HISPAN03 = this.HISPAN03;
			other.HISPAN04 = this.HISPAN04;
			other.HISPAN05 = this.HISPAN05;
			other.HISPAN06 = this.HISPAN06;
			other.HISPAN07 = this.HISPAN07;
			other.HISPAN08 = this.HISPAN08;
			other.HISPAN09 = this.HISPAN09;
			other.HISPAN10 = this.HISPAN10;
			other.HISPAN11 = this.HISPAN11;
			other.HISPAN12 = this.HISPAN12;
			other.HISCAN101 = this.HISCAN101;
			other.HISCAN102 = this.HISCAN102;
			other.HISCAN103 = this.HISCAN103;
			other.HISCAN104 = this.HISCAN104;
			other.HISCAN105 = this.HISCAN105;
			other.HISCAN106 = this.HISCAN106;
			other.HISCAN107 = this.HISCAN107;
			other.HISCAN108 = this.HISCAN108;
			other.HISCAN109 = this.HISCAN109;
			other.HISCAN110 = this.HISCAN110;
			other.HISCAN111 = this.HISCAN111;
			other.HISCAN112 = this.HISCAN112;
			other.HISPAN101 = this.HISPAN101;
			other.HISPAN102 = this.HISPAN102;
			other.HISPAN103 = this.HISPAN103;
			other.HISPAN104 = this.HISPAN104;
			other.HISPAN105 = this.HISPAN105;
			other.HISPAN106 = this.HISPAN106;
			other.HISPAN107 = this.HISPAN107;
			other.HISPAN108 = this.HISPAN108;
			other.HISPAN109 = this.HISPAN109;
			other.HISPAN110 = this.HISPAN110;
			other.HISPAN111 = this.HISPAN111;
			other.HISPAN112 = this.HISPAN112;

		}

		public void copyKeysDataTo(row14_0Struct other) {

			other.HISKLE = this.HISKLE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.HISKLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HISKLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HISCAN01 = readString(dis, ois);

				this.HISCAN02 = readString(dis, ois);

				this.HISCAN03 = readString(dis, ois);

				this.HISCAN04 = readString(dis, ois);

				this.HISCAN05 = readString(dis, ois);

				this.HISCAN06 = readString(dis, ois);

				this.HISCAN07 = readString(dis, ois);

				this.HISCAN08 = readString(dis, ois);

				this.HISCAN09 = readString(dis, ois);

				this.HISCAN10 = readString(dis, ois);

				this.HISCAN11 = readString(dis, ois);

				this.HISCAN12 = readString(dis, ois);

				this.HISPAN01 = readString(dis, ois);

				this.HISPAN02 = readString(dis, ois);

				this.HISPAN03 = readString(dis, ois);

				this.HISPAN04 = readString(dis, ois);

				this.HISPAN05 = readString(dis, ois);

				this.HISPAN06 = readString(dis, ois);

				this.HISPAN07 = readString(dis, ois);

				this.HISPAN08 = readString(dis, ois);

				this.HISPAN09 = readString(dis, ois);

				this.HISPAN10 = readString(dis, ois);

				this.HISPAN11 = readString(dis, ois);

				this.HISPAN12 = readString(dis, ois);

				this.HISCAN101 = readString(dis, ois);

				this.HISCAN102 = readString(dis, ois);

				this.HISCAN103 = readString(dis, ois);

				this.HISCAN104 = readString(dis, ois);

				this.HISCAN105 = readString(dis, ois);

				this.HISCAN106 = readString(dis, ois);

				this.HISCAN107 = readString(dis, ois);

				this.HISCAN108 = readString(dis, ois);

				this.HISCAN109 = readString(dis, ois);

				this.HISCAN110 = readString(dis, ois);

				this.HISCAN111 = readString(dis, ois);

				this.HISCAN112 = readString(dis, ois);

				this.HISPAN101 = readString(dis, ois);

				this.HISPAN102 = readString(dis, ois);

				this.HISPAN103 = readString(dis, ois);

				this.HISPAN104 = readString(dis, ois);

				this.HISPAN105 = readString(dis, ois);

				this.HISPAN106 = readString(dis, ois);

				this.HISPAN107 = readString(dis, ois);

				this.HISPAN108 = readString(dis, ois);

				this.HISPAN109 = readString(dis, ois);

				this.HISPAN110 = readString(dis, ois);

				this.HISPAN111 = readString(dis, ois);

				this.HISPAN112 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.HISCAN01, dos, oos);

				writeString(this.HISCAN02, dos, oos);

				writeString(this.HISCAN03, dos, oos);

				writeString(this.HISCAN04, dos, oos);

				writeString(this.HISCAN05, dos, oos);

				writeString(this.HISCAN06, dos, oos);

				writeString(this.HISCAN07, dos, oos);

				writeString(this.HISCAN08, dos, oos);

				writeString(this.HISCAN09, dos, oos);

				writeString(this.HISCAN10, dos, oos);

				writeString(this.HISCAN11, dos, oos);

				writeString(this.HISCAN12, dos, oos);

				writeString(this.HISPAN01, dos, oos);

				writeString(this.HISPAN02, dos, oos);

				writeString(this.HISPAN03, dos, oos);

				writeString(this.HISPAN04, dos, oos);

				writeString(this.HISPAN05, dos, oos);

				writeString(this.HISPAN06, dos, oos);

				writeString(this.HISPAN07, dos, oos);

				writeString(this.HISPAN08, dos, oos);

				writeString(this.HISPAN09, dos, oos);

				writeString(this.HISPAN10, dos, oos);

				writeString(this.HISPAN11, dos, oos);

				writeString(this.HISPAN12, dos, oos);

				writeString(this.HISCAN101, dos, oos);

				writeString(this.HISCAN102, dos, oos);

				writeString(this.HISCAN103, dos, oos);

				writeString(this.HISCAN104, dos, oos);

				writeString(this.HISCAN105, dos, oos);

				writeString(this.HISCAN106, dos, oos);

				writeString(this.HISCAN107, dos, oos);

				writeString(this.HISCAN108, dos, oos);

				writeString(this.HISCAN109, dos, oos);

				writeString(this.HISCAN110, dos, oos);

				writeString(this.HISCAN111, dos, oos);

				writeString(this.HISCAN112, dos, oos);

				writeString(this.HISPAN101, dos, oos);

				writeString(this.HISPAN102, dos, oos);

				writeString(this.HISPAN103, dos, oos);

				writeString(this.HISPAN104, dos, oos);

				writeString(this.HISPAN105, dos, oos);

				writeString(this.HISPAN106, dos, oos);

				writeString(this.HISPAN107, dos, oos);

				writeString(this.HISPAN108, dos, oos);

				writeString(this.HISPAN109, dos, oos);

				writeString(this.HISPAN110, dos, oos);

				writeString(this.HISPAN111, dos, oos);

				writeString(this.HISPAN112, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HISKLE=" + HISKLE);
			sb.append(",HISCAN01=" + HISCAN01);
			sb.append(",HISCAN02=" + HISCAN02);
			sb.append(",HISCAN03=" + HISCAN03);
			sb.append(",HISCAN04=" + HISCAN04);
			sb.append(",HISCAN05=" + HISCAN05);
			sb.append(",HISCAN06=" + HISCAN06);
			sb.append(",HISCAN07=" + HISCAN07);
			sb.append(",HISCAN08=" + HISCAN08);
			sb.append(",HISCAN09=" + HISCAN09);
			sb.append(",HISCAN10=" + HISCAN10);
			sb.append(",HISCAN11=" + HISCAN11);
			sb.append(",HISCAN12=" + HISCAN12);
			sb.append(",HISPAN01=" + HISPAN01);
			sb.append(",HISPAN02=" + HISPAN02);
			sb.append(",HISPAN03=" + HISPAN03);
			sb.append(",HISPAN04=" + HISPAN04);
			sb.append(",HISPAN05=" + HISPAN05);
			sb.append(",HISPAN06=" + HISPAN06);
			sb.append(",HISPAN07=" + HISPAN07);
			sb.append(",HISPAN08=" + HISPAN08);
			sb.append(",HISPAN09=" + HISPAN09);
			sb.append(",HISPAN10=" + HISPAN10);
			sb.append(",HISPAN11=" + HISPAN11);
			sb.append(",HISPAN12=" + HISPAN12);
			sb.append(",HISCAN101=" + HISCAN101);
			sb.append(",HISCAN102=" + HISCAN102);
			sb.append(",HISCAN103=" + HISCAN103);
			sb.append(",HISCAN104=" + HISCAN104);
			sb.append(",HISCAN105=" + HISCAN105);
			sb.append(",HISCAN106=" + HISCAN106);
			sb.append(",HISCAN107=" + HISCAN107);
			sb.append(",HISCAN108=" + HISCAN108);
			sb.append(",HISCAN109=" + HISCAN109);
			sb.append(",HISCAN110=" + HISCAN110);
			sb.append(",HISCAN111=" + HISCAN111);
			sb.append(",HISCAN112=" + HISCAN112);
			sb.append(",HISPAN101=" + HISPAN101);
			sb.append(",HISPAN102=" + HISPAN102);
			sb.append(",HISPAN103=" + HISPAN103);
			sb.append(",HISPAN104=" + HISPAN104);
			sb.append(",HISPAN105=" + HISPAN105);
			sb.append(",HISPAN106=" + HISPAN106);
			sb.append(",HISPAN107=" + HISPAN107);
			sb.append(",HISPAN108=" + HISPAN108);
			sb.append(",HISPAN109=" + HISPAN109);
			sb.append(",HISPAN110=" + HISPAN110);
			sb.append(",HISPAN111=" + HISPAN111);
			sb.append(",HISPAN112=" + HISPAN112);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HISKLE, other.HISKLE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14_0Struct row14_0 = new row14_0Struct();

				/**
				 * [tAdvancedHash_row14_0 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14_0", false);
				start_Hash.put("tAdvancedHash_row14_0", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14_0";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14_0");
				}

				int tos_count_tAdvancedHash_row14_0 = 0;

				// connection name:row14_0
				// source node:tFileInputDelimited_23 - inputs:(after_tFileInputDelimited_11)
				// outputs:(row14_0,row14_0) | target node:tAdvancedHash_row14_0 -
				// inputs:(row14_0) outputs:()
				// linked node: tMap_11 - inputs:(row13,row14_0)
				// outputs:(copyOfcopyOfcopyOfmain_0_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14_0 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14_0Struct> tHash_Lookup_row14_0 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14_0Struct>getLookup(matchingModeEnum_row14_0);

				globalMap.put("tHash_Lookup_row14_0", tHash_Lookup_row14_0);

				/**
				 * [tAdvancedHash_row14_0 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_23", false);
				start_Hash.put("tFileInputDelimited_23", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_23";

				int tos_count_tFileInputDelimited_23 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_23 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_23 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_23 = null;
				int limit_tFileInputDelimited_23 = -1;
				try {

					Object filename_tFileInputDelimited_23 = "C:/DEV/Data/Base Montauban/historique_clients.csv";
					if (filename_tFileInputDelimited_23 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_23 = 0, random_value_tFileInputDelimited_23 = -1;
						if (footer_value_tFileInputDelimited_23 > 0 || random_value_tFileInputDelimited_23 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_23 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/historique_clients.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_23, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_23 != null && fid_tFileInputDelimited_23.nextRecord()) {
						rowstate_tFileInputDelimited_23.reset();

						row14_0 = null;

						row14_0 = null;

						boolean whetherReject_tFileInputDelimited_23 = false;
						row14_0 = new row14_0Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_23 = 0;

							columnIndexWithD_tFileInputDelimited_23 = 0;

							row14_0.HISKLE = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 1;

							row14_0.HISCAN01 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 2;

							row14_0.HISCAN02 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 3;

							row14_0.HISCAN03 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 4;

							row14_0.HISCAN04 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 5;

							row14_0.HISCAN05 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 6;

							row14_0.HISCAN06 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 7;

							row14_0.HISCAN07 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 8;

							row14_0.HISCAN08 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 9;

							row14_0.HISCAN09 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 10;

							row14_0.HISCAN10 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 11;

							row14_0.HISCAN11 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 12;

							row14_0.HISCAN12 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 13;

							row14_0.HISPAN01 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 14;

							row14_0.HISPAN02 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 15;

							row14_0.HISPAN03 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 16;

							row14_0.HISPAN04 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 17;

							row14_0.HISPAN05 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 18;

							row14_0.HISPAN06 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 19;

							row14_0.HISPAN07 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 20;

							row14_0.HISPAN08 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 21;

							row14_0.HISPAN09 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 22;

							row14_0.HISPAN10 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 23;

							row14_0.HISPAN11 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 24;

							row14_0.HISPAN12 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 25;

							row14_0.HISCAN101 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 26;

							row14_0.HISCAN102 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 27;

							row14_0.HISCAN103 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 28;

							row14_0.HISCAN104 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 29;

							row14_0.HISCAN105 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 30;

							row14_0.HISCAN106 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 31;

							row14_0.HISCAN107 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 32;

							row14_0.HISCAN108 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 33;

							row14_0.HISCAN109 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 34;

							row14_0.HISCAN110 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 35;

							row14_0.HISCAN111 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 36;

							row14_0.HISCAN112 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 37;

							row14_0.HISPAN101 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 38;

							row14_0.HISPAN102 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 39;

							row14_0.HISPAN103 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 40;

							row14_0.HISPAN104 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 41;

							row14_0.HISPAN105 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 42;

							row14_0.HISPAN106 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 43;

							row14_0.HISPAN107 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 44;

							row14_0.HISPAN108 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 45;

							row14_0.HISPAN109 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 46;

							row14_0.HISPAN110 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 47;

							row14_0.HISPAN111 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 48;

							row14_0.HISPAN112 = fid_tFileInputDelimited_23.get(columnIndexWithD_tFileInputDelimited_23);

							if (rowstate_tFileInputDelimited_23.getException() != null) {
								throw rowstate_tFileInputDelimited_23.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_23 = true;

							System.err.println(e.getMessage());
							row14_0 = null;

						}

						/**
						 * [tFileInputDelimited_23 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_23 main ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						tos_count_tFileInputDelimited_23++;

						/**
						 * [tFileInputDelimited_23 main ] stop
						 */

						/**
						 * [tFileInputDelimited_23 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						/**
						 * [tFileInputDelimited_23 process_data_begin ] stop
						 */
// Start of branch "row14_0"
						if (row14_0 != null) {

							/**
							 * [tAdvancedHash_row14_0 main ] start
							 */

							currentComponent = "tAdvancedHash_row14_0";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row14_0");
							}

							row14_0Struct row14_0_HashRow = new row14_0Struct();

							row14_0_HashRow.HISKLE = row14_0.HISKLE;

							row14_0_HashRow.HISCAN01 = row14_0.HISCAN01;

							row14_0_HashRow.HISCAN02 = row14_0.HISCAN02;

							row14_0_HashRow.HISCAN03 = row14_0.HISCAN03;

							row14_0_HashRow.HISCAN04 = row14_0.HISCAN04;

							row14_0_HashRow.HISCAN05 = row14_0.HISCAN05;

							row14_0_HashRow.HISCAN06 = row14_0.HISCAN06;

							row14_0_HashRow.HISCAN07 = row14_0.HISCAN07;

							row14_0_HashRow.HISCAN08 = row14_0.HISCAN08;

							row14_0_HashRow.HISCAN09 = row14_0.HISCAN09;

							row14_0_HashRow.HISCAN10 = row14_0.HISCAN10;

							row14_0_HashRow.HISCAN11 = row14_0.HISCAN11;

							row14_0_HashRow.HISCAN12 = row14_0.HISCAN12;

							row14_0_HashRow.HISPAN01 = row14_0.HISPAN01;

							row14_0_HashRow.HISPAN02 = row14_0.HISPAN02;

							row14_0_HashRow.HISPAN03 = row14_0.HISPAN03;

							row14_0_HashRow.HISPAN04 = row14_0.HISPAN04;

							row14_0_HashRow.HISPAN05 = row14_0.HISPAN05;

							row14_0_HashRow.HISPAN06 = row14_0.HISPAN06;

							row14_0_HashRow.HISPAN07 = row14_0.HISPAN07;

							row14_0_HashRow.HISPAN08 = row14_0.HISPAN08;

							row14_0_HashRow.HISPAN09 = row14_0.HISPAN09;

							row14_0_HashRow.HISPAN10 = row14_0.HISPAN10;

							row14_0_HashRow.HISPAN11 = row14_0.HISPAN11;

							row14_0_HashRow.HISPAN12 = row14_0.HISPAN12;

							row14_0_HashRow.HISCAN101 = row14_0.HISCAN101;

							row14_0_HashRow.HISCAN102 = row14_0.HISCAN102;

							row14_0_HashRow.HISCAN103 = row14_0.HISCAN103;

							row14_0_HashRow.HISCAN104 = row14_0.HISCAN104;

							row14_0_HashRow.HISCAN105 = row14_0.HISCAN105;

							row14_0_HashRow.HISCAN106 = row14_0.HISCAN106;

							row14_0_HashRow.HISCAN107 = row14_0.HISCAN107;

							row14_0_HashRow.HISCAN108 = row14_0.HISCAN108;

							row14_0_HashRow.HISCAN109 = row14_0.HISCAN109;

							row14_0_HashRow.HISCAN110 = row14_0.HISCAN110;

							row14_0_HashRow.HISCAN111 = row14_0.HISCAN111;

							row14_0_HashRow.HISCAN112 = row14_0.HISCAN112;

							row14_0_HashRow.HISPAN101 = row14_0.HISPAN101;

							row14_0_HashRow.HISPAN102 = row14_0.HISPAN102;

							row14_0_HashRow.HISPAN103 = row14_0.HISPAN103;

							row14_0_HashRow.HISPAN104 = row14_0.HISPAN104;

							row14_0_HashRow.HISPAN105 = row14_0.HISPAN105;

							row14_0_HashRow.HISPAN106 = row14_0.HISPAN106;

							row14_0_HashRow.HISPAN107 = row14_0.HISPAN107;

							row14_0_HashRow.HISPAN108 = row14_0.HISPAN108;

							row14_0_HashRow.HISPAN109 = row14_0.HISPAN109;

							row14_0_HashRow.HISPAN110 = row14_0.HISPAN110;

							row14_0_HashRow.HISPAN111 = row14_0.HISPAN111;

							row14_0_HashRow.HISPAN112 = row14_0.HISPAN112;

							tHash_Lookup_row14_0.put(row14_0_HashRow);

							tos_count_tAdvancedHash_row14_0++;

							/**
							 * [tAdvancedHash_row14_0 main ] stop
							 */

							/**
							 * [tAdvancedHash_row14_0 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row14_0";

							/**
							 * [tAdvancedHash_row14_0 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row14_0 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row14_0";

							/**
							 * [tAdvancedHash_row14_0 process_data_end ] stop
							 */

						} // End of branch "row14_0"

						/**
						 * [tFileInputDelimited_23 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						/**
						 * [tFileInputDelimited_23 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_23 end ] start
						 */

						currentComponent = "tFileInputDelimited_23";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/historique_clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_23 != null) {
							fid_tFileInputDelimited_23.close();
						}
					}
					if (fid_tFileInputDelimited_23 != null) {
						globalMap.put("tFileInputDelimited_23_NB_LINE", fid_tFileInputDelimited_23.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_23", true);
				end_Hash.put("tFileInputDelimited_23", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14_0 end ] start
				 */

				currentComponent = "tAdvancedHash_row14_0";

				tHash_Lookup_row14_0.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14_0");
				}

				ok_Hash.put("tAdvancedHash_row14_0", true);
				end_Hash.put("tAdvancedHash_row14_0", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14_0 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_23 finally ] start
				 */

				currentComponent = "tFileInputDelimited_23";

				/**
				 * [tFileInputDelimited_23 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14_0 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14_0";

				/**
				 * [tAdvancedHash_row14_0 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 1);
	}

	public static class row15_0Struct implements routines.system.IPersistableComparableLookupRow<row15_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CLIENT_KEY;

		public String getCLIENT_KEY() {
			return this.CLIENT_KEY;
		}

		public String RANG_KEY;

		public String getRANG_KEY() {
			return this.RANG_KEY;
		}

		public String CLIENT;

		public String getCLIENT() {
			return this.CLIENT;
		}

		public String RANG;

		public String getRANG() {
			return this.RANG;
		}

		public String NOM;

		public String getNOM() {
			return this.NOM;
		}

		public String FONCTION;

		public String getFONCTION() {
			return this.FONCTION;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String SERVICE;

		public String getSERVICE() {
			return this.SERVICE;
		}

		public String VIDE;

		public String getVIDE() {
			return this.VIDE;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String CONT_INTERNET;

		public String getCONT_INTERNET() {
			return this.CONT_INTERNET;
		}

		public String CONT_VALIDATEUR;

		public String getCONT_VALIDATEUR() {
			return this.CONT_VALIDATEUR;
		}

		public String CONT_NIVEAU;

		public String getCONT_NIVEAU() {
			return this.CONT_NIVEAU;
		}

		public String PORTABLE;

		public String getPORTABLE() {
			return this.PORTABLE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CLIENT_KEY == null) ? 0 : this.CLIENT_KEY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15_0Struct other = (row15_0Struct) obj;

			if (this.CLIENT_KEY == null) {
				if (other.CLIENT_KEY != null)
					return false;

			} else if (!this.CLIENT_KEY.equals(other.CLIENT_KEY))

				return false;

			return true;
		}

		public void copyDataTo(row15_0Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;
			other.RANG_KEY = this.RANG_KEY;
			other.CLIENT = this.CLIENT;
			other.RANG = this.RANG;
			other.NOM = this.NOM;
			other.FONCTION = this.FONCTION;
			other.TELEPHONE = this.TELEPHONE;
			other.FAX = this.FAX;
			other.EMAIL = this.EMAIL;
			other.SERVICE = this.SERVICE;
			other.VIDE = this.VIDE;
			other.PASSWORD = this.PASSWORD;
			other.LOGIN = this.LOGIN;
			other.CONT_INTERNET = this.CONT_INTERNET;
			other.CONT_VALIDATEUR = this.CONT_VALIDATEUR;
			other.CONT_NIVEAU = this.CONT_NIVEAU;
			other.PORTABLE = this.PORTABLE;

		}

		public void copyKeysDataTo(row15_0Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CLIENT_KEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CLIENT_KEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RANG_KEY = readString(dis, ois);

				this.CLIENT = readString(dis, ois);

				this.RANG = readString(dis, ois);

				this.NOM = readString(dis, ois);

				this.FONCTION = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.FAX = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.SERVICE = readString(dis, ois);

				this.VIDE = readString(dis, ois);

				this.PASSWORD = readString(dis, ois);

				this.LOGIN = readString(dis, ois);

				this.CONT_INTERNET = readString(dis, ois);

				this.CONT_VALIDATEUR = readString(dis, ois);

				this.CONT_NIVEAU = readString(dis, ois);

				this.PORTABLE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.RANG_KEY, dos, oos);

				writeString(this.CLIENT, dos, oos);

				writeString(this.RANG, dos, oos);

				writeString(this.NOM, dos, oos);

				writeString(this.FONCTION, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.FAX, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.SERVICE, dos, oos);

				writeString(this.VIDE, dos, oos);

				writeString(this.PASSWORD, dos, oos);

				writeString(this.LOGIN, dos, oos);

				writeString(this.CONT_INTERNET, dos, oos);

				writeString(this.CONT_VALIDATEUR, dos, oos);

				writeString(this.CONT_NIVEAU, dos, oos);

				writeString(this.PORTABLE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CLIENT_KEY=" + CLIENT_KEY);
			sb.append(",RANG_KEY=" + RANG_KEY);
			sb.append(",CLIENT=" + CLIENT);
			sb.append(",RANG=" + RANG);
			sb.append(",NOM=" + NOM);
			sb.append(",FONCTION=" + FONCTION);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FAX=" + FAX);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",SERVICE=" + SERVICE);
			sb.append(",VIDE=" + VIDE);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",CONT_INTERNET=" + CONT_INTERNET);
			sb.append(",CONT_VALIDATEUR=" + CONT_VALIDATEUR);
			sb.append(",CONT_NIVEAU=" + CONT_NIVEAU);
			sb.append(",PORTABLE=" + PORTABLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CLIENT_KEY, other.CLIENT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15_0Struct row15_0 = new row15_0Struct();

				/**
				 * [tAdvancedHash_row15_0 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15_0", false);
				start_Hash.put("tAdvancedHash_row15_0", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15_0";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15_0");
				}

				int tos_count_tAdvancedHash_row15_0 = 0;

				// connection name:row15_0
				// source node:tFileInputDelimited_24 - inputs:(after_tFileInputDelimited_16)
				// outputs:(row15_0,row15_0) | target node:tAdvancedHash_row15_0 -
				// inputs:(row15_0) outputs:()
				// linked node: tMap_16 - inputs:(row8_0,row15_0) outputs:(copyOfcopyOfmain_3_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15_0 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15_0Struct> tHash_Lookup_row15_0 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15_0Struct>getLookup(matchingModeEnum_row15_0);

				globalMap.put("tHash_Lookup_row15_0", tHash_Lookup_row15_0);

				/**
				 * [tAdvancedHash_row15_0 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_24 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_24", false);
				start_Hash.put("tFileInputDelimited_24", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_24";

				int tos_count_tFileInputDelimited_24 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_24 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_24 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_24 = null;
				int limit_tFileInputDelimited_24 = -1;
				try {

					Object filename_tFileInputDelimited_24 = "C:/DEV/Data/Base Montauban/Contact.csv";
					if (filename_tFileInputDelimited_24 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_24 = 0, random_value_tFileInputDelimited_24 = -1;
						if (footer_value_tFileInputDelimited_24 > 0 || random_value_tFileInputDelimited_24 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_24 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Contact.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_24, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_24 != null && fid_tFileInputDelimited_24.nextRecord()) {
						rowstate_tFileInputDelimited_24.reset();

						row15_0 = null;

						row15_0 = null;

						boolean whetherReject_tFileInputDelimited_24 = false;
						row15_0 = new row15_0Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_24 = 0;

							columnIndexWithD_tFileInputDelimited_24 = 0;

							row15_0.CLIENT_KEY = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 1;

							row15_0.RANG_KEY = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 2;

							row15_0.CLIENT = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 3;

							row15_0.RANG = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 4;

							row15_0.NOM = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 5;

							row15_0.FONCTION = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 6;

							row15_0.TELEPHONE = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 7;

							row15_0.FAX = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 8;

							row15_0.EMAIL = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 9;

							row15_0.SERVICE = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 10;

							row15_0.VIDE = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 11;

							row15_0.PASSWORD = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 12;

							row15_0.LOGIN = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 13;

							row15_0.CONT_INTERNET = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 14;

							row15_0.CONT_VALIDATEUR = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 15;

							row15_0.CONT_NIVEAU = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 16;

							row15_0.PORTABLE = fid_tFileInputDelimited_24.get(columnIndexWithD_tFileInputDelimited_24);

							if (rowstate_tFileInputDelimited_24.getException() != null) {
								throw rowstate_tFileInputDelimited_24.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_24 = true;

							System.err.println(e.getMessage());
							row15_0 = null;

						}

						/**
						 * [tFileInputDelimited_24 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_24 main ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						tos_count_tFileInputDelimited_24++;

						/**
						 * [tFileInputDelimited_24 main ] stop
						 */

						/**
						 * [tFileInputDelimited_24 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						/**
						 * [tFileInputDelimited_24 process_data_begin ] stop
						 */
// Start of branch "row15_0"
						if (row15_0 != null) {

							/**
							 * [tAdvancedHash_row15_0 main ] start
							 */

							currentComponent = "tAdvancedHash_row15_0";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row15_0");
							}

							row15_0Struct row15_0_HashRow = new row15_0Struct();

							row15_0_HashRow.CLIENT_KEY = row15_0.CLIENT_KEY;

							row15_0_HashRow.RANG_KEY = row15_0.RANG_KEY;

							row15_0_HashRow.CLIENT = row15_0.CLIENT;

							row15_0_HashRow.RANG = row15_0.RANG;

							row15_0_HashRow.NOM = row15_0.NOM;

							row15_0_HashRow.FONCTION = row15_0.FONCTION;

							row15_0_HashRow.TELEPHONE = row15_0.TELEPHONE;

							row15_0_HashRow.FAX = row15_0.FAX;

							row15_0_HashRow.EMAIL = row15_0.EMAIL;

							row15_0_HashRow.SERVICE = row15_0.SERVICE;

							row15_0_HashRow.VIDE = row15_0.VIDE;

							row15_0_HashRow.PASSWORD = row15_0.PASSWORD;

							row15_0_HashRow.LOGIN = row15_0.LOGIN;

							row15_0_HashRow.CONT_INTERNET = row15_0.CONT_INTERNET;

							row15_0_HashRow.CONT_VALIDATEUR = row15_0.CONT_VALIDATEUR;

							row15_0_HashRow.CONT_NIVEAU = row15_0.CONT_NIVEAU;

							row15_0_HashRow.PORTABLE = row15_0.PORTABLE;

							tHash_Lookup_row15_0.put(row15_0_HashRow);

							tos_count_tAdvancedHash_row15_0++;

							/**
							 * [tAdvancedHash_row15_0 main ] stop
							 */

							/**
							 * [tAdvancedHash_row15_0 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row15_0";

							/**
							 * [tAdvancedHash_row15_0 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row15_0 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row15_0";

							/**
							 * [tAdvancedHash_row15_0 process_data_end ] stop
							 */

						} // End of branch "row15_0"

						/**
						 * [tFileInputDelimited_24 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						/**
						 * [tFileInputDelimited_24 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_24 end ] start
						 */

						currentComponent = "tFileInputDelimited_24";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Contact.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_24 != null) {
							fid_tFileInputDelimited_24.close();
						}
					}
					if (fid_tFileInputDelimited_24 != null) {
						globalMap.put("tFileInputDelimited_24_NB_LINE", fid_tFileInputDelimited_24.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_24", true);
				end_Hash.put("tFileInputDelimited_24", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_24 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15_0 end ] start
				 */

				currentComponent = "tAdvancedHash_row15_0";

				tHash_Lookup_row15_0.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15_0");
				}

				ok_Hash.put("tAdvancedHash_row15_0", true);
				end_Hash.put("tAdvancedHash_row15_0", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15_0 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_24 finally ] start
				 */

				currentComponent = "tFileInputDelimited_24";

				/**
				 * [tFileInputDelimited_24 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15_0 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15_0";

				/**
				 * [tAdvancedHash_row15_0 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_24_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FFCOD;

		public String getFFCOD() {
			return this.FFCOD;
		}

		public String FFFRS;

		public String getFFFRS() {
			return this.FFFRS;
		}

		public String FFREF;

		public String getFFREF() {
			return this.FFREF;
		}

		public String FFDES;

		public String getFFDES() {
			return this.FFDES;
		}

		public String FFPA;

		public String getFFPA() {
			return this.FFPA;
		}

		public String FFDEL;

		public String getFFDEL() {
			return this.FFDEL;
		}

		public String FFDEV;

		public String getFFDEV() {
			return this.FFDEV;
		}

		public String FFTX;

		public String getFFTX() {
			return this.FFTX;
		}

		public String FFCOM;

		public String getFFCOM() {
			return this.FFCOM;
		}

		public String FFPV;

		public String getFFPV() {
			return this.FFPV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FFCOD == null) ? 0 : this.FFCOD.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row33Struct other = (row33Struct) obj;

			if (this.FFCOD == null) {
				if (other.FFCOD != null)
					return false;

			} else if (!this.FFCOD.equals(other.FFCOD))

				return false;

			return true;
		}

		public void copyDataTo(row33Struct other) {

			other.FFCOD = this.FFCOD;
			other.FFFRS = this.FFFRS;
			other.FFREF = this.FFREF;
			other.FFDES = this.FFDES;
			other.FFPA = this.FFPA;
			other.FFDEL = this.FFDEL;
			other.FFDEV = this.FFDEV;
			other.FFTX = this.FFTX;
			other.FFCOM = this.FFCOM;
			other.FFPV = this.FFPV;

		}

		public void copyKeysDataTo(row33Struct other) {

			other.FFCOD = this.FFCOD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.FFCOD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FFCOD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FFFRS = readString(dis, ois);

				this.FFREF = readString(dis, ois);

				this.FFDES = readString(dis, ois);

				this.FFPA = readString(dis, ois);

				this.FFDEL = readString(dis, ois);

				this.FFDEV = readString(dis, ois);

				this.FFTX = readString(dis, ois);

				this.FFCOM = readString(dis, ois);

				this.FFPV = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FFFRS, dos, oos);

				writeString(this.FFREF, dos, oos);

				writeString(this.FFDES, dos, oos);

				writeString(this.FFPA, dos, oos);

				writeString(this.FFDEL, dos, oos);

				writeString(this.FFDEV, dos, oos);

				writeString(this.FFTX, dos, oos);

				writeString(this.FFCOM, dos, oos);

				writeString(this.FFPV, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FFCOD=" + FFCOD);
			sb.append(",FFFRS=" + FFFRS);
			sb.append(",FFREF=" + FFREF);
			sb.append(",FFDES=" + FFDES);
			sb.append(",FFPA=" + FFPA);
			sb.append(",FFDEL=" + FFDEL);
			sb.append(",FFDEV=" + FFDEV);
			sb.append(",FFTX=" + FFTX);
			sb.append(",FFCOM=" + FFCOM);
			sb.append(",FFPV=" + FFPV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FFCOD, other.FFCOD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_38_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();

				/**
				 * [tAdvancedHash_row33 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row33", false);
				start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row33";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row33");
				}

				int tos_count_tAdvancedHash_row33 = 0;

				// connection name:row33
				// source node:tFileInputDelimited_38 - inputs:(after_tFileInputDelimited_32)
				// outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33)
				// outputs:()
				// linked node: tMap_29 - inputs:(row27,row33) outputs:(main)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row33Struct>getLookup(matchingModeEnum_row33);

				globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);

				/**
				 * [tAdvancedHash_row33 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_38 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_38", false);
				start_Hash.put("tFileInputDelimited_38", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_38";

				int tos_count_tFileInputDelimited_38 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_38 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_38 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_38 = null;
				int limit_tFileInputDelimited_38 = -1;
				try {

					Object filename_tFileInputDelimited_38 = "C:/DEV/Data/Base Montauban/FournisseurBis.csv";
					if (filename_tFileInputDelimited_38 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_38 = 0, random_value_tFileInputDelimited_38 = -1;
						if (footer_value_tFileInputDelimited_38 > 0 || random_value_tFileInputDelimited_38 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_38 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/FournisseurBis.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_38, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_38 != null && fid_tFileInputDelimited_38.nextRecord()) {
						rowstate_tFileInputDelimited_38.reset();

						row33 = null;

						row33 = null;

						boolean whetherReject_tFileInputDelimited_38 = false;
						row33 = new row33Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_38 = 0;

							columnIndexWithD_tFileInputDelimited_38 = 0;

							row33.FFCOD = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 1;

							row33.FFFRS = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 2;

							row33.FFREF = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 3;

							row33.FFDES = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 4;

							row33.FFPA = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 5;

							row33.FFDEL = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 6;

							row33.FFDEV = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 7;

							row33.FFTX = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 8;

							row33.FFCOM = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							columnIndexWithD_tFileInputDelimited_38 = 9;

							row33.FFPV = fid_tFileInputDelimited_38.get(columnIndexWithD_tFileInputDelimited_38);

							if (rowstate_tFileInputDelimited_38.getException() != null) {
								throw rowstate_tFileInputDelimited_38.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_38 = true;

							System.err.println(e.getMessage());
							row33 = null;

						}

						/**
						 * [tFileInputDelimited_38 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_38 main ] start
						 */

						currentComponent = "tFileInputDelimited_38";

						tos_count_tFileInputDelimited_38++;

						/**
						 * [tFileInputDelimited_38 main ] stop
						 */

						/**
						 * [tFileInputDelimited_38 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_38";

						/**
						 * [tFileInputDelimited_38 process_data_begin ] stop
						 */
// Start of branch "row33"
						if (row33 != null) {

							/**
							 * [tAdvancedHash_row33 main ] start
							 */

							currentComponent = "tAdvancedHash_row33";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row33");
							}

							row33Struct row33_HashRow = new row33Struct();

							row33_HashRow.FFCOD = row33.FFCOD;

							row33_HashRow.FFFRS = row33.FFFRS;

							row33_HashRow.FFREF = row33.FFREF;

							row33_HashRow.FFDES = row33.FFDES;

							row33_HashRow.FFPA = row33.FFPA;

							row33_HashRow.FFDEL = row33.FFDEL;

							row33_HashRow.FFDEV = row33.FFDEV;

							row33_HashRow.FFTX = row33.FFTX;

							row33_HashRow.FFCOM = row33.FFCOM;

							row33_HashRow.FFPV = row33.FFPV;

							tHash_Lookup_row33.put(row33_HashRow);

							tos_count_tAdvancedHash_row33++;

							/**
							 * [tAdvancedHash_row33 main ] stop
							 */

							/**
							 * [tAdvancedHash_row33 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row33";

							/**
							 * [tAdvancedHash_row33 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row33 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row33";

							/**
							 * [tAdvancedHash_row33 process_data_end ] stop
							 */

						} // End of branch "row33"

						/**
						 * [tFileInputDelimited_38 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_38";

						/**
						 * [tFileInputDelimited_38 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_38 end ] start
						 */

						currentComponent = "tFileInputDelimited_38";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/FournisseurBis.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_38 != null) {
							fid_tFileInputDelimited_38.close();
						}
					}
					if (fid_tFileInputDelimited_38 != null) {
						globalMap.put("tFileInputDelimited_38_NB_LINE", fid_tFileInputDelimited_38.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_38", true);
				end_Hash.put("tFileInputDelimited_38", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_38 end ] stop
				 */

				/**
				 * [tAdvancedHash_row33 end ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				tHash_Lookup_row33.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row33");
				}

				ok_Hash.put("tAdvancedHash_row33", true);
				end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row33 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_38 finally ] start
				 */

				currentComponent = "tFileInputDelimited_38";

				/**
				 * [tFileInputDelimited_38 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row33 finally ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				/**
				 * [tAdvancedHash_row33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_38_SUBPROCESS_STATE", 1);
	}

	public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_FinalJob = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_FinalJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CLIENT_KEY;

		public String getCLIENT_KEY() {
			return this.CLIENT_KEY;
		}

		public String RANG_KEY;

		public String getRANG_KEY() {
			return this.RANG_KEY;
		}

		public String CLIENT;

		public String getCLIENT() {
			return this.CLIENT;
		}

		public String RANG;

		public String getRANG() {
			return this.RANG;
		}

		public String NOM;

		public String getNOM() {
			return this.NOM;
		}

		public String FONCTION;

		public String getFONCTION() {
			return this.FONCTION;
		}

		public String TELEPHONE;

		public String getTELEPHONE() {
			return this.TELEPHONE;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String SERVICE;

		public String getSERVICE() {
			return this.SERVICE;
		}

		public String VIDE;

		public String getVIDE() {
			return this.VIDE;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String LOGIN;

		public String getLOGIN() {
			return this.LOGIN;
		}

		public String CONT_INTERNET;

		public String getCONT_INTERNET() {
			return this.CONT_INTERNET;
		}

		public String CONT_VALIDATEUR;

		public String getCONT_VALIDATEUR() {
			return this.CONT_VALIDATEUR;
		}

		public String CONT_NIVEAU;

		public String getCONT_NIVEAU() {
			return this.CONT_NIVEAU;
		}

		public String PORTABLE;

		public String getPORTABLE() {
			return this.PORTABLE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CLIENT_KEY == null) ? 0 : this.CLIENT_KEY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row45Struct other = (row45Struct) obj;

			if (this.CLIENT_KEY == null) {
				if (other.CLIENT_KEY != null)
					return false;

			} else if (!this.CLIENT_KEY.equals(other.CLIENT_KEY))

				return false;

			return true;
		}

		public void copyDataTo(row45Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;
			other.RANG_KEY = this.RANG_KEY;
			other.CLIENT = this.CLIENT;
			other.RANG = this.RANG;
			other.NOM = this.NOM;
			other.FONCTION = this.FONCTION;
			other.TELEPHONE = this.TELEPHONE;
			other.FAX = this.FAX;
			other.EMAIL = this.EMAIL;
			other.SERVICE = this.SERVICE;
			other.VIDE = this.VIDE;
			other.PASSWORD = this.PASSWORD;
			other.LOGIN = this.LOGIN;
			other.CONT_INTERNET = this.CONT_INTERNET;
			other.CONT_VALIDATEUR = this.CONT_VALIDATEUR;
			other.CONT_NIVEAU = this.CONT_NIVEAU;
			other.PORTABLE = this.PORTABLE;

		}

		public void copyKeysDataTo(row45Struct other) {

			other.CLIENT_KEY = this.CLIENT_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_FinalJob.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_FinalJob.length == 0) {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_FinalJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_FinalJob, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_FinalJob) {

				try {

					int length = 0;

					this.CLIENT_KEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CLIENT_KEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RANG_KEY = readString(dis, ois);

				this.CLIENT = readString(dis, ois);

				this.RANG = readString(dis, ois);

				this.NOM = readString(dis, ois);

				this.FONCTION = readString(dis, ois);

				this.TELEPHONE = readString(dis, ois);

				this.FAX = readString(dis, ois);

				this.EMAIL = readString(dis, ois);

				this.SERVICE = readString(dis, ois);

				this.VIDE = readString(dis, ois);

				this.PASSWORD = readString(dis, ois);

				this.LOGIN = readString(dis, ois);

				this.CONT_INTERNET = readString(dis, ois);

				this.CONT_VALIDATEUR = readString(dis, ois);

				this.CONT_NIVEAU = readString(dis, ois);

				this.PORTABLE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.RANG_KEY, dos, oos);

				writeString(this.CLIENT, dos, oos);

				writeString(this.RANG, dos, oos);

				writeString(this.NOM, dos, oos);

				writeString(this.FONCTION, dos, oos);

				writeString(this.TELEPHONE, dos, oos);

				writeString(this.FAX, dos, oos);

				writeString(this.EMAIL, dos, oos);

				writeString(this.SERVICE, dos, oos);

				writeString(this.VIDE, dos, oos);

				writeString(this.PASSWORD, dos, oos);

				writeString(this.LOGIN, dos, oos);

				writeString(this.CONT_INTERNET, dos, oos);

				writeString(this.CONT_VALIDATEUR, dos, oos);

				writeString(this.CONT_NIVEAU, dos, oos);

				writeString(this.PORTABLE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CLIENT_KEY=" + CLIENT_KEY);
			sb.append(",RANG_KEY=" + RANG_KEY);
			sb.append(",CLIENT=" + CLIENT);
			sb.append(",RANG=" + RANG);
			sb.append(",NOM=" + NOM);
			sb.append(",FONCTION=" + FONCTION);
			sb.append(",TELEPHONE=" + TELEPHONE);
			sb.append(",FAX=" + FAX);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",SERVICE=" + SERVICE);
			sb.append(",VIDE=" + VIDE);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",LOGIN=" + LOGIN);
			sb.append(",CONT_INTERNET=" + CONT_INTERNET);
			sb.append(",CONT_VALIDATEUR=" + CONT_VALIDATEUR);
			sb.append(",CONT_NIVEAU=" + CONT_NIVEAU);
			sb.append(",PORTABLE=" + PORTABLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CLIENT_KEY, other.CLIENT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_50Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_50_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row45Struct row45 = new row45Struct();

				/**
				 * [tAdvancedHash_row45 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row45", false);
				start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row45";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row45");
				}

				int tos_count_tAdvancedHash_row45 = 0;

				// connection name:row45
				// source node:tFileInputDelimited_50 - inputs:(after_tFileInputDelimited_49)
				// outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45)
				// outputs:()
				// linked node: tMap_44 - inputs:(row44,row45)
				// outputs:(copyOfcopyOfcopyOfcopyOfmain_3_1_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row45Struct>getLookup(matchingModeEnum_row45);

				globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);

				/**
				 * [tAdvancedHash_row45 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_50 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_50", false);
				start_Hash.put("tFileInputDelimited_50", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_50";

				int tos_count_tFileInputDelimited_50 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_50 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_50 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_50 = null;
				int limit_tFileInputDelimited_50 = -1;
				try {

					Object filename_tFileInputDelimited_50 = "C:/DEV/Data/Base Montauban/Contact.csv";
					if (filename_tFileInputDelimited_50 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_50 = 0, random_value_tFileInputDelimited_50 = -1;
						if (footer_value_tFileInputDelimited_50 > 0 || random_value_tFileInputDelimited_50 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_50 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Contact.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_50, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_50 != null && fid_tFileInputDelimited_50.nextRecord()) {
						rowstate_tFileInputDelimited_50.reset();

						row45 = null;

						row45 = null;

						boolean whetherReject_tFileInputDelimited_50 = false;
						row45 = new row45Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_50 = 0;

							columnIndexWithD_tFileInputDelimited_50 = 0;

							row45.CLIENT_KEY = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 1;

							row45.RANG_KEY = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 2;

							row45.CLIENT = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 3;

							row45.RANG = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 4;

							row45.NOM = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 5;

							row45.FONCTION = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 6;

							row45.TELEPHONE = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 7;

							row45.FAX = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 8;

							row45.EMAIL = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 9;

							row45.SERVICE = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 10;

							row45.VIDE = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 11;

							row45.PASSWORD = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 12;

							row45.LOGIN = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 13;

							row45.CONT_INTERNET = fid_tFileInputDelimited_50
									.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 14;

							row45.CONT_VALIDATEUR = fid_tFileInputDelimited_50
									.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 15;

							row45.CONT_NIVEAU = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							columnIndexWithD_tFileInputDelimited_50 = 16;

							row45.PORTABLE = fid_tFileInputDelimited_50.get(columnIndexWithD_tFileInputDelimited_50);

							if (rowstate_tFileInputDelimited_50.getException() != null) {
								throw rowstate_tFileInputDelimited_50.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_50 = true;

							System.err.println(e.getMessage());
							row45 = null;

						}

						/**
						 * [tFileInputDelimited_50 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_50 main ] start
						 */

						currentComponent = "tFileInputDelimited_50";

						tos_count_tFileInputDelimited_50++;

						/**
						 * [tFileInputDelimited_50 main ] stop
						 */

						/**
						 * [tFileInputDelimited_50 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_50";

						/**
						 * [tFileInputDelimited_50 process_data_begin ] stop
						 */
// Start of branch "row45"
						if (row45 != null) {

							/**
							 * [tAdvancedHash_row45 main ] start
							 */

							currentComponent = "tAdvancedHash_row45";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row45");
							}

							row45Struct row45_HashRow = new row45Struct();

							row45_HashRow.CLIENT_KEY = row45.CLIENT_KEY;

							row45_HashRow.RANG_KEY = row45.RANG_KEY;

							row45_HashRow.CLIENT = row45.CLIENT;

							row45_HashRow.RANG = row45.RANG;

							row45_HashRow.NOM = row45.NOM;

							row45_HashRow.FONCTION = row45.FONCTION;

							row45_HashRow.TELEPHONE = row45.TELEPHONE;

							row45_HashRow.FAX = row45.FAX;

							row45_HashRow.EMAIL = row45.EMAIL;

							row45_HashRow.SERVICE = row45.SERVICE;

							row45_HashRow.VIDE = row45.VIDE;

							row45_HashRow.PASSWORD = row45.PASSWORD;

							row45_HashRow.LOGIN = row45.LOGIN;

							row45_HashRow.CONT_INTERNET = row45.CONT_INTERNET;

							row45_HashRow.CONT_VALIDATEUR = row45.CONT_VALIDATEUR;

							row45_HashRow.CONT_NIVEAU = row45.CONT_NIVEAU;

							row45_HashRow.PORTABLE = row45.PORTABLE;

							tHash_Lookup_row45.put(row45_HashRow);

							tos_count_tAdvancedHash_row45++;

							/**
							 * [tAdvancedHash_row45 main ] stop
							 */

							/**
							 * [tAdvancedHash_row45 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row45";

							/**
							 * [tAdvancedHash_row45 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row45 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row45";

							/**
							 * [tAdvancedHash_row45 process_data_end ] stop
							 */

						} // End of branch "row45"

						/**
						 * [tFileInputDelimited_50 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_50";

						/**
						 * [tFileInputDelimited_50 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_50 end ] start
						 */

						currentComponent = "tFileInputDelimited_50";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Contact.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_50 != null) {
							fid_tFileInputDelimited_50.close();
						}
					}
					if (fid_tFileInputDelimited_50 != null) {
						globalMap.put("tFileInputDelimited_50_NB_LINE", fid_tFileInputDelimited_50.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_50", true);
				end_Hash.put("tFileInputDelimited_50", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_50 end ] stop
				 */

				/**
				 * [tAdvancedHash_row45 end ] start
				 */

				currentComponent = "tAdvancedHash_row45";

				tHash_Lookup_row45.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row45");
				}

				ok_Hash.put("tAdvancedHash_row45", true);
				end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row45 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_50 finally ] start
				 */

				currentComponent = "tFileInputDelimited_50";

				/**
				 * [tFileInputDelimited_50 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row45 finally ] start
				 */

				currentComponent = "tAdvancedHash_row45";

				/**
				 * [tAdvancedHash_row45 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_50_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "192.168.1.110" + ":" + "5432" + "/" + "syg";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:mQfoC+ui631VnFbColr3JkthWk6+2Vk0MHi6cG7tYuntgjOcLA==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final FinalJob FinalJobClass = new FinalJob();

		int exitCode = FinalJobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = FinalJob.class.getClassLoader()
					.getResourceAsStream("local_project/finaljob_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = FinalJob.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FinalJob");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 3009361 characters generated by Talend Open Studio for Data Integration on
 * the 25 mars 2022 à 16:33:08 CET
 ************************************************************************************************/