// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.clientattribute_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ClientAttribute Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class ClientAttribute implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ClientAttribute";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ClientAttribute.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ClientAttribute.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class copyOfcopyOfmain_1Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long iddevise;

		public long getIddevise() {
			return this.iddevise;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public Float taux;

		public Float getTaux() {
			return this.taux;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.iddevise;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1Struct other = (copyOfcopyOfmain_1Struct) obj;

			if (this.iddevise != other.iddevise)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1Struct other) {

			other.iddevise = this.iddevise;
			other.libelle = this.libelle;
			other.taux = this.taux;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1Struct other) {

			other.iddevise = this.iddevise;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.iddevise = dis.readLong();

					this.libelle = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.taux = null;
					} else {
						this.taux = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.iddevise);

				// String

				writeString(this.libelle, dos);

				// Float

				if (this.taux == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taux);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddevise=" + String.valueOf(iddevise));
			sb.append(",libelle=" + libelle);
			sb.append(",taux=" + String.valueOf(taux));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddevise, other.iddevise);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String iddevise;

		public String getIddevise() {
			return this.iddevise;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public String taux;

		public String getTaux() {
			return this.taux;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.iddevise = readString(dis);

					this.libelle = readString(dis);

					this.taux = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddevise, dos);

				// String

				writeString(this.libelle, dos);

				// String

				writeString(this.taux, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddevise=" + iddevise);
			sb.append(",libelle=" + libelle);
			sb.append(",taux=" + taux);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				copyOfcopyOfmain_1Struct copyOfcopyOfmain_1 = new copyOfcopyOfmain_1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("devise");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("devise");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"iddevise\",\"libelle\",\"taux\") VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1Struct copyOfcopyOfmain_1_tmp = new copyOfcopyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/DEV/Data/Base Montauban/Devise.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Devise.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.iddevise = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.libelle = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.taux = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1 = null;

// # Output table : 'copyOfcopyOfmain_1'
								copyOfcopyOfmain_1_tmp.iddevise = Long.parseLong(row1.iddevise);
								copyOfcopyOfmain_1_tmp.libelle = row1.libelle;
								copyOfcopyOfmain_1_tmp.taux = Float.parseFloat(row1.taux);
								copyOfcopyOfmain_1 = copyOfcopyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1"
							if (copyOfcopyOfmain_1 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1");
								}

								whetherReject_tDBOutput_1 = false;
								pstmt_tDBOutput_1.setLong(1, copyOfcopyOfmain_1.iddevise);

								if (copyOfcopyOfmain_1.libelle == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, copyOfcopyOfmain_1.libelle);
								}

								if (copyOfcopyOfmain_1.taux == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_1.setFloat(3, copyOfcopyOfmain_1.taux);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
									try {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										batchSizeCounter_tDBOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

										System.err.println(errormessage_tDBOutput_1);

									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Devise.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_1_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfmain_1_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idtransporteur;

		public String getIdtransporteur() {
			return this.idtransporteur;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idtransporteur == null) ? 0 : this.idtransporteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_1_0Struct other = (copyOfcopyOfmain_1_0Struct) obj;

			if (this.idtransporteur == null) {
				if (other.idtransporteur != null)
					return false;

			} else if (!this.idtransporteur.equals(other.idtransporteur))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_1_0Struct other) {

			other.idtransporteur = this.idtransporteur;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_1_0Struct other) {

			other.idtransporteur = this.idtransporteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idtransporteur = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idtransporteur, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtransporteur=" + idtransporteur);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_1_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtransporteur, other.idtransporteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_TRANSPORTEUR;

		public String getCODE_TRANSPORTEUR() {
			return this.CODE_TRANSPORTEUR;
		}

		public String LIBELLE_TRANSPORTEUR;

		public String getLIBELLE_TRANSPORTEUR() {
			return this.LIBELLE_TRANSPORTEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_TRANSPORTEUR = readString(dis);

					this.LIBELLE_TRANSPORTEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_TRANSPORTEUR, dos);

				// String

				writeString(this.LIBELLE_TRANSPORTEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_TRANSPORTEUR=" + CODE_TRANSPORTEUR);
			sb.append(",LIBELLE_TRANSPORTEUR=" + LIBELLE_TRANSPORTEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfcopyOfmain_1_0Struct copyOfcopyOfmain_1_0 = new copyOfcopyOfmain_1_0Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_1_0");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("transporteur");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("transporteur");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"idtransporteur\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_1_0Struct copyOfcopyOfmain_1_0_tmp = new copyOfcopyOfmain_1_0Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/DEV/Data/Base Montauban/param/transporteurs.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/transporteurs.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.CODE_TRANSPORTEUR = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.LIBELLE_TRANSPORTEUR = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_1_0 = null;

// # Output table : 'copyOfcopyOfmain_1_0'
								copyOfcopyOfmain_1_0_tmp.idtransporteur = row2.CODE_TRANSPORTEUR;
								copyOfcopyOfmain_1_0_tmp.libelle = row2.CODE_TRANSPORTEUR == null ? null
										: row2.LIBELLE_TRANSPORTEUR;
								copyOfcopyOfmain_1_0 = copyOfcopyOfmain_1_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_1_0"
							if (copyOfcopyOfmain_1_0 != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_1_0");
								}

								whetherReject_tDBOutput_2 = false;
								if (copyOfcopyOfmain_1_0.idtransporteur == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(1, copyOfcopyOfmain_1_0.idtransporteur);
								}

								if (copyOfcopyOfmain_1_0.libelle == null) {
									pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(2, copyOfcopyOfmain_1_0.libelle);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;

								if ((batchSize_tDBOutput_2 > 0)
										&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
									try {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										batchSizeCounter_tDBOutput_2 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										System.err.println(errormessage_tDBOutput_2);

									}
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_1_0"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/transporteurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_1_0");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_1Struct implements routines.system.IPersistableRow<copyOfmain_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idmode_payement;

		public String getIdmode_payement() {
			return this.idmode_payement;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idmode_payement == null) ? 0 : this.idmode_payement.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_1Struct other = (copyOfmain_1Struct) obj;

			if (this.idmode_payement == null) {
				if (other.idmode_payement != null)
					return false;

			} else if (!this.idmode_payement.equals(other.idmode_payement))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_1Struct other) {

			other.idmode_payement = this.idmode_payement;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfmain_1Struct other) {

			other.idmode_payement = this.idmode_payement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idmode_payement = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idmode_payement, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idmode_payement=" + idmode_payement);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idmode_payement, other.idmode_payement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_PAIEMENT;

		public String getCODE_PAIEMENT() {
			return this.CODE_PAIEMENT;
		}

		public String LIBELLE_PAIEMENT;

		public String getLIBELLE_PAIEMENT() {
			return this.LIBELLE_PAIEMENT;
		}

		public String DETAIL_PAIEMENT;

		public String getDETAIL_PAIEMENT() {
			return this.DETAIL_PAIEMENT;
		}

		public String JOURNAL_PAIEMENT;

		public String getJOURNAL_PAIEMENT() {
			return this.JOURNAL_PAIEMENT;
		}

		public String COMPTE_PAIEMENT;

		public String getCOMPTE_PAIEMENT() {
			return this.COMPTE_PAIEMENT;
		}

		public String TRAITE_PAIEMENT;

		public String getTRAITE_PAIEMENT() {
			return this.TRAITE_PAIEMENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_PAIEMENT = readString(dis);

					this.LIBELLE_PAIEMENT = readString(dis);

					this.DETAIL_PAIEMENT = readString(dis);

					this.JOURNAL_PAIEMENT = readString(dis);

					this.COMPTE_PAIEMENT = readString(dis);

					this.TRAITE_PAIEMENT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_PAIEMENT, dos);

				// String

				writeString(this.LIBELLE_PAIEMENT, dos);

				// String

				writeString(this.DETAIL_PAIEMENT, dos);

				// String

				writeString(this.JOURNAL_PAIEMENT, dos);

				// String

				writeString(this.COMPTE_PAIEMENT, dos);

				// String

				writeString(this.TRAITE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_PAIEMENT=" + CODE_PAIEMENT);
			sb.append(",LIBELLE_PAIEMENT=" + LIBELLE_PAIEMENT);
			sb.append(",DETAIL_PAIEMENT=" + DETAIL_PAIEMENT);
			sb.append(",JOURNAL_PAIEMENT=" + JOURNAL_PAIEMENT);
			sb.append(",COMPTE_PAIEMENT=" + COMPTE_PAIEMENT);
			sb.append(",TRAITE_PAIEMENT=" + TRAITE_PAIEMENT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				copyOfmain_1Struct copyOfmain_1 = new copyOfmain_1Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_1");
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("mode_payement");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("mode_payement");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5
						+ "\" (\"idmode_payement\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_1Struct copyOfmain_1_tmp = new copyOfmain_1Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "C:/DEV/Data/Base Montauban/param/paiement.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/paiement.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row5.CODE_PAIEMENT = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row5.LIBELLE_PAIEMENT = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row5.DETAIL_PAIEMENT = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							row5.JOURNAL_PAIEMENT = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							row5.COMPTE_PAIEMENT = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 5;

							row5.TRAITE_PAIEMENT = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_1 = null;

// # Output table : 'copyOfmain_1'
								copyOfmain_1_tmp.idmode_payement = row5.CODE_PAIEMENT;
								copyOfmain_1_tmp.libelle = row5.LIBELLE_PAIEMENT;
								copyOfmain_1 = copyOfmain_1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_1"
							if (copyOfmain_1 != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_1");
								}

								whetherReject_tDBOutput_5 = false;
								if (copyOfmain_1.idmode_payement == null) {
									pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(1, copyOfmain_1.idmode_payement);
								}

								if (copyOfmain_1.libelle == null) {
									pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(2, copyOfmain_1.libelle);
								}

								pstmt_tDBOutput_5.addBatch();
								nb_line_tDBOutput_5++;

								batchSizeCounter_tDBOutput_5++;

								if ((batchSize_tDBOutput_5 > 0)
										&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
									try {
										int countSum_tDBOutput_5 = 0;

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										batchSizeCounter_tDBOutput_5 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
										java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
												sqle_tDBOutput_5 = null;
										String errormessage_tDBOutput_5;
										if (ne_tDBOutput_5 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_5 = new java.sql.SQLException(
													e_tDBOutput_5.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_5.getMessage(),
													ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
													ne_tDBOutput_5);
											errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
										} else {
											errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
										}

										int countSum_tDBOutput_5 = 0;
										for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
											countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

										System.err.println(errormessage_tDBOutput_5);

									}
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_1"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/paiement.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_1");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_2Struct implements routines.system.IPersistableRow<copyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idsecteur;

		public String getIdsecteur() {
			return this.idsecteur;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idsecteur == null) ? 0 : this.idsecteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_2Struct other = (copyOfmain_2Struct) obj;

			if (this.idsecteur == null) {
				if (other.idsecteur != null)
					return false;

			} else if (!this.idsecteur.equals(other.idsecteur))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_2Struct other) {

			other.idsecteur = this.idsecteur;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfmain_2Struct other) {

			other.idsecteur = this.idsecteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idsecteur = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idsecteur, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idsecteur=" + idsecteur);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idsecteur, other.idsecteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_SECTEUR;

		public String getCODE_SECTEUR() {
			return this.CODE_SECTEUR;
		}

		public String LIBELLE_SECTEUR;

		public String getLIBELLE_SECTEUR() {
			return this.LIBELLE_SECTEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_SECTEUR = readString(dis);

					this.LIBELLE_SECTEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_SECTEUR, dos);

				// String

				writeString(this.LIBELLE_SECTEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_SECTEUR=" + CODE_SECTEUR);
			sb.append(",LIBELLE_SECTEUR=" + LIBELLE_SECTEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfmain_2Struct copyOfmain_2 = new copyOfmain_2Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_2");
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = ("secteur");
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("secteur");
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
					stmtClear_tDBOutput_7.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_7 + "\"");
				}
				String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7
						+ "\" (\"idsecteur\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_2Struct copyOfmain_2_tmp = new copyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "C:/DEV/Data/Base Montauban/param/secteurs.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/secteurs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						row7 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row7 = new row7Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row7.CODE_SECTEUR = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row7.LIBELLE_SECTEUR = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_2 = null;

// # Output table : 'copyOfmain_2'
								copyOfmain_2_tmp.idsecteur = row7.CODE_SECTEUR;
								copyOfmain_2_tmp.libelle = row7.LIBELLE_SECTEUR;
								copyOfmain_2 = copyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */

							/**
							 * [tMap_7 process_data_begin ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_2"
							if (copyOfmain_2 != null) {

								/**
								 * [tDBOutput_7 main ] start
								 */

								currentComponent = "tDBOutput_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_2");
								}

								whetherReject_tDBOutput_7 = false;
								if (copyOfmain_2.idsecteur == null) {
									pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(1, copyOfmain_2.idsecteur);
								}

								if (copyOfmain_2.libelle == null) {
									pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_7.setString(2, copyOfmain_2.libelle);
								}

								pstmt_tDBOutput_7.addBatch();
								nb_line_tDBOutput_7++;

								batchSizeCounter_tDBOutput_7++;

								if ((batchSize_tDBOutput_7 > 0)
										&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
									try {
										int countSum_tDBOutput_7 = 0;

										for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										batchSizeCounter_tDBOutput_7 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
										java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
												sqle_tDBOutput_7 = null;
										String errormessage_tDBOutput_7;
										if (ne_tDBOutput_7 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_7 = new java.sql.SQLException(
													e_tDBOutput_7.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_7.getMessage(),
													ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(),
													ne_tDBOutput_7);
											errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
										} else {
											errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
										}

										int countSum_tDBOutput_7 = 0;
										for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
											countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
													: countEach_tDBOutput_7);
										}

										insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

										System.err.println(errormessage_tDBOutput_7);

									}
								}

								tos_count_tDBOutput_7++;

								/**
								 * [tDBOutput_7 main ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_end ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_2"

							/**
							 * [tMap_7 process_data_end ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/secteurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_2");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
					if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_7")) != null) {
						pstmtToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class copyOfmain_3Struct implements routines.system.IPersistableRow<copyOfmain_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idqualite;

		public String getIdqualite() {
			return this.idqualite;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idqualite == null) ? 0 : this.idqualite.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfmain_3Struct other = (copyOfmain_3Struct) obj;

			if (this.idqualite == null) {
				if (other.idqualite != null)
					return false;

			} else if (!this.idqualite.equals(other.idqualite))

				return false;

			return true;
		}

		public void copyDataTo(copyOfmain_3Struct other) {

			other.idqualite = this.idqualite;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfmain_3Struct other) {

			other.idqualite = this.idqualite;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idqualite = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idqualite, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idqualite=" + idqualite);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmain_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idqualite, other.idqualite);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_QUALITE;

		public String getCODE_QUALITE() {
			return this.CODE_QUALITE;
		}

		public String LIBELLE_QUALITE;

		public String getLIBELLE_QUALITE() {
			return this.LIBELLE_QUALITE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_QUALITE = readString(dis);

					this.LIBELLE_QUALITE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_QUALITE, dos);

				// String

				writeString(this.LIBELLE_QUALITE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_QUALITE=" + CODE_QUALITE);
			sb.append(",LIBELLE_QUALITE=" + LIBELLE_QUALITE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				copyOfmain_3Struct copyOfmain_3 = new copyOfmain_3Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfmain_3");
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = ("qualite");
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("qualite");
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				conn_tDBOutput_9 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
					stmtClear_tDBOutput_9.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_9 + "\"");
				}
				String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9
						+ "\" (\"idqualite\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfmain_3Struct copyOfmain_3_tmp = new copyOfmain_3Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try {

					Object filename_tFileInputDelimited_9 = "C:/DEV/Data/Base Montauban/param/qualités.csv";
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0 || random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/qualités.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_9, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();

						row9 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_9 = 0;

							columnIndexWithD_tFileInputDelimited_9 = 0;

							row9.CODE_QUALITE = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 1;

							row9.LIBELLE_QUALITE = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								copyOfmain_3 = null;

// # Output table : 'copyOfmain_3'
								copyOfmain_3_tmp.idqualite = row9.CODE_QUALITE;
								copyOfmain_3_tmp.libelle = row9.LIBELLE_QUALITE;
								copyOfmain_3 = copyOfmain_3_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */

							/**
							 * [tMap_9 process_data_begin ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_begin ] stop
							 */
// Start of branch "copyOfmain_3"
							if (copyOfmain_3 != null) {

								/**
								 * [tDBOutput_9 main ] start
								 */

								currentComponent = "tDBOutput_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfmain_3");
								}

								whetherReject_tDBOutput_9 = false;
								if (copyOfmain_3.idqualite == null) {
									pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(1, copyOfmain_3.idqualite);
								}

								if (copyOfmain_3.libelle == null) {
									pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_9.setString(2, copyOfmain_3.libelle);
								}

								pstmt_tDBOutput_9.addBatch();
								nb_line_tDBOutput_9++;

								batchSizeCounter_tDBOutput_9++;

								if ((batchSize_tDBOutput_9 > 0)
										&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
									try {
										int countSum_tDBOutput_9 = 0;

										for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										batchSizeCounter_tDBOutput_9 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
										java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
												sqle_tDBOutput_9 = null;
										String errormessage_tDBOutput_9;
										if (ne_tDBOutput_9 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_9 = new java.sql.SQLException(
													e_tDBOutput_9.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_9.getMessage(),
													ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(),
													ne_tDBOutput_9);
											errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
										} else {
											errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
										}

										int countSum_tDBOutput_9 = 0;
										for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
											countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

										System.err.println(errormessage_tDBOutput_9);

									}
								}

								tos_count_tDBOutput_9++;

								/**
								 * [tDBOutput_9 main ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_9 process_data_end ] start
								 */

								currentComponent = "tDBOutput_9";

								/**
								 * [tDBOutput_9 process_data_end ] stop
								 */

							} // End of branch "copyOfmain_3"

							/**
							 * [tMap_9 process_data_end ] start
							 */

							currentComponent = "tMap_9";

							/**
							 * [tMap_9 process_data_end ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/qualités.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9 + deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED", nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED", nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfmain_3");
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
					if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_9")) != null) {
						pstmtToClose_tDBOutput_9.close();
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfmain_2Struct implements routines.system.IPersistableRow<copyOfcopyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfidel;

		public int getIdfidel() {
			return this.idfidel;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfidel;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfmain_2Struct other = (copyOfcopyOfmain_2Struct) obj;

			if (this.idfidel != other.idfidel)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfmain_2Struct other) {

			other.idfidel = this.idfidel;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfcopyOfmain_2Struct other) {

			other.idfidel = this.idfidel;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idfidel = dis.readInt();

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfidel);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfidel=" + String.valueOf(idfidel));
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfidel, other.idfidel);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_FIDELITE;

		public String getCODE_FIDELITE() {
			return this.CODE_FIDELITE;
		}

		public String LIBELLE_FIDELITE;

		public String getLIBELLE_FIDELITE() {
			return this.LIBELLE_FIDELITE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_FIDELITE = readString(dis);

					this.LIBELLE_FIDELITE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_FIDELITE, dos);

				// String

				writeString(this.LIBELLE_FIDELITE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_FIDELITE=" + CODE_FIDELITE);
			sb.append(",LIBELLE_FIDELITE=" + LIBELLE_FIDELITE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				copyOfcopyOfmain_2Struct copyOfcopyOfmain_2 = new copyOfcopyOfmain_2Struct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfmain_2");
				}

				int tos_count_tDBOutput_10 = 0;

				String dbschema_tDBOutput_10 = null;
				dbschema_tDBOutput_10 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_10 = null;
				if (dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
					tableName_tDBOutput_10 = ("fidelite");
				} else {
					tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("fidelite");
				}

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;
				int rejectedCount_tDBOutput_10 = 0;

				boolean whetherReject_tDBOutput_10 = false;

				java.sql.Connection conn_tDBOutput_10 = null;
				String dbUser_tDBOutput_10 = null;

				conn_tDBOutput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_10 = 10000;
				int batchSizeCounter_tDBOutput_10 = 0;

				int count_tDBOutput_10 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
					stmtClear_tDBOutput_10.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_10 + "\"");
				}
				String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10
						+ "\" (\"idfidel\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
				resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfmain_2Struct copyOfcopyOfmain_2_tmp = new copyOfcopyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try {

					Object filename_tFileInputDelimited_10 = "C:/DEV/Data/Base Montauban/param/fidelités.csv";
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0 || random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/fidelités.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_10, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_10 = 0;

							columnIndexWithD_tFileInputDelimited_10 = 0;

							row10.CODE_FIDELITE = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 1;

							row10.LIBELLE_FIDELITE = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							if (rowstate_tFileInputDelimited_10.getException() != null) {
								throw rowstate_tFileInputDelimited_10.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */

						/**
						 * [tFileInputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmain_2 = null;

// # Output table : 'copyOfcopyOfmain_2'
								copyOfcopyOfmain_2_tmp.idfidel = Integer.parseInt(row10.CODE_FIDELITE);
								copyOfcopyOfmain_2_tmp.libelle = row10.LIBELLE_FIDELITE;
								copyOfcopyOfmain_2 = copyOfcopyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */

							/**
							 * [tMap_10 process_data_begin ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfmain_2"
							if (copyOfcopyOfmain_2 != null) {

								/**
								 * [tDBOutput_10 main ] start
								 */

								currentComponent = "tDBOutput_10";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfmain_2");
								}

								whetherReject_tDBOutput_10 = false;
								pstmt_tDBOutput_10.setInt(1, copyOfcopyOfmain_2.idfidel);

								if (copyOfcopyOfmain_2.libelle == null) {
									pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_10.setString(2, copyOfcopyOfmain_2.libelle);
								}

								pstmt_tDBOutput_10.addBatch();
								nb_line_tDBOutput_10++;

								batchSizeCounter_tDBOutput_10++;

								if ((batchSize_tDBOutput_10 > 0)
										&& (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
									try {
										int countSum_tDBOutput_10 = 0;

										for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										batchSizeCounter_tDBOutput_10 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
										java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),
												sqle_tDBOutput_10 = null;
										String errormessage_tDBOutput_10;
										if (ne_tDBOutput_10 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_10 = new java.sql.SQLException(
													e_tDBOutput_10.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_10.getMessage(),
													ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(),
													ne_tDBOutput_10);
											errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
										} else {
											errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
										}

										int countSum_tDBOutput_10 = 0;
										for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
											countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0
													: countEach_tDBOutput_10);
										}

										insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

										System.err.println(errormessage_tDBOutput_10);

									}
								}

								tos_count_tDBOutput_10++;

								/**
								 * [tDBOutput_10 main ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_end ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfmain_2"

							/**
							 * [tMap_10 process_data_end ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/fidelités.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					int countSum_tDBOutput_10 = 0;
					if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {

						for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}

					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

				} catch (java.sql.BatchUpdateException e_tDBOutput_10) {
					java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(), sqle_tDBOutput_10 = null;
					String errormessage_tDBOutput_10;
					if (ne_tDBOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_10 = new java.sql.SQLException(
								e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(),
								ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
						errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
					} else {
						errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
					}

					int countSum_tDBOutput_10 = 0;
					for (int countEach_tDBOutput_10 : e_tDBOutput_10.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					System.err.println(errormessage_tDBOutput_10);

				}

				if (pstmt_tDBOutput_10 != null) {

					pstmt_tDBOutput_10.close();
					resourceMap.remove("pstmt_tDBOutput_10");
				}
				resourceMap.put("statementClosed_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10 + deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED", nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED", nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfmain_2");
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
					if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_10")) != null) {
						pstmtToClose_tDBOutput_10.close();
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortieStruct implements routines.system.IPersistableRow<copyOfsortieStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idcat;

		public String getIdcat() {
			return this.idcat;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idcat == null) ? 0 : this.idcat.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortieStruct other = (copyOfsortieStruct) obj;

			if (this.idcat == null) {
				if (other.idcat != null)
					return false;

			} else if (!this.idcat.equals(other.idcat))

				return false;

			return true;
		}

		public void copyDataTo(copyOfsortieStruct other) {

			other.idcat = this.idcat;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(copyOfsortieStruct other) {

			other.idcat = this.idcat;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idcat = readString(dis);

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idcat, dos);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcat=" + idcat);
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortieStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcat, other.idcat);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_CATEGORIE;

		public String getCODE_CATEGORIE() {
			return this.CODE_CATEGORIE;
		}

		public String LIBELLE_CATEGORIE;

		public String getLIBELLE_CATEGORIE() {
			return this.LIBELLE_CATEGORIE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_CATEGORIE = readString(dis);

					this.LIBELLE_CATEGORIE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_CATEGORIE, dos);

				// String

				writeString(this.LIBELLE_CATEGORIE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_CATEGORIE=" + CODE_CATEGORIE);
			sb.append(",LIBELLE_CATEGORIE=" + LIBELLE_CATEGORIE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfsortieStruct copyOfsortie = new copyOfsortieStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("code_categorie");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("code_categorie");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"idcat\",\"libelle\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortieStruct copyOfsortie_tmp = new copyOfsortieStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/DEV/Data/Base Montauban/param/categories.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/categories.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row4.CODE_CATEGORIE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row4.LIBELLE_CATEGORIE = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie = null;

// # Output table : 'copyOfsortie'
								copyOfsortie_tmp.idcat = row4.CODE_CATEGORIE;
								copyOfsortie_tmp.libelle = row4.LIBELLE_CATEGORIE;
								copyOfsortie = copyOfsortie_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie"
							if (copyOfsortie != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie");
								}

								whetherReject_tDBOutput_4 = false;
								if (copyOfsortie.idcat == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(1, copyOfsortie.idcat);
								}

								if (copyOfsortie.libelle == null) {
									pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(2, copyOfsortie.libelle);
								}

								pstmt_tDBOutput_4.addBatch();
								nb_line_tDBOutput_4++;

								batchSizeCounter_tDBOutput_4++;

								if ((batchSize_tDBOutput_4 > 0)
										&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
									try {
										int countSum_tDBOutput_4 = 0;

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										batchSizeCounter_tDBOutput_4 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
										java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
												sqle_tDBOutput_4 = null;
										String errormessage_tDBOutput_4;
										if (ne_tDBOutput_4 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_4 = new java.sql.SQLException(
													e_tDBOutput_4.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_4.getMessage(),
													ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
													ne_tDBOutput_4);
											errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
										} else {
											errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
										}

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										System.err.println(errormessage_tDBOutput_4);

									}
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/categories.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class copyOfsortie_0Struct implements routines.system.IPersistableRow<copyOfsortie_0Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idrepresentant;

		public String getIdrepresentant() {
			return this.idrepresentant;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idrepresentant == null) ? 0 : this.idrepresentant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsortie_0Struct other = (copyOfsortie_0Struct) obj;

			if (this.idrepresentant == null) {
				if (other.idrepresentant != null)
					return false;

			} else if (!this.idrepresentant.equals(other.idrepresentant))

				return false;

			return true;
		}

		public void copyDataTo(copyOfsortie_0Struct other) {

			other.idrepresentant = this.idrepresentant;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(copyOfsortie_0Struct other) {

			other.idrepresentant = this.idrepresentant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idrepresentant = readString(dis);

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idrepresentant, dos);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idrepresentant=" + idrepresentant);
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idrepresentant, other.idrepresentant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CODE_VENDEUR;

		public String getCODE_VENDEUR() {
			return this.CODE_VENDEUR;
		}

		public String LIBELLE_VENDEUR;

		public String getLIBELLE_VENDEUR() {
			return this.LIBELLE_VENDEUR;
		}

		public String EMAIL_VENDEUR;

		public String getEMAIL_VENDEUR() {
			return this.EMAIL_VENDEUR;
		}

		public String CAISSE_VENDEUR;

		public String getCAISSE_VENDEUR() {
			return this.CAISSE_VENDEUR;
		}

		public String PASSWORD_VENDEUR;

		public String getPASSWORD_VENDEUR() {
			return this.PASSWORD_VENDEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CODE_VENDEUR = readString(dis);

					this.LIBELLE_VENDEUR = readString(dis);

					this.EMAIL_VENDEUR = readString(dis);

					this.CAISSE_VENDEUR = readString(dis);

					this.PASSWORD_VENDEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE_VENDEUR, dos);

				// String

				writeString(this.LIBELLE_VENDEUR, dos);

				// String

				writeString(this.EMAIL_VENDEUR, dos);

				// String

				writeString(this.CAISSE_VENDEUR, dos);

				// String

				writeString(this.PASSWORD_VENDEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE_VENDEUR=" + CODE_VENDEUR);
			sb.append(",LIBELLE_VENDEUR=" + LIBELLE_VENDEUR);
			sb.append(",EMAIL_VENDEUR=" + EMAIL_VENDEUR);
			sb.append(",CAISSE_VENDEUR=" + CAISSE_VENDEUR);
			sb.append(",PASSWORD_VENDEUR=" + PASSWORD_VENDEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				copyOfsortie_0Struct copyOfsortie_0 = new copyOfsortie_0Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfsortie_0");
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = ("code_representant");
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("code_representant");
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtClear_tDBOutput_6.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_6 + "\"");
				}
				String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6
						+ "\" (\"idrepresentant\",\"nom\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_0Struct copyOfsortie_0_tmp = new copyOfsortie_0Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try {

					Object filename_tFileInputDelimited_6 = "C:/DEV/Data/Base Montauban/param/vendeurs.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0 || random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/param/vendeurs.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_6, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row6.CODE_VENDEUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 1;

							row6.LIBELLE_VENDEUR = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 2;

							row6.EMAIL_VENDEUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 3;

							row6.CAISSE_VENDEUR = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 4;

							row6.PASSWORD_VENDEUR = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								copyOfsortie_0 = null;

// # Output table : 'copyOfsortie_0'
								copyOfsortie_0_tmp.idrepresentant = row6.CODE_VENDEUR;
								copyOfsortie_0_tmp.nom = row6.LIBELLE_VENDEUR;
								copyOfsortie_0 = copyOfsortie_0_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "copyOfsortie_0"
							if (copyOfsortie_0 != null) {

								/**
								 * [tDBOutput_6 main ] start
								 */

								currentComponent = "tDBOutput_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfsortie_0");
								}

								whetherReject_tDBOutput_6 = false;
								if (copyOfsortie_0.idrepresentant == null) {
									pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(1, copyOfsortie_0.idrepresentant);
								}

								if (copyOfsortie_0.nom == null) {
									pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_6.setString(2, copyOfsortie_0.nom);
								}

								pstmt_tDBOutput_6.addBatch();
								nb_line_tDBOutput_6++;

								batchSizeCounter_tDBOutput_6++;

								if ((batchSize_tDBOutput_6 > 0)
										&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
									try {
										int countSum_tDBOutput_6 = 0;

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										batchSizeCounter_tDBOutput_6 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
										java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),
												sqle_tDBOutput_6 = null;
										String errormessage_tDBOutput_6;
										if (ne_tDBOutput_6 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_6 = new java.sql.SQLException(
													e_tDBOutput_6.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_6.getMessage(),
													ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(),
													ne_tDBOutput_6);
											errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
										} else {
											errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
										}

										int countSum_tDBOutput_6 = 0;
										for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
											countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

										System.err.println(errormessage_tDBOutput_6);

									}
								}

								tos_count_tDBOutput_6++;

								/**
								 * [tDBOutput_6 main ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_6 process_data_end ] start
								 */

								currentComponent = "tDBOutput_6";

								/**
								 * [tDBOutput_6 process_data_end ] stop
								 */

							} // End of branch "copyOfsortie_0"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/param/vendeurs.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfsortie_0");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfcopyOfmain_2Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmain_2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String idcli;

		public String getIdcli() {
			return this.idcli;
		}

		public String code_ape;

		public String getCode_ape() {
			return this.code_ape;
		}

		public String code_rejet;

		public String getCode_rejet() {
			return this.code_rejet;
		}

		public String mot_court;

		public String getMot_court() {
			return this.mot_court;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String numero_sfac;

		public String getNumero_sfac() {
			return this.numero_sfac;
		}

		public String numero_compte_compta;

		public String getNumero_compte_compta() {
			return this.numero_compte_compta;
		}

		public String numero_identifiant_cee;

		public String getNumero_identifiant_cee() {
			return this.numero_identifiant_cee;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String idcat;

		public String getIdcat() {
			return this.idcat;
		}

		public String idrepresentant;

		public String getIdrepresentant() {
			return this.idrepresentant;
		}

		public Long iddevise;

		public Long getIddevise() {
			return this.iddevise;
		}

		public Integer idfidelite;

		public Integer getIdfidelite() {
			return this.idfidelite;
		}

		public String idmode_payement;

		public String getIdmode_payement() {
			return this.idmode_payement;
		}

		public String idqualite;

		public String getIdqualite() {
			return this.idqualite;
		}

		public String idsecteur;

		public String getIdsecteur() {
			return this.idsecteur;
		}

		public String idtransporteur;

		public String getIdtransporteur() {
			return this.idtransporteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.idcli == null) ? 0 : this.idcli.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfcopyOfmain_2Struct other = (copyOfcopyOfcopyOfmain_2Struct) obj;

			if (this.idcli == null) {
				if (other.idcli != null)
					return false;

			} else if (!this.idcli.equals(other.idcli))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfcopyOfmain_2Struct other) {

			other.idcli = this.idcli;
			other.code_ape = this.code_ape;
			other.code_rejet = this.code_rejet;
			other.mot_court = this.mot_court;
			other.nom = this.nom;
			other.numero_sfac = this.numero_sfac;
			other.numero_compte_compta = this.numero_compte_compta;
			other.numero_identifiant_cee = this.numero_identifiant_cee;
			other.siret = this.siret;
			other.idcat = this.idcat;
			other.idrepresentant = this.idrepresentant;
			other.iddevise = this.iddevise;
			other.idfidelite = this.idfidelite;
			other.idmode_payement = this.idmode_payement;
			other.idqualite = this.idqualite;
			other.idsecteur = this.idsecteur;
			other.idtransporteur = this.idtransporteur;

		}

		public void copyKeysDataTo(copyOfcopyOfcopyOfmain_2Struct other) {

			other.idcli = this.idcli;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.idcli = readString(dis);

					this.code_ape = readString(dis);

					this.code_rejet = readString(dis);

					this.mot_court = readString(dis);

					this.nom = readString(dis);

					this.numero_sfac = readString(dis);

					this.numero_compte_compta = readString(dis);

					this.numero_identifiant_cee = readString(dis);

					this.siret = readString(dis);

					this.idcat = readString(dis);

					this.idrepresentant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.iddevise = null;
					} else {
						this.iddevise = dis.readLong();
					}

					this.idfidelite = readInteger(dis);

					this.idmode_payement = readString(dis);

					this.idqualite = readString(dis);

					this.idsecteur = readString(dis);

					this.idtransporteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.idcli, dos);

				// String

				writeString(this.code_ape, dos);

				// String

				writeString(this.code_rejet, dos);

				// String

				writeString(this.mot_court, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.numero_sfac, dos);

				// String

				writeString(this.numero_compte_compta, dos);

				// String

				writeString(this.numero_identifiant_cee, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.idcat, dos);

				// String

				writeString(this.idrepresentant, dos);

				// Long

				if (this.iddevise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.iddevise);
				}

				// Integer

				writeInteger(this.idfidelite, dos);

				// String

				writeString(this.idmode_payement, dos);

				// String

				writeString(this.idqualite, dos);

				// String

				writeString(this.idsecteur, dos);

				// String

				writeString(this.idtransporteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcli=" + idcli);
			sb.append(",code_ape=" + code_ape);
			sb.append(",code_rejet=" + code_rejet);
			sb.append(",mot_court=" + mot_court);
			sb.append(",nom=" + nom);
			sb.append(",numero_sfac=" + numero_sfac);
			sb.append(",numero_compte_compta=" + numero_compte_compta);
			sb.append(",numero_identifiant_cee=" + numero_identifiant_cee);
			sb.append(",siret=" + siret);
			sb.append(",idcat=" + idcat);
			sb.append(",idrepresentant=" + idrepresentant);
			sb.append(",iddevise=" + String.valueOf(iddevise));
			sb.append(",idfidelite=" + String.valueOf(idfidelite));
			sb.append(",idmode_payement=" + idmode_payement);
			sb.append(",idqualite=" + idqualite);
			sb.append(",idsecteur=" + idsecteur);
			sb.append(",idtransporteur=" + idtransporteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfmain_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcli, other.idcli);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ClientAttribute = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[0];

		public String CREF;

		public String getCREF() {
			return this.CREF;
		}

		public String CNOM;

		public String getCNOM() {
			return this.CNOM;
		}

		public String CRUE;

		public String getCRUE() {
			return this.CRUE;
		}

		public String CAUX;

		public String getCAUX() {
			return this.CAUX;
		}

		public String CCPTL;

		public String getCCPTL() {
			return this.CCPTL;
		}

		public String CVIL;

		public String getCVIL() {
			return this.CVIL;
		}

		public String FILL01;

		public String getFILL01() {
			return this.FILL01;
		}

		public String CQUAL;

		public String getCQUAL() {
			return this.CQUAL;
		}

		public String CCOM1;

		public String getCCOM1() {
			return this.CCOM1;
		}

		public String CCREP;

		public String getCCREP() {
			return this.CCREP;
		}

		public String CREMFI;

		public String getCREMFI() {
			return this.CREMFI;
		}

		public String CECHE;

		public String getCECHE() {
			return this.CECHE;
		}

		public String CECHJ;

		public String getCECHJ() {
			return this.CECHJ;
		}

		public String CPAI;

		public String getCPAI() {
			return this.CPAI;
		}

		public String CCHAN;

		public String getCCHAN() {
			return this.CCHAN;
		}

		public String CECHJ2;

		public String getCECHJ2() {
			return this.CECHJ2;
		}

		public String CMOD;

		public String getCMOD() {
			return this.CMOD;
		}

		public String CBQ1;

		public String getCBQ1() {
			return this.CBQ1;
		}

		public String CBQ2;

		public String getCBQ2() {
			return this.CBQ2;
		}

		public String CBQ3;

		public String getCBQ3() {
			return this.CBQ3;
		}

		public String CBQ4;

		public String getCBQ4() {
			return this.CBQ4;
		}

		public String CBQ5;

		public String getCBQ5() {
			return this.CBQ5;
		}

		public String CBQ6;

		public String getCBQ6() {
			return this.CBQ6;
		}

		public String CFACT;

		public String getCFACT() {
			return this.CFACT;
		}

		public String CBL;

		public String getCBL() {
			return this.CBL;
		}

		public String CESC;

		public String getCESC() {
			return this.CESC;
		}

		public String VARAD1;

		public String getVARAD1() {
			return this.VARAD1;
		}

		public String VARAD2;

		public String getVARAD2() {
			return this.VARAD2;
		}

		public String VARAD3;

		public String getVARAD3() {
			return this.VARAD3;
		}

		public String VARAD4;

		public String getVARAD4() {
			return this.VARAD4;
		}

		public String VARAD5;

		public String getVARAD5() {
			return this.VARAD5;
		}

		public String VARAD6;

		public String getVARAD6() {
			return this.VARAD6;
		}

		public String VARA1;

		public String getVARA1() {
			return this.VARA1;
		}

		public String VARA2;

		public String getVARA2() {
			return this.VARA2;
		}

		public String VARA3;

		public String getVARA3() {
			return this.VARA3;
		}

		public String VARA4;

		public String getVARA4() {
			return this.VARA4;
		}

		public String VARA5;

		public String getVARA5() {
			return this.VARA5;
		}

		public String VARB1;

		public String getVARB1() {
			return this.VARB1;
		}

		public String VARB2;

		public String getVARB2() {
			return this.VARB2;
		}

		public String VARB3;

		public String getVARB3() {
			return this.VARB3;
		}

		public String VARB4;

		public String getVARB4() {
			return this.VARB4;
		}

		public String VARB5;

		public String getVARB5() {
			return this.VARB5;
		}

		public String VARN1;

		public String getVARN1() {
			return this.VARN1;
		}

		public String VARN2;

		public String getVARN2() {
			return this.VARN2;
		}

		public String VARN3;

		public String getVARN3() {
			return this.VARN3;
		}

		public String VARN4;

		public String getVARN4() {
			return this.VARN4;
		}

		public String VARN5;

		public String getVARN5() {
			return this.VARN5;
		}

		public String CDATCRE;

		public String getCDATCRE() {
			return this.CDATCRE;
		}

		public String CTEL1;

		public String getCTEL1() {
			return this.CTEL1;
		}

		public String CTEL2;

		public String getCTEL2() {
			return this.CTEL2;
		}

		public String CTEX1;

		public String getCTEX1() {
			return this.CTEX1;
		}

		public String CTEX2;

		public String getCTEX2() {
			return this.CTEX2;
		}

		public String CDELMOY;

		public String getCDELMOY() {
			return this.CDELMOY;
		}

		public String CAFFAIRE;

		public String getCAFFAIRE() {
			return this.CAFFAIRE;
		}

		public String CCPTFACT;

		public String getCCPTFACT() {
			return this.CCPTFACT;
		}

		public String CINTERNET;

		public String getCINTERNET() {
			return this.CINTERNET;
		}

		public String CIBAN1;

		public String getCIBAN1() {
			return this.CIBAN1;
		}

		public String CBIC_old;

		public String getCBIC_old() {
			return this.CBIC_old;
		}

		public String CFIDEL;

		public String getCFIDEL() {
			return this.CFIDEL;
		}

		public String CRFA;

		public String getCRFA() {
			return this.CRFA;
		}

		public String CCOMREG;

		public String getCCOMREG() {
			return this.CCOMREG;
		}

		public String CAPE2;

		public String getCAPE2() {
			return this.CAPE2;
		}

		public String CIBAN72;

		public String getCIBAN72() {
			return this.CIBAN72;
		}

		public String CIBAN8;

		public String getCIBAN8() {
			return this.CIBAN8;
		}

		public String CIBAN9;

		public String getCIBAN9() {
			return this.CIBAN9;
		}

		public String CBIC;

		public String getCBIC() {
			return this.CBIC;
		}

		public String CTRANSP;

		public String getCTRANSP() {
			return this.CTRANSP;
		}

		public String CFACTMAIL;

		public String getCFACTMAIL() {
			return this.CFACTMAIL;
		}

		public String CBLMAIL;

		public String getCBLMAIL() {
			return this.CBLMAIL;
		}

		public String CFACTWEB;

		public String getCFACTWEB() {
			return this.CFACTWEB;
		}

		public String CBLWEB;

		public String getCBLWEB() {
			return this.CBLWEB;
		}

		public String CPUBLIPOSTAGE;

		public String getCPUBLIPOSTAGE() {
			return this.CPUBLIPOSTAGE;
		}

		public String CFACT_EDI;

		public String getCFACT_EDI() {
			return this.CFACT_EDI;
		}

		public String CFACT_CHORUS;

		public String getCFACT_CHORUS() {
			return this.CFACT_CHORUS;
		}

		public String CFACTORING;

		public String getCFACTORING() {
			return this.CFACTORING;
		}

		public String CCHORUS_SERVICE;

		public String getCCHORUS_SERVICE() {
			return this.CCHORUS_SERVICE;
		}

		public String CFIL14;

		public String getCFIL14() {
			return this.CFIL14;
		}

		public String CTAR;

		public String getCTAR() {
			return this.CTAR;
		}

		public String FIL02;

		public String getFIL02() {
			return this.FIL02;
		}

		public String CREJ;

		public String getCREJ() {
			return this.CREJ;
		}

		public String CSECT;

		public String getCSECT() {
			return this.CSECT;
		}

		public String CTOUR;

		public String getCTOUR() {
			return this.CTOUR;
		}

		public String CCAN1;

		public String getCCAN1() {
			return this.CCAN1;
		}

		public String CCAN2;

		public String getCCAN2() {
			return this.CCAN2;
		}

		public String CCAN3;

		public String getCCAN3() {
			return this.CCAN3;
		}

		public String CDATF;

		public String getCDATF() {
			return this.CDATF;
		}

		public String CCAT;

		public String getCCAT() {
			return this.CCAT;
		}

		public String CRESP;

		public String getCRESP() {
			return this.CRESP;
		}

		public String CAPE;

		public String getCAPE() {
			return this.CAPE;
		}

		public String CPREMC;

		public String getCPREMC() {
			return this.CPREMC;
		}

		public String CDERNC;

		public String getCDERNC() {
			return this.CDERNC;
		}

		public String CPROCC;

		public String getCPROCC() {
			return this.CPROCC;
		}

		public String CTYPEC;

		public String getCTYPEC() {
			return this.CTYPEC;
		}

		public String CSIRET;

		public String getCSIRET() {
			return this.CSIRET;
		}

		public String CORIGIN;

		public String getCORIGIN() {
			return this.CORIGIN;
		}

		public String CMOTCOUR;

		public String getCMOTCOUR() {
			return this.CMOTCOUR;
		}

		public String CCOMPTA;

		public String getCCOMPTA() {
			return this.CCOMPTA;
		}

		public String CAFFMEMO;

		public String getCAFFMEMO() {
			return this.CAFFMEMO;
		}

		public String CFIL2;

		public String getCFIL2() {
			return this.CFIL2;
		}

		public String CPNAFF;

		public String getCPNAFF() {
			return this.CPNAFF;
		}

		public String CDEVTAR;

		public String getCDEVTAR() {
			return this.CDEVTAR;
		}

		public String CMINCOM;

		public String getCMINCOM() {
			return this.CMINCOM;
		}

		public String CRELEVE;

		public String getCRELEVE() {
			return this.CRELEVE;
		}

		public String CRELIQ;

		public String getCRELIQ() {
			return this.CRELIQ;
		}

		public String CMAJ;

		public String getCMAJ() {
			return this.CMAJ;
		}

		public String CECH;

		public String getCECH() {
			return this.CECH;
		}

		public String CETIQ;

		public String getCETIQ() {
			return this.CETIQ;
		}

		public String CCOEF;

		public String getCCOEF() {
			return this.CCOEF;
		}

		public String CARROND;

		public String getCARROND() {
			return this.CARROND;
		}

		public String CENCOUR;

		public String getCENCOUR() {
			return this.CENCOUR;
		}

		public String CNIVREL;

		public String getCNIVREL() {
			return this.CNIVREL;
		}

		public String CBLOCAG;

		public String getCBLOCAG() {
			return this.CBLOCAG;
		}

		public String CDATREL;

		public String getCDATREL() {
			return this.CDATREL;
		}

		public String CRESCO;

		public String getCRESCO() {
			return this.CRESCO;
		}

		public String CRESFI;

		public String getCRESFI() {
			return this.CRESFI;
		}

		public String CSFAC;

		public String getCSFAC() {
			return this.CSFAC;
		}

		public String CDATENC;

		public String getCDATENC() {
			return this.CDATENC;
		}

		public String CDATSFA;

		public String getCDATSFA() {
			return this.CDATSFA;
		}

		public String CCONTR;

		public String getCCONTR() {
			return this.CCONTR;
		}

		public String CDEREL;

		public String getCDEREL() {
			return this.CDEREL;
		}

		public String CPAYS;

		public String getCPAYS() {
			return this.CPAYS;
		}

		public String CBLTOT;

		public String getCBLTOT() {
			return this.CBLTOT;
		}

		public String CBLLIG;

		public String getCBLLIG() {
			return this.CBLLIG;
		}

		public String CENCDIS;

		public String getCENCDIS() {
			return this.CENCDIS;
		}

		public String CNCEE;

		public String getCNCEE() {
			return this.CNCEE;
		}

		public String CNSFAC;

		public String getCNSFAC() {
			return this.CNSFAC;
		}

		public String CPSRDAT;

		public String getCPSRDAT() {
			return this.CPSRDAT;
		}

		public String CEPNASR;

		public String getCEPNASR() {
			return this.CEPNASR;
		}

		public String CCODTAR;

		public String getCCODTAR() {
			return this.CCODTAR;
		}

		public String CDEVISE;

		public String getCDEVISE() {
			return this.CDEVISE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ClientAttribute.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ClientAttribute.length == 0) {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ClientAttribute = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ClientAttribute, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ClientAttribute) {

				try {

					int length = 0;

					this.CREF = readString(dis);

					this.CNOM = readString(dis);

					this.CRUE = readString(dis);

					this.CAUX = readString(dis);

					this.CCPTL = readString(dis);

					this.CVIL = readString(dis);

					this.FILL01 = readString(dis);

					this.CQUAL = readString(dis);

					this.CCOM1 = readString(dis);

					this.CCREP = readString(dis);

					this.CREMFI = readString(dis);

					this.CECHE = readString(dis);

					this.CECHJ = readString(dis);

					this.CPAI = readString(dis);

					this.CCHAN = readString(dis);

					this.CECHJ2 = readString(dis);

					this.CMOD = readString(dis);

					this.CBQ1 = readString(dis);

					this.CBQ2 = readString(dis);

					this.CBQ3 = readString(dis);

					this.CBQ4 = readString(dis);

					this.CBQ5 = readString(dis);

					this.CBQ6 = readString(dis);

					this.CFACT = readString(dis);

					this.CBL = readString(dis);

					this.CESC = readString(dis);

					this.VARAD1 = readString(dis);

					this.VARAD2 = readString(dis);

					this.VARAD3 = readString(dis);

					this.VARAD4 = readString(dis);

					this.VARAD5 = readString(dis);

					this.VARAD6 = readString(dis);

					this.VARA1 = readString(dis);

					this.VARA2 = readString(dis);

					this.VARA3 = readString(dis);

					this.VARA4 = readString(dis);

					this.VARA5 = readString(dis);

					this.VARB1 = readString(dis);

					this.VARB2 = readString(dis);

					this.VARB3 = readString(dis);

					this.VARB4 = readString(dis);

					this.VARB5 = readString(dis);

					this.VARN1 = readString(dis);

					this.VARN2 = readString(dis);

					this.VARN3 = readString(dis);

					this.VARN4 = readString(dis);

					this.VARN5 = readString(dis);

					this.CDATCRE = readString(dis);

					this.CTEL1 = readString(dis);

					this.CTEL2 = readString(dis);

					this.CTEX1 = readString(dis);

					this.CTEX2 = readString(dis);

					this.CDELMOY = readString(dis);

					this.CAFFAIRE = readString(dis);

					this.CCPTFACT = readString(dis);

					this.CINTERNET = readString(dis);

					this.CIBAN1 = readString(dis);

					this.CBIC_old = readString(dis);

					this.CFIDEL = readString(dis);

					this.CRFA = readString(dis);

					this.CCOMREG = readString(dis);

					this.CAPE2 = readString(dis);

					this.CIBAN72 = readString(dis);

					this.CIBAN8 = readString(dis);

					this.CIBAN9 = readString(dis);

					this.CBIC = readString(dis);

					this.CTRANSP = readString(dis);

					this.CFACTMAIL = readString(dis);

					this.CBLMAIL = readString(dis);

					this.CFACTWEB = readString(dis);

					this.CBLWEB = readString(dis);

					this.CPUBLIPOSTAGE = readString(dis);

					this.CFACT_EDI = readString(dis);

					this.CFACT_CHORUS = readString(dis);

					this.CFACTORING = readString(dis);

					this.CCHORUS_SERVICE = readString(dis);

					this.CFIL14 = readString(dis);

					this.CTAR = readString(dis);

					this.FIL02 = readString(dis);

					this.CREJ = readString(dis);

					this.CSECT = readString(dis);

					this.CTOUR = readString(dis);

					this.CCAN1 = readString(dis);

					this.CCAN2 = readString(dis);

					this.CCAN3 = readString(dis);

					this.CDATF = readString(dis);

					this.CCAT = readString(dis);

					this.CRESP = readString(dis);

					this.CAPE = readString(dis);

					this.CPREMC = readString(dis);

					this.CDERNC = readString(dis);

					this.CPROCC = readString(dis);

					this.CTYPEC = readString(dis);

					this.CSIRET = readString(dis);

					this.CORIGIN = readString(dis);

					this.CMOTCOUR = readString(dis);

					this.CCOMPTA = readString(dis);

					this.CAFFMEMO = readString(dis);

					this.CFIL2 = readString(dis);

					this.CPNAFF = readString(dis);

					this.CDEVTAR = readString(dis);

					this.CMINCOM = readString(dis);

					this.CRELEVE = readString(dis);

					this.CRELIQ = readString(dis);

					this.CMAJ = readString(dis);

					this.CECH = readString(dis);

					this.CETIQ = readString(dis);

					this.CCOEF = readString(dis);

					this.CARROND = readString(dis);

					this.CENCOUR = readString(dis);

					this.CNIVREL = readString(dis);

					this.CBLOCAG = readString(dis);

					this.CDATREL = readString(dis);

					this.CRESCO = readString(dis);

					this.CRESFI = readString(dis);

					this.CSFAC = readString(dis);

					this.CDATENC = readString(dis);

					this.CDATSFA = readString(dis);

					this.CCONTR = readString(dis);

					this.CDEREL = readString(dis);

					this.CPAYS = readString(dis);

					this.CBLTOT = readString(dis);

					this.CBLLIG = readString(dis);

					this.CENCDIS = readString(dis);

					this.CNCEE = readString(dis);

					this.CNSFAC = readString(dis);

					this.CPSRDAT = readString(dis);

					this.CEPNASR = readString(dis);

					this.CCODTAR = readString(dis);

					this.CDEVISE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CREF, dos);

				// String

				writeString(this.CNOM, dos);

				// String

				writeString(this.CRUE, dos);

				// String

				writeString(this.CAUX, dos);

				// String

				writeString(this.CCPTL, dos);

				// String

				writeString(this.CVIL, dos);

				// String

				writeString(this.FILL01, dos);

				// String

				writeString(this.CQUAL, dos);

				// String

				writeString(this.CCOM1, dos);

				// String

				writeString(this.CCREP, dos);

				// String

				writeString(this.CREMFI, dos);

				// String

				writeString(this.CECHE, dos);

				// String

				writeString(this.CECHJ, dos);

				// String

				writeString(this.CPAI, dos);

				// String

				writeString(this.CCHAN, dos);

				// String

				writeString(this.CECHJ2, dos);

				// String

				writeString(this.CMOD, dos);

				// String

				writeString(this.CBQ1, dos);

				// String

				writeString(this.CBQ2, dos);

				// String

				writeString(this.CBQ3, dos);

				// String

				writeString(this.CBQ4, dos);

				// String

				writeString(this.CBQ5, dos);

				// String

				writeString(this.CBQ6, dos);

				// String

				writeString(this.CFACT, dos);

				// String

				writeString(this.CBL, dos);

				// String

				writeString(this.CESC, dos);

				// String

				writeString(this.VARAD1, dos);

				// String

				writeString(this.VARAD2, dos);

				// String

				writeString(this.VARAD3, dos);

				// String

				writeString(this.VARAD4, dos);

				// String

				writeString(this.VARAD5, dos);

				// String

				writeString(this.VARAD6, dos);

				// String

				writeString(this.VARA1, dos);

				// String

				writeString(this.VARA2, dos);

				// String

				writeString(this.VARA3, dos);

				// String

				writeString(this.VARA4, dos);

				// String

				writeString(this.VARA5, dos);

				// String

				writeString(this.VARB1, dos);

				// String

				writeString(this.VARB2, dos);

				// String

				writeString(this.VARB3, dos);

				// String

				writeString(this.VARB4, dos);

				// String

				writeString(this.VARB5, dos);

				// String

				writeString(this.VARN1, dos);

				// String

				writeString(this.VARN2, dos);

				// String

				writeString(this.VARN3, dos);

				// String

				writeString(this.VARN4, dos);

				// String

				writeString(this.VARN5, dos);

				// String

				writeString(this.CDATCRE, dos);

				// String

				writeString(this.CTEL1, dos);

				// String

				writeString(this.CTEL2, dos);

				// String

				writeString(this.CTEX1, dos);

				// String

				writeString(this.CTEX2, dos);

				// String

				writeString(this.CDELMOY, dos);

				// String

				writeString(this.CAFFAIRE, dos);

				// String

				writeString(this.CCPTFACT, dos);

				// String

				writeString(this.CINTERNET, dos);

				// String

				writeString(this.CIBAN1, dos);

				// String

				writeString(this.CBIC_old, dos);

				// String

				writeString(this.CFIDEL, dos);

				// String

				writeString(this.CRFA, dos);

				// String

				writeString(this.CCOMREG, dos);

				// String

				writeString(this.CAPE2, dos);

				// String

				writeString(this.CIBAN72, dos);

				// String

				writeString(this.CIBAN8, dos);

				// String

				writeString(this.CIBAN9, dos);

				// String

				writeString(this.CBIC, dos);

				// String

				writeString(this.CTRANSP, dos);

				// String

				writeString(this.CFACTMAIL, dos);

				// String

				writeString(this.CBLMAIL, dos);

				// String

				writeString(this.CFACTWEB, dos);

				// String

				writeString(this.CBLWEB, dos);

				// String

				writeString(this.CPUBLIPOSTAGE, dos);

				// String

				writeString(this.CFACT_EDI, dos);

				// String

				writeString(this.CFACT_CHORUS, dos);

				// String

				writeString(this.CFACTORING, dos);

				// String

				writeString(this.CCHORUS_SERVICE, dos);

				// String

				writeString(this.CFIL14, dos);

				// String

				writeString(this.CTAR, dos);

				// String

				writeString(this.FIL02, dos);

				// String

				writeString(this.CREJ, dos);

				// String

				writeString(this.CSECT, dos);

				// String

				writeString(this.CTOUR, dos);

				// String

				writeString(this.CCAN1, dos);

				// String

				writeString(this.CCAN2, dos);

				// String

				writeString(this.CCAN3, dos);

				// String

				writeString(this.CDATF, dos);

				// String

				writeString(this.CCAT, dos);

				// String

				writeString(this.CRESP, dos);

				// String

				writeString(this.CAPE, dos);

				// String

				writeString(this.CPREMC, dos);

				// String

				writeString(this.CDERNC, dos);

				// String

				writeString(this.CPROCC, dos);

				// String

				writeString(this.CTYPEC, dos);

				// String

				writeString(this.CSIRET, dos);

				// String

				writeString(this.CORIGIN, dos);

				// String

				writeString(this.CMOTCOUR, dos);

				// String

				writeString(this.CCOMPTA, dos);

				// String

				writeString(this.CAFFMEMO, dos);

				// String

				writeString(this.CFIL2, dos);

				// String

				writeString(this.CPNAFF, dos);

				// String

				writeString(this.CDEVTAR, dos);

				// String

				writeString(this.CMINCOM, dos);

				// String

				writeString(this.CRELEVE, dos);

				// String

				writeString(this.CRELIQ, dos);

				// String

				writeString(this.CMAJ, dos);

				// String

				writeString(this.CECH, dos);

				// String

				writeString(this.CETIQ, dos);

				// String

				writeString(this.CCOEF, dos);

				// String

				writeString(this.CARROND, dos);

				// String

				writeString(this.CENCOUR, dos);

				// String

				writeString(this.CNIVREL, dos);

				// String

				writeString(this.CBLOCAG, dos);

				// String

				writeString(this.CDATREL, dos);

				// String

				writeString(this.CRESCO, dos);

				// String

				writeString(this.CRESFI, dos);

				// String

				writeString(this.CSFAC, dos);

				// String

				writeString(this.CDATENC, dos);

				// String

				writeString(this.CDATSFA, dos);

				// String

				writeString(this.CCONTR, dos);

				// String

				writeString(this.CDEREL, dos);

				// String

				writeString(this.CPAYS, dos);

				// String

				writeString(this.CBLTOT, dos);

				// String

				writeString(this.CBLLIG, dos);

				// String

				writeString(this.CENCDIS, dos);

				// String

				writeString(this.CNCEE, dos);

				// String

				writeString(this.CNSFAC, dos);

				// String

				writeString(this.CPSRDAT, dos);

				// String

				writeString(this.CEPNASR, dos);

				// String

				writeString(this.CCODTAR, dos);

				// String

				writeString(this.CDEVISE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CREF=" + CREF);
			sb.append(",CNOM=" + CNOM);
			sb.append(",CRUE=" + CRUE);
			sb.append(",CAUX=" + CAUX);
			sb.append(",CCPTL=" + CCPTL);
			sb.append(",CVIL=" + CVIL);
			sb.append(",FILL01=" + FILL01);
			sb.append(",CQUAL=" + CQUAL);
			sb.append(",CCOM1=" + CCOM1);
			sb.append(",CCREP=" + CCREP);
			sb.append(",CREMFI=" + CREMFI);
			sb.append(",CECHE=" + CECHE);
			sb.append(",CECHJ=" + CECHJ);
			sb.append(",CPAI=" + CPAI);
			sb.append(",CCHAN=" + CCHAN);
			sb.append(",CECHJ2=" + CECHJ2);
			sb.append(",CMOD=" + CMOD);
			sb.append(",CBQ1=" + CBQ1);
			sb.append(",CBQ2=" + CBQ2);
			sb.append(",CBQ3=" + CBQ3);
			sb.append(",CBQ4=" + CBQ4);
			sb.append(",CBQ5=" + CBQ5);
			sb.append(",CBQ6=" + CBQ6);
			sb.append(",CFACT=" + CFACT);
			sb.append(",CBL=" + CBL);
			sb.append(",CESC=" + CESC);
			sb.append(",VARAD1=" + VARAD1);
			sb.append(",VARAD2=" + VARAD2);
			sb.append(",VARAD3=" + VARAD3);
			sb.append(",VARAD4=" + VARAD4);
			sb.append(",VARAD5=" + VARAD5);
			sb.append(",VARAD6=" + VARAD6);
			sb.append(",VARA1=" + VARA1);
			sb.append(",VARA2=" + VARA2);
			sb.append(",VARA3=" + VARA3);
			sb.append(",VARA4=" + VARA4);
			sb.append(",VARA5=" + VARA5);
			sb.append(",VARB1=" + VARB1);
			sb.append(",VARB2=" + VARB2);
			sb.append(",VARB3=" + VARB3);
			sb.append(",VARB4=" + VARB4);
			sb.append(",VARB5=" + VARB5);
			sb.append(",VARN1=" + VARN1);
			sb.append(",VARN2=" + VARN2);
			sb.append(",VARN3=" + VARN3);
			sb.append(",VARN4=" + VARN4);
			sb.append(",VARN5=" + VARN5);
			sb.append(",CDATCRE=" + CDATCRE);
			sb.append(",CTEL1=" + CTEL1);
			sb.append(",CTEL2=" + CTEL2);
			sb.append(",CTEX1=" + CTEX1);
			sb.append(",CTEX2=" + CTEX2);
			sb.append(",CDELMOY=" + CDELMOY);
			sb.append(",CAFFAIRE=" + CAFFAIRE);
			sb.append(",CCPTFACT=" + CCPTFACT);
			sb.append(",CINTERNET=" + CINTERNET);
			sb.append(",CIBAN1=" + CIBAN1);
			sb.append(",CBIC_old=" + CBIC_old);
			sb.append(",CFIDEL=" + CFIDEL);
			sb.append(",CRFA=" + CRFA);
			sb.append(",CCOMREG=" + CCOMREG);
			sb.append(",CAPE2=" + CAPE2);
			sb.append(",CIBAN72=" + CIBAN72);
			sb.append(",CIBAN8=" + CIBAN8);
			sb.append(",CIBAN9=" + CIBAN9);
			sb.append(",CBIC=" + CBIC);
			sb.append(",CTRANSP=" + CTRANSP);
			sb.append(",CFACTMAIL=" + CFACTMAIL);
			sb.append(",CBLMAIL=" + CBLMAIL);
			sb.append(",CFACTWEB=" + CFACTWEB);
			sb.append(",CBLWEB=" + CBLWEB);
			sb.append(",CPUBLIPOSTAGE=" + CPUBLIPOSTAGE);
			sb.append(",CFACT_EDI=" + CFACT_EDI);
			sb.append(",CFACT_CHORUS=" + CFACT_CHORUS);
			sb.append(",CFACTORING=" + CFACTORING);
			sb.append(",CCHORUS_SERVICE=" + CCHORUS_SERVICE);
			sb.append(",CFIL14=" + CFIL14);
			sb.append(",CTAR=" + CTAR);
			sb.append(",FIL02=" + FIL02);
			sb.append(",CREJ=" + CREJ);
			sb.append(",CSECT=" + CSECT);
			sb.append(",CTOUR=" + CTOUR);
			sb.append(",CCAN1=" + CCAN1);
			sb.append(",CCAN2=" + CCAN2);
			sb.append(",CCAN3=" + CCAN3);
			sb.append(",CDATF=" + CDATF);
			sb.append(",CCAT=" + CCAT);
			sb.append(",CRESP=" + CRESP);
			sb.append(",CAPE=" + CAPE);
			sb.append(",CPREMC=" + CPREMC);
			sb.append(",CDERNC=" + CDERNC);
			sb.append(",CPROCC=" + CPROCC);
			sb.append(",CTYPEC=" + CTYPEC);
			sb.append(",CSIRET=" + CSIRET);
			sb.append(",CORIGIN=" + CORIGIN);
			sb.append(",CMOTCOUR=" + CMOTCOUR);
			sb.append(",CCOMPTA=" + CCOMPTA);
			sb.append(",CAFFMEMO=" + CAFFMEMO);
			sb.append(",CFIL2=" + CFIL2);
			sb.append(",CPNAFF=" + CPNAFF);
			sb.append(",CDEVTAR=" + CDEVTAR);
			sb.append(",CMINCOM=" + CMINCOM);
			sb.append(",CRELEVE=" + CRELEVE);
			sb.append(",CRELIQ=" + CRELIQ);
			sb.append(",CMAJ=" + CMAJ);
			sb.append(",CECH=" + CECH);
			sb.append(",CETIQ=" + CETIQ);
			sb.append(",CCOEF=" + CCOEF);
			sb.append(",CARROND=" + CARROND);
			sb.append(",CENCOUR=" + CENCOUR);
			sb.append(",CNIVREL=" + CNIVREL);
			sb.append(",CBLOCAG=" + CBLOCAG);
			sb.append(",CDATREL=" + CDATREL);
			sb.append(",CRESCO=" + CRESCO);
			sb.append(",CRESFI=" + CRESFI);
			sb.append(",CSFAC=" + CSFAC);
			sb.append(",CDATENC=" + CDATENC);
			sb.append(",CDATSFA=" + CDATSFA);
			sb.append(",CCONTR=" + CCONTR);
			sb.append(",CDEREL=" + CDEREL);
			sb.append(",CPAYS=" + CPAYS);
			sb.append(",CBLTOT=" + CBLTOT);
			sb.append(",CBLLIG=" + CBLLIG);
			sb.append(",CENCDIS=" + CENCDIS);
			sb.append(",CNCEE=" + CNCEE);
			sb.append(",CNSFAC=" + CNSFAC);
			sb.append(",CPSRDAT=" + CPSRDAT);
			sb.append(",CEPNASR=" + CEPNASR);
			sb.append(",CCODTAR=" + CCODTAR);
			sb.append(",CDEVISE=" + CDEVISE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfmain_2 = new copyOfcopyOfcopyOfmain_2Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfcopyOfmain_2");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("client");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("client");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
				}
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"idcli\",\"code_ape\",\"code_rejet\",\"mot_court\",\"nom\",\"numero_sfac\",\"numero_compte_compta\",\"numero_identifiant_cee\",\"siret\",\"idcat\",\"idrepresentant\",\"iddevise\",\"idfidelite\",\"idmode_payement\",\"idqualite\",\"idsecteur\",\"idtransporteur\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfmain_2Struct copyOfcopyOfcopyOfmain_2_tmp = new copyOfcopyOfcopyOfmain_2Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_3 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row3Struct row3) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						columnIndexWithD_tFileInputDelimited_3 = 0;

						row3.CREF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 1;

						row3.CNOM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 2;

						row3.CRUE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 3;

						row3.CAUX = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 4;

						row3.CCPTL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 5;

						row3.CVIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 6;

						row3.FILL01 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 7;

						row3.CQUAL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 8;

						row3.CCOM1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 9;

						row3.CCREP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 10;

						row3.CREMFI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 11;

						row3.CECHE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 12;

						row3.CECHJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 13;

						row3.CPAI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 14;

						row3.CCHAN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 15;

						row3.CECHJ2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 16;

						row3.CMOD = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 17;

						row3.CBQ1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 18;

						row3.CBQ2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 19;

						row3.CBQ3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 20;

						row3.CBQ4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 21;

						row3.CBQ5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 22;

						row3.CBQ6 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 23;

						row3.CFACT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 24;

						row3.CBL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 25;

						row3.CESC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 26;

						row3.VARAD1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 27;

						row3.VARAD2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 28;

						row3.VARAD3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 29;

						row3.VARAD4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 30;

						row3.VARAD5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 31;

						row3.VARAD6 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 32;

						row3.VARA1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 33;

						row3.VARA2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 34;

						row3.VARA3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 35;

						row3.VARA4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 36;

						row3.VARA5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 37;

						row3.VARB1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 38;

						row3.VARB2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 39;

						row3.VARB3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 40;

						row3.VARB4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 41;

						row3.VARB5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 42;

						row3.VARN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 43;

						row3.VARN2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 44;

						row3.VARN3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 45;

						row3.VARN4 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 46;

						row3.VARN5 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 47;

						row3.CDATCRE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 48;

						row3.CTEL1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 49;

						row3.CTEL2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 50;

						row3.CTEX1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 51;

						row3.CTEX2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 52;

						row3.CDELMOY = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 53;

						row3.CAFFAIRE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 54;

						row3.CCPTFACT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 55;

						row3.CINTERNET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 56;

						row3.CIBAN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 57;

						row3.CBIC_old = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 58;

						row3.CFIDEL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 59;

						row3.CRFA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 60;

						row3.CCOMREG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 61;

						row3.CAPE2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 62;

						row3.CIBAN72 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 63;

						row3.CIBAN8 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 64;

						row3.CIBAN9 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 65;

						row3.CBIC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 66;

						row3.CTRANSP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 67;

						row3.CFACTMAIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 68;

						row3.CBLMAIL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 69;

						row3.CFACTWEB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 70;

						row3.CBLWEB = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 71;

						row3.CPUBLIPOSTAGE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 72;

						row3.CFACT_EDI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 73;

						row3.CFACT_CHORUS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 74;

						row3.CFACTORING = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 75;

						row3.CCHORUS_SERVICE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 76;

						row3.CFIL14 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 77;

						row3.CTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 78;

						row3.FIL02 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 79;

						row3.CREJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 80;

						row3.CSECT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 81;

						row3.CTOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 82;

						row3.CCAN1 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 83;

						row3.CCAN2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 84;

						row3.CCAN3 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 85;

						row3.CDATF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 86;

						row3.CCAT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 87;

						row3.CRESP = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 88;

						row3.CAPE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 89;

						row3.CPREMC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 90;

						row3.CDERNC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 91;

						row3.CPROCC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 92;

						row3.CTYPEC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 93;

						row3.CSIRET = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 94;

						row3.CORIGIN = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 95;

						row3.CMOTCOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 96;

						row3.CCOMPTA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 97;

						row3.CAFFMEMO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 98;

						row3.CFIL2 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 99;

						row3.CPNAFF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row3Struct row3) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						columnIndexWithD_tFileInputDelimited_3 = 100;

						row3.CDEVTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 101;

						row3.CMINCOM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 102;

						row3.CRELEVE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 103;

						row3.CRELIQ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 104;

						row3.CMAJ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 105;

						row3.CECH = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 106;

						row3.CETIQ = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 107;

						row3.CCOEF = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 108;

						row3.CARROND = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 109;

						row3.CENCOUR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 110;

						row3.CNIVREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 111;

						row3.CBLOCAG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 112;

						row3.CDATREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 113;

						row3.CRESCO = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 114;

						row3.CRESFI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 115;

						row3.CSFAC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 116;

						row3.CDATENC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 117;

						row3.CDATSFA = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 118;

						row3.CCONTR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 119;

						row3.CDEREL = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 120;

						row3.CPAYS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 121;

						row3.CBLTOT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 122;

						row3.CBLLIG = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 123;

						row3.CENCDIS = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 124;

						row3.CNCEE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 125;

						row3.CNSFAC = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 126;

						row3.CPSRDAT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 127;

						row3.CEPNASR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 128;

						row3.CCODTAR = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 129;

						row3.CDEVISE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							row3Struct row3) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_3, row3);

						valueToConn_1(fid_tFileInputDelimited_3, row3);

					}

				}
				RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3 = new RowHelper_tFileInputDelimited_3();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/DEV/Data/Base Montauban/Client.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/DEV/Data/Base Montauban/Client.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							rowHelper_tFileInputDelimited_3.valueToConn(fid_tFileInputDelimited_3, row3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfcopyOfmain_2 = null;

// # Output table : 'copyOfcopyOfcopyOfmain_2'
								copyOfcopyOfcopyOfmain_2_tmp.idcli = row3.CREF;
								copyOfcopyOfcopyOfmain_2_tmp.code_ape = row3.CAPE + row3.CAPE2;
								copyOfcopyOfcopyOfmain_2_tmp.code_rejet = row3.CREJ;
								copyOfcopyOfcopyOfmain_2_tmp.mot_court = row3.CMOTCOUR;
								copyOfcopyOfcopyOfmain_2_tmp.nom = row3.CNOM;
								copyOfcopyOfcopyOfmain_2_tmp.numero_sfac = row3.CSFAC;
								copyOfcopyOfcopyOfmain_2_tmp.numero_compte_compta = row3.CCOMPTA;
								copyOfcopyOfcopyOfmain_2_tmp.numero_identifiant_cee = row3.CNCEE;
								copyOfcopyOfcopyOfmain_2_tmp.siret = row3.CSIRET;
								copyOfcopyOfcopyOfmain_2_tmp.idcat = row3.CCAT.equals("0") ? null
										: row3.CCAT.equals("20") ? null :

												row3.CCAT.isBlank() ? null : row3.CCAT;
								copyOfcopyOfcopyOfmain_2_tmp.idrepresentant = row3.CCREP.equals("0S") ? null
										: row3.CCREP;
								copyOfcopyOfcopyOfmain_2_tmp.iddevise = new Long(1);
								copyOfcopyOfcopyOfmain_2_tmp.idfidelite = row3.CTAR.equals("0") ? new Integer(1)
										: row3.CTAR.equals("3") ? new Integer(2) : Integer.parseInt(row3.CTAR);
								copyOfcopyOfcopyOfmain_2_tmp.idmode_payement = row3.CPAI;
								copyOfcopyOfcopyOfmain_2_tmp.idqualite = row3.CQUAL.isBlank() ? null : row3.CQUAL;
								copyOfcopyOfcopyOfmain_2_tmp.idsecteur = new String("A");
								copyOfcopyOfcopyOfmain_2_tmp.idtransporteur = row3.CTRANSP.isBlank() ? null
										: row3.CTRANSP;
								copyOfcopyOfcopyOfmain_2 = copyOfcopyOfcopyOfmain_2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "copyOfcopyOfcopyOfmain_2"
							if (copyOfcopyOfcopyOfmain_2 != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfcopyOfmain_2");
								}

								whetherReject_tDBOutput_3 = false;
								if (copyOfcopyOfcopyOfmain_2.idcli == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(1, copyOfcopyOfcopyOfmain_2.idcli);
								}

								if (copyOfcopyOfcopyOfmain_2.code_ape == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(2, copyOfcopyOfcopyOfmain_2.code_ape);
								}

								if (copyOfcopyOfcopyOfmain_2.code_rejet == null) {
									pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(3, copyOfcopyOfcopyOfmain_2.code_rejet);
								}

								if (copyOfcopyOfcopyOfmain_2.mot_court == null) {
									pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(4, copyOfcopyOfcopyOfmain_2.mot_court);
								}

								if (copyOfcopyOfcopyOfmain_2.nom == null) {
									pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(5, copyOfcopyOfcopyOfmain_2.nom);
								}

								if (copyOfcopyOfcopyOfmain_2.numero_sfac == null) {
									pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(6, copyOfcopyOfcopyOfmain_2.numero_sfac);
								}

								if (copyOfcopyOfcopyOfmain_2.numero_compte_compta == null) {
									pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(7, copyOfcopyOfcopyOfmain_2.numero_compte_compta);
								}

								if (copyOfcopyOfcopyOfmain_2.numero_identifiant_cee == null) {
									pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(8, copyOfcopyOfcopyOfmain_2.numero_identifiant_cee);
								}

								if (copyOfcopyOfcopyOfmain_2.siret == null) {
									pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(9, copyOfcopyOfcopyOfmain_2.siret);
								}

								if (copyOfcopyOfcopyOfmain_2.idcat == null) {
									pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(10, copyOfcopyOfcopyOfmain_2.idcat);
								}

								if (copyOfcopyOfcopyOfmain_2.idrepresentant == null) {
									pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(11, copyOfcopyOfcopyOfmain_2.idrepresentant);
								}

								if (copyOfcopyOfcopyOfmain_2.iddevise == null) {
									pstmt_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setLong(12, copyOfcopyOfcopyOfmain_2.iddevise);
								}

								if (copyOfcopyOfcopyOfmain_2.idfidelite == null) {
									pstmt_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(13, copyOfcopyOfcopyOfmain_2.idfidelite);
								}

								if (copyOfcopyOfcopyOfmain_2.idmode_payement == null) {
									pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(14, copyOfcopyOfcopyOfmain_2.idmode_payement);
								}

								if (copyOfcopyOfcopyOfmain_2.idqualite == null) {
									pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(15, copyOfcopyOfcopyOfmain_2.idqualite);
								}

								if (copyOfcopyOfcopyOfmain_2.idsecteur == null) {
									pstmt_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(16, copyOfcopyOfcopyOfmain_2.idsecteur);
								}

								if (copyOfcopyOfcopyOfmain_2.idtransporteur == null) {
									pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(17, copyOfcopyOfcopyOfmain_2.idtransporteur);
								}

								pstmt_tDBOutput_3.addBatch();
								nb_line_tDBOutput_3++;

								batchSizeCounter_tDBOutput_3++;

								if (!whetherReject_tDBOutput_3) {
								}
								if ((batchSize_tDBOutput_3 > 0)
										&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
									try {
										int countSum_tDBOutput_3 = 0;

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										batchSizeCounter_tDBOutput_3 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
										java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
												sqle_tDBOutput_3 = null;
										String errormessage_tDBOutput_3;
										if (ne_tDBOutput_3 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_3 = new java.sql.SQLException(
													e_tDBOutput_3.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_3.getMessage(),
													ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
													ne_tDBOutput_3);
											errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
										} else {
											errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
										}

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

										System.err.println(errormessage_tDBOutput_3);

									}
								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "copyOfcopyOfcopyOfmain_2"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/DEV/Data/Base Montauban/Client.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfcopyOfmain_2");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_1 begin ] start
				 */

				ok_Hash.put("tDBRollback_1", false);
				start_Hash.put("tDBRollback_1", System.currentTimeMillis());

				currentComponent = "tDBRollback_1";

				int tos_count_tDBRollback_1 = 0;

				/**
				 * [tDBRollback_1 begin ] stop
				 */

				/**
				 * [tDBRollback_1 main ] start
				 */

				currentComponent = "tDBRollback_1";

				java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {

					try {

						conn_tDBRollback_1.rollback();

					} finally {

						conn_tDBRollback_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBRollback_1++;

				/**
				 * [tDBRollback_1 main ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_end ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_1 end ] start
				 */

				currentComponent = "tDBRollback_1";

				ok_Hash.put("tDBRollback_1", true);
				end_Hash.put("tDBRollback_1", System.currentTimeMillis());

				/**
				 * [tDBRollback_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_1 finally ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "192.168.1.116" + ":" + "5432" + "/" + "syg";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:v7zCUq/7jGdEiKIgPnhfjsBC0mXs7wg4+N/9Qkj5YBvW/HyQoQ==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ClientAttribute ClientAttributeClass = new ClientAttribute();

		int exitCode = ClientAttributeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ClientAttribute.class.getClassLoader()
					.getResourceAsStream("local_project/clientattribute_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ClientAttribute.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : ClientAttribute");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 359948 characters generated by Talend Open Studio for Data Integration on the
 * 17 février 2022 à 15:10:22 CET
 ************************************************************************************************/